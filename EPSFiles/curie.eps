%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: curie.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 1/4/09
%%BoundingBox: 0 0 382 264
%%HiResBoundingBox: 0 0 381.9600 263.0020
%%CropBox: 0 0 381.9600 263.0020
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 8190 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD06FFA8FFFF7DFFFFFFA9A2A8FD76FF52A8527D7DFFFF5200287D%7D527D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA8FD077DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD077D%A87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87D7D7DA8FD047DFD08FF7D7D7D52A8FFFF7DA2A8FF20F87DFFFF54%29FD0BFFA8FD43FFA8FD15FF7DFD08FFA8FFA8A8FFFFA87DFFFFFF762783%FFA700007CFFFFFFA8FD60FF7DA8FD0EFF7DFD08FFA852A8A1CA7D2DA8A1%537EFD5CFF7DFD0EFFA87DFD0BFFCA7D7D524B6800287DFD5BFF7DA8FD0E%FF7DFD0FFFA87CA8A8F87DFD04FFCFFD55FF7DFD0EFFA87DFD12FFA87D58%FFCA762D29017DFD53FF7DA8FD0EFF7DFD17FF512D5345687D7DFFFFFFA2%A8FD4CFF7DFD0EFFA8A8FD1AFF7D51F805A8FFFF2901FD4CFFA8A8FD0EFF%7DFD1EFFA775CA7D057DA1FD4AFF7DFD0EFFA87DFD1EFFAFAEA7A82D4444%AFA8A8FFFFA8FD44FF7DA8FD0EFF7DFD23FF587DFF2727FFFF2901FD43FF%7DFD0EFFA87DFD26FF7D58A8FF704C52A8FD41FF7DA8FD0EFF7DFD2AFFA7%26F84BFD41FF7DFD08FFA8FFA8FFFFFFA87DFD2AFFA88352A19ACAFFFFA8%537EFD3AFFA8A8FFA87DA8A8FF7D52A87D27FFFFFF7DFD2EFFAEA8592670%007DFD3AFF7DFFFF527D7D7DFF7D527D5227A8FFA87DFD30FF7D582644A8%A1A1FD37FFA87DA8FFA8527DA8FFA87DA8A87DFFFFFF7DFD32FFAF84FF04%26CAFF7DFD35FF7DFFFF7DFFA852A8FD07FFA87DFD34FFA8A859FF766827%7D00A8FD31FF7DA8FF7DA8FF52FD09FF7DFD38FFCA27042E77A1FD31FF7D%FFFF27527DFD09FFA87DFD3AFFA8FFCFA14476A8FD2EFF7DA8FF7DFFFFA8%FD09FF7DFD3DFF5F4AF876C3FD2DFF7DFFFF7D7D52A8FD08FFA87DFD3EFF%847D5983A8A852A8A8FD28FF7DA8FFFFA8A827FD09FF7DFD41FFA8FF7620%01A8FD28FF7DFFFF7D2727A8FD08FFA8A8FD43FF7DF827A8FFC3FD26FFA8%A8FFA82752FD0AFF7DFD45FFCFFFA8A79AA8A8FD23FF7DFFFF7DA87DFD09%FFA87DFD48FF2D044468A1FD22FF7DA8FFA852A8FD0AFF7DFD49FF7D754B%CAFFFF77FD1FFF7DFFFFA85227A8FD08FFA87DFD4BFFAE83FF270028FD1E%FF7DA8FF7DFFFFA8FD09FF7DFD4DFFA82D2044A1FD1DFF7DFFFF527D7DFF%FF7D52A87D7DFFFFA87DA8FD4EFFA752FFCAC3A8FD19FFA87DA8FF527DA8%A8FF527D7D7D27FFFFFF7DFD52FFAF76687DFD19FF7DFFFF7D7D52A8FFA8%52A87D7DFFFFA8A8FD52FF52F844A1C3FD18FFA8A8FD04FF52FD09FF7DFD%52FFA758FF83A1767DFD16FF7DFFFF7D5252A8FD08FFA87DFD55FF27044A%F870CAFD14FF7DA8FF7DF852FD0AFF7DFD23FFA8FD05FFA8FD07FFA8FFA8%FD23FF52057DCAFD14FF7DFFFF7D5252FD09FFA87DFD06FF2853FF7D277D%7DFFA87D277DA8A87DA8A8A852FFA827FFA827A8A8A87D527D7D7DA8A87D%A87D527D527D2752527D7DFD22FF7D2783846F6FFD12FF7DA8FF7D7D7D52%FD09FF7DFD06FF534DFF52525227277D52522752F82727275252FF7D27A8%7D272752277D52522752525227FF7DA8527D277D52527D7DFD25FF594468%9AFD11FF7DFFFFA8A87DA8FD08FFA87DFD06FFCFFFFFA8A8A8527D7DA87D%A87D7D7DA852A8A8FF7D527DA852FD047DA87D7D7DFF7DA8A87D527D7DA8%FD047D52FD24FFCBF85283A8CAFD10FF7DA8FFFF7DA8FD0AFF7DFD33FFA8%FD26FFA8FF7D2D5322A1FD0EFF7DFFFFA85252FD09FFA8A8FD06FFA8FFFF%A87DA8A8FF7DA8A8A87D7D7DFD07FFA8FFFFFF7DFF7DFD05FFA852A8FFFF%A8A8FFFFA87DFFA87D7DA8FD067DA8FD1DFF2751532144A8FD0DFFA8A8FF%FF527DFD0AFF7DFD06FF5227FF522727A8FF7DF852527D27527DFD0552A8%7D5252A8FD04527D527D527D27A8A8525252A87D27A8FF7D7D7D52525227%277D527DFD20FF7C58FD0EFF7DFFFFFF5227FD09FFA87DFD06FF587DFF7D%2752A8FF7D52277D5252275227522727F8A8525252A8527DFD0427522752%52A87DF87D7DA827527DFF527D527D52A82752527D52FD1FFFA8277DFF76%76A8FD0AFF7DA8FFA8527DFD0AFF7DFD0BFFA8FD1BFFA8FD0DFF7DFFA8FD%05FF7DA8FD1FFFA852FFFF4B44FD0BFF7DFFFF7D2752FD09FFA87DFD09FF%7D7DFFFFA87DFD04FFA8FD05FFA8A8FFA8FFA8FFFFFF7D7DFD07FFA8A8FD%04FFA87DA87DA87DA87DA8A8FD26FF2D2D58A8FD0AFF7DA8FFFF2752FFFF%7D7DFFA87DFFFFFF7DFD06FF7D76FF2752FFFF2727FD047D277D7D7DFD04%527D52A8A85252FF52277D5252527D527D7D52527D52FF7D7D5252275252%527D7DFD26FF2DA8FF2900A1FD08FF7DFFFFA85227FFA87D52A8F852FFFF%A87DA8FD04FFAF4468A85227A8A8272752275227FD045227277D52A827FF%7D5252FF52272727525227277DA827272752A87D527D527D527D527D52FD%28FF5200004BFD07FFA87DA8FFFF527DFFFF527D7D7D52FFFFFF7DFD06FF%A8A1FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD06FFA8FD06FFA8FFA8FFFFFFA8%FF52A8A8FFA8FF7DA8A8FD05FF7DA8FD28FF277D8384FD08FF7DFFFFA87D%52FFFFFFA8FD05FFA8A8FD64FFA852A8CA76FD06FFA8A8FFA852A8FD0AFF%7DFD64FFA804A87C4477FD05FF7DFFFF7D2752FD09FFA87DFD64FFA8FFFF%8326A8FD05FF7DA8FFFF7DA8FD0AFF7DFD67FF27A8FFCAFD04FF7DFFFFFF%5227FD09FFA87DFD66FF7D2D7DFF9ACAFFFFFF7DA8FFFF2752FD0AFF7DFD%69FFA85144A8FFFF7DFFFFA8527DFD09FFA87DFD2FFFCABCCAFD06FFA8FD%04FF7D52FF527D527DFD24FFA8042644A1FFFF7DA8FFFF52527DFD09FF7D%FD0DFF7D7D7DFFFFFFA8FFA8FD07FFA8A8FD06FF7DFD0DFFC3CAFFFF7D52%7D5252FF527DFFA8525252FD24FFA852A8CACAFFFF7DFFFFFF52277DA8FD%07FFA8A8FD0DFF52F852A8A87D7DA87DA8FD06FFA852FFA8A852FFFF52A8%FFFF7DA8FD09FFC3FFFFFF52A8277DFF7D52A8527D7D52A8FD27FF9AFFFF%A8A8FFFF2752FD0AFF7DFD0DFFA8A8A87D7DA8A8FF7DFD06FFA8A8FF7DA8%FD04FFA8FFA8A827FD0DFFA87DFD06FFA8FD2CFF5144A87DFFFFA87D52FD%09FFA87DFD10FFA8FFA8FFA8FFA8FF7D52A8FF7DFFFFA8A8FFFFFFA8FFA8%A87DFD06FFAE58AEFD0EFFA8FD29FFAE582700287DA8FF7D2752FD0AFF7D%FD0DFF7D7D7DFFA87D27A8A8A8FFA852FFFFA8FFA8A8A8277DFD06A8FD08%FFAEFFA8AEFD08FF7D7DFF7D7D7D52FD26FFA8F8A84D7D7DFFFF7D2727FF%FFFFA8FFA8A8FFFFA87DFD0CFFA82727A8FFA87D52FFFF7DFD05FF7DFD04%FF52A8FD04FFA8A8FD0BFF83AEFF7D277D527DA87D52FF7D525227A8FD26%FFA87EA7CFA8A8FFFFA8A8FFFF7D52A8FF27FFFFFF7DFD0DFF27527D7D7D%A87DA8277DFD0AFF7D7D7DFD13FFA852A85252FF527D7D527DA852FD27FF%7D0483837DFD07FF7D527D7D7DFFFFA87DA8FD0FFF7DA8A8FFA87DA8FD0B%FFA8A8FD13FFA87DFD05FFA8FFA8FFA8FD28FFA87D76444BFD07FFA87DA8%7D52FFFFFF7DFD6DFFA16F52FD0EFFA8A8FD6CFF7D278483A8FD0EFF7DFD%6CFF7D2DFF7DFD0EFFA87DFD6EFFA876A8FD0EFF7DFD6EFF6F44FD0EFFA8%7DFD6EFF206FA8FD0EFF7DFD6DFF52057DFD0EFFA87DFD6EFFA884FD0FFF%7DFD6FFF4BA8FD0DFFA8A8FD6EFF766876FD0EFF7DFD6EFF7DF8A8FD0DFF%A87DFD6EFF7D52A8FD0AFFA8FFFFFF7DFD6FFF7DA8FD06FF7D52A87D52A8%FFA87DA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD05A8FFA8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87DFFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFFD%05A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA826F8FD06FF527D527D52%A8FFFFA8A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8274BA8FD05%FFA852A87D7DFFFFA8FFA8FD13FFA8FD15FFA8FFFFFFA8FD2BFFA8FD15FF%A8FD0CFF527DA87D52FD11FF7D52A8FF27A8FD10FFA8527DFF27A8FD11FF%7D52FF7D7DFD12FF527DA8277DFD11FFA87DFF7D52FD0AFFA852527D5252%A8FD10FF7D527D7D7DA8FD10FF7D527D7D277DFD11FF527D7D5227A8FD10%FF7D7D527D277DFD12FF52A85252FD0BFF7D7DA87D7DFD11FFA87DA87D52%FD12FF7D7DFFA8A8FD11FFA87DA87D7DFD12FF7DA8A87DA8FD11FFA87DA8%7D7DFD6AFFA8FD48FFA8527DFD0BFFA8FD07FF7D7D52FF7D7D52FFFFA8FD%61FF527D527D2752277D5252527D525227A85252527DA87D7D7DA8FD047D%A852A8FD60FF7D7D27527D27275252527D52527D7D27527D2752A87DFF7D%7DA8FFFD057DFD60FFA8FFA8FFFFA852FFA8FFFFFFA8FFA8A8A8FFA8FFFF%7DA8FFA8FFFFFFA8A87DFD2CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-04-08T23:00:35-07:00</xap:CreateDate>
         <xap:ModifyDate>2009-01-04T08:58:41-08:00</xap:ModifyDate>
         <xap:MetadataDate>2009-01-04T08:58:41-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxLzwPMK6p5XutItr&#xA;27htdRaTVYbOWKNGtWtZo6SrLLCJP3zxsBv0J60xVKPy70vzzb+Y9SuddjvIbaWOX6y13dLcQ3F0&#xA;927wyWkKSzLBHHaFI2AVKnajceWKpZ5q0P8ANTXvzDM/lzzMmk6LostqlzpxDL6quiTSE0SRZCwY&#xA;rRxQZdDJAQkDG5Hkb5frU+SR+YfP35n6T+a1t5Sjj1G80ST0jNqlvYJM/pyqvK4QRwFPTikk4v8A&#xA;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&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:512C7E4606E911DDB5798A5787734009</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:C76671F640DBDD119694C530E56F11B9</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>841.889771</stDim:w>
            <stDim:h>1190.551025</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Myriad-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Myriad</stFnt:fontFamily>
                  <stFnt:fontFace>Roman</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriaRom; Myriad</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ComicSansMS</stFnt:fontName>
                  <stFnt:fontFamily>Comic Sans MS</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Comic Sans MS.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.008</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMR10</stFnt:fontName>
                  <stFnt:fontFamily>CMR10</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMMI7</stFnt:fontName>
                  <stFnt:fontFamily>CMMI7</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMMI10</stFnt:fontName>
                  <stFnt:fontFamily>CMMI10</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CMSY10</stFnt:fontName>
                  <stFnt:fontFamily>CMSY10</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -263.002 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 263.002 li
381.96 263.002 li
381.96 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ComicSansMS def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 47 /slash putdup 77 /M putdup 84 /T putdup 91 /bracketleft putdup 93 /bracketright putdup 97 /a putdup 99 /c putdup 101 /e putdup 103 /g putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 122 /z putdef/FontBBox {-93 -312 1187 1102} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings23 dict dup begin/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB70854A4518CFB8D731A1977C1C08A> |-/space <1C60D8A8C9B84186EC> |-/parenleft <1C60D8A8C9B72DDD4BDDDEFA1F2E33EFAB2609E3C9DE388E20E9C059C4F1BE51DE95F72A2C12C7492DCC98E0E6966BF3C6ECA33D6154D0170812D5FDFD86FCB61BC83579E6C82B47DC2EF7EFEC0791C5D64493C14198901FA2252477E06D36F6FBD8470D6ECFD0F8931D63CA891EC08EE802E9833B5640A882BF6370D5475D687E5637A4> |-/parenright <1C60D8A8C9B72DDD4BB51EC6C49AB7306C1A14C493E9BA5D78AE2C195B29D94044F912FEED39F75BE34A7150607FEA016A23803EFDD2F9288AF7A180AEFCBFBF998E3FBDAC6F3A4074B0F5D69EFDE59096176B6B29149A14AB78FC2B3577A37D471DCCDE635BBEA2665A37EE893BAA312D5DB22CA01C4916AB9D79F1B336301D84554794> |-/slash <1C60D8A8C9B7BB5CAA6C4651B4301707BFED427647F0D4D7919F12225500DEE27358A7B1E02CA4F458CAE83F77FE9C20B1E694E7EC69B2AB3550D5FFABB8305C6AEE03FB9B1CDEDF09FBF571B0F668A5CBAEFF29D85E64068F41B8816123FA45F63829790B090819AB8C> |-/M <1C60D8A8C9B59575D87BE2168EEA28120D9030AFF41D7AF515ACBF3649BD2F40DE0809DEF2C3B0D88F5433D0339D1594A8BB5B7D6E9E407C9B2CF774E827F6D240DA9788FD58FD6A6693D238D2DD35EBAD61FA6DA2B1B88D98FCBA1CE329DEEDC1A2CF7DB3CFF85E91DB1E05982789211A03C97DDC1A73F165FD37FA7D660E3EF66841B5442F7DA5B28127C6557F4AF9EAE68C31E263F78BC4FE967BBD3724E8E4E7783BD6F3F0D1F9D36FC073BBDC3BB91498E2940FACB05B3E1AAE653273D1E1C1DE5C399F68768F7EC53985E7DF8ED50093CF6E6C7AD007BBE64BE70B06C3BE97174E50F93FE7A1F609DE48AB13B0AFA023A5454E929FDB> |-/T <1C60D8A8C9B65DE77A876B2DD8B7FF866491B0F2D61BEA0FBD85AF0D4DE2D949BC150F0F7674372C84451FC040683FB3AA2D326E4537FF474119E83C0987CB5A9ABA0CEE9BCA528F62C1464F5E091F2B82819B07C10C1F1E4E020756FBAC175FEE62F21BE88ABFB0D490716E46C7B7A99793906C4D305D2AF07DDE68078E0E2DC8EB3EE1D506AF796125FCF0E84AE3858A8FA7A22B380BA92E9CC4237A14C737568566385E4CC4D53E33434D25323EAE78F81E4933605E741D0F8ABE8D521FF5FB90669DFD0664D78B93FFDF6561CEE8110A3B3ADAD33CCF470BBB1B9EE08647EF4772037B> |-/bracketleft <1C60D8A8C9B723CD3ADE08F249F34B9B97D6C8A3E86B63FCDD03854E825D81DC6D6AB4585775DA94B440124D0398D5A056FEB3D466404E7FA209E212A02EFB81175E90952E8CE263FA5AB8CEBEBF433949576FAE970E2242C38795B5D470A4646469719628AEED5D3181F85B2A9EEB0B4D519C607FAB6A682688ED31898C349FFBC162F078C13347EF0972B3437371B37C2CC0344B0DB3FEA16972656078B6974A120DDADF505A52A63ECE511CE38426AC83458A828C26845E22C13BF0E3BA1190> |-/bracketright <1C60D8A8C9B723CD3A748110ECD8513C9BE585C870CF0F0547FC5A9AD489D3E8A264FB5D379080824D259AE38513F2D5A1278EE53635B837CC1B3F19BAD1A4A8751CD5E6B8802BD6BEB9D9BF6A9FF30EA9BF76E41D50432262FEDDB75895EBB9482CCC8993058B1D11C1A8BB05E545917A077233ABBC0B9E654AA3493624A5EE5994029221FE26AE4FB59E8C54E2A4220B8EE9A818CA2DF0E9E30BCA68A6F2FD799630D621A32A0D2E0BF66972834057FFA7D1F6F6B840B950A4E0AC8525F81743> |-/a <1C60D8A8C9B7BB5CA503F41BCABD6C718309D7FD3EAFD4723590A6DB54A64A3783FF0E8915C8665146025473AABA73A7307808FC49DF54120176FFCE6E5630D745DEC9D7FE687B22D69E14177C1006B659795051D4F564854E1C732886E0B2617B0D55057161A197AD04FDD89E349DC800C8FAE6C2E2E7218942027A386140843CEC6D038F4E517DF6E091EE1EC97061608AA6DD07992C53BB029F315A3C165875CF85B20BCD136667E2BE57C24163FB07309C0F29C421C91BBF197F69B4468BD92D4E0F963A574D94F4959F6C142EC285F75B0A57DCD73FA9D71DA6249A4005429B> |-/c <1C60D8A8C9B7B9B9DE292882013E19E33F82B7ED3A5C89FE0A41E2745CE52BF345EF21317B06CEB633B4C461C86DB59ACA948BD5303B9C1ECB87024259662E6DE6401329C576CA7C717795A8221E64812E10D7279DA0C4ECEFC761695BC43E126B44B9576721BB314891B8E9D440D85A903F31586B4587EAE794E85616ED3F2F41CC7C8432421936554CA0D609EB4EA211DE1B1E7934AF872FDEE11CAF3B598B06E47B41> |-/e <1C60D8A8C9B797474FA4303150FF95D22C1576367C7C82BE107A33DB836FE273C47A9F1C294729003E4BC6906C807AE64492E567EB699590C33760698497B7D8BD4606E6533DD313B7408096D0253255EE30E5A5E3E06503BE924638C5951A143C8FB027E022BA2CC9736D9A6F100D38EB1D4C686421142EAA9CB9B186F914996503E87D112FD301022C9ED0ABE9EC3841A2AAB1D0ECFBD04DD27FAC9222691EA422325A2608DE3AA47EDFE24D5B> |-/g <1C60D8A8C9B7883C34847673539A3C47283D2869DE727C001A8ED17F310363C066266AC877F71DE696B52BA5756C41FA2C6742427FE25CABE743DC5A8409CA03A46FFE172EB266EBE72B596730C9547F1BA9130523A2B6925FB6C63D24A5FA2932E01CB40C0D974065C69BA7D95C92F84E75317230A20A5B57C1414477131B85EE5ACE9CF2CFFA8F81FDD0E1570B07F54AEF9E9559FF767E5E4A6770AB6167D2B403FC1CDDEF440629F36A00CE900D50814788B0FF5D0993B3F9BE201807168AC2FF35AD7144226A32EFAB4AE57534B933FE2F650AE3AB04CFB63638BA8BDA42DA1BFD76C61D93DA> |-/i <1C60D8A8C9B8524CA9FFF1D59707FAB92D69C69B7C857EED4D13A4787BF89B18996B1BFB164CA796A0EF07F1407DF3454BCAB96192B46A6EDEDC573AD74AE5EBB6C7E282C40345BC6C9BD822E381040AF84910E37D38B52009BFBA09050BADAEBC8553B469DC8708DC8B7D087E48B2E8AA99CA401E54F66DDB7E9923B974D88CDA4785FD295B41FC4A68D170B03EDBFBD3758274FE3E0C921CDB5782B906DFB9938B6191061DE008B5105239C6B4135C4008792AFAA4EA6826684C0C> |-/m <1C60D8A8C9B6FC2D96873601FD7D92169A9B88887C32231D12B856F0FF258B62829FEDF861E7207C12D5C53BCDFD0EA3F0EF441B3104EE7A8DCCC9135A66A3908121FDEF89ECB4290FE2DEBBC0D2CEC922FC3B50F2ED674EACC69E69FA370309E0EBFB994E62CF35AAC76A68A27F1193FA80070D9751608DC309EBC2115575AE6BDEEB113F39584664AF7AAA3C82601F097876EB086034E5AE78A75047B10841E51F7380B84CCDD035E85E1A5870A2BB0942D4819E585F0952EB73250253334BF49322F96375F5B49CB7CFA7A0B232F8AD1DD38A4207A81B8B16535F38363976D31BC82130B6F42B86DA3EA4FFCCC6C8DA3BAD0E6D585D10CCC6A4EFCE59BB479065B92972F3D516BBD63C0E7C814F065EEF1040A3FF51C243D5475EBA7E962CAD4F75D3AC0EDC0C293B5BB6A5776BF4AC8F3BC665CA79374C2D10BBB5A4EE69B305850280C1> |-/n <1C60D8A8C9B7B07F0BB93457D6C8288A70E0DB940B4E04FCB07C44C762FF75D1D950F6658944215ABDB8E09DA0C33F6809AFCF2421406F8688ABED2DEC4D49A55251B25C4373E5276DE26457B8215FA156A3918E62986142B216E3D126083708C5AB3D018A7C93A0546D1AE450568C33979D5D1886CAEE4F45CEF158C9F75F841729756DC86B9981305315BE025F34658A8B30DA9E4FC92E74778770409CEEBC81A51BD2DBFB108DC9287AA20C6C0FDC2D19D58643D88EB36209DAC3D913F6852F2F8B06C4883A03EE882CC27439C56A729CC60E3CAC44D3416B7B9356E70E374DD5228445902D99BC6E06C8C6558C> |-/o <1C60D8A8C9B78D34A55956A51486C357D04D448C2012FC2F5B0A5FE1B320E5CD61418E269420C85D10935D5D9B29D4FDDFDD85C698EDEF649FCF7B4152030DE7FB7B0AD250869A491A4776C5C05E1436F84934B318F30DD94DF542C1FA3FC71DCD30BC8EC67320F785CD0C113E143028BDC1093B4CB998C3891C7A3F7C> |-/p <1C60D8A8C9B784FA605C1E2DE9CD48D992DC3CC70A48B838E2D397F5893EBF5E6CB31C410B2D579A798B247824C0B1DA0D694D5A554F49A7F104B09B8C8123B1EE0F250469E618A08C9EDDFB5A51FAF77BD9EC9F3207514B493F3B559D151CA44FECA1422F66057BA97C6A129E034A9C3AB70E463FE85C8478F346F06A6148E354DA6D0BE5EFF6256E4BB886B9C73833B34381A812E73BADDAFCE8754E4C232F6A62C54AB66D9B9D76ADD04785EFB7DCFC18E5B399366900582D047B460CC42F08F2E9ED5B222614010BACB1AC2FAD7F735C4AD14F71C1> |-/r <1C60D8A8C9B75BE51651FFE67439D51A25F90110BB907676984B99DD0B35C7709F13E9D884F7A5E4D5DC6EAC702AA1CA7DD0308EC3E47EA3A772341F5B614E58D6E83BA0E5BB48DBDD3ED30A643443B6748E7F94653D8C84439C4E79874BBAE5D54AF00F5DBBDC68AB601F5B54A0C720942814BB32E87436> |-/s <1C60D8A8C9B7544E0B2F4A61F93D1126BE4C1AB23A9BC15E8D4F67C7217D859EAD9231FE71D3434A8F690FE356BFC6DC5BE77A03DE604D8B1C950D5ABF263BD11471F4641C413AA949D9FA9D14073F73C97069B262302E724A697D3CA7C59E77556DAF46750C504A58130B4D898FE3BF71EC7F017C1E1F27AB7041A63DDE724A2C84E3A413C54A5DDF57F8C9D27A1E3CFE7B403B1328B029B85307F57108ADCCE743F949020583B39DD4E46122F513D45ADF2471EB3FC18875B6CA7F87645D6D9F43435BEAAB1F189966F0EC695829B6348DF5F29560E30CB97F829CCD3E61BBBAB11852283FEDA3181F7D> |-/t <1C60D8A8C9B7445140689D163BE9CD19CB6263AAD663E751BFF4FC3EFD289F54C938D7522CDBDC78B86C3A6B352FEC6C942B3A84D1DF37948F119DD042933AE483D22B2D630A0536911763BEC72090C0E7972085EC665EF1618CB3A1E365C68118F7319C489021F7E5BB1237C8B28D9185CA450113B4347A96F5A190A1E41185CC68C22E0D8B3619F65EBBC7C09A7899C42BB7EC5C668E84BEB96E5966CE04926328B6CA13AB435E16BBB7670DDC776BE2EE98FDA0050964E0FA7809BCE05F1D859FB5837E> |-/u <1C60D8A8C9B7B3D0EB94C27794C8FF7A66F97FA6CF9FABEE835E1A1626320F2E2E58AACC9742E2863A234D717CCEC554B38E6670782546BE1280DB3D026E3D97D899C4DBB14646E84E5FA9BF09835296C032D42FE102EFEF2CF2250B419A68387C6038BB86A74FB974D87A0B2F0A7872D9B0CF5DA9A83619FEC0CA43F47D29F1B253EC46F0FA880E9D913D7D1074998F6C45D6194D53073B871AAF04BD179A8644CD091C1AF599D8C323C678F3C145D207E61A3CA7E44F7257600C6DCC4283614DCCA35CB9A41B86A4FF> |-/z <1C60D8A8C9B78181CF7403A347E4AD8687C7377BB84C2D8D37DDAB99BAE45345A0696395EADDCC8C80FC69A4904702F5EACB9BE2C6DB26AA55CBA722D1396922984300856064911BA64AF2B2CEBFA0F71035A73C2EFF18BEE1D055EB6A567A32C8BD76673673D4DE9BDE89B2B554DC0D70CC9E32918CA3396E71081EB3572E875B8503A44A9608DE9D423AA2263CF29FD4C750120816CDE0C7E33B7553CF2397CE2DB011E9F74D9013C00F732CCC4C8B31DFEC60AF92623FD9815754B7D460047E76CA19A3E3304BAF40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSB+ComicSansMS /ComicSansMS findfont ct_VMDictPut/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash 29{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [0 -10 -10 0 0 0 ]msf8.7002 186.381 mo(Magnetization [M)[-8.82813 -5.11719 -5.30762 -5.23438 -5.47852 -4.71191 -2.80273 -5.38086 -5.11719 -4.71191 -2.80273 -5.25879 -5.23438 -2.98828 -3.76465 0 ]yshPESGSB+ComicSansMS*1 [0 -5.83 -5.83 0 0 0 ]msf12.0303 104.813 mo(s)shPESGSB+ComicSansMS*1 [0 -10 -10 0 0 0 ]msf8.7002 101.976 mo(\(T\)/M)[-3.66211 -6.79688 -3.66211 -5.11719 0 ]yshPESGSB+ComicSansMS*1 [0 -5.83 -5.83 0 0 0 ]msf12.0303 73.9092 mo(s)shPESGSB+ComicSansMS*1 [0 -10 -10 0 0 0 ]msf8.7002 71.0708 mo(\(T)[-3.66211 0 ]yshPESGSB+ComicSansMS*1 [0 -5.83 -5.83 0 0 0 ]msf12.0303 60.6118 mo(o)shPESGSB+ComicSansMS*1 [0 -10 -10 0 0 0 ]msf8.7002 57.5459 mo(\)])[-3.66211 0 ]yshPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf153.2 259.882 mo(Temperature \(T/Tc\))[6.79688 5.47852 7.76855 5.34668 5.47852 4.80469 5.11719 4.71191 5.2002 4.80469 5.47852 2.98828 3.66211 6.79688 5.11719 6.79688 5.13672 0 ]xsh1 lw
2 lc
0 lj
4 ml
[] 0 dsh
true sadj
40.0518 233.365 mo
374.853 233.365 li
374.853 4.40527 li
40.0518 4.40527 li
40.0518 233.365 li
@
0 lc
[6 6 ] 0 dsh
40.064 4.69336 mo
43.4121 5.52002 li
46.7598 6.35254 li
50.1079 7.18994 li
53.4561 8.0332 li
56.8037 8.88232 li
60.1519 9.73682 li
63.5 10.5977 li
66.8481 11.4639 li
70.1958 12.3364 li
73.5439 13.2148 li
76.8921 14.1001 li
80.2397 14.9912 li
83.5879 15.8892 li
86.936 16.7935 li
90.2842 17.7046 li
93.6318 18.6226 li
96.98 19.5479 li
100.328 20.48 li
103.676 21.4194 li
107.024 22.3667 li
110.372 23.3213 li
113.72 24.2837 li
117.068 25.2539 li
120.416 26.2324 li
123.764 27.2192 li
127.112 28.2144 li
130.46 29.2178 li
133.808 30.2305 li
137.156 31.2524 li
140.504 32.2832 li
143.852 33.3237 li
147.2 34.3735 li
150.548 35.4336 li
153.896 36.5039 li
157.244 37.5845 li
160.592 38.6758 li
163.94 39.7783 li
167.288 40.8916 li
170.636 42.0166 li
173.983 43.1538 li
177.332 44.3027 li
180.681 45.4644 li
184.028 46.6392 li
187.376 47.8271 li
190.724 49.0283 li
194.071 50.2441 li
197.42 51.4741 li
200.769 52.7188 li
204.116 53.9795 li
207.464 55.2559 li
210.812 56.5483 li
214.159 57.8584 li
217.507 59.1855 li
220.856 60.5313 li
224.204 61.8955 li
227.552 63.2793 li
230.899 64.6836 li
234.247 66.1089 li
237.595 67.5562 li
240.944 69.0264 li
244.292 70.52 li
247.64 72.0381 li
250.987 73.5825 li
254.335 75.1533 li
257.685 76.7529 li
261.032 78.3818 li
264.38 80.0415 li
267.728 81.7339 li
271.075 83.46 li
274.423 85.2227 li
277.772 87.0234 li
281.12 88.8638 li
284.468 90.7471 li
287.815 92.6758 li
291.163 94.6523 li
294.511 96.6802 li
297.86 98.7627 li
301.208 100.904 li
304.556 103.109 li
307.903 105.382 li
311.251 107.729 li
314.599 110.156 li
317.948 112.671 li
321.296 115.283 li
324.644 118.001 li
327.991 120.838 li
331.339 123.809 li
334.687 126.929 li
338.036 130.22 li
341.384 133.708 li
344.731 137.429 li
348.079 141.423 li
351.427 145.752 li
354.776 150.497 li
358.124 155.78 li
361.472 161.791 li
364.819 168.86 li
368.167 177.661 li
371.515 190.026 li
0 0.992157 1 0 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B873D04176F39500737A58796A799ADAB2F011EB6B5082CCAD878260DE39AC958F27A9CCD72274D2585DDB51967C7CE61906AC0AD40C9D3B0A49FEC45F14EBB22E> |-/zero <1C60D8A8C9B7D98F6DA0BC0D56993DFD731859E73082C2D7636333544D763DC27197575AA0521EF215B0E83E609598D159BBB4BC56CDE2CDE3149C3DB2DB921DD2B021218A530AC8F4FD6B7D0FBB9FC522AE09EAE356903AFB4F0709B48EB18E9FA0317579E49D7B062061DF3902491F8FAAFB0B6154A16F4A168AFC4E808A4715BB30BACE27> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 46 /period putdup 48 /zero putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero 28{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf33.064 245.66 mo(0.0)[6.10352 2.49023 0 ]xsh0.5 lw
[] 0 dsh
107.024 233.653 mo
107.024 229.653 li
@
107.024 8.69336 mo
107.024 4.69336 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7D98F6D8F3D7AA695A6A6775D351A3C5B32DF9BF22260E9F8506C6C0AFACE341E1E92FBC3EF784C227B64F08462D61DD043B72D0EF946A3AE72A4250C97F9534EA1ECB8D1F844DABC2780EA5497B3400E0115082BCD52CA33A42EB31BAFC00E89283E1398238FF501EF46348166C5D0796F4F302EEFDEF2C569616B35F3A295FC3051C30E10E4927C117B901A9DA57C3B1677644528E481FA057A75ABBC2AFB35C7AE1B05FE0BDF0A1E3241A7236A535A6C63ACD853B32B2C1D37907B8E7DB8A4A38921C6A2C9DE2A43FF89B38C12B866B35B39B6383EDE8BC72433248A45DEF8A4F70A87D3942EB09EC1FED7DD26A9A13A5550450B987E697E0B> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /.notdef /two 26{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf100.024 245.66 mo(0.2)[6.10352 2.49023 0 ]xsh173.983 233.653 mo
173.983 229.653 li
@
173.983 8.69336 mo
173.983 4.69336 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7D98F6D9D19B2E0513FC5E4D92EB9CF4009902AEA1143FA8048680F0116C2DDAB1D204D80A50B6C47E295405ECF6B9D8E67656139D8AB0B99F70F10190AB1B69AE519C94E071FC1BE80E3AF65DBEE53E56F3CA5CE81F21E9C93C6700EB048CAFE7BA1F01073473AC3EB439C41FF3AB8A358FF25E1E33F82DECC7B8D6F2A15E44E1041> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /.notdef /two /.notdef /four 24{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf166.484 245.66 mo(0.4)[6.10352 2.49023 0 ]xsh240.944 233.653 mo
240.944 229.653 li
@
240.944 8.69336 mo
240.944 4.69336 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7D98F6D410A565F86C07E28623A8A30C45B3B253252287FF35E356C79AC66AD2FE890317E5BEDE13DA65D4DD9FEFA4A8DFF9CB28F7E30962E9383AE3EAD6DEAE2B16B6F1B34D04F870BFED7898255C19B9AFC0426057874C8B988A599BC31593CCD1C2687B840C41197BFB5E2F0C696FA1CFEBDE6A1FAB216E151994B62236FC38B2E21028335BF2980D1D4BCF4B195CB5D36B5C88F8109053C66029BF6146437EE12EF20EAA8182B691161DB7D213B7CE925835ED4E58E76> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /.notdef /two /.notdef /four /.notdef /six 22{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf233.944 245.66 mo(0.6)[6.10352 2.49023 0 ]xsh307.903 233.653 mo
307.903 229.653 li
@
307.903 8.69336 mo
307.903 4.69336 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B77914873F98803C60EEF5E4A6DBE96AE9B81EFF493D2F1AA3FEEAA37FD443D04034D23BA9D609D2C8CD762F92B8820610EEE88821C53021C3E08017ADDCC0C56E5E2D7504080ABC696FC4B2BC78B7B384642545B6D2D0F5C638D5E5DAF1603C704B0CBDC68673A92C16CF8AB7E549BF3031EC2B504C05A0AE024AB48F99F68753D2CFADD79C925954659602A92A0F92089F7F8763F72499600C23C55121FDAC89B86D3B6C51F53AFAF0B4EDB2432FF0B89CC30A4C8DD2B8E7547AC479FCA4589851D61C952B27> |-/eight <1C60D8A8C9B7D98F6D411A3FBF3E1364E3BEC4A5E775ACA412F07D5A94C3BEF77D5E53216BEB0522A622C88CA1692970DDC6947BF81796DD7CCB824FA7EE90A4943F8AE44614C58C7911AB9D28D9C0B88A93C3B727D580C159061F84BE60E69517D9839A4A451A2414216CE43B99EFB70961552191831694714DDE8DDC8255990930E16813418A900FE62548470B5CC1B3B6A98598E41570742E202830AFBD33243EC6ABB72886024764019A44EA984D8DED1FCBB31F0E230348D3C16A805BC89F2756CA3905F9B19C15A371AF432FD6D69D1C4299F3A5FC90ECA58C45C9> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 49 /one putdup 56 /eight putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 20{/.notdef}rp /M 6{/.notdef}rp /T 6{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf300.904 245.66 mo(0.8)[6.10352 2.49023 0 ]xsh368.864 245.66 mo(1.0)[4.50195 2.49023 0 ]xsh16.064 237.66 mo(0.0)[6.10352 2.49023 0 ]xsh40.064 187.861 mo
44.064 187.861 li
@
370.864 187.861 mo
374.864 187.861 li
@
PESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf16.064 191.868 mo(0.2)[6.10352 2.49023 0 ]xsh40.064 142.069 mo
44.064 142.069 li
@
370.864 142.069 mo
374.864 142.069 li
@
PESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf15.064 146.076 mo(0.4)[6.10352 2.49023 0 ]xsh40.064 96.2773 mo
44.064 96.2773 li
@
370.864 96.2773 mo
374.864 96.2773 li
@
PESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf16.064 100.284 mo(0.6)[6.10352 2.49023 0 ]xsh40.064 50.4854 mo
44.064 50.4854 li
@
370.864 50.4854 mo
374.864 50.4854 li
@
PESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf16.064 54.4922 mo(0.8)[6.10352 2.49023 0 ]xsh18.064 8.7002 mo(1.0)[4.50195 2.49023 0 ]xsh54.0039 5.55859 mo
54.7837 5.68213 li
55.4873 6.04053 li
56.0454 6.59863 li
56.4038 7.30176 li
56.5273 8.08154 li
56.4038 8.86133 li
56.0454 9.56445 li
55.4873 10.123 li
54.7837 10.4814 li
54.0039 10.6045 li
53.2241 10.4814 li
52.521 10.123 li
51.9629 9.56445 li
51.6045 8.86133 li
51.481 8.08154 li
51.6045 7.30176 li
51.9629 6.59863 li
52.521 6.04053 li
53.2241 5.68213 li
54.0039 5.55859 li
cp
0 0.992157 1 0 cmyk
f
1 lw
54.0039 5.55859 mo
54.7837 5.68213 li
55.4873 6.04053 li
56.0454 6.59863 li
56.4038 7.30176 li
56.5273 8.08154 li
56.4038 8.86133 li
56.0454 9.56445 li
55.4873 10.123 li
54.7837 10.4814 li
54.0039 10.6045 li
53.2241 10.4814 li
52.521 10.123 li
51.9629 9.56445 li
51.6045 8.86133 li
51.481 8.08154 li
51.6045 7.30176 li
51.9629 6.59863 li
52.521 6.04053 li
53.2241 5.68213 li
54.0039 5.55859 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
90.8208 13.688 mo
91.6006 13.8115 li
92.3042 14.1699 li
92.8623 14.7285 li
93.2207 15.4316 li
93.3442 16.2114 li
93.2207 16.9912 li
92.8623 17.6943 li
92.3042 18.2524 li
91.6006 18.6108 li
90.8208 18.7344 li
90.0415 18.6108 li
89.3379 18.2524 li
88.7798 17.6943 li
88.4214 16.9912 li
88.2979 16.2114 li
88.4214 15.4316 li
88.7798 14.7285 li
89.3379 14.1699 li
90.0415 13.8115 li
90.8208 13.688 li
cp
0 0.992157 1 0 cmyk
f
90.8208 13.688 mo
91.6006 13.8115 li
92.3042 14.1699 li
92.8623 14.7285 li
93.2207 15.4316 li
93.3442 16.2114 li
93.2207 16.9912 li
92.8623 17.6943 li
92.3042 18.2524 li
91.6006 18.6108 li
90.8208 18.7344 li
90.0415 18.6108 li
89.3379 18.2524 li
88.7798 17.6943 li
88.4214 16.9912 li
88.2979 16.2114 li
88.4214 15.4316 li
88.7798 14.7285 li
89.3379 14.1699 li
90.0415 13.8115 li
90.8208 13.688 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
123.141 23.145 mo
123.921 23.2686 li
124.625 23.627 li
125.183 24.1851 li
125.541 24.8882 li
125.665 25.668 li
125.541 26.4478 li
125.183 27.1514 li
124.625 27.7095 li
123.921 28.0679 li
123.141 28.1914 li
122.361 28.0679 li
121.658 27.7095 li
121.1 27.1514 li
120.742 26.4478 li
120.618 25.668 li
120.742 24.8882 li
121.1 24.1851 li
121.658 23.627 li
122.361 23.2686 li
123.141 23.145 li
cp
0 0.992157 1 0 cmyk
f
123.141 23.145 mo
123.921 23.2686 li
124.625 23.627 li
125.183 24.1851 li
125.541 24.8882 li
125.665 25.668 li
125.541 26.4478 li
125.183 27.1514 li
124.625 27.7095 li
123.921 28.0679 li
123.141 28.1914 li
122.361 28.0679 li
121.658 27.7095 li
121.1 27.1514 li
120.742 26.4478 li
120.618 25.668 li
120.742 24.8882 li
121.1 24.1851 li
121.658 23.627 li
122.361 23.2686 li
123.141 23.145 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
149.453 31.9165 mo
150.233 32.04 li
150.936 32.3984 li
151.495 32.9565 li
151.853 33.6597 li
151.977 34.4395 li
151.853 35.2192 li
151.495 35.9224 li
150.936 36.481 li
150.233 36.8389 li
149.453 36.9629 li
148.673 36.8389 li
147.97 36.481 li
147.412 35.9224 li
147.054 35.2192 li
146.93 34.4395 li
147.054 33.6597 li
147.412 32.9565 li
147.97 32.3984 li
148.673 32.04 li
149.453 31.9165 li
cp
0 0.992157 1 0 cmyk
f
149.453 31.9165 mo
150.233 32.04 li
150.936 32.3984 li
151.495 32.9565 li
151.853 33.6597 li
151.977 34.4395 li
151.853 35.2192 li
151.495 35.9224 li
150.936 36.481 li
150.233 36.8389 li
149.453 36.9629 li
148.673 36.8389 li
147.97 36.481 li
147.412 35.9224 li
147.054 35.2192 li
146.93 34.4395 li
147.054 33.6597 li
147.412 32.9565 li
147.97 32.3984 li
148.673 32.04 li
149.453 31.9165 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
62.7222 138.7 mo
63.502 138.823 li
64.2051 139.183 li
64.7637 139.74 li
65.1221 140.443 li
65.2456 141.224 li
65.1221 142.003 li
64.7637 142.706 li
64.2051 143.265 li
63.502 143.622 li
62.7222 143.747 li
61.9424 143.622 li
61.2393 143.265 li
60.6812 142.706 li
60.3228 142.003 li
60.1992 141.224 li
60.3228 140.443 li
60.6812 139.74 li
61.2393 139.183 li
61.9424 138.823 li
62.7222 138.7 li
cp
0 0.992157 1 0 cmyk
f
62.7222 138.7 mo
63.502 138.823 li
64.2051 139.183 li
64.7637 139.74 li
65.1221 140.443 li
65.2456 141.224 li
65.1221 142.003 li
64.7637 142.706 li
64.2051 143.265 li
63.502 143.622 li
62.7222 143.747 li
61.9424 143.622 li
61.2393 143.265 li
60.6812 142.706 li
60.3228 142.003 li
60.1992 141.224 li
60.3228 140.443 li
60.6812 139.74 li
61.2393 139.183 li
61.9424 138.823 li
62.7222 138.7 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
175.015 40.686 mo
175.794 40.8096 li
176.498 41.168 li
177.056 41.7261 li
177.415 42.4297 li
177.538 43.209 li
177.415 43.9888 li
177.056 44.6924 li
176.498 45.2505 li
175.794 45.6089 li
175.015 45.7324 li
174.235 45.6089 li
173.532 45.2505 li
172.974 44.6924 li
172.615 43.9888 li
172.492 43.209 li
172.615 42.4297 li
172.974 41.7261 li
173.532 41.168 li
174.235 40.8096 li
175.015 40.686 li
cp
0 0.992157 1 0 cmyk
f
175.015 40.686 mo
175.794 40.8096 li
176.498 41.168 li
177.056 41.7261 li
177.415 42.4297 li
177.538 43.209 li
177.415 43.9888 li
177.056 44.6924 li
176.498 45.2505 li
175.794 45.6089 li
175.015 45.7324 li
174.235 45.6089 li
173.532 45.2505 li
172.974 44.6924 li
172.615 43.9888 li
172.492 43.209 li
172.615 42.4297 li
172.974 41.7261 li
173.532 41.168 li
174.235 40.8096 li
175.015 40.686 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
194.568 48.7705 mo
195.348 48.894 li
196.052 49.2524 li
196.609 49.8105 li
196.968 50.5142 li
197.091 51.2939 li
196.968 52.0732 li
196.609 52.7769 li
196.052 53.335 li
195.348 53.6934 li
194.568 53.8169 li
193.788 53.6934 li
193.085 53.335 li
192.526 52.7769 li
192.169 52.0732 li
192.045 51.2939 li
192.169 50.5142 li
192.526 49.8105 li
193.085 49.2524 li
193.788 48.894 li
194.568 48.7705 li
cp
0 0.992157 1 0 cmyk
f
194.568 48.7705 mo
195.348 48.894 li
196.052 49.2524 li
196.609 49.8105 li
196.968 50.5142 li
197.091 51.2939 li
196.968 52.0732 li
196.609 52.7769 li
196.052 53.335 li
195.348 53.6934 li
194.568 53.8169 li
193.788 53.6934 li
193.085 53.335 li
192.526 52.7769 li
192.169 52.0732 li
192.045 51.2939 li
192.169 50.5142 li
192.526 49.8105 li
193.085 49.2524 li
193.788 48.894 li
194.568 48.7705 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
213.368 56.1836 mo
214.147 56.3071 li
214.851 56.6655 li
215.409 57.2236 li
215.767 57.9272 li
215.892 58.7065 li
215.767 59.4863 li
215.409 60.1899 li
214.851 60.748 li
214.147 61.1064 li
213.368 61.23 li
212.587 61.1064 li
211.884 60.748 li
211.327 60.1899 li
210.968 59.4863 li
210.845 58.7065 li
210.968 57.9272 li
211.327 57.2236 li
211.884 56.6655 li
212.587 56.3071 li
213.368 56.1836 li
cp
0 0.992157 1 0 cmyk
f
213.368 56.1836 mo
214.147 56.3071 li
214.851 56.6655 li
215.409 57.2236 li
215.767 57.9272 li
215.892 58.7065 li
215.767 59.4863 li
215.409 60.1899 li
214.851 60.748 li
214.147 61.1064 li
213.368 61.23 li
212.587 61.1064 li
211.884 60.748 li
211.327 60.1899 li
210.968 59.4863 li
210.845 58.7065 li
210.968 57.9272 li
211.327 57.2236 li
211.884 56.6655 li
212.587 56.3071 li
213.368 56.1836 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
229.165 63.5889 mo
229.944 63.7124 li
230.647 64.0708 li
231.206 64.6289 li
231.565 65.332 li
231.688 66.1118 li
231.565 66.8916 li
231.206 67.5952 li
230.647 68.1533 li
229.944 68.5117 li
229.165 68.6353 li
228.386 68.5117 li
227.683 68.1533 li
227.124 67.5952 li
226.765 66.8916 li
226.642 66.1118 li
226.765 65.332 li
227.124 64.6289 li
227.683 64.0708 li
228.386 63.7124 li
229.165 63.5889 li
cp
0 0.992157 1 0 cmyk
f
229.165 63.5889 mo
229.944 63.7124 li
230.647 64.0708 li
231.206 64.6289 li
231.565 65.332 li
231.688 66.1118 li
231.565 66.8916 li
231.206 67.5952 li
230.647 68.1533 li
229.944 68.5117 li
229.165 68.6353 li
228.386 68.5117 li
227.683 68.1533 li
227.124 67.5952 li
226.765 66.8916 li
226.642 66.1118 li
226.765 65.332 li
227.124 64.6289 li
227.683 64.0708 li
228.386 63.7124 li
229.165 63.5889 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
245.71 70.3267 mo
246.489 70.4502 li
247.192 70.8086 li
247.751 71.3667 li
248.11 72.0703 li
248.233 72.8496 li
248.11 73.6294 li
247.751 74.333 li
247.192 74.8911 li
246.489 75.2495 li
245.71 75.373 li
244.931 75.2495 li
244.228 74.8911 li
243.669 74.333 li
243.31 73.6294 li
243.187 72.8496 li
243.31 72.0703 li
243.669 71.3667 li
244.228 70.8086 li
244.931 70.4502 li
245.71 70.3267 li
cp
0 0.992157 1 0 cmyk
f
245.71 70.3267 mo
246.489 70.4502 li
247.192 70.8086 li
247.751 71.3667 li
248.11 72.0703 li
248.233 72.8496 li
248.11 73.6294 li
247.751 74.333 li
247.192 74.8911 li
246.489 75.2495 li
245.71 75.373 li
244.931 75.2495 li
244.228 74.8911 li
243.669 74.333 li
243.31 73.6294 li
243.187 72.8496 li
243.31 72.0703 li
243.669 71.3667 li
244.228 70.8086 li
244.931 70.4502 li
245.71 70.3267 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
265.272 80.4194 mo
266.052 80.543 li
266.757 80.9014 li
267.313 81.4595 li
267.673 82.1631 li
267.796 82.9424 li
267.673 83.7222 li
267.313 84.4258 li
266.757 84.9839 li
266.052 85.3423 li
265.272 85.4658 li
264.493 85.3423 li
263.79 84.9839 li
263.231 84.4258 li
262.874 83.7222 li
262.749 82.9424 li
262.874 82.1631 li
263.231 81.4595 li
263.79 80.9014 li
264.493 80.543 li
265.272 80.4194 li
cp
0 0.992157 1 0 cmyk
f
265.272 80.4194 mo
266.052 80.543 li
266.757 80.9014 li
267.313 81.4595 li
267.673 82.1631 li
267.796 82.9424 li
267.673 83.7222 li
267.313 84.4258 li
266.757 84.9839 li
266.052 85.3423 li
265.272 85.4658 li
264.493 85.3423 li
263.79 84.9839 li
263.231 84.4258 li
262.874 83.7222 li
262.749 82.9424 li
262.874 82.1631 li
263.231 81.4595 li
263.79 80.9014 li
264.493 80.543 li
265.272 80.4194 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
281.073 88.4941 mo
281.853 88.6177 li
282.556 88.9761 li
283.114 89.5342 li
283.474 90.2378 li
283.597 91.0176 li
283.474 91.7969 li
283.114 92.5005 li
282.556 93.0586 li
281.853 93.417 li
281.073 93.5405 li
280.294 93.417 li
279.591 93.0586 li
279.032 92.5005 li
278.675 91.7969 li
278.55 91.0176 li
278.675 90.2378 li
279.032 89.5342 li
279.591 88.9761 li
280.294 88.6177 li
281.073 88.4941 li
cp
0 0.992157 1 0 cmyk
f
281.073 88.4941 mo
281.853 88.6177 li
282.556 88.9761 li
283.114 89.5342 li
283.474 90.2378 li
283.597 91.0176 li
283.474 91.7969 li
283.114 92.5005 li
282.556 93.0586 li
281.853 93.417 li
281.073 93.5405 li
280.294 93.417 li
279.591 93.0586 li
279.032 92.5005 li
278.675 91.7969 li
278.55 91.0176 li
278.675 90.2378 li
279.032 89.5342 li
279.591 88.9761 li
280.294 88.6177 li
281.073 88.4941 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
293.868 95.8916 mo
294.647 96.0151 li
295.351 96.3735 li
295.909 96.9316 li
296.269 97.6353 li
296.392 98.415 li
296.269 99.1943 li
295.909 99.8979 li
295.351 100.456 li
294.647 100.814 li
293.868 100.938 li
293.089 100.814 li
292.386 100.456 li
291.827 99.8979 li
291.47 99.1943 li
291.345 98.415 li
291.47 97.6353 li
291.827 96.9316 li
292.386 96.3735 li
293.089 96.0151 li
293.868 95.8916 li
cp
0 0.992157 1 0 cmyk
f
293.868 95.8916 mo
294.647 96.0151 li
295.351 96.3735 li
295.909 96.9316 li
296.269 97.6353 li
296.392 98.415 li
296.269 99.1943 li
295.909 99.8979 li
295.351 100.456 li
294.647 100.814 li
293.868 100.938 li
293.089 100.814 li
292.386 100.456 li
291.827 99.8979 li
291.47 99.1943 li
291.345 98.415 li
291.47 97.6353 li
291.827 96.9316 li
292.386 96.3735 li
293.089 96.0151 li
293.868 95.8916 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
304.411 103.283 mo
305.192 103.407 li
305.896 103.765 li
306.452 104.323 li
306.812 105.026 li
306.935 105.806 li
306.812 106.586 li
306.452 107.29 li
305.896 107.848 li
305.192 108.206 li
304.411 108.33 li
303.632 108.206 li
302.929 107.848 li
302.37 107.29 li
302.013 106.586 li
301.89 105.806 li
302.013 105.026 li
302.37 104.323 li
302.929 103.765 li
303.632 103.407 li
304.411 103.283 li
cp
0 0.992157 1 0 cmyk
f
304.411 103.283 mo
305.192 103.407 li
305.896 103.765 li
306.452 104.323 li
306.812 105.026 li
306.935 105.806 li
306.812 106.586 li
306.452 107.29 li
305.896 107.848 li
305.192 108.206 li
304.411 108.33 li
303.632 108.206 li
302.929 107.848 li
302.37 107.29 li
302.013 106.586 li
301.89 105.806 li
302.013 105.026 li
302.37 104.323 li
302.929 103.765 li
303.632 103.407 li
304.411 103.283 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
316.46 111.348 mo
317.239 111.472 li
317.942 111.83 li
318.501 112.388 li
318.858 113.092 li
318.981 113.872 li
318.858 114.651 li
318.501 115.354 li
317.942 115.913 li
317.239 116.271 li
316.46 116.395 li
315.679 116.271 li
314.976 115.913 li
314.419 115.354 li
314.06 114.651 li
313.937 113.872 li
314.06 113.092 li
314.419 112.388 li
314.976 111.83 li
315.679 111.472 li
316.46 111.348 li
cp
0 0.992157 1 0 cmyk
f
316.46 111.348 mo
317.239 111.472 li
317.942 111.83 li
318.501 112.388 li
318.858 113.092 li
318.981 113.872 li
318.858 114.651 li
318.501 115.354 li
317.942 115.913 li
317.239 116.271 li
316.46 116.395 li
315.679 116.271 li
314.976 115.913 li
314.419 115.354 li
314.06 114.651 li
313.937 113.872 li
314.06 113.092 li
314.419 112.388 li
314.976 111.83 li
315.679 111.472 li
316.46 111.348 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
328.517 121.422 mo
329.296 121.545 li
329.999 121.903 li
330.558 122.462 li
330.917 123.165 li
331.04 123.945 li
330.917 124.725 li
330.558 125.428 li
329.999 125.986 li
329.296 126.344 li
328.517 126.468 li
327.737 126.344 li
327.034 125.986 li
326.476 125.428 li
326.116 124.725 li
325.993 123.945 li
326.116 123.165 li
326.476 122.462 li
327.034 121.903 li
327.737 121.545 li
328.517 121.422 li
cp
0 0.992157 1 0 cmyk
f
328.517 121.422 mo
329.296 121.545 li
329.999 121.903 li
330.558 122.462 li
330.917 123.165 li
331.04 123.945 li
330.917 124.725 li
330.558 125.428 li
329.999 125.986 li
329.296 126.344 li
328.517 126.468 li
327.737 126.344 li
327.034 125.986 li
326.476 125.428 li
326.116 124.725 li
325.993 123.945 li
326.116 123.165 li
326.476 122.462 li
327.034 121.903 li
327.737 121.545 li
328.517 121.422 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
337.565 130.148 mo
338.345 130.271 li
339.048 130.63 li
339.606 131.188 li
339.964 131.892 li
340.089 132.671 li
339.964 133.451 li
339.606 134.154 li
339.048 134.712 li
338.345 135.071 li
337.565 135.194 li
336.786 135.071 li
336.081 134.712 li
335.524 134.154 li
335.165 133.451 li
335.042 132.671 li
335.165 131.892 li
335.524 131.188 li
336.081 130.63 li
336.786 130.271 li
337.565 130.148 li
cp
0 0.992157 1 0 cmyk
f
337.565 130.148 mo
338.345 130.271 li
339.048 130.63 li
339.606 131.188 li
339.964 131.892 li
340.089 132.671 li
339.964 133.451 li
339.606 134.154 li
339.048 134.712 li
338.345 135.071 li
337.565 135.194 li
336.786 135.071 li
336.081 134.712 li
335.524 134.154 li
335.165 133.451 li
335.042 132.671 li
335.165 131.892 li
335.524 131.188 li
336.081 130.63 li
336.786 130.271 li
337.565 130.148 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
345.108 138.201 mo
345.89 138.325 li
346.593 138.683 li
347.149 139.241 li
347.509 139.944 li
347.632 140.725 li
347.509 141.504 li
347.149 142.208 li
346.593 142.766 li
345.89 143.124 li
345.108 143.247 li
344.329 143.124 li
343.626 142.766 li
343.067 142.208 li
342.71 141.504 li
342.587 140.725 li
342.71 139.944 li
343.067 139.241 li
343.626 138.683 li
344.329 138.325 li
345.108 138.201 li
cp
0 0.992157 1 0 cmyk
f
345.108 138.201 mo
345.89 138.325 li
346.593 138.683 li
347.149 139.241 li
347.509 139.944 li
347.632 140.725 li
347.509 141.504 li
347.149 142.208 li
346.593 142.766 li
345.89 143.124 li
345.108 143.247 li
344.329 143.124 li
343.626 142.766 li
343.067 142.208 li
342.71 141.504 li
342.587 140.725 li
342.71 139.944 li
343.067 139.241 li
343.626 138.683 li
344.329 138.325 li
345.108 138.201 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
353.417 148.935 mo
354.196 149.058 li
354.899 149.416 li
355.458 149.975 li
355.815 150.678 li
355.94 151.458 li
355.815 152.237 li
355.458 152.94 li
354.899 153.499 li
354.196 153.857 li
353.417 153.98 li
352.638 153.857 li
351.933 153.499 li
351.376 152.94 li
351.017 152.237 li
350.894 151.458 li
351.017 150.678 li
351.376 149.975 li
351.933 149.416 li
352.638 149.058 li
353.417 148.935 li
cp
0 0.992157 1 0 cmyk
f
353.417 148.935 mo
354.196 149.058 li
354.899 149.416 li
355.458 149.975 li
355.815 150.678 li
355.94 151.458 li
355.815 152.237 li
355.458 152.94 li
354.899 153.499 li
354.196 153.857 li
353.417 153.98 li
352.638 153.857 li
351.933 153.499 li
351.376 152.94 li
351.017 152.237 li
350.894 151.458 li
351.017 150.678 li
351.376 149.975 li
351.933 149.416 li
352.638 149.058 li
353.417 148.935 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
361.733 161.676 mo
362.513 161.8 li
363.216 162.157 li
363.774 162.716 li
364.134 163.419 li
364.257 164.198 li
364.134 164.979 li
363.774 165.683 li
363.216 166.24 li
362.513 166.599 li
361.733 166.722 li
360.954 166.599 li
360.251 166.24 li
359.692 165.683 li
359.333 164.979 li
359.21 164.198 li
359.333 163.419 li
359.692 162.716 li
360.251 162.157 li
360.954 161.8 li
361.733 161.676 li
cp
0 0.992157 1 0 cmyk
f
361.733 161.676 mo
362.513 161.8 li
363.216 162.157 li
363.774 162.716 li
364.134 163.419 li
364.257 164.198 li
364.134 164.979 li
363.774 165.683 li
363.216 166.24 li
362.513 166.599 li
361.733 166.722 li
360.954 166.599 li
360.251 166.24 li
359.692 165.683 li
359.333 164.979 li
359.21 164.198 li
359.333 163.419 li
359.692 162.716 li
360.251 162.157 li
360.954 161.8 li
361.733 161.676 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
367.796 173.741 mo
368.575 173.865 li
369.278 174.224 li
369.837 174.782 li
370.194 175.485 li
370.319 176.265 li
370.194 177.044 li
369.837 177.748 li
369.278 178.306 li
368.575 178.665 li
367.796 178.788 li
367.017 178.665 li
366.312 178.306 li
365.755 177.748 li
365.396 177.044 li
365.272 176.265 li
365.396 175.485 li
365.755 174.782 li
366.312 174.224 li
367.017 173.865 li
367.796 173.741 li
cp
0 0.992157 1 0 cmyk
f
367.796 173.741 mo
368.575 173.865 li
369.278 174.224 li
369.837 174.782 li
370.194 175.485 li
370.319 176.265 li
370.194 177.044 li
369.837 177.748 li
369.278 178.306 li
368.575 178.665 li
367.796 178.788 li
367.017 178.665 li
366.312 178.306 li
365.755 177.748 li
365.396 177.044 li
365.272 176.265 li
365.396 175.485 li
365.755 174.782 li
366.312 174.224 li
367.017 173.865 li
367.796 173.741 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
371.614 187.811 mo
372.396 187.935 li
373.099 188.292 li
373.657 188.851 li
374.015 189.554 li
374.138 190.333 li
374.015 191.113 li
373.657 191.816 li
373.099 192.375 li
372.396 192.733 li
371.614 192.856 li
370.835 192.733 li
370.132 192.375 li
369.573 191.816 li
369.216 191.113 li
369.093 190.333 li
369.216 189.554 li
369.573 188.851 li
370.132 188.292 li
370.835 187.935 li
371.614 187.811 li
cp
0 0.992157 1 0 cmyk
f
371.614 187.811 mo
372.396 187.935 li
373.099 188.292 li
373.657 188.851 li
374.015 189.554 li
374.138 190.333 li
374.015 191.113 li
373.657 191.816 li
373.099 192.375 li
372.396 192.733 li
371.614 192.856 li
370.835 192.733 li
370.132 192.375 li
369.573 191.816 li
369.216 191.113 li
369.093 190.333 li
369.216 189.554 li
369.573 188.851 li
370.132 188.292 li
370.835 187.935 li
371.614 187.811 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
373.187 202.542 mo
373.966 202.666 li
374.669 203.024 li
375.228 203.583 li
375.587 204.286 li
375.71 205.065 li
375.587 205.846 li
375.228 206.549 li
374.669 207.106 li
373.966 207.466 li
373.187 207.589 li
372.407 207.466 li
371.704 207.106 li
371.146 206.549 li
370.786 205.846 li
370.663 205.065 li
370.786 204.286 li
371.146 203.583 li
371.704 203.024 li
372.407 202.666 li
373.187 202.542 li
cp
0 0.992157 1 0 cmyk
f
373.187 202.542 mo
373.966 202.666 li
374.669 203.024 li
375.228 203.583 li
375.587 204.286 li
375.71 205.065 li
375.587 205.846 li
375.228 206.549 li
374.669 207.106 li
373.966 207.466 li
373.187 207.589 li
372.407 207.466 li
371.704 207.106 li
371.146 206.549 li
370.786 205.846 li
370.663 205.065 li
370.786 204.286 li
371.146 203.583 li
371.704 203.024 li
372.407 202.666 li
373.187 202.542 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
374.755 216.605 mo
375.534 216.729 li
376.237 217.087 li
376.796 217.646 li
377.153 218.349 li
377.278 219.128 li
377.153 219.908 li
376.796 220.611 li
376.237 221.17 li
375.534 221.528 li
374.755 221.651 li
373.976 221.528 li
373.271 221.17 li
372.714 220.611 li
372.354 219.908 li
372.231 219.128 li
372.354 218.349 li
372.714 217.646 li
373.271 217.087 li
373.976 216.729 li
374.755 216.605 li
cp
0 0.992157 1 0 cmyk
f
374.755 216.605 mo
375.534 216.729 li
376.237 217.087 li
376.796 217.646 li
377.153 218.349 li
377.278 219.128 li
377.153 219.908 li
376.796 220.611 li
376.237 221.17 li
375.534 221.528 li
374.755 221.651 li
373.976 221.528 li
373.271 221.17 li
372.714 220.611 li
372.354 219.908 li
372.231 219.128 li
372.354 218.349 li
372.714 217.646 li
373.271 217.087 li
373.976 216.729 li
374.755 216.605 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
376.319 229.999 mo
377.099 230.122 li
377.804 230.48 li
378.36 231.038 li
378.72 231.742 li
378.843 232.521 li
378.72 233.302 li
378.36 234.005 li
377.804 234.563 li
377.099 234.921 li
376.319 235.045 li
375.54 234.921 li
374.837 234.563 li
374.278 234.005 li
373.921 233.302 li
373.796 232.521 li
373.921 231.742 li
374.278 231.038 li
374.837 230.48 li
375.54 230.122 li
376.319 229.999 li
cp
0 0.992157 1 0 cmyk
f
376.319 229.999 mo
377.099 230.122 li
377.804 230.48 li
378.36 231.038 li
378.72 231.742 li
378.843 232.521 li
378.72 233.302 li
378.36 234.005 li
377.804 234.563 li
377.099 234.921 li
376.319 235.045 li
375.54 234.921 li
374.837 234.563 li
374.278 234.005 li
373.921 233.302 li
373.796 232.521 li
373.921 231.742 li
374.278 231.038 li
374.837 230.48 li
375.54 230.122 li
376.319 229.999 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7D98F6DB48DCFD6E5B40D8F5B9356D5F4F312E4E079BD1330371F8B16E748B339507FF34EEAEBC76CE6088FFBF43CFA46E360E31F1295C04C348C693DC73173B5940711C217395EF980BC13292FAEA4C08F7DB86E96FFD7F1AC428FC0B70C128D940CEFA088CAA7A81C4303E9CEAB546530F44DECE7661C57649DB55B4A8B030E79BFC310962A75CCD903BEAAEEBB6FAF06B5DB9A5811BA4ABCFE56CD78D8CA81201C1DDB3CE934C1DF4A914CCB604E06ECCF14960D6BEEE038EC27F429644C8ECFDF794CCFAFF5276CC0> |-/B <1C60D8A8C9B66B395FD17D63B9E61DA0BB50A497D6EA5CF66D713309F62500DD5FF27AFBE13138AE8692CDAB03619C69E42BF0A028212D7196A46E0B59D87EB400714E70727022DD786503CF4D354115A51BFDED36E5941578460AA9A3190846D39FC3489DD04FBFE83EBF8911912975458C0D8174449DD1A2110A863937B27C3AF9558C20C1A26BA905D9D89E6647703CDBBFE3BBEE20DBCAEBB238555BCB67F839DAB97D8AEED4933566B748EDD20F5871AF750417A9CBC4EBE0E38D350906F981A452985EAE5C5A2B615BBF91B837A7A5E43ED160E60E512050491935F93E5B6F65529183D7663E4CCD1C9C5524636709AA1ED9EDE9D7CB8657> |-/N <1C60D8A8C9B6D0A8EAEB10EC6C83A8151ABCF50170663A97AA6C8AF4BBC458891122B79EA456A4FB245891A0A08C3F5C78856E717318934EDB6CFE82EF816E4A49DE50D454AA4D5253D6CA844409A8A10E7CBD876280B093069533B6F6D725480B401381FB0ACCD7E70B82A55671F2BD692AB87154FC02E8EFAA7321920BBE6F8AD18AABE78061D095650FF694ED9E55586C17666B3AF0837B29CC058D114E11672F0F69980A26F4FDC5EA82BD1C53B74B670AE4AB837D81949E7D924709D0FE446761EF57CF343A7B12F8661A2DCF313DA4275B0A14F039CB9570AC5B4F86F1D15CDCD36D311971E0FED3BAAF870242> |-/W <1C60D8A8C9B536D0CDA67495C778630A8DC2511919E43231A0C18D2973EB9398FC65133D4B1C1FD822BED43906F0A8844D802931B27D6EE8DCF0AACBAFE3E82F733FD0FB0D8DEAC05767241E9F7448C42B466ABE313818470686D6E92C5C38ED2E26C957C5B36EDD0C1B76E6CA0F5715836993E6CBAC445E502DBD9478491087D2DB34E4215C09904450602533067D974FCB69C1C42C5E354524CDE7F7138BDA3512AE512BA7640757F235266D7F29FDC793E25C618EE71BEAA0CDF47A9F3F7A3485D7D912ED62068BA272F19CE6DBDCED6935ACB2E53FF460220BC39BAF396EF09A34A4EFD78027C51155554CD7937332C5836E80AE011DA26759CDDC785C15E6> |-/j <1C60D8A8C9B708F664DC04612476FE39B0BBA3D61DF7E92793DB825DF8D8E3B8BB1253ECE2EEBC2BF78DF9D3447DA5FEFB362AEB104E41E70B7891FFDB8E652B93D4A38FA2FB3C3117E2EAB31E18ABDC811C850EB3A8965F03346C02B24988F91F47297BF7A967BC957BC5F0149E566966B9B23623D13D8F8EEFCF35FD94EC756F36505FA77585DAF9A213A07E6809A8431FCBD96C3C58871984198DF041FA25FC3F59F7DD8970983741A9BCA6CA07DEB0DEDE54AC6C2072E129D20F38DEBBBEA03B66C3A38616758534> |-/k <1C60D8A8C9B79FB0CD2D15CCEE966971362480E076054D31ADCAF7E9F9F429FFD0CF01AA7CF905D805D459A957952A6433C717D3DF98496956EEFCBE7CB2071C1548FC4AF7BD4FCC74BB534AEF2490DA91066817385D9BCBBE532A553A0267B13BB5470B056EAC6D26F7C5431C70EF1A001381C519F5B194B713D0ABB930F60C7A1F1DC4E4C4C27F560891CC59E5DE021B95C16C1051516431F1B4BA1506B514B58751DBFE2338BA583FD6260A3D3AE4F4D9DEFF8CD6EDF3556A634AAC67ADBD21C4181A2CF1384C15227940E5484D672B2F939548604FAB3574BBFE207E05B5378DDFC53001398B55> |-/l <1C60D8A8C9B8581A5C985F5B74008F0E2CA964639DBBD35F5DD00E39B9E95E3CD2193CB410613D02E647955F9BDFF4F3308822726BABA78ABE406A4F243D0D7526BB93B898D78CB4E4A407748C335667C85BC7C5DB0D0060EEAC> |-/w <1C60D8A8C9B6218487477493A6ED6FC49ADE7DB5A336FA1EBC5DDDBD48D99F5928C02BD528261F4B15A41301EAC0B328314A22E884D6FD1C59CA5497BCB2DD47D888224B9D6A58A779C950597CDE4E747B3963BC377CAE93AA58AA7115E69CE989D76E37B26207B544A0ED52C2A2EC01472B28F0E832B7D16EADBE6104D00877050F8D30EEE2CBA8A97FB7E3C2997DC2B38AE56987D1577B31463680DA7FF636A537A36637C58577517E9D0FA948B1552DF9E47467B7AAFAD757883931987E128011F634BAAAA9FF3D857B1ABD99308B07> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 57 /nine putdup 66 /B putdup 78 /N putdup 87 /W putdup 106 /j putdup 107 /k putdup 108 /l putdup 119 /w putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight /nine 8{/.notdef}rp /B 10{/.notdef}rp /M /N 5{/.notdef}rp /T 2{/.notdef}rp /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i /j /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf68.1318 131.713 mo(W. Williams in Newell et al. \(1990\))[10.3955 2.49023 2.98828 10.3955 2.80273 2.73926 2.73926 2.80273 5.11719 7.76855 4.86816 2.98828 2.80273 5.23438 2.98828 7.96875 5.47852 6.84082 5.47852 2.73926 2.73926 2.98828 5.47852 4.71191 2.98828 5.11719 2.73926 2.49023 2.98828 3.66211 4.50195 6.10352 6.10352 6.10352 0 ]xsh68.1318 143.713 mo(B. Moskowitz in Banerjee \(1991\))[6.30371 2.49023 2.98828 8.82813 5.25879 4.86816 5.40039 5.25879 6.84082 2.80273 4.71191 5.38086 2.98828 2.80273 5.23438 2.98828 6.30371 5.11719 5.23438 5.47852 4.80469 4.0332 5.47852 5.47852 2.98828 3.66211 4.50195 6.10352 6.10352 4.50195 0 ]xsh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 103 /gamma putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/gamma <1C60D8A8C9B7008A3A0EFB71605BA289C3389E816E5BBC7B37B250C1365494EB08602339277040EDBB35377B15017F7085057A5D1530EB7379FECC8DE81AB99F1158C5A70EAF6F0A3BFAB6E84AE57696AE698B3300E6D81D6002AE429E05055143F9A48613315D0BA37D4C3F52FF6E15ABFC6465F366AA57D2C19AE383210D2FAEAB7ABF443A9ECA3AC886CB8C0ECEA9298C926581B4B1F5E56447> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSC+Symbol /Symbol findfont ct_VMDictPut/PESGSC+Symbol*1 [103{/.notdef}rp /gamma 152{/.notdef}rp]PESGSC+Symbol nfPESGSC+Symbol*1 [12 0 0 -12 0 0 ]msf206.632 188.213 mo(g)sh%ADOBeginSubsetFont: Myriad-Roman Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Myriad-Roman def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def/Weight (Regular) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 48 /zero putdup 51 /three putdup 54 /six putdup 57 /nine putdup 61 /equal putdef/UniqueID 41987 def/FontBBox {-46 -250 1126 831} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 674 685 484 496 650 661 710 721] def/OtherBlues [261 266 -200 -194 -221 -212] def/FamilyBlues [-11 0 674 685 484 496 650 661 710 721] def/FamilyOtherBlues [261 266 -200 -194 -221 -212] def/BlueScale 0.0604582 def/BlueShift 7.09999 def/StdHW [67] def/StdVW [88] def/StemSnapH [67 73] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/space <1C60D8A8C9B896187A> |-/period <1C60D8A8C9B89DB75D5B8735E93D1994D05426F465DBCB298CF353AB931749A92D5FCFB5070125EF1BF1> |-/zero <1C60D8A8C9B7BA8F4DE47D81087F07C8C29DE694F434CEABCB7B06FEFD718676E5BAAE98169477024EBF8F274B8E0BB63321B197E44D9F7019B79D36CBA8E5BA13181F0C598767F1A47178F25668BBF84EF6C6C7BC5E2097565284A6> |-/three <1C60D8A8C9B7BA8F1526653E357F812E685980A8FD526EAB670B9138069540308D4556AEA6EDBBEB043E9C3AE3E67FE618A5F08B0F52B06CAC81EB6F82C8CA29968AED72565382029C0B625529C5EFC682311825D243CF5588AF8735395622840A11D9D2F28041758767C914B5D98CB32A69DDADE58DA3F8F63FA7C560B051E788F602CCA6376ED93E5EEFF65B716EBA37CA758F61A30141> |-/six <1C60D8A8C9B7BA8F4F4147EF9CC1F9D2C0473B5CAB190345437729CBBC0726D16BC606AE3147650E86152A53D0DFDBE6350EF6EE15F41A268C7359154B80EB46F2161D8623F4B780196C630E25AEA715C6AC263078C1747EA258237115ABF977F47316CF0ECACF43F140388696A65CB9038A9600C9B2E642994817AAA9EADBC0D7BD245677D55BC0E33FA2E3> |-/nine <1C60D8A8C9B7BA8F51A37DCF9E9CEB5FFFA5B816FE5D9CAF9BB5B9FE831787DFFAA0257528671D52F14F30D12AAD0E94FE3AB6B84E37C0AD618F918C155D2BD34F346C80E38E8D71C162E36EE373320F17283887C1E4F5FD2E003EAA79BC23F107EB283BC0A9F73E83F70388EB6A6C34FA3AE144AB6AAFA02D17EA05ECDEB9180077749B5F2E389C73A96D8BFF8428> |-/equal <1C60D8A8C9B7C7F3EFF67BF3D36FDBE32BB3495D70A189A82F9DC35D73B2589767C201C9B15EB205EDFB78D9E62DC4> |-/.notdef <1C60D8A8C9B896187A> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSD+Myriad-Roman /Myriad-Roman findfont ct_VMDictPut/PESGSD+Myriad-Roman*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 2{/.notdef}rp /three 2{/.notdef}rp /six 2{/.notdef}rp /nine 3{/.notdef}rp /equal 194{/.notdef}rp]PESGSD+Myriad-Roman nfPESGSD+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf211.564 188.213 mo( = 0.39)[2.54395 7.15186 2.54395 6.15576 2.48389 6.15576 0 ]xshPESGSC+Symbol*1 [12 0 0 -12 0 0 ]msf206.632 173.713 mo(g)shPESGSD+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf211.564 173.713 mo( = 0.36)[2.54395 7.15186 2.54395 6.15576 2.48389 6.15576 0 ]xshgsave
80.1318 167.956 mo
168.132 167.956 li
168.132 191.157 li
80.1318 191.157 li
80.1318 167.956 li
cp
clp
gsave
80.1318 191.157 mo
167.933 191.157 li
167.933 167.892 li
80.1318 167.892 li
80.1318 191.157 li
cp
clp
gsave
80.1318 191.157 mo
167.933 191.157 li
167.933 167.892 li
80.1318 167.892 li
80.1318 191.157 li
cp
clp
%ADOBeginSubsetFont: CMMI10 Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 77 /M putdup 84 /T putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/M <1C60D8A8C9B6D9EA19A14B847D0E8EB8BF4B471CD7A6A1199FBF0367BA3210A68B70701B9284BFB2267E01EDF19411682FDEA0A61E4E1B02AB19A085A090981D7B2D5305D7BA8D88FBD7AADFDB7642CCF5DD11DBF6878FEF2B11C57265F73526C5EBB1D5352B9863C29DD2C5087C1526E4892F6303AB66F633145B0858E108CA9CCC75D7B9048852C503CE8C743045EB51C68873A60D6BB517AD466CC06BF4> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSE+CMMI10 /CMMI10 findfont ct_VMDictPut/PESGSE+CMMI10*1 [77{/.notdef}rp /M 6{/.notdef}rp /T 171{/.notdef}rp]PESGSE+CMMI10 nfPESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf81.5942 175.16 mo(M)sh%ADOBeginSubsetFont: CMMI7 Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CMMI7 def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 115 /s putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/s <1C60D8A8C9B70FAD6F31E6985339BF1E83F7AE60D35F00D12D254421A910254A631180139D8657646BEFE6F4E230D67403BE5D54183419D174C6F3CC672FE0922A5983FC4713FC0C33086E01CB29AB5EA82B559EB0CB9E6675519A48B6C99CE7F0B78BC22FE4480BA1B895> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSF+CMMI7 /CMMI7 findfont ct_VMDictPut/PESGSF+CMMI7*1 [115{/.notdef}rp /s 140{/.notdef}rp]PESGSF+CMMI7 nfPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf90.8726 176.614 mo(s)sh%ADOBeginSubsetFont: CMR10 Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CE3F6788F74B615B747D0C4950E0757D67CC4B6F86A79106B4F6AF8262CBC77CA155FEEB> |-/parenright <1C60D8A8C9B84E0A47D7FED609B36B98A489D0C883687FC8C4BD7FF8A57C9949E56F26DF53030280BC0E024A6F3F65DFBA65966BEA7D55AEB539EB378E> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSG+CMR10 /CMR10 findfont ct_VMDictPut/PESGSG+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]PESGSG+CMR10 nfPESGSG+CMR10*1 [9.56406 0 0 -9.68777 0 0 ]msf94.9604 175.16 mo(\()shPESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf98.6802 175.16 mo(T)shPESGSG+CMR10*1 [9.56406 0 0 -9.68777 0 0 ]msf105.597 175.16 mo(\))sh0.770051 lw
10 ml
80.1318 179.286 mo
110.78 179.286 li
@
PESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf80.1313 188.359 mo(M)sh%ADOBeginSubsetFont: CMMI7 AddGlyphs
%ADOt1write: (1.0.24)systemdict beginPESGSF+CMMI7 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/o <1C60D8A8C9B7967683396363C51B2F1979461F3A00FDA36B3FB5488A82D64C89239EA1345F90503AC4C4937CA1D31AE0456BBFC2CD7E6DF92400B629A703DCCA1CE977B1CE09DA127A889A27E67B6982945251> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSF+CMMI7 /Encoding getdup 111 /o putpop%ADOEndSubsetFont
/PESGSF+CMMI7*1 [111{/.notdef}rp /o 3{/.notdef}rp /s 140{/.notdef}rp]PESGSF+CMMI7 nfPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf89.4102 189.813 mo(s)sh%ADOBeginSubsetFont: CMR10 AddGlyphs
%ADOt1write: (1.0.24)systemdict beginPESGSG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7C7F3AB181AB0C0D4CCBD039E0B840C2FD0290F361F5FADEFB5C66FFFF03997F6A3C47D6E28F621A8DA> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSG+CMR10 /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/PESGSG+CMR10*1 [40{/.notdef}rp /parenleft /parenright 19{/.notdef}rp /equal 194{/.notdef}rp]PESGSG+CMR10 nfPESGSG+CMR10*1 [9.56406 0 0 -9.68777 0 0 ]msf93.498 188.359 mo(\()shPESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf97.2173 188.359 mo(T)shPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf102.806 189.813 mo(o)shPESGSG+CMR10*1 [9.56406 0 0 -9.68777 0 0 ]msf107.06 188.359 mo(\))sh114.583 181.715 mo(=)sh128.515 185.091 mo
128.343 185.091 127.721 184.354 127.625 184.237 cv
126.373 182.601 126.133 180.652 126.133 179.276 cv
126.133 177.116 126.755 175.372 127.731 174.2 cv
127.855 174.054 128.372 173.473 128.515 173.473 cv
128.554 173.473 128.63 173.473 128.63 173.569 cv
128.63 173.589 128.63 173.608 128.544 173.696 cv
127.396 174.955 126.793 176.738 126.793 179.286 cv
126.793 180.188 126.879 181.186 127.1 182.067 cv
127.501 183.646 128.151 184.431 128.592 184.905 cv
128.611 184.935 128.63 184.954 128.63 184.993 cv
128.63 185.091 128.554 185.091 128.515 185.091 cv
cp
f
PESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf130.21 175.159 mo(T)sh%ADOBeginSubsetFont: CMMI7 AddGlyphs
%ADOt1write: (1.0.24)systemdict beginPESGSF+CMMI7 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C7596B2C0CA5D427D1A2992AF5BF4D94EE82845832F4DD4400321814ECD5D3CE66072F7E5E7C5430EC469D5F7161571A32A96A021C1AB03ECA050447FC0A> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSF+CMMI7 /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/PESGSF+CMMI7*1 [99{/.notdef}rp /c 11{/.notdef}rp /o 3{/.notdef}rp /s 140{/.notdef}rp]PESGSF+CMMI7 nfPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf135.799 176.613 mo(c)sh%ADOBeginSubsetFont: CMSY10 Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /minus putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B7C7F3ABB826E15B690A825D82678822A19F9ADCECD0A582> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSH+CMSY10 /CMSY10 findfont ct_VMDictPut/PESGSH+CMSY10*1 [127{/.notdef}rp /minus 128{/.notdef}rp]PESGSH+CMSY10 nfPESGSH+CMSY10*1 [9.56406 0 0 -9.68777 0 0 ]msf141.821 175.159 mo(\177)shPESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf151.385 175.159 mo(T)sh130.211 179.286 mo
158.303 179.286 li
@
PESGSE+CMMI10*1 [9.56406 0 0 -9.68777 0 0 ]msf139.514 188.358 mo(T)shPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf145.103 189.813 mo(c)sh160.771 184.363 mo
160.656 184.499 160.13 185.091 159.986 185.091 cv
159.938 185.091 159.871 185.071 159.871 184.993 cv
159.871 184.974 159.871 184.954 159.958 184.867 cv
160.445 184.325 161.01 183.55 161.373 182.192 cv
161.622 181.243 161.708 180.255 161.708 179.276 cv
161.708 178.376 161.622 177.378 161.402 176.496 cv
161.01 174.955 160.388 174.171 159.929 173.667 cv
159.891 173.638 159.871 173.608 159.871 173.569 cv
159.871 173.492 159.938 173.473 159.986 173.473 cv
160.158 173.473 160.78 174.209 160.876 174.325 cv
162.129 175.963 162.368 177.911 162.368 179.286 cv
162.368 181.446 161.746 183.19 160.771 184.363 cv
cp
f
%ADOBeginSubsetFont: CMMI7 AddGlyphs
%ADOt1write: (1.0.24)systemdict beginPESGSF+CMMI7 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/gamma <1C60D8A8C9B74B0CB61E74D9DDDBF88EFCAC72064825E0DD8A56D8E21903A806C304A0EA11AAA9C061A5D1E6D2A4D47841C64AEB3F1833B805DCA3A1B6BEAAC9F78F523EF30AB3F103643F80E9810849F942B778BC63D573CE1276CA1CF74DC7E6C866B0B9D26F3415340AACD3> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSF+CMMI7 /Encoding getdup 32 /gamma putpop%ADOEndSubsetFont
/PESGSF+CMMI7*1 [32{/.notdef}rp /gamma 66{/.notdef}rp /c 11{/.notdef}rp /o 3{/.notdef}rp /s 140{/.notdef}rp]PESGSF+CMMI7 nfPESGSF+CMMI7*1 [6.69482 0 0 -6.78142 0 0 ]msf163.833 175.874 mo( )shgrestore
grestore
grestore
[6 6 ] 0 dsh
183.132 164.8 mo
183.132 164.8 198.367 169.3 201.632 172.112 cv
0 0.992157 1 0 cmyk
@
184.132 177.3 mo
184.132 177.3 199.367 181.8 202.632 184.612 cv
0.87451 0.243137 1 0.129412 cmyk
@
41.2607 4.74512 mo
44.6089 5.64063 li
47.9565 6.54199 li
51.3047 7.44824 li
54.6528 8.36133 li
58.0005 9.28027 li
61.3486 10.2041 li
64.6968 11.1338 li
68.0449 12.0713 li
71.3926 13.0137 li
74.7407 13.9619 li
78.0889 14.918 li
81.4365 15.8799 li
84.7847 16.8486 li
88.1328 17.8242 li
91.481 18.8066 li
94.8286 19.7959 li
98.1768 20.793 li
101.525 21.7979 li
104.872 22.8086 li
108.221 23.8281 li
111.569 24.8545 li
114.917 25.8896 li
118.265 26.9336 li
121.612 27.9854 li
124.961 29.0449 li
128.309 30.1133 li
131.657 31.1904 li
135.005 32.2773 li
138.353 33.373 li
141.7 34.4775 li
145.049 35.5928 li
148.397 36.7178 li
151.745 37.8525 li
155.093 38.998 li
158.44 40.1533 li
161.788 41.3213 li
165.137 42.499 li
168.485 43.6885 li
171.833 44.8896 li
175.181 46.1025 li
178.528 47.3281 li
181.877 48.5664 li
185.225 49.8184 li
188.573 51.083 li
191.921 52.3623 li
195.269 53.6553 li
198.616 54.9629 li
201.965 56.2861 li
205.313 57.624 li
208.661 58.9795 li
212.009 60.3506 li
215.356 61.7393 li
218.704 63.1445 li
222.053 64.5693 li
225.401 66.0127 li
228.749 67.4756 li
232.097 68.96 li
235.444 70.4648 li
238.792 71.9912 li
242.141 73.542 li
245.489 75.1152 li
248.837 76.7139 li
252.185 78.3389 li
255.532 79.9893 li
258.881 81.6689 li
262.229 83.3779 li
265.577 85.1182 li
268.925 86.8906 li
272.272 88.6973 li
275.62 90.54 li
278.969 92.4199 li
282.317 94.3408 li
285.665 96.3037 li
289.013 98.3105 li
292.36 100.366 li
295.708 102.473 li
299.058 104.633 li
302.405 106.852 li
305.753 109.132 li
309.101 111.479 li
312.448 113.9 li
315.796 116.4 li
319.146 118.986 li
322.493 121.667 li
325.841 124.451 li
329.188 127.352 li
332.536 130.382 li
335.884 133.558 li
339.233 136.898 li
342.581 140.432 li
345.929 144.186 li
349.276 148.205 li
352.624 152.544 li
355.974 157.279 li
359.321 162.525 li
362.669 168.457 li
366.017 175.383 li
369.364 183.912 li
372.712 195.707 li
@
55.7822 5.86426 mo
57.9673 9.64941 li
53.5972 9.64941 li
55.7822 5.86426 li
cp
f
[] 0 dsh
55.7822 5.86426 mo
57.9673 9.64941 li
53.5972 9.64941 li
55.7822 5.86426 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
70.8496 8.99512 mo
73.0347 12.7793 li
68.6646 12.7793 li
70.8496 8.99512 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
70.8496 8.99512 mo
73.0347 12.7793 li
68.6646 12.7793 li
70.8496 8.99512 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
84.4092 12.1201 mo
86.5942 15.9053 li
82.2241 15.9053 li
84.4092 12.1201 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
84.4092 12.1201 mo
86.5942 15.9053 li
82.2241 15.9053 li
84.4092 12.1201 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
100.224 16.7969 mo
102.409 20.5811 li
98.0391 20.5811 li
100.224 16.7969 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
100.224 16.7969 mo
102.409 20.5811 li
98.0391 20.5811 li
100.224 16.7969 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
113.776 21.4668 mo
115.962 25.251 li
111.592 25.251 li
113.776 21.4668 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
113.776 21.4668 mo
115.962 25.251 li
111.592 25.251 li
113.776 21.4668 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
128.841 25.3682 mo
131.026 29.1533 li
126.655 29.1533 li
128.841 25.3682 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
128.841 25.3682 mo
131.026 29.1533 li
126.655 29.1533 li
128.841 25.3682 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
144.656 30.0449 mo
146.841 33.8291 li
142.472 33.8291 li
144.656 30.0449 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
144.656 30.0449 mo
146.841 33.8291 li
142.472 33.8291 li
144.656 30.0449 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
158.209 34.7139 mo
160.394 38.499 li
156.024 38.499 li
158.209 34.7139 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
158.209 34.7139 mo
160.394 38.499 li
156.024 38.499 li
158.209 34.7139 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
173.264 40.9326 mo
175.448 44.7168 li
171.079 44.7168 li
173.264 40.9326 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
173.264 40.9326 mo
175.448 44.7168 li
171.079 44.7168 li
173.264 40.9326 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
188.315 47.9209 mo
190.5 51.7061 li
186.13 51.7061 li
188.315 47.9209 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
188.315 47.9209 mo
190.5 51.7061 li
186.13 51.7061 li
188.315 47.9209 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
202.622 52.5928 mo
204.808 56.3779 li
200.437 56.3779 li
202.622 52.5928 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
202.622 52.5928 mo
204.808 56.3779 li
200.437 56.3779 li
202.622 52.5928 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
216.926 58.0361 mo
219.11 61.8213 li
214.741 61.8213 li
216.926 58.0361 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
216.926 58.0361 mo
219.11 61.8213 li
214.741 61.8213 li
216.926 58.0361 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
231.978 65.0264 mo
234.162 68.8105 li
229.792 68.8105 li
231.978 65.0264 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
231.978 65.0264 mo
234.162 68.8105 li
229.792 68.8105 li
231.978 65.0264 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
246.271 72.7842 mo
248.456 76.5693 li
244.086 76.5693 li
246.271 72.7842 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
246.271 72.7842 mo
248.456 76.5693 li
244.086 76.5693 li
246.271 72.7842 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
260.568 79.7725 mo
262.753 83.5566 li
258.383 83.5566 li
260.568 79.7725 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
260.568 79.7725 mo
262.753 83.5566 li
258.383 83.5566 li
260.568 79.7725 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
276.37 87.5352 mo
278.556 91.3203 li
274.185 91.3203 li
276.37 87.5352 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
276.37 87.5352 mo
278.556 91.3203 li
274.185 91.3203 li
276.37 87.5352 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
289.897 98.3789 mo
292.082 102.164 li
287.712 102.164 li
289.897 98.3789 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
289.897 98.3789 mo
292.082 102.164 li
287.712 102.164 li
289.897 98.3789 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
298.171 103.033 mo
300.356 106.818 li
295.987 106.818 li
298.171 103.033 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
298.171 103.033 mo
300.356 106.818 li
295.987 106.818 li
298.171 103.033 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
304.935 108.455 mo
307.12 112.24 li
302.751 112.24 li
304.935 108.455 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
304.935 108.455 mo
307.12 112.24 li
302.751 112.24 li
304.935 108.455 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
312.446 115.423 mo
314.632 119.207 li
310.261 119.207 li
312.446 115.423 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
312.446 115.423 mo
314.632 119.207 li
310.261 119.207 li
312.446 115.423 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
319.214 120.073 mo
321.397 123.857 li
317.028 123.857 li
319.214 120.073 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
319.214 120.073 mo
321.397 123.857 li
317.028 123.857 li
319.214 120.073 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
326.718 128.584 mo
328.901 132.369 li
324.532 132.369 li
326.718 128.584 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
326.718 128.584 mo
328.901 132.369 li
324.532 132.369 li
326.718 128.584 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
333.478 134.777 mo
335.663 138.563 li
331.292 138.563 li
333.478 134.777 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
333.478 134.777 mo
335.663 138.563 li
331.292 138.563 li
333.478 134.777 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
339.483 140.969 mo
341.669 144.754 li
337.298 144.754 li
339.483 140.969 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
339.483 140.969 mo
341.669 144.754 li
337.298 144.754 li
339.483 140.969 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
344.735 147.158 mo
346.921 150.943 li
342.552 150.943 li
344.735 147.158 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
344.735 147.158 mo
346.921 150.943 li
342.552 150.943 li
344.735 147.158 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
350.733 155.666 mo
352.917 159.45 li
348.548 159.45 li
350.733 155.666 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
350.733 155.666 mo
352.917 159.45 li
348.548 159.45 li
350.733 155.666 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
356.729 164.172 mo
358.915 167.957 li
354.544 167.957 li
356.729 164.172 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
356.729 164.172 mo
358.915 167.957 li
354.544 167.957 li
356.729 164.172 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
62.7227 125.172 mo
64.9082 128.957 li
60.5371 128.957 li
62.7227 125.172 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
62.7227 125.172 mo
64.9082 128.957 li
60.5371 128.957 li
62.7227 125.172 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
362.706 177.311 mo
364.892 181.095 li
360.521 181.095 li
362.706 177.311 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
362.706 177.311 mo
364.892 181.095 li
360.521 181.095 li
362.706 177.311 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
364.938 184.262 mo
367.124 188.047 li
362.753 188.047 li
364.938 184.262 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
364.938 184.262 mo
367.124 188.047 li
362.753 188.047 li
364.938 184.262 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
367.913 194.304 mo
370.099 198.089 li
365.728 198.089 li
367.913 194.304 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
367.913 194.304 mo
370.099 198.089 li
365.728 198.089 li
367.913 194.304 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
370.874 207.433 mo
373.058 211.217 li
368.688 211.217 li
370.874 207.433 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
370.874 207.433 mo
373.058 211.217 li
368.688 211.217 li
370.874 207.433 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
373.835 220.562 mo
376.021 224.346 li
371.651 224.346 li
373.835 220.562 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
373.835 220.562 mo
376.021 224.346 li
371.651 224.346 li
373.835 220.562 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
376.062 229.058 mo
378.245 232.842 li
373.876 232.842 li
376.062 229.058 li
cp
0.87451 0.243137 1 0.129412 cmyk
f
376.062 229.058 mo
378.245 232.842 li
373.876 232.842 li
376.062 229.058 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
45.21 2.76514 mo
45.21 6.3335 li
41.6421 6.3335 li
41.6421 2.76514 li
45.21 2.76514 li
cp
0.882353 0.768627 0 0 cmyk
f
45.21 2.76514 mo
45.21 6.3335 li
41.6421 6.3335 li
41.6421 2.76514 li
45.21 2.76514 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
70.5391 7.27979 mo
70.5391 10.8481 li
66.9707 10.8481 li
66.9707 7.27979 li
70.5391 7.27979 li
cp
0.882353 0.768627 0 0 cmyk
f
70.5391 7.27979 mo
70.5391 10.8481 li
66.9707 10.8481 li
66.9707 7.27979 li
70.5391 7.27979 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
97.2192 13.7295 mo
97.2192 17.2979 li
93.6509 17.2979 li
93.6509 13.7295 li
97.2192 13.7295 li
cp
0.882353 0.768627 0 0 cmyk
f
97.2192 13.7295 mo
97.2192 17.2979 li
93.6509 17.2979 li
93.6509 13.7295 li
97.2192 13.7295 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
121.251 21.4688 mo
121.251 25.0371 li
117.684 25.0371 li
117.684 21.4688 li
121.251 21.4688 li
cp
0.882353 0.768627 0 0 cmyk
f
121.251 21.4688 mo
121.251 25.0371 li
117.684 25.0371 li
117.684 21.4688 li
121.251 21.4688 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
145.257 26.6284 mo
145.257 30.1968 li
141.688 30.1968 li
141.688 26.6284 li
145.257 26.6284 li
cp
0.882353 0.768627 0 0 cmyk
f
145.257 26.6284 mo
145.257 30.1968 li
141.688 30.1968 li
141.688 26.6284 li
145.257 26.6284 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
171.971 36.3027 mo
171.971 39.8711 li
168.402 39.8711 li
168.402 36.3027 li
171.971 36.3027 li
cp
0.882353 0.768627 0 0 cmyk
f
171.971 36.3027 mo
171.971 39.8711 li
168.402 39.8711 li
168.402 36.3027 li
171.971 36.3027 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
197.362 46.6221 mo
197.362 50.1904 li
193.794 50.1904 li
193.794 46.6221 li
197.362 46.6221 li
cp
0.882353 0.768627 0 0 cmyk
f
197.362 46.6221 mo
197.362 50.1904 li
193.794 50.1904 li
193.794 46.6221 li
197.362 46.6221 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
224.09 57.5864 mo
224.09 61.1548 li
220.521 61.1548 li
220.521 57.5864 li
224.09 57.5864 li
cp
0.882353 0.768627 0 0 cmyk
f
224.09 57.5864 mo
224.09 61.1548 li
220.521 61.1548 li
220.521 57.5864 li
224.09 57.5864 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
64.5068 111.638 mo
64.5068 115.206 li
60.9385 115.206 li
60.9385 111.638 li
64.5068 111.638 li
cp
0.882353 0.768627 0 0 cmyk
f
64.5068 111.638 mo
64.5068 115.206 li
60.9385 115.206 li
60.9385 111.638 li
64.5068 111.638 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
250.853 71.7759 mo
250.853 75.3438 li
247.284 75.3438 li
247.284 71.7759 li
250.853 71.7759 li
cp
0.882353 0.768627 0 0 cmyk
f
250.853 71.7759 mo
250.853 75.3438 li
247.284 75.3438 li
247.284 71.7759 li
250.853 71.7759 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
281.606 85.9644 mo
281.606 89.5327 li
278.038 89.5327 li
278.038 85.9644 li
281.606 85.9644 li
cp
0.882353 0.768627 0 0 cmyk
f
281.606 85.9644 mo
281.606 89.5327 li
278.038 89.5327 li
278.038 85.9644 li
281.606 85.9644 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
308.417 104.668 mo
308.417 108.237 li
304.849 108.237 li
304.849 104.668 li
308.417 104.668 li
cp
0.882353 0.768627 0 0 cmyk
f
308.417 104.668 mo
308.417 108.237 li
304.849 108.237 li
304.849 104.668 li
308.417 104.668 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
327.21 120.147 mo
327.21 123.716 li
323.642 123.716 li
323.642 120.147 li
327.21 120.147 li
cp
0.882353 0.768627 0 0 cmyk
f
327.21 120.147 mo
327.21 123.716 li
323.642 123.716 li
323.642 120.147 li
327.21 120.147 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
344.7 138.206 mo
344.7 141.774 li
341.132 141.774 li
341.132 138.206 li
344.7 138.206 li
cp
0.882353 0.768627 0 0 cmyk
f
344.7 138.206 mo
344.7 141.774 li
341.132 141.774 li
341.132 138.206 li
344.7 138.206 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
371.724 176.903 mo
371.724 180.472 li
368.155 180.472 li
368.155 176.903 li
371.724 176.903 li
cp
0.882353 0.768627 0 0 cmyk
f
371.724 176.903 mo
371.724 180.472 li
368.155 180.472 li
368.155 176.903 li
371.724 176.903 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSB+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/ampersand <1C60D8A8C9B643FE9738112D292B54B22CF345CBDB88E81AB9E14F950A65BE7591F5349811B4D0CE86755D490F183582FD2F96B639F0379241CD279C41A6FFD0AD17864D31AEFBB150272477024A07F65400C300039BB269049F75FE57EB6F26D846A59391A5B0C1F27C6EA0DD785F6D4A2C798160B07D350237470A1CD1D8631145771CD1604A542C661E8E016802C129CEB28EA01ED374DE1514A58D884D429C1E66885FEE286ACE23470900AAE21048D402A035DF415067EF627F4AFF594756115CD3575FA0D8794B3CF8746E3E2A4D89C71E6BDE0442919F6151021539FB85B0225EB716C376BE5A3CE820D2F036017466C68C16E3EA3610874B9D6D82F640FEFF361051AE90C3427097BF> |-/five <1C60D8A8C9B7D98F6D54D48ED68EA6CF969F0E5B50A1A83CDD96ED54CE7E034617721CFF9E66FC1EED4AF925D2EABE5F3887295B9694FAE87E5068EF00B2E19BB68346DFF7F2616719067C9E31024F97634B80D817FACCB1FF4B22DB7BC4AE86BF0B2C1A9A0C794826FE65E1181EB10541F6D1BC25C237A065541FED0BE699DBCA3EC8C9BDA955EC7075994950DCC22C238275A937278BA07424607EEB10C1AE2226536CB6BDB9CC86C61FE2B4A63BB08CE3F5FF5E415AB86FFD87E55E1E4FB7393915DC53D001D3942F0A19EBE33E976F335D27A4E9FA42922038F9E9924E840CA20833DB114F82CEFD215963C9F09A5A31BEE9615AEB04B263C62CEE55CBD81DC2A323B20160F4BB153DCC4119196063B9B3AFABF0E64C37924ADEBA5A73CF27B225CFA4A00591BD57F0> |-/P <1C60D8A8C9B7B202A52865A9F3C88AF95BF7A4F54D680DD7C54822E5BEADA7225F1A1670EB558A170B9E3BA429D4E5C1ADD94CB40C9A15E7A8CCC05E92EA8B0358D5B8430B67FFDFA5F8F742D1081767B654F7EE148ECF84C987C9CA0747CCC899F01600CC34C28344A10C25EBF2F7876BF30D9E25BE938EAB4F41CAF28134848ACEC42218985D0F14D0A3FBFD5555B69192CCF3A02303B11B4686510CE8D8DC6FAE96D370BB0CF07E19B63533C65CA624DEAF822D7CAA14306D7136600E> |-/h <1C60D8A8C9B7F942331D263A3CFBA3B9EBF03F980E00D0F1D27326C82FFD201AECBD022977AA1E0D941B50CF40E2252C13449F1B526768F4FF8F3B35D635BA79049C632C8D93F40FA3D65B4919DC249999AF595543B05BB9E3D553D6A4D06BC3071066915C6AADEE1777A88F11E51EFD7CACCB4548865877FDF6CCFA4354CAC26FDBD4DD9BCB32241000DBC1885716260CE6C2F8CA8BFCAD463770D7B8A9C86F4DCBF5E02D8934AC4CA9D3F2ADF013F9C85E9FCF15B65F105FF737947A93A60146633ED9F20D919596A73A57C422CA8CB2588E395D294B3A8FDF5162BB0F2955418BC69D1C2B1DA52DCF8528385D883EFC6D36000E> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSB+ComicSansMS /Encoding getdup 38 /ampersand putdup 53 /five putdup 80 /P putdup 104 /h putpop%ADOEndSubsetFont
/PESGSB+ComicSansMS*1 [32{/.notdef}rp /space 5{/.notdef}rp /ampersand /.notdef /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /.notdef /four /five /six /.notdef /eight /nine 8{/.notdef}rp /B 10{/.notdef}rp /M /N /.notdef /P 3{/.notdef}rp /T 2{/.notdef}rp /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /j /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]PESGSB+ComicSansMS nfPESGSB+ComicSansMS*1 [10 0 0 -10 0 0 ]msf70.1318 117.212 mo(Pauthenet & Bochirol \(1951\))[5.20508 5.11719 5.2002 4.71191 5.77637 5.47852 5.23438 5.47852 4.71191 2.98828 6.54297 2.98828 6.30371 5.25879 5.13672 5.77637 2.80273 4.80469 5.25879 2.73926 2.98828 3.66211 4.50195 6.10352 6.10352 4.50195 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PESGSH+CMSY10*1 uf/PESGSH+CMSY10 uf/CMSY10 uf/PESGSE+CMMI10*1 uf/PESGSE+CMMI10 uf/CMMI10 uf/PESGSG+CMR10*1 uf/PESGSG+CMR10 uf/CMR10 uf/PESGSF+CMMI7*1 uf/PESGSF+CMMI7 uf/CMMI7 uf/PESGSB+ComicSansMS*1 uf/PESGSB+ComicSansMS uf/ComicSansMS uf/PESGSD+Myriad-Roman*1 uf/PESGSD+Myriad-Roman uf/Myriad-Roman uf/PESGSC+Symbol*1 uf/PESGSC+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (curie.eps)%%CreationDate: 1/4/09 8:58 AM%AI9_DataStream%Gb".!LKZ2iZ7l^e2rK%uJ-"gCNdu0R%%*Q;'B"QX%XVg6eULRsX-5V*nF&C#4fi;LmV]F!WN&opnp'`Cfq@.AI--4ahVSkgac/hb%fSGC$7U1b[4J$<^Z89mp$&Pp?J-A=1.(g-*q2d!MG^(MAG@Cl'Y;g@CqOPI04s%-nP=]38)ic<C)hl$GK8n@"-Tl*Z4EPn_iP.;A%]gh<loh'KhQt"Ildj(H:qgS)l0)`AGmp/)\T>Q,eFk%=&:9Vb3l/1N=UE-uep)=*Sj6H)^F4aDKEA\\pHJM?npR95F7Gl8D?Dfn*%pD_S@A;J-M]^V5ZFaNM^=hiW-mr(V4#i6?S#^gM:!#Xo/rhd/c#-Ha`h5LL03pi\+4J(J`p`'$WeX90@<aYniZs>Y>3)N%iItJ-J%,=tX\moV[a&UEr"M^B)+,K]Jt(r*?MFP6KV:8['kZo]8?G\OM9Sc5S>R!-Pu7g)!ih2!DQ+YLn`FI,mN(apiV$aEM`&kQmF4J5(t%)Vp5@O\eB#$6.*31*ck2co2[2kkruur+dBnU=C8XLQa@uML)a#@@/!0YIa`7W$ER7.$7%I2L%F-Kq_G95/3W\3oc\q(T1-G>=i#7%l*0".&\prFP^<jm'M&/mdPq*!"g/g)cd!5$IFt#4,bR:qH3A:hC]*!+:Sc^-Ds*n@i-KW@qONR``8_Hn%tI.%i5MM%&WcK%6B'D8%")pg@nt]-^5?J$%cRMDCX2BmfO1V%?_7il$r`0n\gWD(fKoH66+T2fs<<&0K5OBYRFuo"!Ub2c'!=m<GE*N[r(E9m`!_aRj\d0c/%YlUeS`1%"%(_dq<#(Q`I]i"1pHR&Rb'TnH/5>fAF=:@EX8c1+RfNh@mDc+HNU52T6OZk@`nSS,'/;C!10t`C_YZ*0.V.-]MRFR^!%@[Ua>b9Z$WhbGN'<&0<,n/$O_WBpVY'aj_JTn#oG"Y<S)j3r$/(;mW)AUIf:ds#JdBn'iHBT)L3^<)t)U<A1]=:3*%T3)H@`(!@k%iJ?t:bM\3G'?A??6/TX9i?qsjM!u'nU2Zhaj,!1<a,Su$(WV2G;J=MPYnW3+5I!nmN;)!&@*^9\.244qn<:RX7o"D,qbI#X>K<>A%3FX;u+-se6i@!2EB98.B5,0oghcL6+a(C]*Kt`K*_b[q^dF%d1:YKm&K:c6Qa+p:/(+GPG\C1)U7>:osF+unqc=m5+e?K^A)hSM=%3UK!'SG%lL95A/278'jL/;'^-R#.TU\*9jU;]Hm.@O[2l3'IZ_qC[5+)'#3j__@S-%YYm>JRURU@>69@gT]iT;^a7P\mTSOiD+_i%Tha@=E5S9R).@$MIE,6eF]pkTT0B0&[-*Z/.5oX8Vm)jPPfY#d?\R4u4"_&=<e[grS.sbVfZinl_*<<O_');4at,=s/+\9S@Z\O;%'kjhcZMq.QBta.5T'+0:IT*Dj97MOYT.&Uh0+su1auB9?H!p.bJ''_KMoY(inkK,s$$r.5YdP4n?S4j@.,XYMT;U;`2uRfCMFDh]%q5/Y<'"q>[koV;Q;1=OHLS&Zpkr$)Ih_75;;M[`a71LH-9AmL.OZpr7Ert,G`o0K'IRSs8OZn[)oRoWFkjlZMoPQ:4T8S-XgZglI%LU`O,BfT9>QY=jBm0JZQa<bg'p^]kgTg>>J(:\BO)EhJ^OG'ob!jQ3&Uu-Qa^lHp,,QDHe\HIOu4=7u["J9`<CZ5s:j4c;K["UXl%WU%BLjS2%o?5/:l$YE(kQcd9\5q5lt=s3d[EnL+W5*hj_"=<Y3c.Fp'9D_^3IACdOi9`:aNp>rl"o9a<+I&7G;%s0F;+]T<^=R`P%+N+ZW,Qc*m_\f<Q"[Ia,VV_Mo3P6$eb6]dn+bmDRP-b@X`>O<6pf9Ku`GooqBGo"Tk'E!$b.1D&SkB>X9#isBI)%fUID5q&8X.G`%&/X?+?AP\"V1'RWH;*U^F--O?Q"#E=X##OE"`0$\'9PC-TuIX%s)R?l6A4(fA?M#h:Y:&Q3JLC5Rf9$`$CDEln-a$J?BtS0Oojh\%a9D(9Qt(54knS\Hg5QG+SCIu.3'&f<(5ZGR3?B=p``]>V,M=a(%iN"LIDcj;/8uH%P#t#=)_oLha%qTC8B5b_&N[L:&uc!JfJp_f%GU/Ld)-j#aVuU`_V0Wf2OTJ4.:l<:b?V+tM<1HPH.kN?\PG:r-P]M3t&s$K"6:n/K_-GLlgl%I!`tIoE6%mZTAL%nTOQMak-CC5%%?4osZ6o#s;iijR"T8jWJ9Pst&K!ZU5E5m.!4Db<X;JCpV*-dpFF%?'AUHPM2K-Q0B'(gai,AlJQnRPD[O/UP]nIMp#e)(buGXYjA%@gRgg+L'_GF3!Pm@fY<seglWaE>TR#<hLmMQjQFtjIE'"Lbj]h$7V9]-M8pgi'VGf\.3TdHc+$J^t'e-2PgWO5,H4(i>;P(^ls@@%pe=Z&Ar=bGC5apte.a5(N#5.]8oeh;.>;Nj`A[3Kpn,A$ip?1*bTWTY@kbVkH3besA,(;-ZkQGBM@+Y\6QV4H+3D@/'6+N??K<=\%pa+Fr01bCB(R;_pN;F`h'>>h:03)aag/ZT38dIb8EdT$*f22<;LbheVT/bjF#O*VLa!:ghP-3],"(;Yk)M+T8CUd7h,-`m[8ld&m%2@=^eKjqf)[6Zhgn/kO9m6..p"CBRRBtZKD8lJhY.7q9g9=.LeRFEa;?8RN2!#bu,MH;KsiL2MhfV_'(4_:p_12_CanHOg`kNK!9%'Y/nj7=h#JR?5$G8HDoZ4O,g))DZY5L+(4q&`^X#4Pu<lL[mi4'Ek3ZBt]\.<LIu-K.IheT!KKE=f'JR35mj>\JLOAL%MfW*hr,O%(?d\Qf%qec^#F&)JL<mpjro.G]KE*\FY[<G`YH^1pdG"0m8H#FU7qq23EhHg%XgsQ'eH*s!UEjXQ3QOrKF?1\)J2l3FHf+'$(Pr#%$_(]b^<uuMVQ'l!Y9WBoj"4gK>10q'ar'>*qO@%]]L1D5_73t^(+?5m$AsuTb=g_tOfd!ORCFZ_,@84r*,Qr3dM$n)=eBf+,"Z>m%KbID!Vf3e+r?sY#@$/r^KQ1`!J$O)<+%#<gBZEToH\uUGD67Wk&Y=m6$nFi@:Zr*.-M7C^4peM-23aAO@rQ(NJasL4&#!nt.8_3N%"%eY#FI#bPR35'c"?R6tk;"^,nX%Ao/$5JT"QNVt^-r`B8%C4hF%-hM8$krbk(@E_X8GJT$ONifJc;-?Ub`?^MKd2m8c,PRQI%Ro%Q>,Nr))%+tMXl_S[t5E4Xq_A`^>V%j<R=&f0!1gf.h'=QYmBATW3rjQohl3`mV,fVJm&aWL2keQ0o"0*FN+rf&C^8oNr-iUfQSO=%jljoD]YpCWGt0DTGr(ao>(@+#ja(4((jRc,q5$RCd`T6/SjG&:+RR3[qMnCTV!o&/WZW:;#/I:oVARY1?*Y(X)6[$%>*1Mk9Ts[X%.&BQ,+^)Pp9P#+C?$QS'S?_VlQ_eYTSguB,WMDtfLTRihQ;Le<nLhBkW+IGLUusL[-?7>*@dft7K%-(0C"G*,>d1Vnog)cB<&geW%h[EDG(;Mnp4>T;)F_I:D"ii'G.Plrt]paj/qOh"E;9oX3/Q+)Fi1;6ldmAsaHB65/9\*+&:d<iR[8c?]Bo.k/[RK:%U01<P^SFt7%Pa,:89An'NN)<PHUT;.-[q\Vdd+(n=?th9]oYL;_SQc;DngdM3m1PUoWVja13TZ]OXc[_";D)9P[Eb_1_HX,sE(-XJi]kH/-"u@M%p_A(:iOM8[C,qCGF"RM6:LpN$,"4:9OO9;(NiCgWe"2cR>Eg9HeR/gEWWZg_g9j&8;Q)@R(sY.?,m5H'gJ+alam+ukdB/et"#psB%_IPscFqURb@d;Bd030Dt7>YJ'].3leC.]80[PD2;=Vo495;/e-U6-Wk3MO^9Zu)Rc`C_m8U%agP67(HN\eQ:(oM3D1'MAb%&`[f"%%:q0]+.G!k\)KiWkDV4M[6+DJI6hSn=_Y6T1&7;1%oe0n]j11oUCunm$?';6mFBqArYOQ,AjtsCC%ZsJ=hMm,XHnEj]Q0WJ7$3D,%plD4R1<r5/Eq5[EmdNp(A$RmDYZ`HYiHZdMdTS(01T=BC0hGkS1ir%)V'a3Q=F[9_L$;E+qm-3gVp?[!aM"9W`3k824_HlL<J&c!%=;B?3-0`,\UJsg$<O0Q\oU%W(TCU7&Sf"Y=Y1a)q+G407f*^A34TV6GGlkD*1JO(Tg8keW'1mg,;i:sWHnkcR)Qq.2l8;d7Tk3r+%;F6Q6$M:<q1h^B(!<#n7p+_;3_BK3Lj'cm$8Y=,>acidNF>e/&\\r%RB/Z9'-JcLNYHs@MKg3V;^H*3Y&C.\qSM<6pKQCXJ*%nTZ%m;B,Z#aZI3fsDDVRs'/G:AC=oF+nPn2]B%oK@CZS[(>;KXT-]6r&`\1b0]l%V",;%]L1OtKfeqWNp>/Tr+_R!hkanqW\Rkjb^`[]%$4gk(+Y>cTPo\"YLU8Qf>'*5lcBP'+n4YIhDL?nV`o/gtYgWof!8c\VZnq./-mkK##-3EHZX0gk%?DE;KYZe%$ubbWK6FR+:`>Mt%+/l:^D@K*cO1V#ke*qJ7BQs<4nTUAo6#J;3(f&hVO)V695+hHcP:r8MCXehJqVAt].E&t#mL6u2RJsX1XrR<[NnYWrW2_rCi9u,)%d[KjuJe_t7IAun3=_E>=C_-P'#^?:(l8AG!-X^#be`agWnlm3L+\_<O2a1k.eXc\Yg?X,[Pq*2u:9W7iiQ*CA7]R3JdE0I$a<l>#%_F)8(5o[BLme"U;6"BsMWK^]83m!Y-TAFC.s6:e[a?YqtrZM7;(cUZ;Q=f/#kp`;?\_lJ*<9FU<FCDrtH9f[4&[X?1,D)#f<p6X<%QuqC!Op`[!r>Ns.J0M.8:5,DgeaFKsN0;u,&d?Ml]mlhIf-@iQ&M8*"$_=?`A)fbN-#RCQ)g+"soMHQ?C,5%.<H$?CkVl[T`:n8,%(2L8_5u<`A'^Z6Wbm'f"nZ:V`bbdX\_a3HIghOWOY3Q],^PX)I>u,)2cMkg$4JW!lKM@^9XWb\EmVfbcO?aR!p_9$3KVeS<ht84B%)>G5!FlRd1lWjHQl7CF_>`(V-g51ULc*b!#8VV<.7WV-*F1L_D@&,%UQmD(WYHW+uSLl:AR$s[ACf@kQX,F*bF`l?72?jlL='p_?%-#"Wt;%I^7@<8\+cp1MFDu)<2FT:fbp'5$p/nkK?"a88kX#$>(HEQaf"QN7gT*'J"CF-(Dp]/qlZ56TPd2ue"jHc!4lYH@IJ=Eds%Fp?$UV4SB)DW"^QSUC/N;cp_Pc#ge5g[>5S,)`?l@an3h?/Y_2)%T#LJ9_W#rrp07?a.lZHQUPQaQ3AQhifZH`sM5tllg3Mf1rEW%#Aahj!LD3,a>fm?cO:$Y,!uHYUF`/7`o%N7*ClC\NP;&eq$tJeiPJ[J'eXZUpq$[p+fVQ'2_,?cq%>kO)WKrP$XVdtiKM8p"IHMc%^Y+A1e!V_6#63#C1Lou:]RB`IWk\I`O^3)oZ)6gk'Y7^i9^jBiDfn8&iB=hPT>8JlH*7M^icf$-_$o^k4!2@[8%pXm*$@:o`OQ@S%6t;0sgP4s-Ob+_=TU:8197r868LeW:d+WTS*S-PhhYa20-)J1`]PnfNpe=95P=F<!+m-SYZ-eTC&nIY4*:8E>G)E&cYni'R8m_@;%L&VVNN,Z0(O[n0"@r:3jaL*kE8[mS'U\c^<VuQ`<-pu+4``)Fq;'/@t+qQ)>_+YA'5TZKqm?489^l[ES#q45=oS6!4?_,2]9%XCV%EK0L5poifk8Y#^SP=C"QU-jDaL4I$9A9CI1]M"B_O`Xg'HAPUtIe@?eBm8'ZhMfIld;Y%m,TI-e!3E0UrIFE8WS]!0Q8!4@Fnk8$%"\:jCNX'5Z*r_WlOec9^>JL<<KJ`2X$c`,e]E2LJ(+g(J6#.DMODm6*)!DPsl[+Loku.NRY7:heQp-%*#K8Q^XQ@1FCWZ]?rR(9+%$$Ne9!ii',&3`dD#DNP/BD@%3JBi^XQ"q5kAC`"j=ja+D+M@j9knDo3+9FP$h*>6Z+cO"j@&dm.';2H<Q_G3df<T9>>sj83=_fMY%&f403PeAS>M#<aD'%67-Qq]dNh?pPZ8qV.1UC>ToPY6ln^#=H%K?oQ7(Ab=!$BT/TK-6N'(s"!/'E&+=\@cWP8#creG57jmeM(;\%W4KpAW_6C&UFo.kqVAUF8hPnfb;;i2,7PM&""("Fr5.aODg[QCDJIa-Gp)0?*XTAT%7MnM^/b\4;nf"U9s9fOa@5318E*`RP02!;%9h!EUia]X>&N9Eo.$H;h`+4%e;S$GJV<&G>Jk+X$`>OonAuH)QP75&45*;Y!m=pNp7N#*BnB&2/<PWa/ao`Ra+-CdV_nup,_I6ju%.r"'_7RN57WV$^rfK/M$9L!NfNUTO!XkoP`UWRg@)]]AOL9<Z@R>j8SeOCT^=*rr_ORCN>%Jg:aXas;:mtD\9Ok6nQlS0_%I;YQ6%rrC5nQ_bYDYH(fMg9IjFWeD<Jj,Nt]2Yl(:*Y*O;s0RjJDG%C[>qH$5d70\>0K:.N8C+aj(!sFS)c-M">(P,a/\o:(k1U1P=GhsC%Y1k^H^u2cY&q.2R@qC`A43IH]P'oDW91%=f8RK;'eX\aA*a%U/reAt%DdQ]\7JOS(CufJJn5lLm$bLFd^&onN`a*(:ZDnh@#rj9Q%r>UE]'eg-p,KsKM\GBs!3i'C:Y;.PPjT(9K3H'j8aF1TkA3YUZ^sBA=M;FFHN?[7]ZbBhoRO9`c6BXOK'ZoUsYWRG*2?7`J>\rcE%(^@moL<'bZNUU)Ghq8:.$J#Hbbt;pok:R!2U6MM32dAu7jSdtTE=>)2^o`*'6oIe!SmJpd2Vc!\,j"H&Z(sWGE,EB_nc@Xfr=f38%qtC5;)^*D>=EdTe.E-e4(RGO%3p4$)]Lf:5-33<ZG[QG'Fc`MOs,t+JS'HA]:DY@q^Aj70/rdBtEn0c%5?Mub?uldW;bt6b0M-h,%aG/mA,Kds/RfB"%)_0:l1oXaF/'DD!0!Vl>]*?KpX"Me>)WSTSp"n/3Vqmp:2j>k'7'*F<>-ELd*:`r]>QJi3D+IgB^sqZ0%Oa:U%LkT/#_ti$*fLGYA"*3-;.&^udL>*!s@<pMXlSg0JoG5bj9h*%"Y#GK?3kZ7E2Squ2MnSh_)ksecd[esn2l:d/Yg49!flX`D8W@'V%l0)jb5])I1m>a+P>u1n8Ele2%eR8bd5FTL0\@mG?/?/40rFtY8f^9SC&mG9Y+-`pO-OB2ZGFP8V90EgK`o@7Tp"NKJTmg"@elT?4%#-ETF@IRo*nRMFi8:p<ec=$5:=(=?Q:uRJH.-UXd<Yk."9ZdfTFHUr*d9QV\Kat16*=%,Z%70;q4+Rej\L,7"G$N9Efn>!%0K)0+%i#n7gfT/g6H;2l'+s_D+82qN;\'aPbS05Q5XSu!>o_lNEP<'KXLG9^&f:#F2_u;mDaaOa2pEpE7(K!Et&p&qj^J5TlQiEe_r,87V%aiD0qMc\qgQjb=TDX2d50,A#+L]\YhP-W>eqF1=g:1flYr+C;ZR,C?RR,+_?eSS*sS.&">ps4slhP&/*<<%,0M#[*\jDEIa7e=*Q%dJWr=O%*/8c%aUc:-fr"FZu[E1FsoKRXaM8@-o=8mqOg$[lS("]RP>!LF)5XmR"ZED6uSE>.#Ho(&P8dQ4,??YY.tuBAMMA%JFV5%3uR%DGoKJ"9G%LC!EbRrFGm#Ve'@#I[[%JGLrpWH=oJ'pPgJB*](&@/d=c^bR``rhdh*:uY$OpB?Dcc&?p]7;XhURdDL5k;gMgWL%W#.BLdVSD,cC*.Uki.hqNsZIB@9uu2<GPf\O_Vp1J%+gH>a!]4">R]Os6=E*GQ'b].(-\97^Lk8:B-Vm9r`6jMH=R%5%fl$c:34A%@T01rAT$Nq[e%<D@j(E`A3(c\1N$c*GR@`Fn$BT9X4JB.#Z2?4pBCg3%%2'Kp;VoJGPG6P4@8'UH\#+T<W0q)i*GiU:2:2eCgnYX%9-tiJe(/Knm^+G?<NeA$iNqKBo2nWeV>:q$2AtbeHDCn`8J-A8<L!h/\KeYF.lD#-HU:mB.gnoCc`e8gA3j\VZQ"=t&I-Xum!#gb%eeag'G=P@-f=0A;;%.al:HI,i[0`-A-[GoULJ@DHD;^N<&Oup*6TEL,k$Ul#%#,*MCifmbUP=sb",+@ARl"P^eXi8;![;MJ6JP3k%il7b)Sl<?>^8:Uk=6#p-$e*N=.2n"e(F`S>ECp[aV(^@1G3Jb@QO"h_^Z<>SO4`_/#.1Tp&E_.S@_!CX[$Y?2dGg'NMnWa5XsM/-%1`D.Jc,cERYY:NIN[1dRbK>@LS4[:J-V[75Pr3&ta&7fI^_p/%d^<^o8DTdJ&4dtMI+tnK9pb#.l&A&YOE[f&1N%u&j3NfuT;=;m%WKmhM;A5#.ATc[lqob_sUsQ'lqV)u!BURFZ@Kf=O1[XmHJ^"bf55X62$2PWYb(/j1C"nkdNJAbM/q4;,Tls3f-&,tbi,Pc^kVOkc%69SF&H5:psKUQ2B43Jh#c6nF1Ip%bX!fQ#F8mEtaAU6JA'ohGtZd=u,Ho9WF8L-[EYS7EbK?cm2h:/;#4UPmk&0kRM)&/%R3t;FK%UXmeh^r0^GUd0:hBQ;D4B2,qsp))^A)ml[`!%HD7%#1(<Mj.,G<));'d2OM5ci@CsZ8L7UagB+`0Td6?ggXM=QBmCWA%*jIC*T;A%#*-;LC>791Tcb..?T#F)s*=t2>+LqK189gVPG(C]]'rg1rpdLHEGGHV?$D#F+-Y""Y1T)DR%YeZmU3Is6_h",(*qA^PcPt8"c"1*%.i'Y%CJ:2QBtn(B\6+u]):,A8L8uFN0arfWYR$/i@S'](DW821egnp_N)GiKTWm>Zn=d&EpcfCSR$8f3[Ui`TM<PGqZ!rRVF=AEd%XoR:P-ieACS]\8P&u(+?M+*!L:]f1i3Q<(.rMU)RMbUI].^mE9F[[mrfbdL9n6B+r!S:=.m%CRV`X^.O2'SPrBf-LC9T,*jIVl8/%'UF+5TWG0F%SH%hO,5hP)Li/#<b+XPLd'8P`-R;,5j1nLX1u`DXLht*knD%UW8sii-@s#8jUos%jk7-`[Gfahi>PlWP]u=`0BnB.%`@%V4r,\sH9(tQ;=/V9Z6#GNuejKVo:e>0C>[b:K^4Rn=m](5JP_^*KhDPR+HMm$kHeb7(D2,U*s4$5XHqd'-,t&4rp-nenL&?ik%3"RmtdsU[1=o#4<?)AOZ&+1Sm58F*qbLi/.0DPP5p:bar>or`8TNgEmWJ<Xb5h'*/?:6-Wj:n%9IRc0VmqFMK&/2=h=T@nFpg,#]%mmO=\4QWS]S\fWA0!pi2=5I9K\e)U;Nh62JhNs-28:<*dA0PnEhbgZ,FRMVXJg%CbFSjOd&ZZF'/G8!#3("jTn>Bd1X^Yq5T9]>P%[CbG?Oo("u-X@49-dc\q/H>O9I(t&I$EqA9*MoM@]'8c&G1>:6(#4Apf<RL-p#jc7UCOm"njjcQDL7:GS]#79j165SL8S:e1k$Lc%%plkTH0G#%ctU7SH4@4L'rrd-0YD`=h>KNZHTM'2No16tb:=*U%)V+_p6qhMiaXuPbuLP9Smo_>oosqj'<^=Bfh;Au><sZdgkQ^3%"W7b>'#pgj,.,PhiT,ssP"&WEN5q&iQOD]#`rX5&KlD_*kJgF'L67l!dhTYA)6olJM2F!6G]1H1V8ouf*fB5t%jq&2(N8i.$V.An%P_$G/"Pr$Bs'oS<f_<4?4MdS0<MM3+Z(bs-d0oJkCt@hIpuQ.7"0H7+AW7IoZ-,U50Pkio\DtgPX[\JFgpaF`CkX]m\@FEKh&_T8%)BI/\6ect4mE9.;7fA*/c"s2\Xf^?uZRDM>K<[le*k?;TG&B:fc17LFp-:a=)`>d'5?_&mUSJX(fc;7,:blgnbuH7R#@m7hIr9qV%FjgGr7>>l)]%c*IWhdnjGB\29.ZSGb?_gPlb%=4,X&%cBib]\Tp!1ltj<ZPjh#s!4)(*gE8(D+u7Up)d_3S6!Xmp1Y^Gg'&XQ4GJ%[XM\l;kpTm[RU(u=ejN+0]4%4)i](ar!0p)1SmqcM].jY?=3EOf.^s(.jmu(P=B%dgK1lE"-Z1r?3$240@`_5Z#5jT#G1DRm?M+T%Q,)b1[*d^TBD,SE'Q?arm%HL'SrDshfVi]u^_^Qh-D#?)GiL#sUU>@G6#-$8\>O,ljb[9n^2I_lV<@<QAuq%rY4bhP)E,00rL(U=%[k;-ENLp!d?):D'OYtBq^Y]AYP=D1Wgspjd@bg0=nG/m9#u$<sKmC4Tb8cn0p$B58S2Y5j^tnG8-]B"HD9]4IS*^>m'\4)V=Dr!Q%d'V2i9"<;*C\3:l*Jmpo7U7'K2WMK!]mJ'C!r+CsoU.W6p6M3)R5Fa[iEjg5]qeND1#5sXc9M?a(CtqKNP8(R(T*2cli*H%UIJN1%CpqR$?2PZ\"8G"E*C&X4"iEf&ItBD=7MAerh&09=NOh6"@rki$&kut#]6fECU]*9J3Sume^<ZRnctI0qDtMk0\Lf]8Sb+@j;G$+g%LH@YWP%KF(oNkPPBP9O(4PmqEKCeH'(32WX`QHP@Fu$P(4qEjQ;4Nud;EtIpGHQ>-9,i;ImN64IiJml1RQAGX_t.[/%3LP\G5ab%%jdFOFZpL3%G;EPdf$++^8CM7ZHB\*i*0Ne1bY>4:)<o`$,hdVi.h+G`oTMA+pX>$F(G9ZYSl(Ng\`Vhimh$(iTB6g!%l^oZA&G4N%LAR(Rr5qqikAT^aq8T5EAb7n)5rmlsjL:'Be:=YY#I/N!S&_FQUd;#^IZ7fhh3_mJ*1dY[nai)^eE#k9Rc)YUET<re47;J2?0Qr-%bi&<hi8j*HCL[56KR9]orR%%Te(EDX2EfepSuNq<cVHaiqsiF6iS03q8)CkEH$[<)JU-t1D9F`7a*>JA@QQN.Vc)743BTI[].G#Z%APJcYI<XH+DVjGg2=OY&>sD8Dbs+G;Q2dYmU=]2)g#^hXa]ll*o(;oW?^ucQjf'#)BDnH2n@Ol<If&*#c=CR?V_>b3)7tkNp@`RN%pn>OYNI)hV)2OW=T6BYKb1"W,Nq(R/mcA6YcdATr`&r5[mFseu=iT[iGas)l&@31"Hh]ESs&@&]SR:ITpbY*/Q/gY(J)Yq1/Lo)q%,OaS^V1BeZ8LLRnIgH(JqH5!*]*+^)Mjp+W(a!hr:(DMmTQka;RdlY)nCG<smlbr/poBDnB#,KMH&E=6NH3isCA87O\]U*/Pa94b%M8:gCK(h(^kBjua57SERluXc59f9U,V/;MFM0`:Iqo5,BDQ4bRU+PXj.P@@M&pK2t8JVofF1rB49,^5NM)61A5*KRf)r3'[##-$_%HB(Rl+PMF=o;7hoe74J#]NR-qEC\7m76O.Y<$[G9/Vu<RW1rqabSmVUZiGPP2]B6\<eL,jH`:be]sG&A1eOQnPrpDY!0#A+aLKX=%_h360S)mF@f;Qlf"u&UJ-B6$R;#5+!2;59J[)23Gj>$%(M+h@3.*<5_B&F-^)Kg<^@m/Pnbpje8H%@eJIRt2m2JYB(GJ;VTdCr2o%c1@1S6&jpXgUB\l/TAop/"E&MiU+FPat*Y0$7Ne4&\p*AaqS2C^B>CG#,I:gGGHYQP-$5I\CAUtl1tmo\D='7e;M<m23"G&HgPSh%CVo6*iNH#(K-+<<"$RsqVoo2@Gq/C!r1>_[&iJ5f@!h-[aeS\4cDX:X3htI6G4UJ(ObPC@Pb?4TERa"l+,C=DAO5V7\NGJ<5M[$S%.KIU,2sBa**A2Q_:c7hn?(qldlI<bN;bECnh6$VUq4R5Q2A_oEOFk+LEj@jTaiC5]R5YsiL-MZ*NXm:&7S#]]pI3OK,kEBqDQck'%jtC['i="1M@!l-`N/mDCB+6ETo2iI@OS2YSQlWC^._E)SG*`ka-c"_*G(8or_CPko<+@)=2<5_2]@FkDDZKO9!dBL=/._R=_uXMd%ou.2=^jOY5k92P+Z_#Td@AId+*k_U?TpB#kfm#+=V3abBY!OrL@-(oh'$:Vj=*d'&C8l6V5D6KNnDd)W2P#J+$$G/>'=MaEQ!Vq5%M;&7_[DdnJY@;TmcWg+9hOuc:ee,(6Ge;@_8m]INS:C;$OAQn%d>,M.]1b1%cod(44VpI(%O712#1'hT4g^uLe^`-5Xuu_4@%fQg%$t)9mpE%R[kmJAC!\-n;>?"W/4ZTW\Xsun`bVl&1$:?u42)]57:?g&]l5F4Km@2=2TG4%@dTl<3rkf+KV)M,He)aG$."4]lO;O]$%.(QU.b*uEIrYkW3oDRDC0jFCA_N0e.9HG,`16CBLOMVF(KP>hun&.aU-1LWQfTOiIAN^b293Lg3bqDca18AT5gD);AeLsRu"m5P@%0j@P%R\P;pI+)pA/0&$L[S+_:MmZIINrtLSgABSZlV^cW=dR1N$sJO1-r]J9c_&(<gD)f4cM@BtjeYR[R(Q%&mG17R6,-YG#F4!,%*Obnj*aVm8--e/#8=`_h)T9"QG"%4$3SK(;`+<(gLCs+O%md>W>")=</L_\j]g5>`VJS;J8t\'(A"Qb:n_0fOY`34JWa6?GJLWmb%_TOK[Z@JYh0oB:g_UFH6#91)#k7fu&eNO0VNE&95mX!ci)8Ti7l%tEL(sn1nBsLb/F</cL>g]_,E<.F-dE@hK_8MB#24>]J=B"i1%/lDHA\&`#>3H[r/JrF5%bkjSDF'kqAgO$p(@L\\A23(MLXdI6b7dS$G5X5e5[-j)mJPIfC!7]d:MZ5\?'*EdTm4>:+RuT/.IrX`R%j=^=)'rO)q_9SW,0?Hkq52g)D`NKZK.M!aEB2HRa)(@a]3r,BmmXsDEE/L8?O#=-W,&pPh#BV[#<ceLQNRTi"Vl"M<c6(A;*X>lX%]liS,OLPB#M3TXnjQ(1DhH7tilEsOFhFBqaSPngi,^ZVVhoY5c#Np&>HOH6#,V<^?b.;/0$1gXdR-RG[n"`JhUY0ZGT];G=)]cmP%6S"_;Sc"<q";hfV]T$cEI6(D:B!27!=P.CgR&jJmp4%2$Zr/-g,'-pbqEuu/)Z\dW7$pFJ^U4F8?s[Mrb^EBL,[j_uFJ<%F7BJ2N%cpG6lYm,M7dBA*oi;*A+>?UmfqQbc3>0PcH7&L,R9K'o_PIX,##mN(E+fh/'*a9+.G/cj\;j*J.'3Q*E'45Prd`Sk!S'nomc``>c%J5P-03M8HLWfo.TR./8t#rK@$NQ/'nME8.H@:`jpkTsG;EF)<A&$1^oPp[@JT%TMFSns7aACg+54I<s3[#3q=]cfRZ;U<K"88<E.%[+SBL]LY2(j2KV5ff$":9^<j,BG&ej#:ijXl5<GlS9T6`*X8\QQQ)3Va+OjA(g`jj/#SGbO3^LU\A*1m9""GN*)3huBn^c7c[_eH%/BQ9J/0mJ"CZ&liDnWW+5m^k%RCUd:@6uRo*[Ig\=C"fSJ;S<R\LR"(Qu]RQB`D[9Ni'-gOEssjBK,8I]om]u9O2:6Xu!`t9/m'[%J:qE9BgB'3@/pIDW^1E*LW2*,/6b_Pf`_O=mF)5]/JRtf*HQ@QCTU,hEll4@RPJ$b2XZgS6=g@!]eu!2o=[J%91D.EaRs%E;Ag3D%Hl2qg6Os%>3/h];L4\2I]lA>K&ct@F@kJ(&4R]`OQrB$Q8?V\6ONJ?GqO-$:&bcBjm6\E'hQ8?d1F.DJ;:`U\2*TNpC_e^9/S&n-%l"UKh3DpqNf0Z?;5\2J#>RE/PSaFs/Z+D;V>5D7cDIrX8eY6@XQX.Su9]^Vr>#\Cl5s<Lp6gM.AA>Ph(/$F]M>)4?\!SppMU=4#r%;G#*LOm_[4f0ZcDWe7460FZG#6bcr?B)U/.OpS$%hD\CLCa;WNOtPZ0<9AuZ*D!b<<Rf<o@**2l&0!04<&M_WH\Z]\jZNcF+JrpQ%bE[K8S\@bZ7%2);hi>?k$WG,38UI[JQAk1PV@-=D@\KT#7BRNnq[`O*H8AAY+g1bApZ@p=D6^Ag_ki&dj\dpJ#MpE$Cq>:4^]\+A%m)`k2!UWRDi*1OIXAkUELf"G3/V7mY7M)/m`6VS/9'6CaKXbtiQ>AgD^d*Oh%GK:tF`Y)6QhOgc\V#asRqW(tbHmc[3k6Ji)0G/&%TiH-sX>B'J7:&UsSTP.-8[dQo3HT_n$p$CQE5`eXP=DAW3^r=</VhV4K20N(>V1`VZr)uPB::E^?k/`M"s&\">s3tg\f>;hY9Sft%8%?,=3lq`<EXnY/RcZEi#Z]U>ctNTFc-tN=VUDnU%(pj4;"ePl/f@c;lT8Ug_!P*BcU#:0@U`eD2p5CqlT7ic6603T!D`;V@`clC%I.^d782I/_dV%6HE^_8Z]?an@R,7q7Zp$[3ao^lH+6kN1R<-Zo(UBePa$A6:Eu]AF0_<]3$tdm5PE\(5-C9_ZfGUl<#`Nn@T5iqr%>lrQNTcg3NheQqGZa%X!Jt%dpe80kO0=ncc,eIb8+dXkk;G6K$(?:RcgIA"cfd=>!bPZMn#FSct?nD5eC=Ug7%Df'Oq,uF]EVmnc%+]tDD<r?,O<S9nj?]$3i2Xa@W8qoqknQ?^/]k-LTdfiWC0osXp$DY:P?T.Rg;gHU6FCo5HoZs!ug(i'>U4ka2h[/nmIa]i%fDJC9%1_8qe\un00VHC6bJTi)Hf</4G(eZSbMUBS@;q&sq8XJd3Bq5DK3b9?702J.6q+I`^J;n's(WbVU=DuEf[6Pe*D,-$!18pqr/':$]%CVVK\kJJu0AWb-tU?Yg2fX$RgZ4Osu>p0Rd;U*UTJ=+pW)^!B03_e(L-8[*23Kn#=X0r=nN7?,=Q?N(E\giXgcnQN8bf=LjIb7Kk%1pcRKM/h2sHZQ&i$Y@X\'GL$JRl`Mi\(F`$s(8FA..]!$esjHc/lcfZ)4L;YR-Qls.;j=9:Oljcc]@!<G;8C0h@pg,I22+a@3rH`%mC,42ZEfI*j[e?AdL9jOa<S<u=9`eM9R`B<(,9#1X%IK;c@sIXjr%$n,0$AJ(j&?AeEXi[Bd/VO9_W^2L(e`E<u4001n9NK4$")&%`k\(=J6ccWFdEg@"k2-?ZH--i8R-'HZc]LV^`m8#SaIULcD!u.]fS"InO.$i't9AO)kG9274,pECp"hUG3m^&UY<8t9Pru8YAB>0%qE>=*GP/$h1Q)ZumVnbP[\Q>]Rk:$*=XcV'V4l.:A.17lmIKia[`H\Iq%5:jdW:p(k5]=-N\K-hPXK[QQ\W/%iO4ddG9ST!:=bPk%R(;2-'?P2[=6-b+F[daUOg?[$;qiN*/`g7n85<;p7OLYeLH2a[.W]JA\mUUOBU;f06nG)s6M4l_GWjLnd]IM$RDSXu+sa_EI$6#h%ouaS:<N$tG]X=dJeUr3qee)&bKoV,21b`WLq/CM#rq5?i/\(i5P50'<;:(!jXZIVBfa--Io&7gQqUV&F\"7D%]6lU:NhE9>JLfj"%WM6(c)0+ufLXXsc=@V)WoAQcp$!:7mSBET2c7IIcWI239?-L6hK=7#0*-=fe=P8#MNaj9T-GrSh9.)HVF&<RndJhDUl1N,N*(E7U%W/#5*Z%@`Ild70-$hjkG6L%_1Z)[5OM'Hpk#2YrHh,kT6%+>ODZYYTBd(kp%.;ZG'W$=W=CCa1Y=u)htVp)0F1)ZCLDf$n8Sr];&%@HmSrflU+\)@(MjJIEViCY9/ae72.+[b<72B2p^OC10N?r*D=h*inXHUYW:N_lU*um1qL$]:mJPV:E:]*2-_P_npaY$^_$MRV&AP%XWo(`q.G[)WDM:E1/a`oerZ$:Dar?@OkSGM%639i[Mc&@cg#nAk)27R<Q)=)k3CCs)6(ojJY"Z3c,K>f!jUB7FjV<VA.J^2I2s3n%n(CBf1V8r6(!_VrXZmQG26Ufq67SMA]_k)Ggp2+H`DYY7l]ius_C9gC8]bouN-Vg135&>.6)NlZWGi(80kXp=\:-Kq&`1?]gmi$[%,So2J?7V("XDL<^9K:LgO%o?iFC7ARb-W+MY9:_>-e_:LQZ+Rug$",dfT?Q^,'3jlr/>K7;C`6?S$hGpG)-_[l_qYj+Ba4Ikc&QV%kc?d!4T=mC&MH>6Dm-J*BtdUd^S]jcf>V[BO:NGj\NIj5cLFmhj1i0#%H%+=pf4:\ak];Zrjgf"G12pL\f;<'YKEGaCQRn+Q;QgS%aU)A')0V4GgP<AoI&0C89CE[g*mBf'mS,M(`j>Df?L*$g-+e02;j0[\>MJ[@mu(>SRn\Xn82M6cPjGjOG[oIkmSPe4BpO\=eRmIu%P25D#6.Mnl"`1I`hbfD[eL.uf&XPYe%(h>I,/\<)g^'<+b*>a4lR%V2[QK\Yik'Jjh4%EMgNLfRdE9GZUTRJeH$l4TmV0S?d7]C&%_R#G1o0uBLS$MahZn69eDHO]'8\'(%?RkE@S64^.b2HGZ-+S6WIa16=rr(f_Ub&&jk(eb!&="7qP'p$9TGFV<mVP=/F^ajT>guF6%QAUa%kVU)s2ROp/gJqaK6bg"nW,9bDH)D!-nY?ZS4@l9j>#1;;lB6TlQ.8ZnF)H]$g[o=HCrdc&jqij>ZTgk'X@iau\E+6`1EYNP%\Sk5QFmZbNHe*^WT\H%o,'Ab0V7-<tER*f[BX_?_;7Pon#LHUUHC)jQ>J^lV6oLU8'lL/,FH6'M=ZMtsa<mj^QZZif)<K9uQhe.i%)qudhI^NuQUKfj4rPqs_VDG6pGndX7Cq?HDjFsr)N;PMSX^#KsSWW;HdJ)7X9kT\`k9RKKZ"uHG><C5=f:#EHSG0V_CcWg"7ZJKp%>;i$L/tLs=o.+D$)<K;78P70=dhrIi#+"*\Zg!G2:EL%RH8_=k.bcb5Qd)B`c5Bc/2P!d&Xd2\ZWCdM]=qAR<ZY\3`9kWNV0fupj%q.r*e$ICH7hJBe!$EeZ@BAM6_7c"ccUpQ_03ZII/:"aWSSrpEle(LfUCW`M1!X:_<COOlXesTe/b,-tX,)sq/>?q9RlkRQu!iVVB%p1Ya\3(sm))o5g,2M\WW-cb"/[cSE!(Fu%XB67=JV&a0IoBOPq$YOFa4kXug:(!4bOcW'C":Jij:n6grTf'u=[cisQ99*/+mHJYL%j-*?,8;s9K5.slSR0HQVE#8sBFdu@5-Bh*'&K1A8qo@D:_'$tUc8%mk0q3g`<^,Y@hWN%L8A=.>G:'623UmV5E6Okm-C;&,3p1jA%S&QhV&%Yto5ghB2p8?,:VC=Mfk0Cu@GeE*W5=QDW]7]NP53@lEQj)N#9iAY%>GbnR]$JpjA8QT-RJdL`afkC]8hdXN]p3Ya7OO4*%0c5?XH[.<-cH1>nQM>a".*q#kG\;kTc=29/*h*R*o,nP+q1Z(BcU]o*TMMYQ?rWN[n:[oiIm0L'hR?hTk4XNboClY(>%lRk'i`RW%=6kd!\lr`'e<SM5c3hT'h?spf=am'rV0%!ZH7ZK,QY,,`4Y,T71+e@4ZRQ-A>)[^86)Ll7A/D5h@:H@O'8:",X`fV38ic:0Pk?Nn%HriS7X>!pb_D@59L<9WhOl<=Jb7p1j3^+cb>+bP('giGYRTCRs%JL8ABen;Y9k1,?()Ped:Wcnr$&5q,24e3#41%anE(KkiDo_%j%>%^#?pf8+W$M1kD0BK;_odl6O3Id(>g_RlPN_4dridqF*kQo*m,(jqI0?RV8\O;2.+.LIgV\]%bS8^tT$]?h/eoS^a;Wh(6I);G"%k2RA?k`S`O>Q(?[-fj=KUqF+r-!?gZ\&bMl\+Wkc,rs$W=n75-oCH8jo/8/s'CMCYC5tS0CJ!kjLMI`AYKdes)k1aUEabfS5.ebe%`b*]TADf]ZAXSTp8?@7=1#4BnJUO\74\JqaFF-D@4_mTi`EG*L:8YUiI6H`i_TaA];&hAdA%Gl,^YL;p8bS%UH\2N5GeY<3(>Yb?%4>Tm%`akR%o/8MT[H(?3=W3KMO:/#SFC%WUp\XUd@o98=GFHP4!+JF/qbh_d-@.;/`+3P4a#(\<F2kk#&ef@Y+02VR*2-[m/;/Ur%Jmff:[bnL7Oad"3,oE4\W+&:;Sk/Te\l47WT(Q^d=<V4M(-16?$EAtE43tc8Nb]dPF-Knr,f`n,^Z!DI@!9!:lGl'I+aInGZcd['%k@bBlHbAUKSun:`73LU,jgUm[HS!FC;](QO]SEBJ?"`.-`Q.Pe[EDKr/<.!HC@(f,O:S`+Km`Xu_`4hhCuOpV[,$qI9=f2sDFV;e%j*\@(pQNd1ER<O\IU.q*RX@*p60m;W#qu/:o,P>sC7_M$fJ:eORr"DF@FI]VnoarKUs[h\bG3/le*$_D>;TLi-<6&jcXGT&:ZOu6%R`VB-E9.#!G$pL1\%-.?RPpbNoB&Vhd)t<5?[q4.1011!p#M6!=_7U*<U#6+*n09N%Bls0)r7K9^=m1YG"`itGp\BSMgNpXEi$+?%MFjS"Woie;IA7TNUNAr],,?Z1JGbQaI=H/.NQW>EQW*H*T50I%N-OZqS?tu@@Ko.H,M_jk2g=tZV4BS][+\Z::&7l%b:0?Vm0oQ*%O'/U0:ISP;MusHEGtQN26<uA>mmEug$AC31C][1P4X[Qu's6NM>ROYslFVcoBF^n7G;@??EO!k?MZba4cBBcS!np%UZ4E9(Hl<nH%k7Y$_`J*<YCq=/-RTb#W%.o7J[,N=:SW5DicJ21-=I2'Io2@HNZp4/eZ!);c)U:@H*s*[X/A'u2.BfS%gm9@5YO]DI:;(ma`iTkN%Ii[lpkeM-8>$?QF#DVrb\p`qQ[/)]-39R.kCZkRuY@:X8`K$88YmiPP!'8@@Zdi6`1@lnG-h]9#cq%(PlEb(ARl0Ld468.j@C@3t%R2CRIliugl(gOM.REM>N_Y3ac:!ZSZ2nLh&fkDS+[AqTE+Z'3&(&M8Q%-8'G9tXc:=<&,M,YLgR^8+bhAU?;ik?th?/%`<9NAXbc%,u+B^DQ73Xc[c14>hu6e32I?f!O_j^4I&j-Pg!&,D%>QF0RkY"@Q/EK>e)W#.XfU'_7K*JZEVf,ak=';Q.[5X]*Q>kchDEC8:=[g%8eBGno!8tI,,UXMV$ib`LP0!"c2r*V"6aPC'%8<MWh-*AX.q42V`B:1,u3)JahP1'!L.df>Ug-.Bb$fZZUu"+di:W>P=[[W!d'k5%-q1/;Q;qXg"6`o;$d`St+OuU@blW!U"/tuFBn,87V3@L:4-\(UM/945asWgIorEl=l)Y6,F=<dCM/6rhPg>ANXliMEQY2Eon<Q5%%:M5CYV*k(&c:;40TmR?qY?^$_5)iPC4&q2$Rrmrn`_gKTeZ"!JmL:J7laLUUf@oqQ>/Rn"o$@dYRhgpj2*]]2JN0J@cLoZ1q:qru%9C*+!Gcm[H<QI]E?fkTXUNAoI]qL`Qf?Xqjf5n*eYsF1#"Y,M8I]f;C-5Z-UYph[sf?ZLLalQ[@TPJPMTCpPfk?"g*Y+O.)FdrG@%G-7J1JEA%TQTWkq5>B_@RP0#jT68**r*I`RkU_sIA=@m6V7tL+os=-s<U,!k[9gnaIb$=>Hj;.eF8`1?h>&J_jj*PJ78<#AoipN?%^,=ua06jXl<@n`Vopj'8k>60#l!-I=`-6&flLO-7=eFuWSBe@m\UGGPS3,9I?ltQ.cLnMe7B/+@=$"r/n#+Qj&6c)=r`h\RJ87.i%FiAG#=T4WVWIF,\Y#[R7cPh=E:]!#>lXr,RoMiT5SB#:.*HlTIhl=;5aQN)qT(cW4Wo$.r*:r@i=lqm"7,'>6Y+PBdIYPJZ06+.e%=`.GW4]uKZi\RM\EV4DOXSpDD."[`0oi"025`K+<4MF7:1ec3T>Br"FmAYQ8T#^"fQaYba@K'NHKoY0AEgS_SlXtXG+(bq`j'9@+%jf*\:Au.(.jr!(01?\M%p5<V7X6nW:SEmXnhQ+P8rLBCu[taNrb>\?T4-+;_oh!%QkK`a)4rI[RWZQ"F*V$GZ\UN,-qAJaB[eRC^%f&9p"<G[qArN$*l1tL%hcLmZr(X8q.<r9`oaa%@YqCQKl>jP][a*Qi>kP?VfM+6gtP0no'kPA=hK^&]%<R:?E((@I5Fe%d\?q"D>%\UNg0c?jB7o%<NrqH:i@doC5WF8[(ECuoa:Pe9g;#EDr1m@re?=YC9I=e(D@lY!mjTKH85K]\SU>/[/YFBt8ppsACY-#P*F_o/d[%?7QaDV@bgm#Ms7F(A0"+MIVP<Ak,5^H[W<DM_Jc=5S0)*^f$g<C1F_R';`6Xm_(":bT.,\Sqb0eEgmfD9u^[OP&pLa`u!^-B7EFa%4,rBs1&p>#-p4"WG,q0%d[,75Ib]#e9tft"q(fVYn/C'=^:N&KHG0Vc[GB-[-lBRrrOf['naCYg1].-"p3"fo8g_lUX$='pr935%%lKb2!];^HZB=Ddon(uf'_=.?o&H-\,YPSho7fLHpFR6QlgDu?oD>31s1CSW?mB6W\A$'n>:\ml]dQcLb)V=ZkJ1AV"b^SC8H`<OH%L&?5BJ'a'`\MBLCF62`"10<-ISoL%eZ`io/RgG*f?g6CgDW%UQ"*[D+QKb$)5F"3T_C9JgZo>.0)h/f&5**1_n9N&mD!@5IL#eSt%-e%'b3EI`/EiG@F"=--#E&[f<Bah'a+1_6Zg&;k%#;O"KpYFMZhfPs[fm@De\)Y$&D^Q$@Gu+C=EkM9uFd.b/G>;Xs3B7eNl+%Le%f67,n>56:)c14`Y4mp%;0n&YV8?h8e/NjiujR_g(Bl'gu:.Y*0]J;<TohiUM'AqX')%$tBVf\:*\]ol,^7mh0Bnl4*Tpg[^VoRJO%S*RCc2>2L]:I\9NEcV&_?$JBdWfiJOq$2D+<!uso+UH?Mm@f#@cX.**B'$_kd1K`3h*3H4)dsfPjh*At[D%-R>kn:[.(iR7!A<1&%$/ul<N=cagHlEjFeF6\dgh__$Z\J#DX^.Y0ET(TL9.g6SfcaVgqoL,qoApLk'$UXFNL*3a5^nRELPP?[2t,3%p[O^NbT>9hA*EZD%\t]:Dn1HrpW?2g::&.)*4E,SA7lPg"IM>\po9oH:+)n4b_<n!Np>F.f7`neIRgo1b?RZDi?[3*gj@;L94dFDYL\J[6Oq9e:0O^s,%=(=)g0*PO'o@5);IGq(mRNiktl*q#!esC5=Q9@>Pjs!2$[:0<@kCOr5`q-=t3OtBSD*:)Q6quXW%qU7co]fY6Vq1t?<:Ip$A[#Ep%==]nc42D6:.o.UUoY+oJ\D(jX8cm23%$bLno@g7`q4Ye^jadX/Bk)L[f>sq+jMP2c6iYEI30q:8SE8``m6+'9hT%-*_-VfI_ip2J%%r7BaakbdbJmO%Qf)B8K^C)G'-5<L0PQ^G'Fpl:0,G(WXZ#q+QIe@R]l.>:d<Jp,U9&@SBgrbE<R4;8r2=d]e?D^>1Z6r'/njm:5%N?#g=_rGQX1<L0^0?tL/F$m7bSXM';i,PBh'#9mJA/N+oNX;QYjh.DQm10bJ+G<\!#FEaMHli!JDXXV3b%E/`3QgfQj#+q=QuEr;%;2T:.?:@E@W71Z8]EIG(3kH.RM+:[oDoWPP48&@lAXOW!qbMqn&`<o?&q\1Hpj`nAIYEo1]kXiJ:8t)a`36mZo-6Dh"=\0j?K3&o%p7[B=D7/m4SSP!Nd`_AC#A$%75ia.gLTDUD'SB21`3DqcO7ROp9K\S7[/'n*VI#A'M*l?(![Bj^pJM;<Yj%ObF-j)A4G%d(E^C#t%b<>%01noeRTpDX68aAMO&j<?'88E.uOmqV>S.0srlkbA=nCb0NEG9gkHg.eio+i%scX)V8n)\Fe$K@/-E/bEC9kuX6k$B/%nGZ7/%CEK/Fdp"+.E@`]+gh-j=()#0m^!T3!P2adaa*"n]Y%<:\dnu#3P&ucZjkE4].U)-GhmuJs@5dOPR%Ng^4gR^Pb`,iY/s!:-94bU1%o.I[=rdfn;%am%tInJK&5D^Q.hFO214^?8%,]_T9i5=B+=4CT;-W;\jK$/-]`U+QEQ@TNT5.(kI<q[iQLI5Ork<%f.H`t:Q;sRh#%V>VtTVKQ%r&YXQ:S#<@\eBUdii/R6Ng6#IlEVkb2:#'VeYs"JOqHXAqT,reM`Q#O_pr"1[X@gLQ*C&=ljkUjBYVsT"^Z2qRJ8aUY%,"BU@LU*F7gg%RU!mI's83Ho/cF8CtJ3_X^hAL_GHjGR7&?A8C+4T#W2&&n_7QC7Z0.VRHrYQ`eh(Ac;"ja#5!4tPb!`2hpn6'iT%B]C^pCd]/P9Wn@.?O`#,XSEbk+,BrKoLj]m5/@h^e/qO&4QaN:kbXO-C$=U+cJU-TCsle\[XA/"\t.tf+^[Z9gD:^&b@<TW\NshO%/)j<JG`.35neJm)'oJ@"KS)RR\8gP;=q+@\LV&h@.c7hI_*NN^`8"e*?ogjW.0*-*;Er7<W"0=0m-NAHOCX-."m=<KOMLu4/n]-k%O+ZrX!;9`Uj;_+[&qf8*^C,<Nn.e&4oYM0JfZkjG6!0&Q&r,Yo_HbraJMZ^_-rkGZd,frnehL/gMRdW(+RYbjSZZsoQ;m+o*/2"U%64rlC!TnEcL\;3R*(gCX:urpX!S&qJm.CZ&,Y0_d1j;(\'E'egF=2Y41e2]))iR0*$uueVaW3<=LI/8<XK&5iXa_2f26(b2c9Sg!%!d+C"`#*t5U23DLPO#,=5h@fsap3C*.]#bT@BQ"Jh1t1PDZ'cCl.$E*_fE^R%W[RZL%i1mcl=]e,"O>A<Tl$_b@g+ZM$+dU$RlXf%c9R87b#F4Ycd7`cOpEM[*aoaE5\]42K.tA5!AXBpPXY!5F_)05'W?Ol`P/Os7*$%K8ONRWZ=;$QKNpc$R.Kh<JN%eEDf,5iI-EX'%"N#USj@e')d1,.R7<>QtMLYc]1e*/b$/YC/Ytu))-d'q"Qrq;fKr9+_o/.mim8b\=)Tq4lRO&lL'?`/@=.!19`0NAjf);mL2pgnL%YLX2,U<mH_.GsSXmTBCL*PK6$H_(k_:Sgu$^,lq:QRr2r:CcHld`f+]SV63@mg?:>B.D,ZC=ceeXAV7OBD.'B/4#oK%eNA$Hhj3?%'XkYGOP7kY8$$UoOLe7S;C[p,h+b#6"n^UE,A?lq:2tCd98MbKXNVFTjhhr;&`U$`5W_Z5SV',oB2BZ"kZF"5$8JCneMkf,opZ5^%WP%Ll?'X-n\3<ZqG-l7n`3ON16J]GQ\59\Q7MNK\pMd%G;c^m7>QqHGr?ilA&i8N_E:5mr`u5pBGMT5'1b2m-dJn6^g%Pu)16I@'%\r,^UXKOlOH;Z6&+r/2*O"__H,[W/f5YKh6i9f^fBK=u1/$GQb>0ah0]uH+/](`o&a1U9-Ce&8VXFnE/k'rf4n+2G._3_k,22L,j%h%^4fqN-"hp+fE,<D3WXZA&'\%Z?N$GrNK>FNePnNg\bK)0U'7]fZnqK6BVt4Z4suXmPn[pP`t)prR63SSW;"J;HBN.S_(gHu`=j%HT@P3&0i?tRjBT]c*l?%42oG<qcV[aJ;c<l^8J6gA6Vt"o=A&ir<_d2WIjrAE-"Y6Nq21QT#iPf-?DbEo=]<mBX?,Tn0-8;TVodi%S-[q-8GOpWX=@3nHsXlo]VqlESY$g#5q=?HVgYFj!/OeOJl^:OXS>l]"$)i<T%^$@TH5UV:r6<cLI")Ko2WHeE*j(FGr/L^-L@/:%<aVUWHENd!SJuKj$K[KniZ>,r)XT55<["4X="R`9je`79Emu<]bs'gL<\F1ln+g,%,ETd*7pYLD=#mqL48siX]otL(f=8HCk%pTb%QZ1bi(HGuqa:s$d[JbdHQq(\cqiZ;Z\p@J_%V*!FVY5%A?;qC/M$nt+K?+R[=cqJ\&*G,,5g1Uo7-l8.?c_'i*"840lY8hRTP1O^%hBA@,qi_V@$<6hM2nAs"\!>,]\Os5HX3BrZ:OKKR\603\%iW7P6dUVN-#p^)E3D5SrRKQ5%8qr`>LN+``!=IZiPO!h/fP0_6J8/)%RQ"@C'qkG7cdn)gFr_^rS]<?DgM,q1b<Lka.H6@Q3I]Q#Unh$2Bej5EPJk@1.T<?.aC!eq.4p1B$uK@5GshE;Bfh$286%p0XU?3V%8L'0sWPUF]E9H<bHf[UdI$#\N5e($D4V`$F,N@qA_]YHP$!MCIQP^BXh@om1liB7QWIP%8af23&D>_^t2(]'TD1_QIX20ECkQ[[c%K:M^7=*hbHM7XX4"oV^.a9pfeMkbZkB_@OQn920c7-l)t`Kpu!r!@,/#nZ)\5k+LgSs&pMIEkS%&YFApNl@Qqr/mAWM5S=`mTC"k%S#76'GJp"I4Q0$BER\<qH]#uW^`*d*+Gu7s#8oo9=^kns5F'7Q>\Y</@_,<X-?R:n%UXWhl(B[(<SN7\P+jHXlRs@l:>@M77HWu"%nOm0%kI.<6;l0XC%$($I`?S%p+P"(d;?NoA+-bn#P'HSh(]dJ?e;5Z"1YDjJn++k?ICiF'H#3K%pC^[:j@NQ(7lK.R\+V\,Zl\$b%jVuLYPFbc2gf!!*=g*h3!)b,ml/@@Qi+)50YP?3fGF]].&K2;Q:VKoPkM<`<\id:95GIjtBB!t0_HfuYI:!]8Z$I4P(gQ]n"-N"?%)m+m90Su$(?>WBYLra',$'=lrSfT11cZo=Lcm(d!B8W^IMTk>r":kcBe'`Dr:h=d9:4s;JS^+bhUUZ[=n67Y`5pP):$7),fI$W(?%5[fRt#qOpaI,TT;Y,?Zq\j09uA3Hd,eif\P'mdp<HX(2e5*/[a)aAQ#\;TdVME^VW"!GGrQTn2_b@Z\``]%[/<FT?7H@sH<?Ac,1%oQ(j8V<=08T;R#H)C%o@)EjR8%$3FO7WMRacG,n0:,j\BB7*tuhO\2pGk\:Li:&6!34@Wj(3jaS"jAT$K]:`Kg2??*<1]Fmj&(9/%>S9dF3.G6DM!DL-*W%,o@3UjP#Ea-`c(fR/T*F4Jh>UI=a;t$neM'J]fH&1mn+c4m]j4<2KAEt<ja<QXoBaM?j3>8?aDDPf=2cSZ%Bm!dJ/4:d,](3t*<^cRQ="\Z0j9.aQ4lsI9XM,m*jZpcdZ!o+T@DDc.H'$_1*Ku_d*-/E5J@+T3=k7@uQD'iO@PFYlL;]m"^guDP%=Fk)Q-b;g<i&f%h.YF)G#'YIPg`o;maiarQ-'O)A"*)-aRIo?-KHr5)1rE'A(VKCtN`?ZEY^U1"Tq!ruq'JIV.151`4E3\L31qo)%^YkN;3sSPQbXd`hdk_#\k&$7s\+b/U3*so>V(e;3hNf+5=eb\[8FdtT"K."E)927Qp]O'UluO8&f0]O8]*pQO1?]%j.\e=`\[^[[%*TOd85^p3nnWcH.&C9*+6KbhaK(hi!JrUg]d&s].1Os8j`:kl+BQP8FH<2DO@,R&#CAh%I\q[7:@="?6W!H_7l>c]6q_]Y5\iV%!%+5O`7C\[4cY(=<Ro$e[R"NuH"dl/ojIXEa8p3dG:#IDa[ID#<I&>UctGm/fL$-#<a803n77MHHP8ch8/-ob#^)!S$+VQ0ll+0rVb%"ceS]:XG?l1aB99)S_J"lPbcJP;47oNPK[b\h"OAW8CP_Z3PrZN_WY"qcB`D&?$kGh[Z^q!gVh`X=1u>3N'HN_R<\jVAk6"3JYd`%lVaEt3E\(TbZ^.lcDsR87#.5kQHAF0%.hqg>e"!&3[C"%ga8EK>HpcVWEQ*%%<,YGC/I6XO?qW*r\A_3aQbR52ZtZ_?N^#2af-S_%qsRa=]!\jJ@jq_VLNjG@KJ6Zl^F@s.1F]Zj'FE!7b4^o;?O>d^S<kV:jh+^o"Ge=IEkk\cUMr/??GY"D,Y1Q'SbK.q"4;p+]d==0%P1LrscXjL;V%&)UN=)G7+!iL1,:QZ;5u;E/;=+aJ4,7Gr7&(QBI&/'%nN\4-KS2i:b;"5=rKL`5LN!:K0(D6Ri?^*3+t.LuN9g)T%I8O6bXt_ORbm#F$)_**[Gu2G-E.3EI*Cl(@f\RWKa*1J&J.[?\^H0H@EaN2mT*(3NLBea\aXd!;T#T.<OBV?c:i^7rlA&L:l\!OR%btigkK9oXaBbq:bLZ+gHT]8&*Ms0k#knp>17[cZ/3=ZmGNF9q7+kU6(Z+'!(PjkD/L1%X?e.!nJ]G-)tlqLgGWk_0$/n8LY,hgM:%O3?Q#J^Tg!5P2CM'6C(T;$)1ND&&lKbP[0l0h;_oqVf.\%Q?lAio.2[*B1]C_"?MAOML&bW12-K5iSVtiB_T#C#Tt,RH72$mMa4^%W(h[Q\a<E&#E<j?\;?:/m3(fs;;IJ8G`#'*Lr=W_C`K:Z1"&[1Ct-t_JGI:)ej)5[&O<*WX\Gbp''3[C,B;.H;]Kh',<H=8#5ccl%lPgL!9]o2!,_[gAP$8oN<[`fR\fe<BZZ(,hHpiON.g7[#n3#n7BrISpR$*)CBN*e?S"e./897;HIB/"9GPl(bZ:>iTW@<`F1i@h#%cPiV$<99PPN:##e:$sWZ`)j[#Vq,OV23eEKOTtD.Q9lMq8:s3K($tFPbMrS>O?MZYP4*5E8BlmL*/b`I*JVG0+d+%;ooYc3%jT(N%;fP"jqPOBJSgK/8pTB(kT/f3+/cq^%.1No[EhH%["5<?r,!*AH((qj:kO0M&3P<6^96fW)75rf99m$[s'ts&/%-!d&kt=2AQ/\q*%0QWC@I?75"BpY7+&MUM>b>/d@R_@kM-YL"RC=&M6_^t7riZaehP]IXpVrGg\q[*\.WoJ([eLY>1=4bF8?Mb<g3M-_#]K_[)/'B#W%hp)I1GdQ5)j9>!@/N%H]9RQ!*B%u.iA%Rbqj>D6PRITuVGaZ6W,p0uk,GO`P<#a:3F"WsfWV_3l[@9*`.<h_9c]L2)<Bu0&U/Cg+%Q*I"J0VC2>Z;l;Oi5b\=dt-aZV=@FCT4IeN\(BhATJHP`0=qq^.]/Q(fBlJOI2*S0dCL$dCNM#P8BB^B]+cOffIAKWroJ/=ZZ[c7%kki-Q;UG7kI`nR\iFBXb;F&L$Fl3./QNGSC.-(c:j,RE1d_'6uQ!rR?3c5QU[uaAQngI\P1S+G(aB%#nf9#?='"(WYK:Z:R;C875%iB#Q3e!1`Aj9:nZ_MUsE3(C:G9$`Kjr]D`b7q5!42Y%:gc[b#Nd!Gu,4k,EJmKfQ%-k;(LH6B^1mR3Aj3[Ck0Z#@39:+_tDKg=k?%*"m>#rX]?@!!JjZ[>.$2![(#JoIjeD.KL)5c``!ekhIb#/C#7gFL+,WLPsI66MZuj`B9,NDAM6ELt>)c\_uiSQIf].>O&jR'Og0N%MqXJj6hH\271@SZI.L#_]q$V7Scfei;pC/A@RhkJTb>_Bf^UjWQ$#Vc`6/U1h#_?(Jkk#c)aL%W0\`SeVD=$;7"i\-(TFm%E9lc:%kD>]D0.aPeR(%<51(8&T0Tn..O4njtS$&q1M<H95Fd4SV2QFs4#jCK"s)YDk;a)a$L6QWENc'$qJZh;imd4J2lJ@@;KeX?eWYj4_%F<AKt;"l!TY(nEa8C5a4?eO8\Fn)E$E\k8gSnH44[@i[[E#/L#,%@g*!(<ri6Rr;>FD`0tCg8#M2.aEkhTL]U*>?Qg-$:10`Dn0g%hgA7f\q[_J!9%G_Y$[N`ZIUu@jT2V9r)+Mf&d<j6l+[r<TgV2fqnW4u*/"q.JbJ0^MM"_Hckq"#,Kj'%E!J&Eh%,rYK'qI.X\TX<%4KD!hr((H<OLCq7ejG-1ZDR1?6(PV^-f"m<fZEmbPJonD,gtHuNX;C-]:APd0TA/Jp0A`j%8L/r8e`0eHen&KmOLMri-bsp8PCoP%m0.FL?'O_?<4#/%H3!6ZB0fjUK0Td-F57J1>C`QT!,C,#[S-+`#@1V<mUXWG95sJ[O$o1^Hap@-`"09Zs*7SuI!r9"V!eCKS\t;M%pNT('E.$u.46B<3gSjT0#XEF`,\FuMM-Q'Er[uPt,YO*Y9H$,k$U4;p>/jO0U:"Vt![Y<KgrGm;VG^JQA5DjM,[ZODpA)ksrLoT?%XPs9)GC(h"#B<06/+:qsk9Salh!cKS#\s^+!a6d9h&rOrN5CS%+J5LD!VekZb.COhob2oR\7pRBc<%>PPXrFnTbqfOE2*G"gi3Ql%iNJ<e6^02sc/Q5EeqZ!_TNb#;>,NR4&0(f*7#PQ.LBubpjFj8HWb,Ga?\IYjE/rStm7W2om_J)c3JMV9gk"534(Ks&e.U_'4S-+9%c_W-q"<LgXK/qm2"$h`A"eW[npO4d8`'aMeR_F'XIs(3s59@Bu=?MEQ_LjpH]Y)%+mP&+NUM9d$%ajieN)<h](h&Sk6FiO`O*E)>%Uq-5TC=%f#Gt22[I38pf8*5a\rQoXq7Fjl)0,'G1MckrO3ak@'Ej8f<)""53li*F9Q.F$n50QJLZ<.JQGG,uUi_mp45@g<:VtcD+%^j8_o'?h1s;*\!:-P(itOfd3rZ*;egT\"00<A9GTkQSEBVBV+/_YZXr!*,O?a:uKL3bm&3PpVf%2r067L.BNbYY`c?3Uk?Ks#Ej3%_*T!BQG=\#&gos;.N5<f^E)fp;*i-AZ]YNdC'ik$3oS2@#C1DXSYo#W)BZJ3(P%qPWM7QhJQid-)7Zfo1"-b<i<3XA[W<:c[Z>DE%W0=Y?AE&<VcZWV0EOW;(8#Q!2@,WCn]]ej8E(d=+3d7sk%XHH0\QL@&-6-.?p(i3jq>LLS&-EsK<S!:*c_iMAZ$2*f\,A[a&d]'K%G7HoVp$WPVOATQtpGNORN!r:Ca$@Ul&l=4I+urL(2qRU&>"k,j?\R6cEmBL-#%mK(jspf-GJ/?dkDst"'uc`UMZg,M>SSB)P[aS<%R^egQ@J2pHM'nOha:25aS!QRFLBf+Gj<H[>EBOnm#2TJu$fCbie#A$sZ0tOsddL<5'IG>'9#"cm;s\i`cgP$3'`4KFo6V6:`P*_]%=BSl'((]J9IKN9'<Q2eW--=9Y+%`f2es,6+lAnn`C^is2#6%.3.RE]nFX9&9qBO*G,jS'CZF0@.H6e2<KMP]s,d%$-BH(;_P*;k0%P/rsT8oc][8%R9>jCIP:<8%+K:NA5`8'[Y,^jthp/8MLU*hbCWThXbfN-dV=g#`#Ej.=Q'7o#:TZZ32*RHR=k&rs*K\>M.M+]&(@%j.9"#2or+e,,bWCNHapf.FfKqN[(J<O.S`Xm%P(kMoSVma5Sq-C@V'J@Y%l?JnjiN.8Bf"]UAQSlF=5P&j>\63[5ZT,,q,_-"j"U%=/=i^=P=WA\K^"3W@JU(j;"5J%U>.e/cj-W,9=9<V)Y=A37YZHdM_;b'oDOfU,15K.h]k-W\`(S.h[%f=j\,O^_M]QWNGBCFPr$%%I#RJp]i^?uMFMsX=gJI+U)p?]&t0RCSKd6S3Y.fc13<lbA4$IEUR1+=(oT]5?h**+$42J2R<>fBhgT!R;+5`1I\m8:;/@lIb!8e>%*36K(.L(LI"UZa+ar3\`;aH,W_lQF/0bmYmSi)BTVLf0%bPFUA;aCTNAUU;1-Ihp>VC4\Hh6E=SoK?D@e9aATgnAFn+i=Xi/!hum%/7_i`ksArbfdeGh>ke3D5QrWH*aa/C>op.!;Ml7r.[\E>>ZA7g6$a%1fTH,dU8I'nhc:=h1f72$"@Z.LrVPml<D3Q2"d@O\WgF,C%^b+.cWgF,C^rP"RWgF,CnpVD@&67)$Pqc0eE$l!>O!MB_XV*Lflp.r_\"p!3L$YVEN+liH_[>B#%SSD1ZW3`sW/kj'e&k"3'm?&D%3olP<7P1->"9Jld32ZRU!"j\.=G7;ajcMX_buQP;iSGS7]t7A*)hb>%7Nh41$Un7PH[47(?2CC$V?dFX9#Xg[m05,R.RVC+6,Fe9%$@n_b3q3oIdsp(#q5DZtOo>[#/<`,'.K/^lg\Z\g`N0DT=AI]9qT^>p8?*j;HO/kA\oE;.b7&I7^.\`KZ>5YRMm!?.\F%Kh#6Y[r%U41qSe9;<78p>ElHiQZ"B]R?L4!5VGe=QU:2P->rc&*7IPK^Xc[q+F?Y=lUd66i?%o(bn[QKDCAq/c2j,2]oSR_!;m1<fU'SPcq6%rNkQ"Y*HC^YN3DLhaDVaa"4@uBTJ1uP8!?mpU+%2M8CdHCa9ujb!o`?$(n+\bn2rsqD622=G?mjRP6t3W1B-YEPf"'GqK(O8;1Vt%m%LhkS2H85;1rL!USs$ECq^1*VYq`f0I84-_HX)=bZ&L\*%2&Z.NUn3_j#7&c,4f5V-9HPDUrJ(d8<@oK?$1Lc=57\`\j>FE%8!Z%Cmu5M:69i=Ui,Vqq\$Alg&su^R*B$W_u\UNS_,?/njq%-3UN-&(_/.d753eqW#jimn!J"F/e=+UF-'hmO&9[Q^gjJjA=0A_dc;sq%)^4[3NTPd"lrGiMnlX,LrAiq&DKh!mQEr&qR7&bJo)Q<i<nalQ[1]Ig_XacU+.k"&g@UG;b0db4X[>Z#k)*@6&?f3hZ&\T5giYM-%"jGYkZR6h!WBX;k`39'4WW+8">`\o=/r5pJSVWM=7n=,eZ%%W\OPftl:E#.roFAJ,mK\`;oKR3u?"jLDg95FU7Th@S?_7js90cdb%YS4okI]@Y,@8o8=KcG?s5ep:de*BE?!e!:mZ:PlJNGuBH9cYGFMd#H0!I&SBY"I/G^H`lJ!2KK43,XQ%DP':N6"4BBN0$jK?S2=0%bol:)UNT'e$(Jk12J6oa78"8T#$?S&L9J8#:JjK9iOM<%_&M)kTeUA1T7<kMY*=dC!k_;32kJ=Ab5*f40bAn&:K_\8gJ(=FU,;a)%EC[N163D_q_-QA3lHQum_F>*U*?6RnWU%dNAsneH6u/3f*LKpYqt6pK?K>jfngn-#JLC>4Go=r.%jeXgapBXtaoB;PQHsX5B]t'5%#(RIBZV&$&9-*T#d`Rj_H"-tI%O&=hK$<+#iE<\l&dNcA4RF%uoEXW";4.+i0k<lSL5B#QgC@]7L"S-:=#PPHgC?6PkL[00OCs*`%>qBX3m5RkU;=1A,gN#@hXXt>;lX7=M]_asunE&pZ8mu:m4gOljft4#jMjsG\P>1XG8b7SGG'?E8rN`/R;99QHQjq'fEA6&Yd?8kh%#HFMn38^i78pESE+O@_,K!>$<`O.CM2V@HjW?S+s&XX/)go^:7WremW[/X;rKe.f0;!$Z2'Z]74:,%(jLn53Y"Q*ZR*-06S5:"T6%!_dSM0_@-8O*n$`4$r&*j83Ti*(X-I(Xe.*H9S21-!<GY:uX4[leu?c_/A;Pk?i,qN_3(kqp`M)AQP_k*+8h2`mFcfBp$QP(Mc$"%Cl8Bu-c2gXE/HAP3@PK`_//S9<W1K1Uml%?YG%ldOQp:=ORL4+\31\L@aisYbYl2A0W)m80,9]V3q?$gVu"TkK[;hFS$9Q%KC[Y'%8:KWr[L!6CSXR*J:,E4Z%1HO_TISetckmi$Inq+YH\Jr;=>l;^1A_l*D>o%i=B]u$f.Bu'G2fc\4BCZY1$V60Sccf05g(7WZ^;(J%SbJE@q5Q\NZRiCKCoU?"c1o+?Y7.Br\bd&)6(+@gY$GoiU6EX(^%2(#?9[Kth%Ya_&LKj$L]3?qrVr(BV5DGZA)tQYmJ3QFTiFA<%:QZ^RfrW`0>j(u4i&&;QZ&RL"_A"_\37pLuU@O@_S'#X1^5@ARNZModXh5_6Srf`GB3UiK%DB2iYU]bs>,@ELn]<0BV*8TLGi04I%-?0mil'7`#c8is>KmoV3?"QjY4s.a,Gq1F-Rdr1HV4ERE'8HsT'LpogPK-Z%XiB0cETcZkSatVS4Y.R4[`J6r.r`L1_'j`J0>iY9%1#h%O;K>')k@<%p=Z_!-^R(#KrLZ4G:Wd0uQ/o3#JNROhmd^<-nlX9m]SlS8fi6bB55+q2e_8%V)"UQ8F,-/#n<tVork2Y]B3`f3%C+H\2ZMAe\p^\G=H?aJ)FV9l//CNW8qK?s-[Q&In4Z_N%*q%*7Umk0KClQkVbt1_n^]1p-i]c4BUMI4-q``%:emZhg*HcJO6GS]"%,V!bo0n@`(m$IIoYSSa#A'7M\U#]BKq#D4<F4:[nrVP=H/[&ml/*1]3,=Qg:_a6r-]>BcG-V`!\%QqU[dcX"\OHf+;^+F4MqbqV+%K^#HDSNe-Zk*F]G$2I]aLg,(2OtJ;BmAI>R^a._EW:mT*.PN;39fgA>cp^:DJP!t_:FDB0*#``GPj)@k&tQt.'G8K<8Pp8"$Q`dT%Ng!67Q8r8]4[PRR"b6X'1.(NP(BH]H1BSpaM)^`!-R3`%Kd<6EIY=2q6o:@+QNJl7=p2+rO"daT;Bsj.qHh_Aeen:4_&V.BKq'un%@tb,\Ns[:`.SuT%$b'g5A%FDi?d6VFrUKp_fK[Br\3XR-5/n&E\h.8CerR`L@E;7f#.3#9Oe]DbTAX4hWPu-0]=UTPnhDtl]hVOS%m"?Gq8E;V8E4%<HA`.(:9=Y^+S[Bs8N-eC1QoW1h*"%(94"J?hpE.NVQ7@,L0a=^I,1=i#:^:^:O:cQCm/oOk]3>?IX^?de,``a^%>-@$&!'@*Tao;3RG$:X-6G$%6D`B>*1sQ>TfkJRR)YdU9jmSg!TK-^q=f:A`P72ifZNb:Po1hr&OUlg?M5&BenFf:InLE4T"/i!0%Q/?Rb\u=BSQ^sFaJ!bc"dh327ad-qMdKgr)q+LkkoT'8"'6ClT4IE19TmWqGD]c%S"G\2^<2Mmq\.0$h1Hpc+Lo)rUGr')B)3)q[%>)=CDYqoWQS,\:m/:DSfq=;9[IZ23srEoKT586>j/+;T09`17oaZcec+%lTpLkB;^l/n)1C-WBo-,+MAoBmag?djmr`.+%L-P]J=%*u"5\=i^]W>0E1RedJ`Lg1S)QJPQ8P;_*AJ(ufX8*snqfS`oEM)IOSWU91JLg`unBP<=&ps&l5"J^9l<JAQ>IpA_PpjkEWP9AWI;%GA&[g2HmXm,mY'T"[TI3N"#sn!ecLu!X+J&s3.g!nVbJiaso7bkXKMT?d:gp6.*527V5-0?=!H\-@bLWdOGB0UDHGh/iA4S22\,6%=3jBTY%Bj%0>R/?qYSpck4[](qA8b.+*"OBQ]H,Ac,>"r=F<-qnM,DiRF]-Pr-ok3F2Z,eY+e1<)99dhrJjK)CCA)tl!CGs,!kYV%kb(guro^*op[2s/V67!9ApLI)H&Us8_5qOGnpOOEgD`_bCH'o>emjEkhEH,^h3ic#II,hM*YQR1c/\-AY=cKdi=Gh<2mSJf:@dbi%p+c4-Psi>^3on-qo6>_06c8uo)G[h-%/\[F_&)#`8SpMIi/:g8Z#7kA^@lkS[-e$>rmQFCc/l$[LM&+KX,&.Jc``M1F`o?*QOt;q%O+2M(Vj,6ak>um[GK4BnF,C[WBBSrOSTh6?Q%"cRfV(A%Hstu@)gCfs%eb7h?-I_?](`_EMn(S,VRV"LmVeI_+)XNY=77c1eS!',%5PLXms1cT[r9$&lEuR&^4*p!.XIda=l/5pP%gl5oc4]N])TQ-Bf.2^3i+"@P9>**\m?aa862Bohq.WP#?\a]Uqr?S)QZW-?crBY7%gqR;>YQ!X4j<]5l]VLNW9cig-GtHMtDrTZ'\K:FmlGuBs0\'e'f\P$Ab0=/VL\+="p@?U+hcn<kDe!4G-W(4Q5kRNFNT<M*)CGHL%;8.FX8K)`XrE35:><<sbFbiJ<diEfGkP@%i3"<MRWTUTlVQo",1="[)e@7!sX6oX3bD<Si[BmkV.@lk!%DD<*(gWbZFc#]?ou=nC%c[skXQW&HnDpQJ\s1A*Z_VPeep)Wt]K=B>!Ym51Xn?M]u=&@"R6_^9G*nsja)Y<1-KTA:l6]j?]J+]X%XoUl#KBgDHX",/^@8C._%=\_8a&)W@KQm+s2T-\io]2f'>SsWk;j7tuX=prGTf=4:GMEW!!>@<.#&MKsH^:JAHkD;F;rk7BtpVVJ>+8_0Jra#?P]f4F0Z$UEc%I-g[qSRo-NjQ^me`)4Yjh`-&K^Eu`]d=P][)P8C;2"/fM@s/l<8XJB>3Ks'Qn#mmt9P`@@<?gPNGOd\^rn<$Vic-K0Tn:Soj<`(B%(CX6635$896d1RV?7`7L_^.L;o>Ij44Pn"`=rHK2.q?K%5!+40]SZ[+rlI6o;5$*P"?ej\59'BUqNbL5`6UoP*!4:aYZT)BReYRO%5BHaa:&OqCn\-!?M*IW;#u1?Bf7-!E,7AAN@lElKB+;F!IXQM'jG#hfiq9KD.0&S7=<C"]j[:8rCdJ5Z3K+O%fq"ZAlH5(ko=\;f%>7:3%+gB:*G:q=[s8?"*\*jT$*1"@je@XX8ri6=f\6n_[:`F]>M;AlfO,Cp>;f0"91k21DI"-G.LL0dD*]lc8m.P(AKPI#>G5FN1%luTje$-&@W++!&3k`sA-WcLc+lfaUGmdciglM9\Zej$<=K%cT'oPAr7?Kk=WrA&B9)iFr(iA[ranKUj-LVNBkrKX]fq()@"W.?us%pLS@9!lEO7A:J0Tkg081J)qL/M9f>rkjn.&ki<Y3jf4QcIBN#kdsiFAQ,-i!CH"<R8pc9P@+R&Boo]3<C-ttLVdXee4M$%'65p/F%*ZnOCh^8nWiTDH/s5l:C@TLEIhnO\>+4bq[_1'imfVN<WfZJu%o%;c0Hh#$mf5p0.m^g*9s3'T$M#RkJp+3kh[:q:!^E1GHmC@%o%`A\l2]s:!VjrF5<L%+'sYXoX=k?<b?OO16sIZ_ro1mP:"hZiHFH6JLoaTqPknh`9bMQI1*,L!;RHo+;,qa=')(\"^'.-9Ks.)OL-%qj!V<:ik82[]_\GqV;D#;#.^0pUh>B0&D#`Lspk=@tMqH;P\jX6L8q\=nkg>ijh7aR*Gp9H"dPDmddT]"7Ilr[?N(XjZ,9S+Sl?5%qq9HoLXYk^%smX%l/hi\8pcX!+Q7ZhY5+[a\b0D$;k]YN)l`OdEdEls`R\,7]Wnchd]T,Y;W#LjWV.\`i15:JdEA-"di/WqDF#gp%9,i'`Mm9*.88JH(Z7:*?o2HK`5Kp#2<J$6cgaL8f2fC.4!B'i=)?.9!_pW\a)lBer*uiKOQ1EeoU+"@ZQh6]IR$MRcbkArbk<uR>%_to?<J5.4phHK3(3,UkFrZR*!4b6TaMRH5PSXesE[+JK1(RYrA)G(0JH*`JM^:)W&!;^Ln%,8A3If&-gbnH*8p0BSK%o9KbjPD>7%E7gbRX\UINR1mK$InhV"F.6Q9;1.-6l;hTN[ohPC$%u+P/ls]I:pGAk*7%t*\?$U\aGK%Dpu*^YoCqG),'E-iQN")1AV[)NUk(*E%fH#qjIs'E7)G%(oB9uZ&/AG55"-n@V'oEdsd$>gqYYDgnc,%7=>U]6$fDg&4VQ)+'W2hrf]iXl7l.1Vkg\Wr'?gPGX)_B:)R9@,*%WV)gqB<Tq]\$pk?rnmINYFg9rh;3KC3'CBTE;S)GB'i[/T>#c_4]ms#Y:;*AEXpRO[3$%^7>G)q*]ID3ror"eXjuV"hRS92'tAW,%hZk@=#9OX`5&u$T?\Q&h2Z?s:BQg1B4?oK>o)h#Qe*?Z+`=H_lf1*N[`N,nYPF/cOQGb<b>L[56qY9@OKg5$5I!jc*Y-+pt?_foY%Se?%M,L5?hpMm7/G`,?;R9RDnY`)q?or<B?BaGkG=on7&8]sW-isSH1n\]X"2<ieV`G9ZN+.7WUe,I2K6me<H$dQ-YkYXN82da&n%!>8ZRGBV8gT1/P/8%fsJO(K@2a*b2Knf)]Am6\**nXl^l6&a!bd^N3gNLtrMIcpA#Hj)HeGG=0QkGl)P2(DXGmd*:1_q)(cBCcY#%:=6e_YL1>Hn!q]gD(ZR,dBPJh(\/(qFSi]r#.&;m^3GWpR5Z`)CD0A%_fG1)bor%;pk6G8"hmb(G5OcAjMidrJ!+>lK`8WpdZ48S%0qFg"r.*"(lg*h/Hjckg94Z<)n"<-/QK3b2Gk^S[qX]`5-V5AnS+l<u[G*>dpbIeRb<PN\Pa.&%qh@<&fQ_lnMQJLJ/Y?^h<I]G-%2i9<E]@;j#DEOmMEB*s"f"3e\4ScHm4o-Vn-50U>l!O1-H;C+p2!<kqTtPcXKo?fF]<EEa<u+SLqb2F0p,N'*j)-LX+1m.)S<pk&%q"Dsln^kM6/*Yc;[_m5BaU>2(icqGuL&SNhQ&G_6[3GsN-ko'9k[IU!>r&IYmOteRdJ.bG`\1Z9o6G%@Rsj>"e1`k5s30Sd_Y'b$%`H7+?o7MEUk"_`Pn.-eQih[^i,Z\5#Mi=c3]#+2U2YhWF,3lcf0/(%#]!osl-d5@tNsg'"cq+5I^5u*1Z11sCpn`'7n0:jke-jO.%lc*Z,6T0tq,I;@_p=_<MnbDn9lMge9V^KX-MDO[dYPuN^\[f9Cb7iL=m2>WHg[O0**oQSYrW"%3gjBLM1Yijm4AYlmXqVp5L)i:$%%i0e%mpRWX6d;5VGK_c8DXn?Q!<7AY5ChS&0*BE<`t5^kLo/1J#VgAqefUG>F1W5=SBtE%Tlq-qoNZub]q%s'QUbI;H/]c7lrcu*%Xt,.RO&^[SHs6,'%!)8+^[g.W(9tQ,Fo#NkMI/RH@;bf:rDtT<`+oP;(RA.[h,[0]ms^ppcLIe9O/=Ra/t@30k;j/;MP'<Z#a<K`%1j8ZY=ESEI3j%l7g:O-G4/sNFE7bjQlgF^(OpT-/lW9Ek1)7,#&f067TG:Z^kkO_2f.Ghl1NO,r#@6C+RmZf1r;D'@KQA#lXpM@*%oM30Ekj]2j]nPQ(]=5"G8+=E%r:#pJ!/d!N=&_;"Yb!j]i/MIB7^2MGINpg!kW`uRD]:[!U0-_QaZl+8bg+PZ&:]p34M>b%@lns6%%!PtsE0C57(B#E/GP9!8[._d\-d/W_BGmo,N$BWIm'E"/D"+8U6i>=nq^'@r'RS2F3JP!&7Vl/0eh;as\_Xsr]ll3PrtCEbZcLhn%aJm@`\">KUmBu=LL10cJA4#RJMp7RCqkIS=*20d)?BDMfg_Yh.D-$(5MWC10*j/$DMNL_aa<GmQo,j\t%Z^r'jbGCM@p_DD6@VFd%]]:c%-^)q07EF.jM<$X+,a:53q8IO#jJIC?MhnMRSX1M<eCh\_gW#gI+@*?\iA+jgR_Nh8%6MRS.N7ic9=O0Xm+ZoW<_hW7bi,`'%:4i#>.0aG^AsKk0?+p,o_bAB*6U*_=H-jXXks&G'A+AWPn-<<k.h"LtnNAN%eV+Vo>/6-4H7Bel*`h#O`u@qi%8m(Mq9n;i(S621%^(S9We?R7_F-?]DZR"sWX=U0W!0MokrSP/R1IS'6XWO\44Y'5m1WPOijS&<E%r]h15J"A<o3uXFp!<@2N#p(?'`ARBXl;U8H=4C`%5<PU6-Sr*T?gN0mhpuk$dGE+;7nXZlhljb=qYnJ"]rh6_#,_L5HYmk;F*2GJd'c(nQmHRu,AKq;c,'DOLbO35UBVOus6fk<`[bFh%A#R3V9NWu[;+pn(CNk,Hn(IF7dbf5PFSl%&rI=CqB4f0D0rp)D;H4-Hkck(rDeCbNn`#8#7#5'Nhf#3&#8()u+nH6CEJ=D^(P2Q,%\A>ShrBJfi)=Y9r__%J)KYd$1i9kMjJ@7IoG&Jop=="MQ0s"VZAtXmPWh%]<&*<,GrXkEUTu$@f6JDe"AoM>$e8a\oMusm@cpf#[%]/.:5TeWQ^@A=T=)*P?u@85X!YbLURnH?$"9:L:s#ICmhh0=&=c`K.\^\m\8]0g&/O4Fl%p(\gTgN?a=g^f#k?qU$den@N@"m]k7%L?>[SAI55g`eGDQ`A#erc=s,SK6!8doZrD.<9\_m6\klOap`(G%)JrP7@b;cIAn=)_Q^25B36."_[rP,rN3&+VucEUmA%J6d-*`>%BVJnA%&.XU&]>0M;%=^YL/DFa1k^).d87l6"_^%-5#_rK_k;5T[-IhtbYhN'"V<S7W48B-6`[Ek<=`TD4GBWGhH5L]Dg2bI5HCKd%9FL0bS#\7Xc)m?INd=-eYPcaH66:'#6p/=Q\Y6DGO7&u__uc1"IjiRG84QSZ$UagOR:LmFel[LO7!HiA6D0qQJ^i$s_c$^'>13O>%"Gn-p;-?5M((_\WPc]3#'m6Vb;LrRF5t+a,Zj+C9>",$UVOgdQ:J[_h*Y!:46]25tdB#)*SYMY!&A]oZiu.'QFRXhf(*NrnkYO?m%dD<"<duG!YE=YnU#t[tF&LhBKl:U(TcO4e^fq>U+\gEr+@i0?bSomJtd?q_safl,1W;SDN[:`UW0gJN)qs8S43nm88&[XkO2.0H;%,9=]Gc4<0K8AkZU7!.mB$;4YF0o8`UrJ4-/=s!':n:Ntoe=)F2D%)Ct?0Gf.UPTD#e2M.-9B<:8T]_,A2PMkPQu3eZkiWl-W9EU"%!qV:mO\Ttjm8UN+>j+G`R^O><H<=/^j%K]X-8H2aU[@#@JU1@M!*rJ`SMD]9-Z>qN#h?/>23TiSJeB:"s#o0mJ7oL(*76%Y.5lQl%BRf8Zli`;FLX[s'-5-%[JMt-?GRDfQ(.p8i/sYcSOZR71Jj;gg\;GKr%TEkDahcS^T&R`K0PI14D;;A$MT;Io'`p;2qokEISR:YJ%"=6YO,6H*<D4itC^4t4`(Y$ojU'jEn,q@@"HA5G0c9rGZWdGWh7dRr?i[fc;d./s)`X/=VS>R5eO%.o!7?=%#(`8l@:FD%.&j6[E%M]a_=8f&r'[X63AM<5al3m3.`CK_Q2(f)N:%MTM>N_CJhVKb.!2=U^!GsX.S_CYA^/c+1Ki&qUQd8pjd@d`OG7+G:3I>R9hMA`(b%ob\[Y5Y!k)509C0iN#3HV)PFJI$-Y?0cE^.-,uB3aF!2F9.-+L7%kh?1mUVT?^[@^6H:5Rg(rCMU9U@]Vi)BP;+1Rucbn.u$3:qF%`"ltDl'tZ_U*skNjZSf]mL<$Dq@^959>gALR3K@<+?b[dAr>$=<j]Mj-gnt_%'W?q.1a.(.u)H6Wp&NklQZ'>+R0l%K@$)`]LTQ]%M/n:"!9;6$"?K@ZFE)ial#9%F3SHtI\#3GG4RWf"Vq7E8TR.HT^s>6IZ*s;2:rdW=HI+K$R`AD3gAm0LYm#HVQEpbBJbmfP#4t9s%";?XqT.`CmET0o_<_<#,,$IL2RS'$C6TFkQI0UqqBZ6]:!=JsuQiQM0Mn9q>_`-#i2k[AN"FWiU4p:./Dd,N`!]DWQS"U2S[]j[@%?2^>8S"HaE]Idr7o&cW<ni!^j8`!6_LVk9Ro)KNd/R[%j[i)1gD[ZH.j;k;5rb(eN_<>ACqM>HX4uq1qf_7iuL#c0&0C#P(_'\$+%^^;].'#j@AY'4:2@,JkG\Q(5(+d>>8.B/eF?\,fUn1Ad\*rbc1lb>)q+bZ%!h4\]gS"@41n-sN<+9(l2lb5/t+b#&>Qdj9aY<^oe%pm/Ki&,ueqH\004"f%.7]\ZuNpkUMACV"r$0R$MJI&is$Urnfb%].=c<!`(hjk(cTTUU8RVT0&;5f!<EBc+PiVELu2J5qkCCS^Q.%-P3V']^)q?[aQd<p0N\IP!ij(;DB]dZI[S5-J3#P!&*a1.bJ]SCbgU*P%hPq1oYNCFN;k+?u"MgQcN3qWf%suJM-6U17EC*EguS+%W\j;_eB@WP<:94pB]dG3_]:q;BfR**NbjeWJI]OLK-L:$MemL@!iK`e`\G]h@NU<g"F;\.af5=X*@J,I>2r>/dI</J\)%FFRs(fL%/A05PYhTF;F#NWQ[[ta1%=U"q\r]1i$5eVYoX(iNa/WqZ,E?4HE]Y,S[&[YK;A(<+de#WB&M/U^=[UZ>=DK]t6'Gp7Jp%TH-&m7U%1&7\I6sUNZ>GQo&]W7;<&g,\6V60tXJe>&^(oC#<bUOuke?E2)3j8o+(!\*82b=&Zo0[*"0:baPA^M"MCobK&S]?@C4".WaH!\:N%X0UEJnUlrcUuB`Wf^9c5kV/PGfO'PK+>p6$j_/Dm6>a?@&q(LrScs;ArR>ZX0344hF]P!OlVJnPgS%q?Y=%FNDG7dLCc$eCOC$8e%.>s1F;=&LW&^t,T.u^Kcr<cBe`Epch0f<21CF'a;>)b7?XT!;]9nHO2.^Aj9b&uI<m#u,'K0-oT/[LuaY(2B=Lb4'u%Ds<@nhLJM%72ln63LDCVAehRAp`IZ+K(us8=TNS5`tCJL9]Q<&XJ0C[XL9.QV+Ngf9>)+SQHBGVA+GVuSW=,$9UN?mr0-JZU[psZ0T9&f1`Fqm%CDc1anY!]`Bo-;L.31a,nOr=d:WmC)(pKZMc*gMgXm*9hAU2scG!&F-W4G'o&Zb/p`6Z6,<[V!QLWP9iHK5>8ip3.Y0^MlD4!%Wa%d<=YPnB7f`_%/(VE8PgZD7a8jc$0CtRX#;;2>@o.mdJ37>O+fm[5HhTigBA6YdKJONr\.*Q4TU3Jd>B^f_;X%@7B[!3O\CoCi5Xd%m,_]C&Wq_`YYMF$fP(Q)C)+AJLaRm[GK5?,7.+kQ03h<sj-&n1nt(i`FV%it<sboNqe%tW%,h8c9KA[fSt^T'd`Y_0"]ODN!g!YF%0%\LX/(WI6=4!e3\"I)\?U<lSIS@J`NnuM6Nl3'd#]6\bE'0!+OSL+@KO1AV!)%nK?kKP#-n*ILRGaHE2\M>jf/OQeKBT0:ENZap%TU58$/VYK*oHlH4p-p?K-JQY"71c/0N!ZB7$!Xj5@6C'#j`n.>,efMLC2r3SE75BOFa"9h]4.baBE^tr=UWY8fG,\"DoLeL)G"2B%(nQB_ApV)KJ>G7Dk+&r:"0%Z,@KK$YKM=/om"S>LhW08)[`?Zt'17AV*ss^]Fgg%bhQBJ`W9ngnLM[as_V*"^@Y#UUH*>.PgoSC:%*'jAK*^]tm[*s!KGD@D$)1?F,PtkVA*bjILcJW^\9tOlFc$0Cpo!ASn)XIe\pNL-<NNLXiE-pUOVgY[VnluFp)<H*o^BlJ`q5?X^%nS8.:LXl`i?].1-,Gr>""+.q$+V&SNC$+_.StR$^?omMuRFPBlkM9SPqmL"JZ!@LK[#r(&-')Q6>pYPFB=o@JD)j8cZirNBn08c7%hSh7=B#SMSi<lSAe$d21YUaDBhhoN721g`2pqd]Z,Aij^/bGhNJJi&7^YY!'=VPQ6Z83Eh#b(_O"A@-)J2r:W+@^nti"M&;fYB3K%;,sLJ%ar+JamF=VhV$2eOI*Z!9/QG&M3MYP?&(bNNV#Xj'lJ?NNc$mJ1R-oC`h_nE9?IIDN\5eQWl"Sg=\$rD=Dp!%6'l3?Jpn/X%"eGPf1%Eh@#co"o5u/@'@-nRX^M3lrfiu<Y&F\aA^4XZq![<aN0[)pk4i`*rOMP?O9I,-F#<1!c;eq61BU[=_[;9b17S?4?E`*&S%Q/L'J7X%7:%`K=tIj@0U+ASi&'dHOf3*:W=DcVMBdWD`MLgi-q75XCh`AZ`k1hl)(B\20DOLW%?POC!\B5#tN@#8"iHMM8VXd61a%^h?2t'Hrj^[THSX,c1cL26=@l1PV_1^hT/=/L%K0!l]\VeC*r&3?#/9L<ttK@$Y,n@(VWN[1LMbJK.7P2?ih3M_Ge<LgVB8Q7Oj/%m0kGM*#I*77j&+A.],)M/o?0/WE9HZ(XTO'QJ%;J;PTYa-!H4.6/;Gd9YR-@_@/ZU-HZEWqh[ioI`r40,IPHH3JmP5/4C4uS1k^s%$rgqiHiONo3Cg=G^]@K@\3tFI_8"G/**2'mg@;se=U-A;"d9R^[.o3?Yq`^i#@3#tSAruieSV24CK:p8miRHHjg5:>WaZc-"\WOq%/u*,^/@QM#+A4M/6,&:a608)`9YRb;d]6c)1I`S'i+R?!21l)[!K/!"IWUSU7[GJ0)?d)MbUNa:U/N:c8cfrkaoPCjd2PA**U2@Z%Wm_HDnOgdGGd*hGIL4bSM.<mFEE(kO#VE;)[-JhOBc>FFG+59U^s5bEE*N(66m/Rg?.:";,,hbO6>fjW231h%,gT\Xc??2AhhB02%2#%b@%',GhRIcRqcNXus9J&bo_Z6*\#VT`Q%'Vd3#U*p@@MJJ\bSpXuQX5shHidH+2b(]M+n:n91B]k`)q,:P&5H^sdiuZ`8H<@T%*l2+K"dQ_/K%Z7^P18GUaKcfm0+PY-*07%$=1rkkT+21+`"/!PY3N0bC"FuH)6TW)T!kG$7^&V.IlA_3=H]oS)Xe\:WcLQ:$.om!%WLticHNA755Yt;L_KuTi-!3".#U#!dEjR(n-Q1%A^*d>f2<Y30!BquM]$3':!N%puHm0d'jCq3\TVF'2KH3<Q)[RugMZA]!!<V:%%l*Li(F6.@/9%iH<<hFuG9C.IGZXhN;U2AJa[2lEH8Y3=W]7aIF`kALAHrI@/&lGo"eL^[MPrp1>d4sehW@%>7V4#8s"%(uf5Y_CU%!M`A>r>)8FGnpCslN'flp2*tFs&$Kh(b'Q!hQ^Zb%>@Q'2OKW,?csa1=.l!0OC6d`XDcM36eaQUn`UR^gXD]Ofm>gEdH/cuFB?ks%.i-lu=4!b2[j>=4?:!NK7SLOo1q>uP0uufP(N\Nujo+*kBIa,a_.$enFp4csY5jHUY(E%D[1<RE'1]o3C+Vi2nn1/W9ad;/1Q$`S%2or8Sc%H93O\)d1)"B\'EX[+p!'@Rk7Z(]WCq#st\Fn-l.6XOaY7YWVK3tncFdCF^.otA_<tM0q[ieq.?U<WL7SLIm?lTp6+BV$K%%#hu0&jC9I3PAd^jU#N38?`*<3`RP0:#\+PV,t'eG$a_D!)jUg1Vg)l!D=>TV]BT'*'[D]#?<Ifm^u$_F&_-(PA?D+brUrW&i*-0%\l>5D>3+PcGY58S3qL4K!IeA7LEmNGF#rW#g(ipj`[g9$bZiGt_69MQIm5:;=r%CZkibb('TUue&I<>SO<Pg0s%oeR/HEWp2F+'>%40TYLJoUbo5TYk65W`Ld)*hSf5%m!1Fm-2a*J"+/`E4U^l"3O0M7+jW+X?-=J<G'V"B3kZ$u[EJc_;H8B/!SUit4sNPV/k&5_RQk%oEaUTC)3j`gU2rVa(n5o9NtCIUK>gO^C=-.BJT?Jnn&>MQXLK:5`j@YPQsf9IrN4[//bN4h\ua5jHVia!ooUVYS:[R(e75F(UJ%d%D<GYZ-d2%A6m@B[G$[\Ob%p72nT0uVUQ(.R\0/UAJ;&*-b'*Df6'pkqLY'gpV^3?$W`05:AFet9,I]1iRt`GmP%QAGQa&'?gu"+5%2jP/[=Jn\tp)P:\:a^&k*A!_2[4%h6!TjI<Yt9WdP(\D#ac.c(/(m&+&`kPs^cZZWla*"eBErS2clJ1-Y[]%R0eYT/k-XoWK4HXC%lU^G;JM@LC3uk3E@!$E5/3;mgaRo_'-u`[-<d!$@1i&H3Nn0@=9j,iF_5j5IIikQ?dU]IL@\1uMjt4!2jopj(ncfpY`bKGM.5ENl%fN8TMY&%u'@KlDm8kI</10,VAOOR.ZBa9&mCY]khmqd2O>Zm[W.Ubgid6cPEkW8N"Gh3O?=LLQ=-14Si(<OeSG,J;23%Zj0k)>89%c3eU(Ei"&kOs52*P&_GPP/@0WQsrj^0FNTD8%TJ7)c_J=;q\N2*4=lC'Lh^e_i?(fJmbs1Rp`To[&ZSX'pu4%j<0pQG2#<jP;fK^%Nu46o9r+0.j\WVl5:9$jULG)n>7>cFTepq]5p.N!^,$b63^U20.tYc7e\t;,MqD0$e#lei*j-VX1M]:h#.oK.]tKeB=1u7kE;ifJ%$$VfMbjYT?2DL._M@0DrP)*g%afU:R.HL]Mm)drPJ1:#M!+rS>$l2V,]'W1OX"D??S3bks(3\6HB,gK-V!a8cA\_'AgYF4YGM5'&%\3&_R3HaGj.AF)"SWuRo=[gfB=D]j!6'Z'9JpIlP"dSts1%E84IW0TQ+8K6m%[f$9^&En';#8Xd:`j<+o)HF3d'&>c=?92\>@hVs%jeRNW\l-]f%//rH[P(BWTP$pVG5OMMC2f/JLj0\rq$#QEYp"h"2)&QoHi_N&dP"KES1+^u2Ig:G_8^)a9fgq)n&cFTp,2;pq3lNG%Ieo(D;U&jH`2sp#-=@2b96&7m/qYW9?5WlrWZuUH'%%CN7Z!HK=U!8`/pYSop6AR,V2.&q]Rh9d]G-GU+K,mIEk_aX7>JeE=\3*T%N"LlInO%(>Pb'Xr#%`>;<<^41n[>O?)1&'J)75=F&EsuC&D1\3;+=t6J;YkP?5XIBDA,P*#QmmSLpb-^<Ye5;U&hN\>3T3kL/94q%W<<JQ,[GNVQXC)4MaD@B?l!fYlDJT`SH+#76R5@Lo<FnpY#\7"B<6?)YYQ%C2T@QBf%.p8:J7a![okA!ecl-0SL&ed^e6I0-m'%p%C'!OgX/@c"^Z;2Obm'g4g3h/s^jaO-BDX\lE`5.R'd=6b/mfF+V&3V"f>Wbq#c<&Vm&(qY04f#rUTRHGCs#3W$33bn`Y;fs&Or`I%=.Ek"9u=%dN\5qq101h<#^'PU4@:+ph\,2)_@YS\Jahd\TaeAO5`hZcrG(Bs0Z/SX!*I^8ML;hB$lk.a3>a>RZAq02V+&[j!1/68%m#]kR1-EcPka)@t0]3"58K^8Q:efEi!eFj9fTlifUfr^4Es(!YLW'R))W!&P/KtCd.FpoI6kaAQZVK.O>FK)7g4]e;m_B71)hW<4%1?37rY3#D<lbNa+[)/e][?scNDBBG-(4;b</Q?^%-50Q=Vu6V4_7cL?%;02P8b_Gs9EB2I+TR>LY](_G0G#]=cfLL58+UH_Qm>;i%6nu`mVp/5G]k#coJGC\l*`L)fGh!mM2"TnSD_l_r5EclU]r"+,-+PH1MeN3e$ttF[NVTS=7QX2&Jp54MTfQn]fW;p6='JJ0TA<aX%^U^`s]-I0N)r'T)rp)MX]Il%l=Ru6J<`L\+S(mLkcC1GO4!HauSV-D6;j\*^.!KM)LLO$QiI?Zs/$=s>IVJ#%>Fl%eJ7'Rggh5b@%PG792#\5QI?Dl2Apc0=\PL<@,$DSPbaC4o'U*_:t-!BgO5nBL]Wrr(N+C0sp)9s-qjuHrl#DA3`j-VubOqFfo9dQ9mPq*/F5m"Bn%RM72GE's3&pZrYc8sfr<Ecjm/\?Q=:6;e'24!mJ37C3_Q),aQe-^e,A19"G4@Ohb^YbkkZ<*X<6OtJ=g*YncGSZ4aqKA4mRh,2C%%aLO`E'Jap.2*(D4'!>5"r0=&t;qHg_W8uP7%)imNP]MdL;TZ^f;8Ne(*2=brH:PT8W]?q9B1jU6ALeuf<&-d[:/G7+=e\b;M/5`1%4if=ZK-V:g8t=mlZNZ%0'o_3GP#s5SUEE?u6W[+20c?T+nV%<-g0i_K"273]!LsO&cnV=?O4:YEWLb>]=tS_g3+s&3&e[rW&RLUc%3LWQtFM\WM8oAb'fJ"W9O.>m%'MBaK-'82-[C'8Q0hP#7Vjt706;8;D8K:Uc!Hm>]Wgn23At:G5VYZZTF#?Rhka7m]i%l?UKB+[3%+W<oN12nK_R4M2L$!\H6JF\]9$SJ<>g2&%N%%ZaH6ej;s-V?Gb.(LtS['1K?0sX\^OZaG8Kr$@,@N%`dP%5e=W"ga1&9Oiri3Y9!%NuTm8Lf2Yuj\/^1i'/^u.nL@qFJpI84OfN`!>oSA+g<VQVAa!lO8q9-`hh0FA,o1q7p$!Bop/'E;Ua#aR8%3k+S6bfJRf0<f&A0h%l]<[B,t_Ig+-C5Ve8ME7mfrG?3F3Ws)l4II6bnZASp1spA.X,*>gh$^]Qff*^#B_+PF2qtQ;)ZmE'gL*Mt)tR2l8'c>5/K*2l9tb%>YQ[28=FJT`PRLLE)I7R>>'f?,go3L"?lc99T;"uSJ16"6-n\3^hU#@Ms?:lieUuUSH@Ir&lhi620G1ANX0k?3H3_V7-qb/Au.bg%e\^QI]ht(!0:Ll_()1cYW>K0:K0N5':]e9A]dj7,4YeL-:pZ=:N`O(H^i4Z55A-'U_r4*^`[g+7_C)7/%XfYJ(pS^%Qia<N*.-<D%KG_jOJk*P@HB-(IA6shk6V2Q2aY(DE&T36<;3Z$"7!qP,S.e1e!os'3E@?R[?QkO:joa+SF9t#i:,1@A9GJskccKLLcd<B'JKQ^C%Wkgo7ag1'U+-+E/)K,t1L:*KshHK)/VjK#+4\(1oL]\@(RHll-P!JSH,Am]U$S+o):(`u2g-#KGN"qBkdXBf:LBOUoZg0_6X<EmB%Ik(?;Yar1Ci`LgQN\"kH1s9/PXos15$UflS0@F:*&1!.2B_WAe.W@B&Y/gSS7(BIXP"^/6I<<ZEY^YKOZeaS"elBu4=+MY:P_Q&J%[q=;:b#VZ0/*.Z_"meM3ajI=n(b^e$i9Z,OKtre-Q./^ugKL.?Y`uA@h^M1%`&p/^=ECIb<$)t:Mlo%.)<-QAb#Sbum5[06_2@"S%fnaMUXQ@Op@7a*`cpJFk65S);2at]KRQ4$[_-e7N:+T@N?3iqjP^kcS"!BY/?IpX+CH+n%LUb;IfWN_d!6YIW1*W(55Ij=$#M/?)%GsWa5dm1h^*"C(OjY-epW'gF(dLoY$DIEe$lT.J^!r.jUJj%_Ahds>k?5&-f,+U0^^0<l!r?b#8'mI0:1@1V%]FkQ09'(>SC8jUS%6Qcb[UBL8%:6(%[@^gn2aRA7D965I_+lOa;K+n^@?V8t%^/O*gUR[1+UhZ4]G?G9;$rfX;-+Q'%gHlY;'%ZM53>sbi_][tfUqE"!%/eUotT4Qt9BC2Iu\k%]1lp0I-Edh00j#knM;[AM4b6JLYAsRq?%sb(bY^YKOUUa7KSneh/p]@gQ>tN%Hac*?ZXGqP/P2-65]2"B?%nL:Z_,0tuc;beF!1e+EKP,j2u2&<Yo=MO;=Bq;J<E_9U`<m4j8H6"h_Ngu"SQUPP4W<;J\SK]#XP0Y::0&pkR!0*@F-qM^ZoKi8<%ZL]BDhfjt53LB?kfLT(bmT`;:it:<%6+2cl[KGjiSKd)e91CU*eQP/0@,N<mHP'6inB4:u'%ZM/`VbNC7#$d>L:k_&jMe^'RZMQ#%H-$:/8m&:_'\Q>L1.+kh?<8]75]&7&N0,)f`SLa2JX+OkXP\5ZHlaLZDIgILW<"Id%U)aDF;2-m<q>4&%]nQ3$8cL[@?GQG?`hsl%[7f!k]]8Qs&gUH[:66khrN9'F_JgB+efSDH-Ng(YCbA6gW254^.tgHmn%edJVo[[j.C-Ta'(*3Pq#bHOj&7Bq%C#_l"4/"6_6-^E%&Q"LhOpLoQbEp*0!Ugd<dOH]AYYg9B]R][d:0W9CEp*W4bE`;+H!lf"#uPAoN=[D;hfXhGHm>TpC^3O/gq^e51XSc8]-Im921'[R%fR^b8T]*1p&frPVGos$<#p-<#:WQ=[!U9?J.T(c!F"fY[@;2&1YU,%ZTGV5u;CDinDF+5m;[(]m'aY`*XCqVSa:8Rm$uS757C_PU%$TZRP$5@<60o+J@SG6A"E+DZR(.=MLT]%*r6SDmH^/IJ13d_YJj]jdmBU?V/")QtQmu0:4!OLCa"SI+:N!+W;`6pF1K%;@(T[Nis%bWuFC!<f`1`^hl\D?7Z.0igIA##at-\&Q4(hpIh]VI2#RlHO8K>\L(J-&c>9`Qs4[Ap+"W/G1$C)/flJ$ctPSjeV5m,,9>iR&[^l%)GD^ukA)%_pD])0CC5\"J$LGXAOW3T!X9HH'K6`MfXh%f/G1$C)/gu\$#In+EbWF:aXmeG<Us.sQqLkIKr(rIK;2.LZd<_h![fma%WntTTo(^lUK<O+Ia?:R[Rnne[(iP9uJa'dKr5CD6W@S4sB1F"E[L9&_qE\6-jYIF-2apS#kfC/VVW_u<;7$aP8A1=MP!t5')%TAG%7gDPRJn8'[]G[`36:9HY5UmT<J?t\Oh!qVuF`_T0.?o:HWWD)5>9Z8?+=03k.Jq)V+WM#VY+pWE9iY5Ne*hlWE/e<!U4o:+OF0M+%:+7e13Yn%XNlI#:Kecn)7P6pR[8\np@#-GWV-DUJ2?o?ANQ-o7Q!VQ#)lo>[RdHCpPEJn=(.p<oEM1g&1hO+oPU#mO96*(/,mDLb%K&)6tOlj[bg:B0I7[cXFdZRQ:nXA;+]-Y\aZ6ll(S?4g^<p/H[#KQ]G=Xs7mher6lRS*F_8q2jRb1D3rp7Cf`JPVi*3IVrf9#'_2%]m-ru5I9s!l[Q>J>C1_lP4&#_qIQn;^\s1)g`F-*oC_!k:m]u8q!ka2lSJPO@,fI8~>%AI9_PrivateDataEnd