%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 10.0%%For: (Lisa Tauxe) (SIO)%%Title: (db.eps)%%CreationDate: 11/2/02 6:56 PM%%BoundingBox: 71 109 505 597%%HiResBoundingBox: 71.625 109.5371 504.375 597%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 9 45 601 783%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -246 804 1 1018 715 18 0 1 7 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:9 45%%AI3_PaperRect:-9 783 603 -9%%AI3_Margin:9 -40 -9 9%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 116 128 8%%BeginData: 7968 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD54FFA8FD3BFF7DFD37FF527D52FD39FF5252FD36FF7D527DFD39%FF5227FDCEFFA8FD12FFA87DA87DA87DA87DA87DA8FD2EFF7D7D7DA87D7D%7DA87DA8A8FD1CFF527DA8FD0DFFA8A87DA87DFD04FFA8FD04FF7DA87DA8%A8FD26FFA87DA87DA8FD04FFA8FFFFFFA8A87DA87DFD19FF27277DFD0AFF%A8A852A8FD0FFFA8F87D527DA8FD13FF527D52FD0BFF7D7DA8FFFFFFA8FD%0DFF527D7DFD17FFA8FD0AFF7DA8FFFFA8FD0FFF7D277D277DA87DFD12FF%7D7D7DFD08FFA8A8A8FFA8FD15FF7DA8FD1EFFA87DFD16FFA8F8A8FFFF7D%A8FD12FF7DFD07FF7D7DFD1BFF7DA8FD1AFFA87DFD12FF2727FD0BFF7DA8%FD16FFA87DFFA8FD1CFFA87DFD18FFA8A8FD13FF522752FFA8F8A8FD07FF%A8A8FD14FFA8A8FD21FF7DFD16FFA8A8FD10FFA8A8FFFFA852F8FFA827A8%FFFF7DF8FD04FFA8A8FD12FFA8A8FD23FF7DA8FD13FF7DA8A8FD0EFFA827%27F8527DF8F852F8FD05FFA82752FD05FFA8FD0FFFA8A8FD24FFA8FFA8A8%FD11FF7DFD0FFF7D27FD05F827F8525227A8FD05FF7DF87DFD05FFA8FD0E%FFA8FD12FF7DA87DFD13FFA8A8FD0FFF7DA8FD0EFF52FD04F827F8F827F8%F8F8A827A8FFFFFF52FF7DFD07FF7DFD0CFF7DFD12FF7DFFA8FF7DFD13FF%7DFD0EFFA8FFA8FD0FFF7DFF7D27FD05F82727A8F827F82727F8A8FD07FF%A8A8A8FD0AFFA8FD12FF5227527DA8A87DFD13FF7DFD0CFFA8A8FD13FF27%FD07F82752FFF8F852FF7DFD0AFF7DFD0AFFA8FD13FFF8FFA8A827527DFD%13FF7DFD0BFFA8FD12FF7D7D2727F8F87D27F852F827FFFF27A8FD0DFFA8%FD08FF7DFD14FFA87D27F85252A8FD13FFA8A8FD09FFA8A8FD12FF27F8FF%F8F852F8F8F82727277D7DF852FD0DFF7DA8FD06FF7DFD17FFF8F8FD17FF%7DFD09FFA8A8FD12FFA8A827F85227F8F852FFF827F852FD10FF7DFD06FF%A8A8FD30FFA8FD07FFA8FD14FFA852F87DFFF827F8FFFFA8A87DA8FD10FF%A8A8FD04FFA8FD32FF7DFD07FFA8FD11FFA85252F87DFFFFFF7DF827A827%2727FFFFF852FD0FFFA8FD04FF7DFD33FF7DFD06FFA8FD11FF52F8F8F852%27FFFF27F82727F82727FFFF527DFD0FFF7DFFFFFF7DFD34FF7DFD05FFA8%A8FD12FFA8FFFF7DF8FF27A8F827F8A8FD15FFA8A8FFFF7DA8FD33FF7DFD%05FFA8FD18FF7DF852FFF8F8A8FD16FFA8FFFFA8FD35FF7DFD04FFA8FD16%FF52F8FFF87DFFFF52FD17FF7DFF7DFD36FFA8FFFFFF7DFD17FF7D52FD1E%FF7DA8FD36FF7DFFFFFFA8FD37FFA87DFD37FFA8FFFF7DA8FD35FFA87D7D%A8FD35FF7D7DFFFFA8FD37FFA8A8FD37FFA8FFFF7DFD37FF52FD38FFA8FF%FFA8FD37FF7DFD38FFA8FFFF52FD1AFFA852FFFFA8FFFFFFA8FFFF7DFFFF%FF7DFFFFA8FFFF7DFFFFA8FFFF7DA852A8FD1AFFA87DA8FF7DFFFFFF7DFF%FFA8FFFF7DFFFFFF7DFFFFA8FFFF7DFF7DFFA87DFFFFA8FD1BFFA8FFFFA8%FFFFFFA8FFFFA8FFFFFFA8FFFF7DFFFFA8FFFFA8FFFFA8FF7DFD1CFF7DFF%FFA8FFFFFFA8FFFFA8FFFFA8FFFFFFA8FFFF7DFFFFA8FFA8FFFF7DFFFF7D%FD37FF52FD38FFA8FFFFA8FD37FF7DFD38FFA8FFFF7DFD1EFF7D7DFD17FF%7DA8FD37FF7DFFFF7DA8FD19FFA8A8FFFF7D52FD16FFA87D52FD35FFA8A8%A8FFFF7DFD1AFF7D52FFFF7D52FD17FF7DA8FD36FFA8FFFFFFA8FD1DFF7D%7DFD17FFA8FFA8FD36FFA8FD04FFA8FD1CFF7D7DFD17FF7DFFA8FD36FF7D%FD04FF7DFD35FFA8FFFFA8FD35FFA8FD04FFA87DFD1FFF7DA8FD12FF7DA8%FFFF7DA8FD32FFA87DA8FD20FF7DA8FFFFFFA87DFD12FFA8FFFFFFA8FD34%FF7DFD06FF7DFD15FFA8FD04FF7D7DFFFFFFA8FD13FF7DFD04FFA8FD32FF%A8A8FD07FFA8FD13FF7D7DFD1CFFA8FD05FF7DFD32FFA8FD08FFA87DFD12%FFA87DFF7D7D7DFFA87D7DFD13FF7DA8FD06FF7DA8FD2EFFA8A87DFD08FF%A8FD16FF7D277DFF7D52A8FD13FFA8FD38FF7DFD0AFF7DFD11FF7D7DFFFF%7D527DA8A87D52FD12FFA8A8FD08FFA8FD15FFFD05A8FD14FF7DFD0CFF7D%FD0DFFA8FFFF7D52A8FFFF7DA8A87D7DA87D7DFD10FF7DFD09FFA8A8FD14%FFA8FFA8FFFFA8FD12FFA8A8FD0DFFA8A8FD0BFFA87DFF7DA82752A8A87D%FF7DA852A8A8FD0EFFA87DFD0BFF7DFFA8FD12FFA8FF7DA8FFA8FD11FF7D%A8FD0FFFA8FD0BFF7DA8FFA8272727A8FFFF7D7D2752A8FD0FFFA8FD0DFF%A8FD17FFA8A8FD11FFA8FD10FFA8A8FD0DFF7D7D5252A8FFFF7D527D7DA8%FFA87DA8FD04FF7D7DFD04FFA8A8FD0EFF7DFD13FFA8FF7DFD12FFA8A8FD%11FFA8A8FD11FF7DFFA8A8FD04FFA8A87DFD04FF7D7DFFFFFF7DFD11FF7D%FFA8FD24FFA8FD15FF7DFD0FFF7DFF7DFD07FF7DA87DFD07FF7DA8FD12FF%7DA8FD23FF7DA8FD16FF5227A8FD0DFFA8FD08FFA87D7DFD06FF7DFD15FF%A8A8FD20FFA8A8FD18FFA8F8A8A8FD15FFA87DA8A8FFFFA8A87DFD17FFFD%04A8FD1AFFA8FF7DA8FD1BFFA87D2727FD14FFA87DFFFFA87DA8FD1AFFA8%7DFD1AFFA87DFD1FFF5227A8FFA8FD11FFA8FFA87DA8FD1EFF7DA8A8A8FD%12FFA8FF7D7DA8FD22FFA87D7DFFFFFFA8FD09FFA8FFFFFF7D7DA8FD22FF%A87DA8FD0CFFA8FFFFFFA87D7DFD28FFFD057DFFFFFF7DFFFFFF7D7D7DA8%A8FD27FFA87D7DA87DA8FFFFFFA8FFFFA87D52A87DA8FD2FFFA8A87DA8A8%A87DFD31FFA8A87DA8A8A87DA8FDFCFFFD97FFFD347DA8FD35FFA8FD09FF%52FD33FF52FD33FFA87D7DFD09FF52FD33FF7DFD33FF7D7D52FFA87DFFA8%7D7DA8FF52FFA8FD15FFA8A8A8FD19FF7DFD35FFA8FF7D7DFF7D7D52A8FF%52FFA8FD15FFA8A8A8FD19FF7DFD37FF5252A852527D52FF27A87D7D7DFD%04A8FFA8A8A8FF7DFF7DFF7DFF7DFFA8A87DA87DFD19FF52FD3FFF52FF7D%FFA8FD13FFA8A8A8FD19FF7DFD3FFF27FF7DFF7DFD14FFA87DFD19FF52FD%3FFF52FFA8FFA8FD14FF7DA8FD19FF7DFD3FFF27FF7DFF7DFD14FFA87DFD%19FF52FD3FFF52FFA8FFA8FD14FFA8A8FD19FF7DFD3FFF27FF7DFF7DFD14%FFA87DFD19FF7DFD38FF7DFF7DA87DFFFF52FFA8FFA8FD14FFA8A8FD19FF%7DFD37FF527DFFA8527D52FF27FF7DFF7DFD14FFA87DFD19FF52FD37FF7D%52FF527D527DFF52A8A8FFA8FD14FFA8A8FD19FF7DFD3FFF27FF7DFF7DFD%14FFA87DFD19FF52FD3FFF52FFA8FFA8FD14FF7DA8FD19FF7DFD3FFF27FF%7DFF7DFD14FFA87DFD19FF52FD3FFF52FFA8FFA8FD14FFA8A8FD19FF7DFD%3FFF27FF7DFF7DFD14FFA87DFD19FF7DFD3FFF52FFA8FFFFA8A8FD12FFA8%A8FD19FF7DFD34FFA852A8FF7DFFFFA8A87DFF27FF7DFFFFFF7DFD12FFA8%7DFD19FF52FD34FF527DA87DFF7DA87D527DFF52FFA8FFFFFFA8FD12FFA8%A8FD19FF7DFD34FFA852A87D7D7DFF527D52FF27A87DFFFFFF7DFD12FFA8%7DFD19FF52FD34FF527D7DFD08FF52FFA8FFFFFFA8FD12FF7DA8FD19FF7D%FD34FFF8527DFD08FF27FF7DFFFFFF7DFD12FFA87DFD19FF52FD34FF7DFF%A8FD08FF52FFA8FFFFFFA8FD12FFA8A8FD19FF7DFD34FF7D527DFD08FF27%FF7DFFFFFFA8A87DFD10FFA87DFD19FF7DFD34FF7D527DFD08FF52FFA8FD%05FFA8FD10FFA8A8FD19FF7DFD34FF7D52A8FD08FF27FF7DFD05FF7DFD10%FFA87DFD19FF52FD34FF7D7DA8FF7DFFFFFFA8A8FF52FFA8FD05FFA8FD10%FFA8A8FD19FF7DFD34FF7D7DFF52FF52A8527D52FF27FF7DFD05FF7DFD10%FFA87DFD19FF52FD34FF5252A87D527DFF7D527DFF52A8A8FD05FFA8FD10%FF7DA8FD19FF7DFD3FFF27FF7DFD05FF7DFF7D7DFD0DFFA87DFD19FF52FD%3FFF52FFA8FD05FFA8A8FFA8FD0DFFA8A8FD19FF7DFD3FFF27FF7DFD08FF%A8FD0DFFA87DFD19FF7DFD3FFF52FFA8FD08FF7DFD0DFFA8A8FD19FF7DFD%3FFF27FF7DFD08FFA8FD0DFFA87DFD19FF52FD3FFF52FFA8FD08FFA8FD0D%FFA8A8FD19FF7DFD38FF7DFFA87DA87DFF27FF7DFD08FFA87DA8FD0BFFA8%7DFD19FF52FD37FF7DFF7D7D7D527DFF52FFA8FD0AFF7DA8A8FD09FF7DA8%FD19FF7DFD37FFFD047D527D52FF27A87DFD0CFFA8FD09FFA87DFD19FF52%FD3FFF52FFA8FD0CFF7DA8A8FD07FFA8A8FD19FF7DFD3FFF27FF7DFD0EFF%A8FD07FFA87DFD19FF7DFD3FFF52FFA8FD0EFFA8FD07FFA8A8FD19FF7DFD%3FFF27FF7DFD0EFF7D7DFD06FFA87DFD19FF52FD3FFF52FFA8FD10FFA8FD%05FFA8A8FD19FF7DFD3FFF27FF7DFD10FF7D7DFD04FFA87DFD19FF52FD3F%FF52FFA8FD12FF7D7DA87D7D7DFFFFFFA8A8FD14FF7DFD38FF7DA8FF52A8%7DFF27FF7DFD16FFA852A87DFF7DA8FD05FFA87DFD0DFF52FD38FF7D7D7D%FF7D7DFF52A8FFFD16A87D7DA87D52A87D7D527D527D7DA8527D527DA87D%52A8A87D52FFFF7DFD38FF52527D527D52FF27FFA8FD06FFA8FD06FFA8FD%0DFFA8FD06FFA8FD06FFA8FD07FF7DFD3FFFFD0427522752275227522752%275227522752275227522752275227522727275227522752275227522752%2752275227522752277DFDB4FFA87DFD1AFFA87DFD0CFFA8FF7DFD47FF7D%52FD0CFFA827FD0CFF7D52FD0CFF527D7DFD47FF5252FD0CFF7D52FD0CFF%5252FD0CFF7D7D52FD5EFFA8FFA8FD71FFA87D7DFD72FF52FF7D7DFD72FF%5252FDAEFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI3_BeginRidercurrentpacking true setpacking/Helvetica havefont not {%%BeginFont: Helvetica/Helvetica15 dict dup begin/FontName /Helvetica def/FontType 3 def/FontMatrix [ 0.000977 0 0 0.000977 0 0 ] def/FontAscent 1024 def/FontDescent -457 def/FontScript 0 def/FontBBox [ 0 -512 1024 1024 ] def/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def/l /lineto load def/m /moveto load def/c /curveto load def/BuildChar {	Adobe_Illustrator_AI5_vars exch /_bitlobyte exch put	Adobe_Illustrator_AI5_vars exch /_bitfont exch put	Adobe_Illustrator_AI5_vars /_bithibyte 0 put	_bitlobyte 16 4 string cvrs dup length (K) dup length	dup 4 -1 roll add string Adobe_Illustrator_AI5_vars exch /_bitkey exch put	exch _bitkey copy pop _bitkey exch 3 -1 roll putinterval	_bitfont /CharMetrics get _bitkey cvn get dup type /arraytype	eq { aload pop setcachedevice }	{ 0 setcharwidth } ifelse	_bitfont /CharStrings get _bitkey cvn get exec} bind def23 dict dup begin/KA {} bind def/KD {} bind def/K20 {} bind def/K29 {{newpath98 -209 m160 -112 201 -39 221 11 c252 88 268 176 268 275 c268 312 265 352 258 392 c251 433 240 474 224 516 c211 550 199 576 189 595 c178 614 147 665 96 747 c34 747 l83 654 116 583 133 534 c160 454 173 366 173 269 c173 173 161 89 138 17 c123 -30 89 -106 36 -209 c98 -209 lclosepath} execfill} bind def/K2E {{newpath88 0 m193 0 l193 109 l88 109 l88 0 lclosepath} execfill} bind def/K30 {{newpath277 717 m174 717 103 663 63 554 c42 496 32 426 32 344 c32 239 49 155 84 93 c126 18 190 -19 276 -19 c371 -19 440 27 482 118 c511 182 525 262 525 360 c525 462 509 543 477 602 c436 679 369 717 277 717 c277 717 lclosepath275 63 m217 63 176 97 152 164 c137 209 129 267 129 340 c129 437 141 511 166 560 c190 610 229 635 282 635 c339 635 378 609 398 556 c418 504 428 437 428 356 c428 243 414 166 387 125 c359 84 322 63 275 63 c275 63 lclosepath} execfill} bind def/K31 {{newpath267 507 m267 0 l363 0 l363 713 l292 713 l279 658 260 623 234 608 c209 593 163 582 98 576 c98 507 l267 507 lclosepath} execfill} bind def/K32 {{newpath32 0 m523 0 l523 85 l133 85 l142 120 163 153 196 182 c215 198 240 215 273 233 c341 271 l401 305 443 333 466 357 c507 398 527 447 527 504 c527 559 508 608 470 652 c433 697 373 719 291 719 c192 719 123 684 84 615 c62 575 51 524 50 462 c142 462 l143 507 150 541 163 567 c186 614 229 637 290 637 c332 637 365 625 390 600 c415 576 427 542 427 500 c427 465 413 433 386 405 c369 387 339 366 296 341 c200 286 l136 248 93 207 71 161 c48 115 35 62 32 0 c32 0 lclosepath} execfill} bind def/K34 {{newpath109 255 m338 578 l338 255 l109 255 lclosepath430 0 m430 175 l536 175 l536 255 l430 255 l430 718 l354 718 l26 264 l26 175 l340 175 l340 0 l430 0 lclosepath} execfill} bind def/K35 {{newpath33 182 m38 114 63 63 108 30 c153 -3 205 -19 263 -19 c355 -19 421 7 463 59 c505 111 526 171 526 239 c526 304 503 358 458 400 c412 443 356 464 291 464 c256 464 225 458 198 447 c183 441 168 431 151 418 c181 617 l485 617 l485 704 l114 704 l59 318 l137 313 l153 335 172 352 194 364 c216 376 243 382 274 382 c316 382 353 368 383 341 c414 313 429 275 429 225 c429 183 416 145 391 111 c365 77 326 60 272 60 c244 60 220 65 198 75 c157 95 133 130 127 182 c33 182 lclosepath} execfill} bind def/K38 {{newpath279 416 m245 416 215 425 190 444 c165 463 153 490 153 523 c153 553 163 579 182 602 c201 624 233 635 276 635 c319 635 352 624 373 602 c394 579 405 555 405 528 c405 498 394 471 372 449 c349 427 318 416 279 416 c279 416 lclosepath284 61 m232 61 194 75 169 102 c144 129 132 161 132 199 c132 242 146 276 173 300 c200 325 235 337 278 337 c322 337 358 325 387 301 c415 277 429 242 429 196 c429 151 415 117 388 95 c360 72 326 61 284 61 c284 61 lclosepath157 381 m116 365 85 341 64 310 c43 280 33 243 33 201 c33 129 57 74 105 36 c154 -2 213 -21 283 -21 c360 -21 420 1 462 45 c505 89 526 142 526 205 c526 259 510 302 478 335 c461 353 437 369 408 382 c434 397 454 413 467 428 c490 456 501 492 501 536 c501 585 481 627 442 663 c403 699 350 717 281 717 c210 717 155 698 116 660 c77 621 58 576 58 522 c58 480 71 445 98 419 c112 404 131 392 157 381 c157 381 lclosepath} execfill} bind def/K46 {{newpath87 0 m187 0 l187 334 l547 334 l547 422 l187 422 l187 645 l597 645 l597 735 l87 735 l87 0 lclosepath} execfill} bind def/K4E {{newpath78 0 m172 0 l172 594 l546 0 l657 0 l657 735 l563 735 l563 140 l194 735 l78 735 l78 0 lclosepath} execfill} bind def/K56 {{newpath26 735 m294 0 l399 0 l668 735 l556 735 l347 109 l136 735 l26 735 lclosepath} execfill} bind def/K61 {{newpath134 143 m134 177 148 202 176 218 c193 227 218 233 250 237 c305 244 l321 246 338 249 356 254 c373 259 387 265 398 273 c398 200 l398 145 373 105 323 81 c293 66 262 59 230 59 c204 59 182 66 163 81 c144 96 134 117 134 143 c134 143 lclosepath210 307 m159 300 119 283 88 256 c57 228 41 190 41 140 c41 95 57 57 88 26 c120 -4 160 -19 210 -19 c251 -19 289 -10 324 8 c358 26 384 47 403 71 c406 50 411 33 418 21 c432 -1 455 -12 486 -12 c499 -12 509 -11 516 -10 c523 -9 534 -7 548 -3 c548 64 l542 63 537 62 532 62 c527 61 522 61 518 61 c506 61 498 64 494 70 c490 75 488 83 488 92 c488 401 l488 452 469 489 430 513 c390 537 339 549 276 549 c222 549 174 536 133 510 c92 484 71 438 69 372 c153 372 l156 400 164 421 175 435 c194 460 228 473 275 473 c315 473 346 466 368 452 c390 438 401 416 401 385 c401 370 399 359 395 351 c388 336 374 327 353 325 c210 307 lclosepath} execfill} bind def/K62 {{newpath58 0 m141 0 l141 69 l160 43 178 24 195 13 c223 -7 257 -17 298 -17 c370 -17 427 11 468 67 c509 123 530 194 530 278 c530 368 509 435 468 481 c426 527 372 550 306 550 c274 550 244 543 217 530 c189 516 166 496 146 471 c146 736 l58 736 l58 0 lclosepath292 63 m228 63 184 92 160 151 c147 183 141 223 141 274 c141 343 156 393 187 424 c218 454 254 469 294 469 c341 469 377 451 401 414 c425 377 437 330 437 274 c437 210 425 160 401 121 c377 82 340 63 292 63 c292 63 lclosepath} execfill} bind def/K63 {{newpath273 551 m203 551 144 525 99 472 c53 420 30 347 30 253 c30 176 51 112 93 61 c134 10 190 -16 260 -16 c323 -16 374 0 414 33 c454 66 479 118 489 189 c401 189 l393 150 378 119 356 96 c334 73 304 62 267 62 c218 62 183 80 160 117 c137 153 126 199 126 252 c126 305 134 350 150 386 c175 442 216 470 273 470 c315 470 346 459 365 437 c384 415 396 388 401 355 c489 355 l481 427 459 477 421 507 c383 536 334 551 273 551 c273 551 lclosepath} execfill} bind def/K69 {{newpath66 0 m158 0 l158 533 l66 533 l66 0 lclosepath66 633 m158 633 l158 735 l66 735 l66 633 lclosepath} execfill} bind def/K6E {{newpath66 0 m156 0 l156 281 l156 316 158 343 163 362 c167 380 177 399 192 416 c211 438 232 453 257 461 c271 465 288 467 310 467 c352 467 381 450 397 417 c406 397 411 371 411 338 c411 0 l503 0 l503 344 l503 398 496 439 481 468 c454 521 403 548 327 548 c292 548 260 541 232 528 c203 514 176 491 151 460 c151 536 l66 536 l66 0 lclosepath} execfill} bind def/K6F {{newpath278 59 m224 59 185 78 160 116 c135 154 123 201 123 258 c123 318 135 368 160 410 c185 452 225 473 279 473 c341 473 384 448 409 399 c425 368 433 327 433 277 c433 222 422 172 400 127 c378 82 337 59 278 59 c278 59 lclosepath281 551 m204 551 143 524 98 471 c53 418 30 346 30 256 c30 172 52 105 95 56 c138 6 196 -19 269 -19 c357 -19 422 9 463 65 c505 122 526 193 526 279 c526 368 502 436 455 482 c408 528 350 551 281 551 c281 551 lclosepath} execfill} bind def/K72 {{newpath69 0 m159 0 l159 308 l159 346 171 380 195 409 c220 438 254 453 300 453 c305 453 310 453 314 452 c319 452 324 451 329 450 c329 545 l319 546 313 547 309 547 c305 548 302 548 300 548 c264 548 233 535 206 509 c178 483 161 461 154 443 c154 536 l69 536 l69 0 lclosepath} execfill} bind def/K74 {{newpath85 536 m12 536 l12 461 l85 461 l85 107 l85 73 92 45 107 23 c122 2 151 -9 193 -9 c206 -9 218 -8 229 -7 c240 -5 251 -3 261 0 c261 72 l254 71 248 71 243 70 c238 70 234 70 229 70 c213 70 201 72 194 75 c181 82 175 94 175 113 c175 461 l261 461 l261 536 l175 536 l175 684 l85 684 l85 536 lclosepath} execfill} bind def/K77 {{newpath9 536 m164 0 l258 0 l363 415 l472 0 l566 0 l722 536 l632 536 l522 116 l417 536 l316 536 l211 114 l108 536 l9 536 lclosepath} execfill} bind defend /CharStrings exch def23 dict dup begin/KA [740 0 81 0 664 734] defEncoding 10 /KA put/KD [285 0 0 0 0 0] defEncoding 13 /KD put/K20 [285 0 0 0 0 0] defEncoding 32 /K20 put/K29 [341 0 34 -209 267 748] defEncoding 41 /K29 put/K2E [285 0 87 0 191 109] defEncoding 46 /K2E put/K30 [570 0 32 -19 524 717] defEncoding 48 /K30 put/K31 [570 0 98 0 362 713] defEncoding 49 /K31 put/K32 [570 0 32 0 526 719] defEncoding 50 /K32 put/K34 [570 0 26 0 536 718] defEncoding 52 /K34 put/K35 [570 0 33 -18 525 705] defEncoding 53 /K35 put/K38 [570 0 33 -19 525 717] defEncoding 56 /K38 put/K46 [626 0 87 0 597 735] defEncoding 70 /K46 put/K4E [740 0 78 0 656 735] defEncoding 78 /K4E put/K56 [683 0 26 0 667 735] defEncoding 86 /K56 put/K61 [570 0 41 -18 548 549] defEncoding 97 /K61 put/K62 [570 0 58 -17 529 736] defEncoding 98 /K62 put/K63 [512 0 30 -15 488 551] defEncoding 99 /K63 put/K69 [228 0 66 0 157 734] defEncoding 105 /K69 put/K6E [570 0 66 0 502 548] defEncoding 110 /K6E put/K6F [570 0 30 -18 525 551] defEncoding 111 /K6F put/K72 [341 0 69 0 330 548] defEncoding 114 /K72 put/K74 [285 0 11 -8 260 684] defEncoding 116 /K74 put/K77 [740 0 9 0 721 536] defEncoding 119 /K77 putend /CharMetrics exch defenddefinefont pop%%EndFont} ifsetpacking%AI3_EndRider[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 0 TZ%AI3_EndEncoding TrueType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (Symbolism)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (Pathfinder Suite)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A300 Ar0 R0 0 0 1 K1 J 2 j 0.75 w 10 M []0 d0 XR288 468 m283.6802 468 l288 468 l287.9282 471.7441 l287.7119 475.4878 l287.3521 479.2319 l286.9199 482.9761 l286.3438 486.7197 l282.0962 486 l286.3438 486.7197 l285.624 490.3921 l284.7598 494.064 l283.752 497.7358 l282.6719 501.3359 l281.4482 504.936 l277.416 503.4238 l281.4482 504.936 l280.0801 508.3921 l278.6396 511.9199 l277.0562 515.3042 l275.3281 518.688 l273.5278 522 l269.7842 519.8398 l273.5278 522 l271.584 525.168 l269.4961 528.3359 l267.3359 531.4316 l265.104 534.4561 l262.728 537.4077 l259.416 534.6001 l262.728 537.4077 l260.208 540.2158 l257.688 542.9521 l254.9521 545.688 l252.2158 548.208 l249.4082 550.728 l246.6001 547.416 l249.4082 550.728 l246.4561 553.104 l243.4321 555.3359 l240.3359 557.4961 l237.168 559.584 l234 561.5278 l231.8398 557.7837 l234 561.5278 l230.688 563.3281 l227.3042 565.0562 l223.9199 566.6396 l220.3921 568.0801 l216.936 569.4478 l215.4238 565.416 l216.936 569.4478 l213.3359 570.6719 l209.7358 571.752 l206.064 572.7598 l202.3921 573.624 l198.7202 574.3438 l198 570.0957 l198.7202 574.3438 l194.9761 574.9199 l191.2319 575.3521 l187.4878 575.7119 l183.7441 575.9277 l180 576 l180 571.6797 l180 576 l176.1841 575.9277 l172.4399 575.7119 l168.6958 575.3521 l164.9521 574.9199 l161.208 574.3438 l161.9282 570.0957 l161.208 574.3438 l157.5361 573.624 l153.8638 572.7598 l150.1919 571.752 l146.5918 570.6719 l142.9922 569.4478 l144.5039 565.416 l142.9922 569.4478 l139.5361 568.0801 l136.0078 566.6396 l132.624 565.0562 l129.2402 563.3281 l126 561.5278 l128.1602 557.7837 l126 561.5278 l122.7598 559.584 l119.5918 557.4961 l116.4961 555.3359 l113.4722 553.104 l110.52 550.728 l113.3281 547.416 l110.52 550.728 l107.7119 548.208 l104.9761 545.688 l102.2402 542.9521 l99.7202 540.2158 l97.2002 537.4077 l100.5122 534.6001 l97.2002 537.4077 l94.8242 534.4561 l92.5918 531.4316 l90.4321 528.3359 l88.3442 525.168 l86.3999 522 l90.144 519.8398 l86.3999 522 l84.6001 518.688 l82.8721 515.3042 l81.2881 511.9199 l79.8479 508.3921 l78.48 504.936 l82.5122 503.4238 l78.48 504.936 l77.2561 501.3359 l76.176 497.7358 l75.168 494.064 l74.304 490.3921 l73.584 486.7197 l77.832 486 l73.584 486.7197 l73.0081 482.9761 l72.5759 479.2319 l72.2161 475.4878 l72 471.7441 l72 468 l76.3201 468 l72 468 l72 464.1841 l72.2161 460.4399 l72.5759 456.6958 l73.0081 452.9521 l73.584 449.208 l77.832 449.9277 l73.584 449.208 l74.304 445.5361 l75.168 441.8638 l76.176 438.1919 l77.2561 434.5918 l78.48 430.9917 l82.5122 432.5039 l78.48 430.9917 l79.8479 427.5361 l81.2881 424.0078 l82.8721 420.624 l84.6001 417.2402 l86.3999 414 l90.144 416.1602 l86.3999 414 l88.3442 410.7598 l90.4321 407.5918 l92.5918 404.4961 l94.8242 401.4722 l97.2002 398.52 l100.5122 401.3281 l97.2002 398.52 l99.7202 395.7119 l102.2402 392.9761 l104.9761 390.2402 l107.7119 387.7202 l110.52 385.1997 l113.3281 388.5122 l110.52 385.1997 l113.4722 382.8237 l116.4961 380.5918 l119.5918 378.4321 l122.7598 376.3438 l126 374.3999 l128.1602 378.144 l126 374.3999 l129.2402 372.6001 l132.624 370.8721 l136.0078 369.2881 l139.5361 367.8481 l142.9922 366.48 l144.5039 370.5122 l142.9922 366.48 l146.5918 365.2559 l150.1919 364.1758 l153.8638 363.168 l157.5361 362.3042 l161.208 361.584 l161.9282 365.832 l161.208 361.584 l164.9521 361.0078 l168.6958 360.5762 l172.4399 360.2158 l176.1841 360 l180 360 l180 364.3198 l180 360 l183.7441 360 l187.4878 360.2158 l191.2319 360.5762 l194.9761 361.0078 l198.7202 361.584 l198 365.832 l198.7202 361.584 l202.3921 362.3042 l206.064 363.168 l209.7358 364.1758 l213.3359 365.2559 l216.936 366.48 l215.4238 370.5122 l216.936 366.48 l220.3921 367.8481 l223.9199 369.2881 l227.3042 370.8721 l230.688 372.6001 l234 374.3999 l231.8398 378.144 l234 374.3999 l237.168 376.3438 l240.3359 378.4321 l243.4321 380.5918 l246.4561 382.8237 l249.4082 385.1997 l246.6001 388.5122 l249.4082 385.1997 l252.2158 387.7202 l254.9521 390.2402 l257.688 392.9761 l260.208 395.7119 l262.728 398.52 l259.416 401.3281 l262.728 398.52 l265.104 401.4722 l267.3359 404.4961 l269.4961 407.5918 l271.584 410.7598 l273.5278 414 l269.7842 416.1602 l273.5278 414 l275.3281 417.2402 l277.0562 420.624 l278.6396 424.0078 l280.0801 427.5361 l281.4482 430.9917 l277.416 432.5039 l281.4482 430.9917 l282.6719 434.5918 l283.752 438.1919 l284.7598 441.8638 l285.624 445.5361 l286.3438 449.208 l282.0962 449.9277 l286.3438 449.208 l286.9199 452.9521 l287.3521 456.6958 l287.7119 460.4399 l287.9282 464.1841 l288 468 l283.6802 468 l288 468 lS278.1357 464.5439 m278.1357 471.3838 lS267.5518 464.5439 m267.5518 471.3838 lS256.3198 464.5439 m256.3198 471.3838 lS244.5122 464.5439 m244.5122 471.3838 lS232.2002 464.5439 m232.2002 471.3838 lS219.5278 464.5439 m219.5278 471.3838 lS206.4961 464.5439 m206.4961 471.3838 lS193.248 464.5439 m193.248 471.3838 lS180 464.5439 m180 471.3838 lS0 O0 0 0 1 k0 J 0 j 1 w 4 M176.5439 468 m183.3838 468 l176.5439 468 lf179.7119 529.7759 m178.3438 530.4238 l177.6958 531.792 l177.6958 533.2319 l178.3438 534.6001 l179.7119 535.248 l181.0801 535.248 l182.4482 534.6001 l183.168 533.2319 l183.168 531.792 l182.4482 530.4238 l181.0801 529.7759 l179.7119 529.7759 l179.7119 529.7759 lf178.3438 531.792 m178.3438 533.2319 l178.3438 531.792 lf179.064 531.144 m179.064 533.8799 l179.064 531.144 lf179.7119 530.4238 m179.7119 534.6001 l179.7119 530.4238 lf180.4321 530.4238 m180.4321 534.6001 l180.4321 530.4238 lf181.0801 530.4238 m181.0801 534.6001 l181.0801 530.4238 lf181.7998 531.144 m181.7998 533.8799 l181.7998 531.144 lf182.4482 531.792 m182.4482 533.2319 l182.4482 531.792 lf169.9199 535.248 m168.5518 535.896 l167.9038 537.3359 l167.9038 538.7041 l168.5518 540.0723 l169.9199 540.7197 l171.2881 540.7197 l172.6563 540.0723 l173.376 538.7041 l173.376 537.3359 l172.6563 535.896 l171.2881 535.248 l169.9199 535.248 l169.9199 535.248 lf168.5518 537.3359 m168.5518 538.7041 l168.5518 537.3359 lf169.272 536.6162 m169.272 539.3521 l169.272 536.6162 lf169.9199 535.896 m169.9199 540.0723 l169.9199 535.896 lf170.6401 535.896 m170.6401 540.0723 l170.6401 535.896 lf171.2881 535.896 m171.2881 540.0723 l171.2881 535.896 lf172.0078 536.6162 m172.0078 539.3521 l172.0078 536.6162 lf172.6563 537.3359 m172.6563 538.7041 l172.6563 537.3359 lf214.3438 529.4878 m212.9761 530.208 l212.2559 531.5762 l212.2559 532.9438 l212.9761 534.312 l214.3438 535.0317 l215.7119 535.0317 l217.0801 534.312 l217.728 532.9438 l217.728 531.5762 l217.0801 530.208 l215.7119 529.4878 l214.3438 529.4878 l214.3438 529.4878 lf212.9761 531.5762 m212.9761 532.9438 l212.9761 531.5762 lf213.624 530.856 m213.624 533.6641 l213.624 530.856 lf214.3438 530.208 m214.3438 534.312 l214.3438 530.208 lf214.9922 530.208 m214.9922 534.312 l214.9922 530.208 lf215.7119 530.208 m215.7119 534.312 l215.7119 530.208 lf216.3599 530.856 m216.3599 533.6641 l216.3599 530.856 lf217.0801 531.5762 m217.0801 532.9438 l217.0801 531.5762 lf211.1758 528.624 m209.8081 529.3438 l209.0879 530.7119 l209.0879 532.0801 l209.8081 533.4478 l211.1758 534.168 l212.5439 534.168 l213.9121 533.4478 l214.6318 532.0801 l214.6318 530.7119 l213.9121 529.3438 l212.5439 528.624 l211.1758 528.624 l211.1758 528.624 lf209.8081 530.7119 m209.8081 532.0801 l209.8081 530.7119 lf210.5278 529.9917 m210.5278 532.728 l210.5278 529.9917 lf211.1758 529.3438 m211.1758 533.4478 l211.1758 529.3438 lf211.896 529.3438 m211.896 533.4478 l211.896 529.3438 lf212.5439 529.3438 m212.5439 533.4478 l212.5439 529.3438 lf213.2642 529.9917 m213.2642 532.728 l213.2642 529.9917 lf213.9121 530.7119 m213.9121 532.0801 l213.9121 530.7119 lf187.4878 522 m186.1201 522.6479 l185.3999 524.0161 l185.3999 525.3838 l186.1201 526.752 l187.4878 527.4717 l188.856 527.4717 l190.2241 526.752 l190.8721 525.3838 l190.8721 524.0161 l190.2241 522.6479 l188.856 522 l187.4878 522 l187.4878 522 lf186.1201 524.0161 m186.1201 525.3838 l186.1201 524.0161 lf186.7681 523.3682 m186.7681 526.104 l186.7681 523.3682 lf187.4878 522.6479 m187.4878 526.752 l187.4878 522.6479 lf188.1362 522.6479 m188.1362 526.752 l188.1362 522.6479 lf188.856 522.6479 m188.856 526.752 l188.856 522.6479 lf189.5039 523.3682 m189.5039 526.104 l189.5039 523.3682 lf190.2241 524.0161 m190.2241 525.3838 l190.2241 524.0161 lf214.1279 520.9917 m212.7598 521.6396 l212.04 523.0078 l212.04 524.4478 l212.7598 525.8159 l214.1279 526.4639 l215.4961 526.4639 l216.8638 525.8159 l217.584 524.4478 l217.584 523.0078 l216.8638 521.6396 l215.4961 520.9917 l214.1279 520.9917 l214.1279 520.9917 lf212.7598 523.0078 m212.7598 524.4478 l212.7598 523.0078 lf213.4082 522.3599 m213.4082 525.0957 l213.4082 522.3599 lf214.1279 521.6396 m214.1279 525.8159 l214.1279 521.6396 lf214.7759 521.6396 m214.7759 525.8159 l214.7759 521.6396 lf215.4961 521.6396 m215.4961 525.8159 l215.4961 521.6396 lf216.144 522.3599 m216.144 525.0957 l216.144 522.3599 lf216.8638 523.0078 m216.8638 524.4478 l216.8638 523.0078 lf189 501.9121 m187.6318 502.6318 l186.9121 504 l186.9121 505.3677 l187.6318 506.7358 l189 507.4561 l190.3682 507.4561 l191.7358 506.7358 l192.3838 505.3677 l192.3838 504 l191.7358 502.6318 l190.3682 501.9121 l189 501.9121 l189 501.9121 lf187.6318 504 m187.6318 505.3677 l187.6318 504 lf188.2798 503.3521 m188.2798 506.0879 l188.2798 503.3521 lf189 502.6318 m189 506.7358 l189 502.6318 lf189.6479 502.6318 m189.6479 506.7358 l189.6479 502.6318 lf190.3682 502.6318 m190.3682 506.7358 l190.3682 502.6318 lf191.0161 503.3521 m191.0161 506.0879 l191.0161 503.3521 lf191.7358 504 m191.7358 505.3677 l191.7358 504 lf206.4961 532.2959 m205.1279 533.0161 l204.48 534.3838 l204.48 535.752 l205.1279 537.1201 l206.4961 537.7681 l207.8638 537.7681 l209.2319 537.1201 l209.9521 535.752 l209.9521 534.3838 l209.2319 533.0161 l207.8638 532.2959 l206.4961 532.2959 l206.4961 532.2959 lf205.1279 534.3838 m205.1279 535.752 l205.1279 534.3838 lf205.8481 533.6641 m205.8481 536.3999 l205.8481 533.6641 lf206.4961 533.0161 m206.4961 537.1201 l206.4961 533.0161 lf207.2158 533.0161 m207.2158 537.1201 l207.2158 533.0161 lf207.8638 533.0161 m207.8638 537.1201 l207.8638 533.0161 lf208.584 533.6641 m208.584 536.3999 l208.584 533.6641 lf209.2319 534.3838 m209.2319 535.752 l209.2319 534.3838 lf173.5918 529.1279 m172.2241 529.8477 l171.5039 531.2158 l171.5039 532.584 l172.2241 533.9521 l173.5918 534.6719 l174.96 534.6719 l176.3281 533.9521 l176.9761 532.584 l176.9761 531.2158 l176.3281 529.8477 l174.96 529.1279 l173.5918 529.1279 l173.5918 529.1279 lf172.2241 531.2158 m172.2241 532.584 l172.2241 531.2158 lf172.8721 530.4961 m172.8721 533.2319 l172.8721 530.4961 lf173.5918 529.8477 m173.5918 533.9521 l173.5918 529.8477 lf174.2402 529.8477 m174.2402 533.9521 l174.2402 529.8477 lf174.96 529.8477 m174.96 533.9521 l174.96 529.8477 lf175.6079 530.4961 m175.6079 533.2319 l175.6079 530.4961 lf176.3281 531.2158 m176.3281 532.584 l176.3281 531.2158 lf178.2002 542.52 m176.832 543.168 l176.1118 544.5361 l176.1118 545.9038 l176.832 547.272 l178.2002 547.9917 l179.5679 547.9917 l180.936 547.272 l181.6563 545.9038 l181.6563 544.5361 l180.936 543.168 l179.5679 542.52 l178.2002 542.52 l178.2002 542.52 lf176.832 544.5361 m176.832 545.9038 l176.832 544.5361 lf177.48 543.8877 m177.48 546.624 l177.48 543.8877 lf178.2002 543.168 m178.2002 547.272 l178.2002 543.168 lf178.9199 543.168 m178.9199 547.272 l178.9199 543.168 lf179.5679 543.168 m179.5679 547.272 l179.5679 543.168 lf180.2881 543.8877 m180.2881 546.624 l180.2881 543.8877 lf180.936 544.5361 m180.936 545.9038 l180.936 544.5361 lf224.5679 531.6479 m223.2002 532.2959 l222.48 533.6641 l222.48 535.0317 l223.2002 536.3999 l224.5679 537.1201 l225.936 537.1201 l227.3042 536.3999 l228.0239 535.0317 l228.0239 533.6641 l227.3042 532.2959 l225.936 531.6479 l224.5679 531.6479 l224.5679 531.6479 lf223.2002 533.6641 m223.2002 535.0317 l223.2002 533.6641 lf223.8481 533.0161 m223.8481 535.752 l223.8481 533.0161 lf224.5679 532.2959 m224.5679 536.3999 l224.5679 532.2959 lf225.2881 532.2959 m225.2881 536.3999 l225.2881 532.2959 lf225.936 532.2959 m225.936 536.3999 l225.936 532.2959 lf226.6563 533.0161 m226.6563 535.752 l226.6563 533.0161 lf227.3042 533.6641 m227.3042 535.0317 l227.3042 533.6641 lf191.0879 539.7119 m189.7202 540.4316 l189 541.7998 l189 543.168 l189.7202 544.5361 l191.0879 545.2559 l192.4561 545.2559 l193.8242 544.5361 l194.5439 543.168 l194.5439 541.7998 l193.8242 540.4316 l192.4561 539.7119 l191.0879 539.7119 l191.0879 539.7119 lf189.7202 541.7998 m189.7202 543.168 l189.7202 541.7998 lf190.3682 541.0801 m190.3682 543.8159 l190.3682 541.0801 lf191.0879 540.4316 m191.0879 544.5361 l191.0879 540.4316 lf191.7358 540.4316 m191.7358 544.5361 l191.7358 540.4316 lf192.4561 540.4316 m192.4561 544.5361 l192.4561 540.4316 lf193.104 541.0801 m193.104 543.8159 l193.104 541.0801 lf193.8242 541.7998 m193.8242 543.168 l193.8242 541.7998 lf173.5918 529.1279 m172.2241 529.8477 l171.5039 531.2158 l171.5039 532.584 l172.2241 533.9521 l173.5918 534.6719 l174.96 534.6719 l176.3281 533.9521 l176.9761 532.584 l176.9761 531.2158 l176.3281 529.8477 l174.96 529.1279 l173.5918 529.1279 l173.5918 529.1279 lf172.2241 531.2158 m172.2241 532.584 l172.2241 531.2158 lf172.8721 530.4961 m172.8721 533.2319 l172.8721 530.4961 lf173.5918 529.8477 m173.5918 533.9521 l173.5918 529.8477 lf174.2402 529.8477 m174.2402 533.9521 l174.2402 529.8477 lf174.96 529.8477 m174.96 533.9521 l174.96 529.8477 lf175.6079 530.4961 m175.6079 533.2319 l175.6079 530.4961 lf176.3281 531.2158 m176.3281 532.584 l176.3281 531.2158 lf176.04 495.2158 m174.6719 495.936 l174.0239 497.3042 l174.0239 498.6719 l174.6719 500.04 l176.04 500.7598 l177.4082 500.7598 l178.8481 500.04 l179.4961 498.6719 l179.4961 497.3042 l178.8481 495.936 l177.4082 495.2158 l176.04 495.2158 l176.04 495.2158 lf174.6719 497.3042 m174.6719 498.6719 l174.6719 497.3042 lf175.3921 496.584 m175.3921 499.3198 l175.3921 496.584 lf176.04 495.936 m176.04 500.04 l176.04 495.936 lf176.7598 495.936 m176.7598 500.04 l176.7598 495.936 lf177.4082 495.936 m177.4082 500.04 l177.4082 495.936 lf178.1279 496.584 m178.1279 499.3198 l178.1279 496.584 lf178.8481 497.3042 m178.8481 498.6719 l178.8481 497.3042 lf194.3281 505.728 m192.96 506.4478 l192.312 507.8159 l192.312 509.1841 l192.96 510.5518 l194.3281 511.272 l195.6958 511.272 l197.064 510.5518 l197.7842 509.1841 l197.7842 507.8159 l197.064 506.4478 l195.6958 505.728 l194.3281 505.728 l194.3281 505.728 lf192.96 507.8159 m192.96 509.1841 l192.96 507.8159 lf193.6802 507.0962 m193.6802 509.9038 l193.6802 507.0962 lf194.3281 506.4478 m194.3281 510.5518 l194.3281 506.4478 lf195.0479 506.4478 m195.0479 510.5518 l195.0479 506.4478 lf195.6958 506.4478 m195.6958 510.5518 l195.6958 506.4478 lf196.416 507.0962 m196.416 509.9038 l196.416 507.0962 lf197.064 507.8159 m197.064 509.1841 l197.064 507.8159 lf175.6802 498.2397 m174.312 498.8877 l173.6641 500.2559 l173.6641 501.624 l174.312 502.9917 l175.6802 503.7119 l177.0479 503.7119 l178.416 502.9917 l179.1362 501.624 l179.1362 500.2559 l178.416 498.8877 l177.0479 498.2397 l175.6802 498.2397 l175.6802 498.2397 lf174.312 500.2559 m174.312 501.624 l174.312 500.2559 lf175.0322 499.6079 m175.0322 502.3438 l175.0322 499.6079 lf175.6802 498.8877 m175.6802 502.9917 l175.6802 498.8877 lf176.3999 498.8877 m176.3999 502.9917 l176.3999 498.8877 lf177.0479 498.8877 m177.0479 502.9917 l177.0479 498.8877 lf177.7681 499.6079 m177.7681 502.3438 l177.7681 499.6079 lf178.416 500.2559 m178.416 501.624 l178.416 500.2559 lf165.8882 537.48 m164.52 538.1279 l163.7998 539.4961 l163.7998 540.8638 l164.52 542.2319 l165.8882 542.9521 l167.2559 542.9521 l168.624 542.2319 l169.3438 540.8638 l169.3438 539.4961 l168.624 538.1279 l167.2559 537.48 l165.8882 537.48 l165.8882 537.48 lf164.52 539.4961 m164.52 540.8638 l164.52 539.4961 lf165.2402 538.8477 m165.2402 541.584 l165.2402 538.8477 lf165.8882 538.1279 m165.8882 542.2319 l165.8882 538.1279 lf166.6079 538.1279 m166.6079 542.2319 l166.6079 538.1279 lf167.2559 538.1279 m167.2559 542.2319 l167.2559 538.1279 lf167.9761 538.8477 m167.9761 541.584 l167.9761 538.8477 lf168.624 539.4961 m168.624 540.8638 l168.624 539.4961 lf172.9438 516.96 m171.5762 517.6079 l170.856 518.9761 l170.856 520.3438 l171.5762 521.7119 l172.9438 522.4316 l174.312 522.4316 l175.6802 521.7119 l176.3281 520.3438 l176.3281 518.9761 l175.6802 517.6079 l174.312 516.96 l172.9438 516.96 l172.9438 516.96 lf171.5762 518.9761 m171.5762 520.3438 l171.5762 518.9761 lf172.2241 518.3281 m172.2241 521.064 l172.2241 518.3281 lf172.9438 517.6079 m172.9438 521.7119 l172.9438 517.6079 lf173.5918 517.6079 m173.5918 521.7119 l173.5918 517.6079 lf174.312 517.6079 m174.312 521.7119 l174.312 517.6079 lf174.96 518.3281 m174.96 521.064 l174.96 518.3281 lf175.6802 518.9761 m175.6802 520.3438 l175.6802 518.9761 lf217.6563 559.728 m216.2881 560.4478 l215.5679 561.8159 l215.5679 563.1841 l216.2881 564.5518 l217.6563 565.1997 l219.0239 565.1997 l220.3921 564.5518 l221.1118 563.1841 l221.1118 561.8159 l220.3921 560.4478 l219.0239 559.728 l217.6563 559.728 l217.6563 559.728 lf216.2881 561.8159 m216.2881 563.1841 l216.2881 561.8159 lf216.936 561.0957 m216.936 563.832 l216.936 561.0957 lf217.6563 560.4478 m217.6563 564.5518 l217.6563 560.4478 lf218.3042 560.4478 m218.3042 564.5518 l218.3042 560.4478 lf219.0239 560.4478 m219.0239 564.5518 l219.0239 560.4478 lf219.7441 561.0957 m219.7441 563.832 l219.7441 561.0957 lf220.3921 561.8159 m220.3921 563.1841 l220.3921 561.8159 lf232.8481 539.2798 m231.48 539.9277 l230.832 541.2959 l230.832 542.6641 l231.48 544.0317 l232.8481 544.752 l234.2158 544.752 l235.584 544.0317 l236.3042 542.6641 l236.3042 541.2959 l235.584 539.9277 l234.2158 539.2798 l232.8481 539.2798 l232.8481 539.2798 lf231.48 541.2959 m231.48 542.6641 l231.48 541.2959 lf232.2002 540.6479 m232.2002 543.3838 l232.2002 540.6479 lf232.8481 539.9277 m232.8481 544.0317 l232.8481 539.9277 lf233.5679 539.9277 m233.5679 544.0317 l233.5679 539.9277 lf234.2158 539.9277 m234.2158 544.0317 l234.2158 539.9277 lf234.936 540.6479 m234.936 543.3838 l234.936 540.6479 lf235.584 541.2959 m235.584 542.6641 l235.584 541.2959 lf228.5278 545.5439 m227.1602 546.2642 l226.4399 547.6318 l226.4399 549 l227.1602 550.3682 l228.5278 551.0879 l229.896 551.0879 l231.2642 550.3682 l231.9839 549 l231.9839 547.6318 l231.2642 546.2642 l229.896 545.5439 l228.5278 545.5439 l228.5278 545.5439 lf227.1602 547.6318 m227.1602 549 l227.1602 547.6318 lf227.8081 546.9121 m227.8081 549.7197 l227.8081 546.9121 lf228.5278 546.2642 m228.5278 550.3682 l228.5278 546.2642 lf229.1758 546.2642 m229.1758 550.3682 l229.1758 546.2642 lf229.896 546.2642 m229.896 550.3682 l229.896 546.2642 lf230.5439 546.9121 m230.5439 549.7197 l230.5439 546.9121 lf231.2642 547.6318 m231.2642 549 l231.2642 547.6318 lf210.0962 548.4961 m208.728 549.2158 l208.0078 550.584 l208.0078 551.9521 l208.728 553.3198 l210.0962 553.9678 l211.4639 553.9678 l212.832 553.3198 l213.48 551.9521 l213.48 550.584 l212.832 549.2158 l211.4639 548.4961 l210.0962 548.4961 l210.0962 548.4961 lf208.728 550.584 m208.728 551.9521 l208.728 550.584 lf209.376 549.8638 m209.376 552.6001 l209.376 549.8638 lf210.0962 549.2158 m210.0962 553.3198 l210.0962 549.2158 lf210.7441 549.2158 m210.7441 553.3198 l210.7441 549.2158 lf211.4639 549.2158 m211.4639 553.3198 l211.4639 549.2158 lf212.1118 549.8638 m212.1118 552.6001 l212.1118 549.8638 lf212.832 550.584 m212.832 551.9521 l212.832 550.584 lf167.04 492.5518 m165.6719 493.1997 l165.0239 494.5679 l165.0239 495.936 l165.6719 497.376 l167.04 498.0239 l168.4082 498.0239 l169.7759 497.376 l170.4961 495.936 l170.4961 494.5679 l169.7759 493.1997 l168.4082 492.5518 l167.04 492.5518 l167.04 492.5518 lf165.6719 494.5679 m165.6719 495.936 l165.6719 494.5679 lf166.3921 493.9199 m166.3921 496.6563 l166.3921 493.9199 lf167.04 493.1997 m167.04 497.376 l167.04 493.1997 lf167.7598 493.1997 m167.7598 497.376 l167.7598 493.1997 lf168.4082 493.1997 m168.4082 497.376 l168.4082 493.1997 lf169.1279 493.9199 m169.1279 496.6563 l169.1279 493.9199 lf169.7759 494.5679 m169.7759 495.936 l169.7759 494.5679 lf200.52 507.3838 m199.0801 508.104 l198.4321 509.4722 l198.4321 510.8398 l199.0801 512.208 l200.52 512.856 l201.8882 512.856 l203.2559 512.208 l203.9038 510.8398 l203.9038 509.4722 l203.2559 508.104 l201.8882 507.3838 l200.52 507.3838 l200.52 507.3838 lf199.0801 509.4722 m199.0801 510.8398 l199.0801 509.4722 lf199.7998 508.752 m199.7998 511.4878 l199.7998 508.752 lf200.52 508.104 m200.52 512.208 l200.52 508.104 lf201.168 508.104 m201.168 512.208 l201.168 508.104 lf201.8882 508.104 m201.8882 512.208 l201.8882 508.104 lf202.5361 508.752 m202.5361 511.4878 l202.5361 508.752 lf203.2559 509.4722 m203.2559 510.8398 l203.2559 509.4722 lf186.9121 515.0879 m185.5439 515.8081 l184.8242 517.1758 l184.8242 518.5439 l185.5439 519.9121 l186.9121 520.6318 l188.2798 520.6318 l189.6479 519.9121 l190.3682 518.5439 l190.3682 517.1758 l189.6479 515.8081 l188.2798 515.0879 l186.9121 515.0879 l186.9121 515.0879 lf185.5439 517.1758 m185.5439 518.5439 l185.5439 517.1758 lf186.2642 516.5278 m186.2642 519.2642 l186.2642 516.5278 lf186.9121 515.8081 m186.9121 519.9121 l186.9121 515.8081 lf187.6318 515.8081 m187.6318 519.9121 l187.6318 515.8081 lf188.2798 515.8081 m188.2798 519.9121 l188.2798 515.8081 lf189 516.5278 m189 519.2642 l189 516.5278 lf189.6479 517.1758 m189.6479 518.5439 l189.6479 517.1758 lf191.376 532.2959 m190.0078 532.9438 l189.2881 534.3838 l189.2881 535.752 l190.0078 537.1201 l191.376 537.7681 l192.7441 537.7681 l194.1118 537.1201 l194.7598 535.752 l194.7598 534.3838 l194.1118 532.9438 l192.7441 532.2959 l191.376 532.2959 l191.376 532.2959 lf190.0078 534.3838 m190.0078 535.752 l190.0078 534.3838 lf190.6563 533.6641 m190.6563 536.3999 l190.6563 533.6641 lf191.376 532.9438 m191.376 537.1201 l191.376 532.9438 lf192.0239 532.9438 m192.0239 537.1201 l192.0239 532.9438 lf192.7441 532.9438 m192.7441 537.1201 l192.7441 532.9438 lf193.3921 533.6641 m193.3921 536.3999 l193.3921 533.6641 lf194.1118 534.3838 m194.1118 535.752 l194.1118 534.3838 lf188.208 520.8477 m186.8398 521.5679 l186.1201 522.936 l186.1201 524.3042 l186.8398 525.6719 l188.208 526.3198 l189.5762 526.3198 l190.9438 525.6719 l191.5918 524.3042 l191.5918 522.936 l190.9438 521.5679 l189.5762 520.8477 l188.208 520.8477 l188.208 520.8477 lf186.8398 522.936 m186.8398 524.3042 l186.8398 522.936 lf187.4878 522.2158 m187.4878 524.9521 l187.4878 522.2158 lf188.208 521.5679 m188.208 525.6719 l188.208 521.5679 lf188.856 521.5679 m188.856 525.6719 l188.856 521.5679 lf189.5762 521.5679 m189.5762 525.6719 l189.5762 521.5679 lf190.2241 522.2158 m190.2241 524.9521 l190.2241 522.2158 lf190.9438 522.936 m190.9438 524.3042 l190.9438 522.936 lf188.208 531.0723 m186.8398 531.792 l186.1201 533.1602 l186.1201 534.5278 l186.8398 535.896 l188.208 536.6162 l189.5762 536.6162 l190.9438 535.896 l191.5918 534.5278 l191.5918 533.1602 l190.9438 531.792 l189.5762 531.0723 l188.208 531.0723 l188.208 531.0723 lf186.8398 533.1602 m186.8398 534.5278 l186.8398 533.1602 lf187.4878 532.4399 m187.4878 535.1758 l187.4878 532.4399 lf188.208 531.792 m188.208 535.896 l188.208 531.792 lf188.856 531.792 m188.856 535.896 l188.856 531.792 lf189.5762 531.792 m189.5762 535.896 l189.5762 531.792 lf190.2241 532.4399 m190.2241 535.1758 l190.2241 532.4399 lf190.9438 533.1602 m190.9438 534.5278 l190.9438 533.1602 lf175.1758 521.208 m173.8081 521.856 l173.0879 523.2236 l173.0879 524.5918 l173.8081 525.96 l175.1758 526.6797 l176.5439 526.6797 l177.9121 525.96 l178.6318 524.5918 l178.6318 523.2236 l177.9121 521.856 l176.5439 521.208 l175.1758 521.208 l175.1758 521.208 lf173.8081 523.2236 m173.8081 524.5918 l173.8081 523.2236 lf174.4561 522.5762 m174.4561 525.312 l174.4561 522.5762 lf175.1758 521.856 m175.1758 525.96 l175.1758 521.856 lf175.8242 521.856 m175.8242 525.96 l175.8242 521.856 lf176.5439 521.856 m176.5439 525.96 l176.5439 521.856 lf177.1919 522.5762 m177.1919 525.312 l177.1919 522.5762 lf177.9121 523.2236 m177.9121 524.5918 l177.9121 523.2236 lf152.3521 505.3677 m150.9121 506.0161 l150.2642 507.3838 l150.2642 508.752 l150.9121 510.1201 l152.3521 510.8398 l153.7202 510.8398 l155.0879 510.1201 l155.7358 508.752 l155.7358 507.3838 l155.0879 506.0161 l153.7202 505.3677 l152.3521 505.3677 l152.3521 505.3677 lf150.9121 507.3838 m150.9121 508.752 l150.9121 507.3838 lf151.6318 506.7358 m151.6318 509.4722 l151.6318 506.7358 lf152.3521 506.0161 m152.3521 510.1201 l152.3521 506.0161 lf153 506.0161 m153 510.1201 l153 506.0161 lf153.7202 506.0161 m153.7202 510.1201 l153.7202 506.0161 lf154.3682 506.7358 m154.3682 509.4722 l154.3682 506.7358 lf155.0879 507.3838 m155.0879 508.752 l155.0879 507.3838 lf179.9282 525.6001 m178.5601 526.3198 l177.8398 527.688 l177.8398 529.0562 l178.5601 530.4238 l179.9282 531.144 l181.2959 531.144 l182.6641 530.4238 l183.312 529.0562 l183.312 527.688 l182.6641 526.3198 l181.2959 525.6001 l179.9282 525.6001 l179.9282 525.6001 lf178.5601 527.688 m178.5601 529.0562 l178.5601 527.688 lf179.208 526.9678 m179.208 529.7759 l179.208 526.9678 lf179.9282 526.3198 m179.9282 530.4238 l179.9282 526.3198 lf180.5762 526.3198 m180.5762 530.4238 l180.5762 526.3198 lf181.2959 526.3198 m181.2959 530.4238 l181.2959 526.3198 lf181.9438 526.9678 m181.9438 529.7759 l181.9438 526.9678 lf182.6641 527.688 m182.6641 529.0562 l182.6641 527.688 lf199.7998 525.168 m198.4321 525.8159 l197.7119 527.1841 l197.7119 528.5518 l198.4321 529.9199 l199.7998 530.6396 l201.168 530.6396 l202.5361 529.9199 l203.2559 528.5518 l203.2559 527.1841 l202.5361 525.8159 l201.168 525.168 l199.7998 525.168 l199.7998 525.168 lf198.4321 527.1841 m198.4321 528.5518 l198.4321 527.1841 lf199.0801 526.5361 m199.0801 529.272 l199.0801 526.5361 lf199.7998 525.8159 m199.7998 529.9199 l199.7998 525.8159 lf200.4482 525.8159 m200.4482 529.9199 l200.4482 525.8159 lf201.168 525.8159 m201.168 529.9199 l201.168 525.8159 lf201.8159 526.5361 m201.8159 529.272 l201.8159 526.5361 lf202.5361 527.1841 m202.5361 528.5518 l202.5361 527.1841 lf167.6162 513.7197 m166.248 514.3682 l165.6001 515.7358 l165.6001 517.104 l166.248 518.4717 l167.6162 519.1919 l168.9839 519.1919 l170.3521 518.4717 l171.0718 517.104 l171.0718 515.7358 l170.3521 514.3682 l168.9839 513.7197 l167.6162 513.7197 l167.6162 513.7197 lf166.248 515.7358 m166.248 517.104 l166.248 515.7358 lf166.9678 515.0879 m166.9678 517.8242 l166.9678 515.0879 lf167.6162 514.3682 m167.6162 518.4717 l167.6162 514.3682 lf168.3359 514.3682 m168.3359 518.4717 l168.3359 514.3682 lf168.9839 514.3682 m168.9839 518.4717 l168.9839 514.3682 lf169.7041 515.0879 m169.7041 517.8242 l169.7041 515.0879 lf170.3521 515.7358 m170.3521 517.104 l170.3521 515.7358 lf180.2158 513.2881 m178.8481 514.0078 l178.1279 515.376 l178.1279 516.7441 l178.8481 518.1118 l180.2158 518.7598 l181.584 518.7598 l182.9521 518.1118 l183.6001 516.7441 l183.6001 515.376 l182.9521 514.0078 l181.584 513.2881 l180.2158 513.2881 l180.2158 513.2881 lf178.8481 515.376 m178.8481 516.7441 l178.8481 515.376 lf179.4961 514.6558 m179.4961 517.3921 l179.4961 514.6558 lf180.2158 514.0078 m180.2158 518.1118 l180.2158 514.0078 lf180.8638 514.0078 m180.8638 518.1118 l180.8638 514.0078 lf181.584 514.0078 m181.584 518.1118 l181.584 514.0078 lf182.2319 514.6558 m182.2319 517.3921 l182.2319 514.6558 lf182.9521 515.376 m182.9521 516.7441 l182.9521 515.376 lf190.1519 526.896 m188.7842 527.5439 l188.064 528.9121 l188.064 530.2798 l188.7842 531.6479 l190.1519 532.3682 l191.52 532.3682 l192.8882 531.6479 l193.6079 530.2798 l193.6079 528.9121 l192.8882 527.5439 l191.52 526.896 l190.1519 526.896 l190.1519 526.896 lf188.7842 528.9121 m188.7842 530.2798 l188.7842 528.9121 lf189.4321 528.2642 m189.4321 531 l189.4321 528.2642 lf190.1519 527.5439 m190.1519 531.6479 l190.1519 527.5439 lf190.8721 527.5439 m190.8721 531.6479 l190.8721 527.5439 lf191.52 527.5439 m191.52 531.6479 l191.52 527.5439 lf192.2402 528.2642 m192.2402 531 l192.2402 528.2642 lf192.8882 528.9121 m192.8882 530.2798 l192.8882 528.9121 lf195.1919 505.1519 m193.8242 505.8721 l193.104 507.2397 l193.104 508.6079 l193.8242 509.9761 l195.1919 510.624 l196.5601 510.624 l197.9282 509.9761 l198.5762 508.6079 l198.5762 507.2397 l197.9282 505.8721 l196.5601 505.1519 l195.1919 505.1519 l195.1919 505.1519 lf193.8242 507.2397 m193.8242 508.6079 l193.8242 507.2397 lf194.4722 506.52 m194.4722 509.2559 l194.4722 506.52 lf195.1919 505.8721 m195.1919 509.9761 l195.1919 505.8721 lf195.8398 505.8721 m195.8398 509.9761 l195.8398 505.8721 lf196.5601 505.8721 m196.5601 509.9761 l196.5601 505.8721 lf197.208 506.52 m197.208 509.2559 l197.208 506.52 lf197.9282 507.2397 m197.9282 508.6079 l197.9282 507.2397 lf189.5762 498.0962 m188.208 498.8159 l187.5601 500.1841 l187.5601 501.5518 l188.208 502.9199 l189.5762 503.6396 l190.9438 503.6396 l192.312 502.9199 l193.0322 501.5518 l193.0322 500.1841 l192.312 498.8159 l190.9438 498.0962 l189.5762 498.0962 l189.5762 498.0962 lf188.208 500.1841 m188.208 501.5518 l188.208 500.1841 lf188.9282 499.5361 m188.9282 502.272 l188.9282 499.5361 lf189.5762 498.8159 m189.5762 502.9199 l189.5762 498.8159 lf190.2959 498.8159 m190.2959 502.9199 l190.2959 498.8159 lf190.9438 498.8159 m190.9438 502.9199 l190.9438 498.8159 lf191.6641 499.5361 m191.6641 502.272 l191.6641 499.5361 lf192.312 500.1841 m192.312 501.5518 l192.312 500.1841 lf184.6079 508.6797 m183.2402 509.3281 l182.52 510.6958 l182.52 512.064 l183.2402 513.4316 l184.6079 514.1519 l185.9761 514.1519 l187.3438 513.4316 l188.064 512.064 l188.064 510.6958 l187.3438 509.3281 l185.9761 508.6797 l184.6079 508.6797 l184.6079 508.6797 lf183.2402 510.6958 m183.2402 512.064 l183.2402 510.6958 lf183.96 510.0479 m183.96 512.7837 l183.96 510.0479 lf184.6079 509.3281 m184.6079 513.4316 l184.6079 509.3281 lf185.3281 509.3281 m185.3281 513.4316 l185.3281 509.3281 lf185.9761 509.3281 m185.9761 513.4316 l185.9761 509.3281 lf186.6958 510.0479 m186.6958 512.7837 l186.6958 510.0479 lf187.3438 510.6958 m187.3438 512.064 l187.3438 510.6958 lf190.5122 496.4399 m189.144 497.1602 l188.4961 498.5278 l188.4961 499.896 l189.144 501.2637 l190.5122 501.9121 l191.8799 501.9121 l193.248 501.2637 l193.9678 499.896 l193.9678 498.5278 l193.248 497.1602 l191.8799 496.4399 l190.5122 496.4399 l190.5122 496.4399 lf189.144 498.5278 m189.144 499.896 l189.144 498.5278 lf189.8638 497.8081 m189.8638 500.5439 l189.8638 497.8081 lf190.5122 497.1602 m190.5122 501.2637 l190.5122 497.1602 lf191.2319 497.1602 m191.2319 501.2637 l191.2319 497.1602 lf191.8799 497.1602 m191.8799 501.2637 l191.8799 497.1602 lf192.6001 497.8081 m192.6001 500.5439 l192.6001 497.8081 lf193.248 498.5278 m193.248 499.896 l193.248 498.5278 lf200.3042 516.6719 m198.936 517.3921 l198.2158 518.7598 l198.2158 520.1279 l198.936 521.4961 l200.3042 522.2158 l201.6719 522.2158 l203.04 521.4961 l203.688 520.1279 l203.688 518.7598 l203.04 517.3921 l201.6719 516.6719 l200.3042 516.6719 l200.3042 516.6719 lf198.936 518.7598 m198.936 520.1279 l198.936 518.7598 lf199.584 518.04 m199.584 520.8477 l199.584 518.04 lf200.3042 517.3921 m200.3042 521.4961 l200.3042 517.3921 lf200.9521 517.3921 m200.9521 521.4961 l200.9521 517.3921 lf201.6719 517.3921 m201.6719 521.4961 l201.6719 517.3921 lf202.3198 518.04 m202.3198 520.8477 l202.3198 518.04 lf203.04 518.7598 m203.04 520.1279 l203.04 518.7598 lf201.5278 540.936 m200.1602 541.584 l199.5122 542.9521 l199.5122 544.3198 l200.1602 545.688 l201.5278 546.4077 l202.896 546.4077 l204.2642 545.688 l204.9839 544.3198 l204.9839 542.9521 l204.2642 541.584 l202.896 540.936 l201.5278 540.936 l201.5278 540.936 lf200.1602 542.9521 m200.1602 544.3198 l200.1602 542.9521 lf200.8799 542.3042 m200.8799 545.04 l200.8799 542.3042 lf201.5278 541.584 m201.5278 545.688 l201.5278 541.584 lf202.248 541.584 m202.248 545.688 l202.248 541.584 lf202.896 541.584 m202.896 545.688 l202.896 541.584 lf203.6162 542.3042 m203.6162 545.04 l203.6162 542.3042 lf204.2642 542.9521 m204.2642 544.3198 l204.2642 542.9521 lf173.7358 527.4717 m172.3682 528.1201 l171.6479 529.4878 l171.6479 530.856 l172.3682 532.2959 l173.7358 532.9438 l175.104 532.9438 l176.4722 532.2959 l177.1201 530.856 l177.1201 529.4878 l176.4722 528.1201 l175.104 527.4717 l173.7358 527.4717 l173.7358 527.4717 lf172.3682 529.4878 m172.3682 530.856 l172.3682 529.4878 lf173.0161 528.8398 m173.0161 531.5762 l173.0161 528.8398 lf173.7358 528.1201 m173.7358 532.2959 l173.7358 528.1201 lf174.3838 528.1201 m174.3838 532.2959 l174.3838 528.1201 lf175.104 528.1201 m175.104 532.2959 l175.104 528.1201 lf175.752 528.8398 m175.752 531.5762 l175.752 528.8398 lf176.4722 529.4878 m176.4722 530.856 l176.4722 529.4878 lf185.2559 532.2959 m183.8882 532.9438 l183.2402 534.312 l183.2402 535.6797 l183.8882 537.0479 l185.2559 537.7681 l186.624 537.7681 l187.9922 537.0479 l188.7119 535.6797 l188.7119 534.312 l187.9922 532.9438 l186.624 532.2959 l185.2559 532.2959 l185.2559 532.2959 lf183.8882 534.312 m183.8882 535.6797 l183.8882 534.312 lf184.6079 533.6641 m184.6079 536.3999 l184.6079 533.6641 lf185.2559 532.9438 m185.2559 537.0479 l185.2559 532.9438 lf185.9761 532.9438 m185.9761 537.0479 l185.9761 532.9438 lf186.624 532.9438 m186.624 537.0479 l186.624 532.9438 lf187.3438 533.6641 m187.3438 536.3999 l187.3438 533.6641 lf187.9922 534.312 m187.9922 535.6797 l187.9922 534.312 lf190.9438 524.0161 m189.5762 524.6641 l188.856 526.0317 l188.856 527.3999 l189.5762 528.7681 l190.9438 529.4878 l192.312 529.4878 l193.6802 528.7681 l194.3281 527.3999 l194.3281 526.0317 l193.6802 524.6641 l192.312 524.0161 l190.9438 524.0161 l190.9438 524.0161 lf189.5762 526.0317 m189.5762 527.3999 l189.5762 526.0317 lf190.2241 525.3838 m190.2241 528.1201 l190.2241 525.3838 lf190.9438 524.6641 m190.9438 528.7681 l190.9438 524.6641 lf191.5918 524.6641 m191.5918 528.7681 l191.5918 524.6641 lf192.312 524.6641 m192.312 528.7681 l192.312 524.6641 lf192.96 525.3838 m192.96 528.1201 l192.96 525.3838 lf193.6802 526.0317 m193.6802 527.3999 l193.6802 526.0317 lf199.728 517.1758 m198.3599 517.896 l197.7119 519.2642 l197.7119 520.6318 l198.3599 522 l199.728 522.6479 l201.0962 522.6479 l202.4639 522 l203.1841 520.6318 l203.1841 519.2642 l202.4639 517.896 l201.0962 517.1758 l199.728 517.1758 l199.728 517.1758 lf198.3599 519.2642 m198.3599 520.6318 l198.3599 519.2642 lf199.0801 518.5439 m199.0801 521.2798 l199.0801 518.5439 lf199.728 517.896 m199.728 522 l199.728 517.896 lf200.4482 517.896 m200.4482 522 l200.4482 517.896 lf201.0962 517.896 m201.0962 522 l201.0962 517.896 lf201.8159 518.5439 m201.8159 521.2798 l201.8159 518.5439 lf202.4639 519.2642 m202.4639 520.6318 l202.4639 519.2642 lf158.3999 505.728 m157.0322 506.376 l156.312 507.7441 l156.312 509.1118 l157.0322 510.48 l158.3999 511.1997 l159.7681 511.1997 l161.1362 510.48 l161.7842 509.1118 l161.7842 507.7441 l161.1362 506.376 l159.7681 505.728 l158.3999 505.728 l158.3999 505.728 lf157.0322 507.7441 m157.0322 509.1118 l157.0322 507.7441 lf157.6802 507.0962 m157.6802 509.832 l157.6802 507.0962 lf158.3999 506.376 m158.3999 510.48 l158.3999 506.376 lf159.0479 506.376 m159.0479 510.48 l159.0479 506.376 lf159.7681 506.376 m159.7681 510.48 l159.7681 506.376 lf160.416 507.0962 m160.416 509.832 l160.416 507.0962 lf161.1362 507.7441 m161.1362 509.1118 l161.1362 507.7441 lf178.3438 526.3921 m176.9761 527.04 l176.2559 528.4077 l176.2559 529.7759 l176.9761 531.144 l178.3438 531.8638 l179.7119 531.8638 l181.0801 531.144 l181.728 529.7759 l181.728 528.4077 l181.0801 527.04 l179.7119 526.3921 l178.3438 526.3921 l178.3438 526.3921 lf176.9761 528.4077 m176.9761 529.7759 l176.9761 528.4077 lf177.624 527.7598 m177.624 530.4961 l177.624 527.7598 lf178.3438 527.04 m178.3438 531.144 l178.3438 527.04 lf178.9922 527.04 m178.9922 531.144 l178.9922 527.04 lf179.7119 527.04 m179.7119 531.144 l179.7119 527.04 lf180.3599 527.7598 m180.3599 530.4961 l180.3599 527.7598 lf181.0801 528.4077 m181.0801 529.7759 l181.0801 528.4077 lf214.9199 507.6001 m213.5518 508.248 l212.9038 509.6162 l212.9038 510.9839 l213.5518 512.3521 l214.9199 513.0723 l216.2881 513.0723 l217.6563 512.3521 l218.376 510.9839 l218.376 509.6162 l217.6563 508.248 l216.2881 507.6001 l214.9199 507.6001 l214.9199 507.6001 lf213.5518 509.6162 m213.5518 510.9839 l213.5518 509.6162 lf214.272 508.9678 m214.272 511.7041 l214.272 508.9678 lf214.9199 508.248 m214.9199 512.3521 l214.9199 508.248 lf215.6401 508.248 m215.6401 512.3521 l215.6401 508.248 lf216.2881 508.248 m216.2881 512.3521 l216.2881 508.248 lf217.0078 508.9678 m217.0078 511.7041 l217.0078 508.9678 lf217.6563 509.6162 m217.6563 510.9839 l217.6563 509.6162 lf179.9282 541.728 m178.5601 542.376 l177.9121 543.7441 l177.9121 545.1118 l178.5601 546.48 l179.9282 547.1997 l181.2959 547.1997 l182.6641 546.48 l183.3838 545.1118 l183.3838 543.7441 l182.6641 542.376 l181.2959 541.728 l179.9282 541.728 l179.9282 541.728 lf178.5601 543.7441 m178.5601 545.1118 l178.5601 543.7441 lf179.2798 543.0957 m179.2798 545.832 l179.2798 543.0957 lf179.9282 542.376 m179.9282 546.48 l179.9282 542.376 lf180.6479 542.376 m180.6479 546.48 l180.6479 542.376 lf181.2959 542.376 m181.2959 546.48 l181.2959 542.376 lf182.0161 543.0957 m182.0161 545.832 l182.0161 543.0957 lf182.6641 543.7441 m182.6641 545.1118 l182.6641 543.7441 lf180.2158 531.7197 m178.8481 532.3682 l178.1279 533.7358 l178.1279 535.104 l178.8481 536.4717 l180.2158 537.1919 l181.584 537.1919 l182.9521 536.4717 l183.6001 535.104 l183.6001 533.7358 l182.9521 532.3682 l181.584 531.7197 l180.2158 531.7197 l180.2158 531.7197 lf178.8481 533.7358 m178.8481 535.104 l178.8481 533.7358 lf179.4961 533.0879 m179.4961 535.8242 l179.4961 533.0879 lf180.2158 532.3682 m180.2158 536.4717 l180.2158 532.3682 lf180.8638 532.3682 m180.8638 536.4717 l180.8638 532.3682 lf181.584 532.3682 m181.584 536.4717 l181.584 532.3682 lf182.2319 533.0879 m182.2319 535.8242 l182.2319 533.0879 lf182.9521 533.7358 m182.9521 535.104 l182.9521 533.7358 lf182.4482 529.9199 m181.0801 530.6396 l180.3599 532.0078 l180.3599 533.376 l181.0801 534.7441 l182.4482 535.3921 l183.8159 535.3921 l185.1841 534.7441 l185.9038 533.376 l185.9038 532.0078 l185.1841 530.6396 l183.8159 529.9199 l182.4482 529.9199 l182.4482 529.9199 lf181.0801 532.0078 m181.0801 533.376 l181.0801 532.0078 lf181.728 531.2881 m181.728 534.0239 l181.728 531.2881 lf182.4482 530.6396 m182.4482 534.7441 l182.4482 530.6396 lf183.0962 530.6396 m183.0962 534.7441 l183.0962 530.6396 lf183.8159 530.6396 m183.8159 534.7441 l183.8159 530.6396 lf184.5361 531.2881 m184.5361 534.0239 l184.5361 531.2881 lf185.1841 532.0078 m185.1841 533.376 l185.1841 532.0078 lf162.2881 520.3438 m160.9199 521.064 l160.272 522.4316 l160.272 523.7998 l160.9199 525.168 l162.2881 525.8877 l163.6563 525.8877 l165.0239 525.168 l165.7441 523.7998 l165.7441 522.4316 l165.0239 521.064 l163.6563 520.3438 l162.2881 520.3438 l162.2881 520.3438 lf160.9199 522.4316 m160.9199 523.7998 l160.9199 522.4316 lf161.6401 521.7837 m161.6401 524.52 l161.6401 521.7837 lf162.2881 521.064 m162.2881 525.168 l162.2881 521.064 lf163.0078 521.064 m163.0078 525.168 l163.0078 521.064 lf163.6563 521.064 m163.6563 525.168 l163.6563 521.064 lf164.376 521.7837 m164.376 524.52 l164.376 521.7837 lf165.0239 522.4316 m165.0239 523.7998 l165.0239 522.4316 lf160.2002 535.3198 m158.832 536.04 l158.1841 537.4077 l158.1841 538.7759 l158.832 540.144 l160.2002 540.792 l161.5679 540.792 l163.0078 540.144 l163.6563 538.7759 l163.6563 537.4077 l163.0078 536.04 l161.5679 535.3198 l160.2002 535.3198 l160.2002 535.3198 lf158.832 537.4077 m158.832 538.7759 l158.832 537.4077 lf159.5518 536.688 m159.5518 539.4238 l159.5518 536.688 lf160.2002 536.04 m160.2002 540.144 l160.2002 536.04 lf160.9199 536.04 m160.9199 540.144 l160.9199 536.04 lf161.5679 536.04 m161.5679 540.144 l161.5679 536.04 lf162.2881 536.688 m162.2881 539.4238 l162.2881 536.688 lf163.0078 537.4077 m163.0078 538.7759 l163.0078 537.4077 lf197.7119 546.9121 m196.3438 547.6318 l195.624 549 l195.624 550.3682 l196.3438 551.7358 l197.7119 552.3838 l199.0801 552.3838 l200.4482 551.7358 l201.0962 550.3682 l201.0962 549 l200.4482 547.6318 l199.0801 546.9121 l197.7119 546.9121 l197.7119 546.9121 lf196.3438 549 m196.3438 550.3682 l196.3438 549 lf196.9922 548.2798 m196.9922 551.0161 l196.9922 548.2798 lf197.7119 547.6318 m197.7119 551.7358 l197.7119 547.6318 lf198.3599 547.6318 m198.3599 551.7358 l198.3599 547.6318 lf199.0801 547.6318 m199.0801 551.7358 l199.0801 547.6318 lf199.728 548.2798 m199.728 551.0161 l199.728 548.2798 lf200.4482 549 m200.4482 550.3682 l200.4482 549 lf196.4878 528.9121 m195.1201 529.6318 l194.3999 531 l194.3999 532.3682 l195.1201 533.7358 l196.4878 534.4561 l197.856 534.4561 l199.2241 533.7358 l199.8721 532.3682 l199.8721 531 l199.2241 529.6318 l197.856 528.9121 l196.4878 528.9121 l196.4878 528.9121 lf195.1201 531 m195.1201 532.3682 l195.1201 531 lf195.7681 530.2798 m195.7681 533.0161 l195.7681 530.2798 lf196.4878 529.6318 m196.4878 533.7358 l196.4878 529.6318 lf197.1362 529.6318 m197.1362 533.7358 l197.1362 529.6318 lf197.856 529.6318 m197.856 533.7358 l197.856 529.6318 lf198.5039 530.2798 m198.5039 533.0161 l198.5039 530.2798 lf199.2241 531 m199.2241 532.3682 l199.2241 531 lf182.0879 516.8877 m180.7202 517.5361 l180 518.9038 l180 520.3438 l180.7202 521.7119 l182.0879 522.3599 l183.4561 522.3599 l184.8242 521.7119 l185.4722 520.3438 l185.4722 518.9038 l184.8242 517.5361 l183.4561 516.8877 l182.0879 516.8877 l182.0879 516.8877 lf180.7202 518.9038 m180.7202 520.3438 l180.7202 518.9038 lf181.3682 518.2559 m181.3682 520.9917 l181.3682 518.2559 lf182.0879 517.5361 m182.0879 521.7119 l182.0879 517.5361 lf182.7358 517.5361 m182.7358 521.7119 l182.7358 517.5361 lf183.4561 517.5361 m183.4561 521.7119 l183.4561 517.5361 lf184.104 518.2559 m184.104 520.9917 l184.104 518.2559 lf184.8242 518.9038 m184.8242 520.3438 l184.8242 518.9038 lf118.3682 377.208 m116.9282 377.9277 l116.2798 379.2959 l116.2798 380.6641 l116.9282 382.0322 l118.3682 382.6802 l119.7358 382.6802 l121.104 382.0322 l121.752 380.6641 l121.752 379.2959 l121.104 377.9277 l119.7358 377.208 l118.3682 377.208 l118.3682 377.208 lf116.9282 379.2959 m116.9282 380.6641 l116.9282 379.2959 lf117.6479 378.5762 m117.6479 381.312 l117.6479 378.5762 lf118.3682 377.9277 m118.3682 382.0322 l118.3682 377.9277 lf119.0161 377.9277 m119.0161 382.0322 l119.0161 377.9277 lf119.7358 377.9277 m119.7358 382.0322 l119.7358 377.9277 lf120.3838 378.5762 m120.3838 381.312 l120.3838 378.5762 lf121.104 379.2959 m121.104 380.6641 l121.104 379.2959 lf186.2642 518.9761 m184.896 519.6958 l184.1758 521.064 l184.1758 522.4316 l184.896 523.7998 l186.2642 524.52 l187.6318 524.52 l189 523.7998 l189.7202 522.4316 l189.7202 521.064 l189 519.6958 l187.6318 518.9761 l186.2642 518.9761 l186.2642 518.9761 lf184.896 521.064 m184.896 522.4316 l184.896 521.064 lf185.5439 520.3438 m185.5439 523.1519 l185.5439 520.3438 lf186.2642 519.6958 m186.2642 523.7998 l186.2642 519.6958 lf186.9839 519.6958 m186.9839 523.7998 l186.9839 519.6958 lf187.6318 519.6958 m187.6318 523.7998 l187.6318 519.6958 lf188.3521 520.3438 m188.3521 523.1519 l188.3521 520.3438 lf189 521.064 m189 522.4316 l189 521.064 lf179.9282 539.2798 m178.5601 539.9277 l177.8398 541.2959 l177.8398 542.6641 l178.5601 544.0317 l179.9282 544.752 l181.2959 544.752 l182.6641 544.0317 l183.3838 542.6641 l183.3838 541.2959 l182.6641 539.9277 l181.2959 539.2798 l179.9282 539.2798 l179.9282 539.2798 lf178.5601 541.2959 m178.5601 542.6641 l178.5601 541.2959 lf179.208 540.6479 m179.208 543.3838 l179.208 540.6479 lf179.9282 539.9277 m179.9282 544.0317 l179.9282 539.9277 lf180.5762 539.9277 m180.5762 544.0317 l180.5762 539.9277 lf181.2959 539.9277 m181.2959 544.0317 l181.2959 539.9277 lf182.0161 540.6479 m182.0161 543.3838 l182.0161 540.6479 lf182.6641 541.2959 m182.6641 542.6641 l182.6641 541.2959 lf197.7842 534.2397 m196.416 534.96 l195.6958 536.3281 l195.6958 537.6958 l196.416 539.064 l197.7842 539.7119 l199.1519 539.7119 l200.52 539.064 l201.2402 537.6958 l201.2402 536.3281 l200.52 534.96 l199.1519 534.2397 l197.7842 534.2397 l197.7842 534.2397 lf196.416 536.3281 m196.416 537.6958 l196.416 536.3281 lf197.064 535.6079 m197.064 538.3438 l197.064 535.6079 lf197.7842 534.96 m197.7842 539.064 l197.7842 534.96 lf198.4321 534.96 m198.4321 539.064 l198.4321 534.96 lf199.1519 534.96 m199.1519 539.064 l199.1519 534.96 lf199.7998 535.6079 m199.7998 538.3438 l199.7998 535.6079 lf200.52 536.3281 m200.52 537.6958 l200.52 536.3281 lf182.3042 534.5278 m180.936 535.1758 l180.2158 536.5439 l180.2158 537.9121 l180.936 539.2798 l182.3042 540 l183.6719 540 l185.04 539.2798 l185.7598 537.9121 l185.7598 536.5439 l185.04 535.1758 l183.6719 534.5278 l182.3042 534.5278 l182.3042 534.5278 lf180.936 536.5439 m180.936 537.9121 l180.936 536.5439 lf181.584 535.896 m181.584 538.6318 l181.584 535.896 lf182.3042 535.1758 m182.3042 539.2798 l182.3042 535.1758 lf183.0239 535.1758 m183.0239 539.2798 l183.0239 535.1758 lf183.6719 535.1758 m183.6719 539.2798 l183.6719 535.1758 lf184.3921 535.896 m184.3921 538.6318 l184.3921 535.896 lf185.04 536.5439 m185.04 537.9121 l185.04 536.5439 lf171.144 536.6162 m169.7759 537.2642 l169.0562 538.6318 l169.0562 540 l169.7759 541.3682 l171.144 542.0879 l172.5122 542.0879 l173.8799 541.3682 l174.6001 540 l174.6001 538.6318 l173.8799 537.2642 l172.5122 536.6162 l171.144 536.6162 l171.144 536.6162 lf169.7759 538.6318 m169.7759 540 l169.7759 538.6318 lf170.4961 537.9839 m170.4961 540.7197 l170.4961 537.9839 lf171.144 537.2642 m171.144 541.3682 l171.144 537.2642 lf171.8638 537.2642 m171.8638 541.3682 l171.8638 537.2642 lf172.5122 537.2642 m172.5122 541.3682 l172.5122 537.2642 lf173.2319 537.9839 m173.2319 540.7197 l173.2319 537.9839 lf173.8799 538.6318 m173.8799 540 l173.8799 538.6318 lf171.4321 540 m170.064 540.7197 l169.3438 542.0879 l169.3438 543.4561 l170.064 544.8242 l171.4321 545.4717 l172.7998 545.4717 l174.168 544.8242 l174.8159 543.4561 l174.8159 542.0879 l174.168 540.7197 l172.7998 540 l171.4321 540 l171.4321 540 lf170.064 542.0879 m170.064 543.4561 l170.064 542.0879 lf170.7119 541.3682 m170.7119 544.104 l170.7119 541.3682 lf171.4321 540.7197 m171.4321 544.8242 l171.4321 540.7197 lf172.0801 540.7197 m172.0801 544.8242 l172.0801 540.7197 lf172.7998 540.7197 m172.7998 544.8242 l172.7998 540.7197 lf173.4482 541.3682 m173.4482 544.104 l173.4482 541.3682 lf174.168 542.0879 m174.168 543.4561 l174.168 542.0879 lf169.1279 526.0317 m167.7598 526.6797 l167.04 528.0479 l167.04 529.416 l167.7598 530.7837 l169.1279 531.5039 l170.4961 531.5039 l171.8638 530.7837 l172.5122 529.416 l172.5122 528.0479 l171.8638 526.6797 l170.4961 526.0317 l169.1279 526.0317 l169.1279 526.0317 lf167.7598 528.0479 m167.7598 529.416 l167.7598 528.0479 lf168.4082 527.3999 m168.4082 530.1357 l168.4082 527.3999 lf169.1279 526.6797 m169.1279 530.7837 l169.1279 526.6797 lf169.7759 526.6797 m169.7759 530.7837 l169.7759 526.6797 lf170.4961 526.6797 m170.4961 530.7837 l170.4961 526.6797 lf171.144 527.3999 m171.144 530.1357 l171.144 527.3999 lf171.8638 528.0479 m171.8638 529.416 l171.8638 528.0479 lf173.4482 521.7837 m172.0801 522.4316 l171.3599 523.7998 l171.3599 525.168 l172.0801 526.5361 l173.4482 527.2559 l174.8159 527.2559 l176.1841 526.5361 l176.832 525.168 l176.832 523.7998 l176.1841 522.4316 l174.8159 521.7837 l173.4482 521.7837 l173.4482 521.7837 lf172.0801 523.7998 m172.0801 525.168 l172.0801 523.7998 lf172.728 523.1519 m172.728 525.8877 l172.728 523.1519 lf173.4482 522.4316 m173.4482 526.5361 l173.4482 522.4316 lf174.0962 522.4316 m174.0962 526.5361 l174.0962 522.4316 lf174.8159 522.4316 m174.8159 526.5361 l174.8159 522.4316 lf175.4639 523.1519 m175.4639 525.8877 l175.4639 523.1519 lf176.1841 523.7998 m176.1841 525.168 l176.1841 523.7998 lf167.1841 502.8477 m165.8159 503.5679 l165.168 504.936 l165.168 506.3042 l165.8159 507.6719 l167.1841 508.3198 l168.5518 508.3198 l169.9199 507.6719 l170.6401 506.3042 l170.6401 504.936 l169.9199 503.5679 l168.5518 502.8477 l167.1841 502.8477 l167.1841 502.8477 lf165.8159 504.936 m165.8159 506.3042 l165.8159 504.936 lf166.5361 504.2158 m166.5361 506.9521 l166.5361 504.2158 lf167.1841 503.5679 m167.1841 507.6719 l167.1841 503.5679 lf167.9038 503.5679 m167.9038 507.6719 l167.9038 503.5679 lf168.5518 503.5679 m168.5518 507.6719 l168.5518 503.5679 lf169.272 504.2158 m169.272 506.9521 l169.272 504.2158 lf169.9199 504.936 m169.9199 506.3042 l169.9199 504.936 lf160.9199 507.8877 m159.5518 508.5361 l158.832 509.9038 l158.832 511.272 l159.5518 512.6396 l160.9199 513.3599 l162.2881 513.3599 l163.6563 512.6396 l164.3042 511.272 l164.3042 509.9038 l163.6563 508.5361 l162.2881 507.8877 l160.9199 507.8877 l160.9199 507.8877 lf159.5518 509.9038 m159.5518 511.272 l159.5518 509.9038 lf160.2002 509.2559 m160.2002 511.9917 l160.2002 509.2559 lf160.9199 508.5361 m160.9199 512.6396 l160.9199 508.5361 lf161.5679 508.5361 m161.5679 512.6396 l161.5679 508.5361 lf162.2881 508.5361 m162.2881 512.6396 l162.2881 508.5361 lf162.936 509.2559 m162.936 511.9917 l162.936 509.2559 lf163.6563 509.9038 m163.6563 511.272 l163.6563 509.9038 lf206.9282 516.168 m205.5601 516.8159 l204.8398 518.1841 l204.8398 519.5518 l205.5601 520.9199 l206.9282 521.6396 l208.2959 521.6396 l209.6641 520.9199 l210.3838 519.5518 l210.3838 518.1841 l209.6641 516.8159 l208.2959 516.168 l206.9282 516.168 l206.9282 516.168 lf205.5601 518.1841 m205.5601 519.5518 l205.5601 518.1841 lf206.2798 517.5361 m206.2798 520.272 l206.2798 517.5361 lf206.9282 516.8159 m206.9282 520.9199 l206.9282 516.8159 lf207.6479 516.8159 m207.6479 520.9199 l207.6479 516.8159 lf208.2959 516.8159 m208.2959 520.9199 l208.2959 516.8159 lf209.0161 517.5361 m209.0161 520.272 l209.0161 517.5361 lf209.6641 518.1841 m209.6641 519.5518 l209.6641 518.1841 lf214.5601 530.208 m213.1919 530.856 l212.4722 532.2236 l212.4722 533.5918 l213.1919 534.96 l214.5601 535.6797 l215.9282 535.6797 l217.2959 534.96 l218.0161 533.5918 l218.0161 532.2236 l217.2959 530.856 l215.9282 530.208 l214.5601 530.208 l214.5601 530.208 lf213.1919 532.2236 m213.1919 533.5918 l213.1919 532.2236 lf213.8398 531.5762 m213.8398 534.312 l213.8398 531.5762 lf214.5601 530.856 m214.5601 534.96 l214.5601 530.856 lf215.208 530.856 m215.208 534.96 l215.208 530.856 lf215.9282 530.856 m215.9282 534.96 l215.9282 530.856 lf216.6479 531.5762 m216.6479 534.312 l216.6479 531.5762 lf217.2959 532.2236 m217.2959 533.5918 l217.2959 532.2236 lf184.6802 530.4961 m183.2402 531.2158 l182.5918 532.584 l182.5918 533.9521 l183.2402 535.3198 l184.6802 535.9678 l186.0479 535.9678 l187.416 535.3198 l188.064 533.9521 l188.064 532.584 l187.416 531.2158 l186.0479 530.4961 l184.6802 530.4961 l184.6802 530.4961 lf183.2402 532.584 m183.2402 533.9521 l183.2402 532.584 lf183.96 531.8638 m183.96 534.6001 l183.96 531.8638 lf184.6802 531.2158 m184.6802 535.3198 l184.6802 531.2158 lf185.3281 531.2158 m185.3281 535.3198 l185.3281 531.2158 lf186.0479 531.2158 m186.0479 535.3198 l186.0479 531.2158 lf186.6958 531.8638 m186.6958 534.6001 l186.6958 531.8638 lf187.416 532.584 m187.416 533.9521 l187.416 532.584 lf172.0801 538.5601 m170.7119 539.2798 l170.064 540.6479 l170.064 542.0161 l170.7119 543.3838 l172.0801 544.0317 l173.4482 544.0317 l174.8159 543.3838 l175.5361 542.0161 l175.5361 540.6479 l174.8159 539.2798 l173.4482 538.5601 l172.0801 538.5601 l172.0801 538.5601 lf170.7119 540.6479 m170.7119 542.0161 l170.7119 540.6479 lf171.4321 539.9277 m171.4321 542.6641 l171.4321 539.9277 lf172.0801 539.2798 m172.0801 543.3838 l172.0801 539.2798 lf172.7998 539.2798 m172.7998 543.3838 l172.7998 539.2798 lf173.4482 539.2798 m173.4482 543.3838 l173.4482 539.2798 lf174.168 539.9277 m174.168 542.6641 l174.168 539.9277 lf174.8159 540.6479 m174.8159 542.0161 l174.8159 540.6479 lf172.0801 528.1201 m170.7119 528.8398 l170.064 530.208 l170.064 531.5762 l170.7119 532.9438 l172.0801 533.6641 l173.4482 533.6641 l174.8159 532.9438 l175.5361 531.5762 l175.5361 530.208 l174.8159 528.8398 l173.4482 528.1201 l172.0801 528.1201 l172.0801 528.1201 lf170.7119 530.208 m170.7119 531.5762 l170.7119 530.208 lf171.4321 529.4878 m171.4321 532.2959 l171.4321 529.4878 lf172.0801 528.8398 m172.0801 532.9438 l172.0801 528.8398 lf172.7998 528.8398 m172.7998 532.9438 l172.7998 528.8398 lf173.4482 528.8398 m173.4482 532.9438 l173.4482 528.8398 lf174.168 529.4878 m174.168 532.2959 l174.168 529.4878 lf174.8159 530.208 m174.8159 531.5762 l174.8159 530.208 lf191.52 521.3521 m190.1519 522.0723 l189.4321 523.4399 l189.4321 524.8081 l190.1519 526.1758 l191.52 526.8242 l192.8882 526.8242 l194.2559 526.1758 l194.9761 524.8081 l194.9761 523.4399 l194.2559 522.0723 l192.8882 521.3521 l191.52 521.3521 l191.52 521.3521 lf190.1519 523.4399 m190.1519 524.8081 l190.1519 523.4399 lf190.7998 522.7197 m190.7998 525.4561 l190.7998 522.7197 lf191.52 522.0723 m191.52 526.1758 l191.52 522.0723 lf192.2402 522.0723 m192.2402 526.1758 l192.2402 522.0723 lf192.8882 522.0723 m192.8882 526.1758 l192.8882 522.0723 lf193.6079 522.7197 m193.6079 525.4561 l193.6079 522.7197 lf194.2559 523.4399 m194.2559 524.8081 l194.2559 523.4399 lf187.4878 517.8242 m186.1201 518.4717 l185.4722 519.9121 l185.4722 521.2798 l186.1201 522.6479 l187.4878 523.2959 l188.856 523.2959 l190.2241 522.6479 l190.9438 521.2798 l190.9438 519.9121 l190.2241 518.4717 l188.856 517.8242 l187.4878 517.8242 l187.4878 517.8242 lf186.1201 519.9121 m186.1201 521.2798 l186.1201 519.9121 lf186.8398 519.1919 m186.8398 521.9277 l186.8398 519.1919 lf187.4878 518.4717 m187.4878 522.6479 l187.4878 518.4717 lf188.208 518.4717 m188.208 522.6479 l188.208 518.4717 lf188.856 518.4717 m188.856 522.6479 l188.856 518.4717 lf189.5762 519.1919 m189.5762 521.9277 l189.5762 519.1919 lf190.2241 519.9121 m190.2241 521.2798 l190.2241 519.9121 lf182.4482 506.4478 m181.0801 507.0962 l180.3599 508.4639 l180.3599 509.832 l181.0801 511.1997 l182.4482 511.9199 l183.8159 511.9199 l185.1841 511.1997 l185.9038 509.832 l185.9038 508.4639 l185.1841 507.0962 l183.8159 506.4478 l182.4482 506.4478 l182.4482 506.4478 lf181.0801 508.4639 m181.0801 509.832 l181.0801 508.4639 lf181.728 507.8159 m181.728 510.5518 l181.728 507.8159 lf182.4482 507.0962 m182.4482 511.1997 l182.4482 507.0962 lf183.168 507.0962 m183.168 511.1997 l183.168 507.0962 lf183.8159 507.0962 m183.8159 511.1997 l183.8159 507.0962 lf184.5361 507.8159 m184.5361 510.5518 l184.5361 507.8159 lf185.1841 508.4639 m185.1841 509.832 l185.1841 508.4639 lf183.168 502.8477 m181.7998 503.5679 l181.0801 504.936 l181.0801 506.3042 l181.7998 507.6719 l183.168 508.3921 l184.5361 508.3921 l185.9038 507.6719 l186.624 506.3042 l186.624 504.936 l185.9038 503.5679 l184.5361 502.8477 l183.168 502.8477 l183.168 502.8477 lf181.7998 504.936 m181.7998 506.3042 l181.7998 504.936 lf182.4482 504.2158 m182.4482 507.0239 l182.4482 504.2158 lf183.168 503.5679 m183.168 507.6719 l183.168 503.5679 lf183.8882 503.5679 m183.8882 507.6719 l183.8882 503.5679 lf184.5361 503.5679 m184.5361 507.6719 l184.5361 503.5679 lf185.2559 504.2158 m185.2559 507.0239 l185.2559 504.2158 lf185.9038 504.936 m185.9038 506.3042 l185.9038 504.936 lf183.4561 515.8799 m182.0879 516.6001 l181.3682 517.9678 l181.3682 519.3359 l182.0879 520.7041 l183.4561 521.4238 l184.8242 521.4238 l186.1919 520.7041 l186.8398 519.3359 l186.8398 517.9678 l186.1919 516.6001 l184.8242 515.8799 l183.4561 515.8799 l183.4561 515.8799 lf182.0879 517.9678 m182.0879 519.3359 l182.0879 517.9678 lf182.7358 517.248 m182.7358 520.0562 l182.7358 517.248 lf183.4561 516.6001 m183.4561 520.7041 l183.4561 516.6001 lf184.104 516.6001 m184.104 520.7041 l184.104 516.6001 lf184.8242 516.6001 m184.8242 520.7041 l184.8242 516.6001 lf185.4722 517.248 m185.4722 520.0562 l185.4722 517.248 lf186.1919 517.9678 m186.1919 519.3359 l186.1919 517.9678 lf182.376 528.624 m181.0078 529.272 l180.2881 530.6396 l180.2881 532.0078 l181.0078 533.376 l182.376 534.0957 l183.7441 534.0957 l185.1118 533.376 l185.832 532.0078 l185.832 530.6396 l185.1118 529.272 l183.7441 528.624 l182.376 528.624 l182.376 528.624 lf181.0078 530.6396 m181.0078 532.0078 l181.0078 530.6396 lf181.728 529.9917 m181.728 532.728 l181.728 529.9917 lf182.376 529.272 m182.376 533.376 l182.376 529.272 lf183.0962 529.272 m183.0962 533.376 l183.0962 529.272 lf183.7441 529.272 m183.7441 533.376 l183.7441 529.272 lf184.4639 529.9917 m184.4639 532.728 l184.4639 529.9917 lf185.1118 530.6396 m185.1118 532.0078 l185.1118 530.6396 lf132.3359 370.2959 m130.9678 370.9438 l130.3198 372.312 l130.3198 373.6802 l130.9678 375.0479 l132.3359 375.7681 l133.7041 375.7681 l135.0718 375.0479 l135.792 373.6802 l135.792 372.312 l135.0718 370.9438 l133.7041 370.2959 l132.3359 370.2959 l132.3359 370.2959 lf130.9678 372.312 m130.9678 373.6802 l130.9678 372.312 lf131.688 371.6641 m131.688 374.3999 l131.688 371.6641 lf132.3359 370.9438 m132.3359 375.0479 l132.3359 370.9438 lf133.0562 370.9438 m133.0562 375.0479 l133.0562 370.9438 lf133.7041 370.9438 m133.7041 375.0479 l133.7041 370.9438 lf134.4238 371.6641 m134.4238 374.3999 l134.4238 371.6641 lf135.0718 372.312 m135.0718 373.6802 l135.0718 372.312 lf177.9121 529.272 m176.5439 529.9917 l175.896 531.3599 l175.896 532.728 l176.5439 534.0957 l177.9121 534.7441 l179.2798 534.7441 l180.6479 534.0957 l181.3682 532.728 l181.3682 531.3599 l180.6479 529.9917 l179.2798 529.272 l177.9121 529.272 l177.9121 529.272 lf176.5439 531.3599 m176.5439 532.728 l176.5439 531.3599 lf177.2642 530.6396 m177.2642 533.376 l177.2642 530.6396 lf177.9121 529.9917 m177.9121 534.0957 l177.9121 529.9917 lf178.6318 529.9917 m178.6318 534.0957 l178.6318 529.9917 lf179.2798 529.9917 m179.2798 534.0957 l179.2798 529.9917 lf180 530.6396 m180 533.376 l180 530.6396 lf180.6479 531.3599 m180.6479 532.728 l180.6479 531.3599 lf209.7358 563.688 m208.3682 564.4077 l207.7202 565.7759 l207.7202 567.144 l208.3682 568.5122 l209.7358 569.1602 l211.104 569.1602 l212.4722 568.5122 l213.1919 567.144 l213.1919 565.7759 l212.4722 564.4077 l211.104 563.688 l209.7358 563.688 l209.7358 563.688 lf208.3682 565.7759 m208.3682 567.144 l208.3682 565.7759 lf209.0879 565.0562 m209.0879 567.792 l209.0879 565.0562 lf209.7358 564.4077 m209.7358 568.5122 l209.7358 564.4077 lf210.4561 564.4077 m210.4561 568.5122 l210.4561 564.4077 lf211.104 564.4077 m211.104 568.5122 l211.104 564.4077 lf211.8242 565.0562 m211.8242 567.792 l211.8242 565.0562 lf212.4722 565.7759 m212.4722 567.144 l212.4722 565.7759 lf184.5361 538.7041 m183.168 539.4238 l182.52 540.792 l182.52 542.1602 l183.168 543.5278 l184.5361 544.248 l185.9038 544.248 l187.272 543.5278 l187.9922 542.1602 l187.9922 540.792 l187.272 539.4238 l185.9038 538.7041 l184.5361 538.7041 l184.5361 538.7041 lf183.168 540.792 m183.168 542.1602 l183.168 540.792 lf183.8882 540.0723 m183.8882 542.8799 l183.8882 540.0723 lf184.5361 539.4238 m184.5361 543.5278 l184.5361 539.4238 lf185.2559 539.4238 m185.2559 543.5278 l185.2559 539.4238 lf185.9038 539.4238 m185.9038 543.5278 l185.9038 539.4238 lf186.624 540.0723 m186.624 542.8799 l186.624 540.0723 lf187.272 540.792 m187.272 542.1602 l187.272 540.792 lf186.3359 518.7598 m184.9678 519.4077 l184.248 520.7759 l184.248 522.144 l184.9678 523.5122 l186.3359 524.2319 l187.7041 524.2319 l189.0718 523.5122 l189.7202 522.144 l189.7202 520.7759 l189.0718 519.4077 l187.7041 518.7598 l186.3359 518.7598 l186.3359 518.7598 lf184.9678 520.7759 m184.9678 522.144 l184.9678 520.7759 lf185.6162 520.1279 m185.6162 522.8638 l185.6162 520.1279 lf186.3359 519.4077 m186.3359 523.5122 l186.3359 519.4077 lf186.9839 519.4077 m186.9839 523.5122 l186.9839 519.4077 lf187.7041 519.4077 m187.7041 523.5122 l187.7041 519.4077 lf188.3521 520.1279 m188.3521 522.8638 l188.3521 520.1279 lf189.0718 520.7759 m189.0718 522.144 l189.0718 520.7759 lf182.0161 533.0879 m180.6479 533.7358 l179.9282 535.104 l179.9282 536.4717 l180.6479 537.9121 l182.0161 538.5601 l183.3838 538.5601 l184.752 537.9121 l185.3999 536.4717 l185.3999 535.104 l184.752 533.7358 l183.3838 533.0879 l182.0161 533.0879 l182.0161 533.0879 lf180.6479 535.104 m180.6479 536.4717 l180.6479 535.104 lf181.2959 534.4561 m181.2959 537.1919 l181.2959 534.4561 lf182.0161 533.7358 m182.0161 537.9121 l182.0161 533.7358 lf182.6641 533.7358 m182.6641 537.9121 l182.6641 533.7358 lf183.3838 533.7358 m183.3838 537.9121 l183.3838 533.7358 lf184.0322 534.4561 m184.0322 537.1919 l184.0322 534.4561 lf184.752 535.104 m184.752 536.4717 l184.752 535.104 lf178.7041 532.5122 m177.3359 533.2319 l176.6162 534.6001 l176.6162 535.9678 l177.3359 537.3359 l178.7041 537.9839 l180.0718 537.9839 l181.4399 537.3359 l182.0879 535.9678 l182.0879 534.6001 l181.4399 533.2319 l180.0718 532.5122 l178.7041 532.5122 l178.7041 532.5122 lf177.3359 534.6001 m177.3359 535.9678 l177.3359 534.6001 lf177.9839 533.8799 m177.9839 536.6162 l177.9839 533.8799 lf178.7041 533.2319 m178.7041 537.3359 l178.7041 533.2319 lf179.3521 533.2319 m179.3521 537.3359 l179.3521 533.2319 lf180.0718 533.2319 m180.0718 537.3359 l180.0718 533.2319 lf180.7202 533.8799 m180.7202 536.6162 l180.7202 533.8799 lf181.4399 534.6001 m181.4399 535.9678 l181.4399 534.6001 lf179.1362 532.0801 m177.7681 532.728 l177.1201 534.0957 l177.1201 535.4639 l177.7681 536.832 l179.1362 537.5518 l180.5039 537.5518 l181.8721 536.832 l182.5918 535.4639 l182.5918 534.0957 l181.8721 532.728 l180.5039 532.0801 l179.1362 532.0801 l179.1362 532.0801 lf177.7681 534.0957 m177.7681 535.4639 l177.7681 534.0957 lf178.4878 533.4478 m178.4878 536.1841 l178.4878 533.4478 lf179.1362 532.728 m179.1362 536.832 l179.1362 532.728 lf179.856 532.728 m179.856 536.832 l179.856 532.728 lf180.5039 532.728 m180.5039 536.832 l180.5039 532.728 lf181.2241 533.4478 m181.2241 536.1841 l181.2241 533.4478 lf181.8721 534.0957 m181.8721 535.4639 l181.8721 534.0957 lf175.3198 538.1997 m173.9521 538.9199 l173.2319 540.2881 l173.2319 541.6558 l173.9521 543.0239 l175.3198 543.7441 l176.688 543.7441 l178.0562 543.0239 l178.7759 541.6558 l178.7759 540.2881 l178.0562 538.9199 l176.688 538.1997 l175.3198 538.1997 l175.3198 538.1997 lf173.9521 540.2881 m173.9521 541.6558 l173.9521 540.2881 lf174.6719 539.5679 m174.6719 542.376 l174.6719 539.5679 lf175.3198 538.9199 m175.3198 543.0239 l175.3198 538.9199 lf176.04 538.9199 m176.04 543.0239 l176.04 538.9199 lf176.688 538.9199 m176.688 543.0239 l176.688 538.9199 lf177.4082 539.5679 m177.4082 542.376 l177.4082 539.5679 lf178.0562 540.2881 m178.0562 541.6558 l178.0562 540.2881 lf192.6719 541.9438 m191.3042 542.5918 l190.584 543.96 l190.584 545.3281 l191.3042 546.6958 l192.6719 547.416 l194.04 547.416 l195.4082 546.6958 l196.1279 545.3281 l196.1279 543.96 l195.4082 542.5918 l194.04 541.9438 l192.6719 541.9438 l192.6719 541.9438 lf191.3042 543.96 m191.3042 545.3281 l191.3042 543.96 lf191.9521 543.312 m191.9521 546.0479 l191.9521 543.312 lf192.6719 542.5918 m192.6719 546.6958 l192.6719 542.5918 lf193.3198 542.5918 m193.3198 546.6958 l193.3198 542.5918 lf194.04 542.5918 m194.04 546.6958 l194.04 542.5918 lf194.688 543.312 m194.688 546.0479 l194.688 543.312 lf195.4082 543.96 m195.4082 545.3281 l195.4082 543.96 lf191.1602 542.6641 m189.7202 543.312 l189.0718 544.6797 l189.0718 546.0479 l189.7202 547.416 l191.1602 548.1357 l192.5278 548.1357 l193.896 547.416 l194.5439 546.0479 l194.5439 544.6797 l193.896 543.312 l192.5278 542.6641 l191.1602 542.6641 l191.1602 542.6641 lf189.7202 544.6797 m189.7202 546.0479 l189.7202 544.6797 lf190.4399 544.0317 m190.4399 546.7681 l190.4399 544.0317 lf191.1602 543.312 m191.1602 547.416 l191.1602 543.312 lf191.8081 543.312 m191.8081 547.416 l191.8081 543.312 lf192.5278 543.312 m192.5278 547.416 l192.5278 543.312 lf193.1758 544.0317 m193.1758 546.7681 l193.1758 544.0317 lf193.896 544.6797 m193.896 546.0479 l193.896 544.6797 lf193.1758 552.8159 m191.8081 553.5361 l191.0879 554.9038 l191.0879 556.272 l191.8081 557.6396 l193.1758 558.2881 l194.5439 558.2881 l195.9121 557.6396 l196.5601 556.272 l196.5601 554.9038 l195.9121 553.5361 l194.5439 552.8159 l193.1758 552.8159 l193.1758 552.8159 lf191.8081 554.9038 m191.8081 556.272 l191.8081 554.9038 lf192.4561 554.1841 m192.4561 556.9199 l192.4561 554.1841 lf193.1758 553.5361 m193.1758 557.6396 l193.1758 553.5361 lf193.8242 553.5361 m193.8242 557.6396 l193.8242 553.5361 lf194.5439 553.5361 m194.5439 557.6396 l194.5439 553.5361 lf195.1919 554.1841 m195.1919 556.9199 l195.1919 554.1841 lf195.9121 554.9038 m195.9121 556.272 l195.9121 554.9038 lf191.0879 533.6641 m189.7202 534.3838 l189.0718 535.752 l189.0718 537.1201 l189.7202 538.4878 l191.0879 539.1357 l192.4561 539.1357 l193.8242 538.4878 l194.5439 537.1201 l194.5439 535.752 l193.8242 534.3838 l192.4561 533.6641 l191.0879 533.6641 l191.0879 533.6641 lf189.7202 535.752 m189.7202 537.1201 l189.7202 535.752 lf190.4399 535.0317 m190.4399 537.7681 l190.4399 535.0317 lf191.0879 534.3838 m191.0879 538.4878 l191.0879 534.3838 lf191.8081 534.3838 m191.8081 538.4878 l191.8081 534.3838 lf192.4561 534.3838 m192.4561 538.4878 l192.4561 534.3838 lf193.1758 535.0317 m193.1758 537.7681 l193.1758 535.0317 lf193.8242 535.752 m193.8242 537.1201 l193.8242 535.752 lf183.4561 518.1841 m182.0879 518.832 l181.3682 520.1997 l181.3682 521.5679 l182.0879 522.936 l183.4561 523.6558 l184.8242 523.6558 l186.1919 522.936 l186.8398 521.5679 l186.8398 520.1997 l186.1919 518.832 l184.8242 518.1841 l183.4561 518.1841 l183.4561 518.1841 lf182.0879 520.1997 m182.0879 521.5679 l182.0879 520.1997 lf182.7358 519.5518 m182.7358 522.2881 l182.7358 519.5518 lf183.4561 518.832 m183.4561 522.936 l183.4561 518.832 lf184.104 518.832 m184.104 522.936 l184.104 518.832 lf184.8242 518.832 m184.8242 522.936 l184.8242 518.832 lf185.4722 519.5518 m185.4722 522.2881 l185.4722 519.5518 lf186.1919 520.1997 m186.1919 521.5679 l186.1919 520.1997 lf0 R0 0 0 1 K1 J 2 j 0.75 w 10 M175.3921 383.1118 m174.0239 383.832 l173.376 385.1997 l173.376 386.5679 l174.0239 387.936 l175.3921 388.6563 l176.7598 388.6563 l178.1279 387.936 l178.8481 386.5679 l178.8481 385.1997 l178.1279 383.832 l176.7598 383.1118 l175.3921 383.1118 lS158.688 392.5439 m157.3198 393.1919 l156.6719 394.5601 l156.6719 395.9277 l157.3198 397.2959 l158.688 398.0161 l160.0562 398.0161 l161.4238 397.2959 l162.144 395.9277 l162.144 394.5601 l161.4238 393.1919 l160.0562 392.5439 l158.688 392.5439 lS184.896 423.144 m183.5278 423.792 l182.8081 425.1602 l182.8081 426.5278 l183.5278 427.896 l184.896 428.6162 l186.2642 428.6162 l187.6318 427.896 l188.3521 426.5278 l188.3521 425.1602 l187.6318 423.792 l186.2642 423.144 l184.896 423.144 lS175.3198 411.2637 m173.9521 411.9121 l173.2319 413.2798 l173.2319 414.6479 l173.9521 416.0879 l175.3198 416.7358 l176.688 416.7358 l178.0562 416.0879 l178.7759 414.6479 l178.7759 413.2798 l178.0562 411.9121 l176.688 411.2637 l175.3198 411.2637 lS203.9761 425.0161 m202.6079 425.7358 l201.96 427.104 l201.96 428.4722 l202.6079 429.8398 l203.9761 430.4878 l205.416 430.4878 l206.7842 429.8398 l207.4321 428.4722 l207.4321 427.104 l206.7842 425.7358 l205.416 425.0161 l203.9761 425.0161 lS167.7598 391.8237 m166.3921 392.5439 l165.7441 393.9121 l165.7441 395.2798 l166.3921 396.6479 l167.7598 397.2959 l169.1279 397.2959 l170.4961 396.6479 l171.2158 395.2798 l171.2158 393.9121 l170.4961 392.5439 l169.1279 391.8237 l167.7598 391.8237 lS198.6479 401.04 m197.2798 401.688 l196.6318 403.0562 l196.6318 404.4238 l197.2798 405.792 l198.6479 406.5117 l200.0161 406.5117 l201.3838 405.792 l202.104 404.4238 l202.104 403.0562 l201.3838 401.688 l200.0161 401.04 l198.6479 401.04 lS192.7441 410.1118 m191.376 410.832 l190.6563 412.1997 l190.6563 413.5679 l191.376 414.936 l192.7441 415.584 l194.1118 415.584 l195.48 414.936 l196.1279 413.5679 l196.1279 412.1997 l195.48 410.832 l194.1118 410.1118 l192.7441 410.1118 lS186.48 394.3438 m185.1118 395.064 l184.3921 396.4316 l184.3921 397.7998 l185.1118 399.168 l186.48 399.8159 l187.8481 399.8159 l189.2158 399.168 l189.936 397.7998 l189.936 396.4316 l189.2158 395.064 l187.8481 394.3438 l186.48 394.3438 lS184.896 390.0962 m183.5278 390.8159 l182.8799 392.1841 l182.8799 393.5518 l183.5278 394.9199 l184.896 395.5679 l186.2642 395.5679 l187.7041 394.9199 l188.3521 393.5518 l188.3521 392.1841 l187.7041 390.8159 l186.2642 390.0962 l184.896 390.0962 lS193.3921 395.856 m192.0239 396.5762 l191.3042 397.9438 l191.3042 399.312 l192.0239 400.6802 l193.3921 401.3999 l194.7598 401.3999 l196.1279 400.6802 l196.8481 399.312 l196.8481 397.9438 l196.1279 396.5762 l194.7598 395.856 l193.3921 395.856 lS165.0239 397.5117 m163.6563 398.1602 l162.936 399.5278 l162.936 400.896 l163.6563 402.2637 l165.0239 402.9839 l166.3921 402.9839 l167.7598 402.2637 l168.4082 400.896 l168.4082 399.5278 l167.7598 398.1602 l166.3921 397.5117 l165.0239 397.5117 lS158.7598 403.6318 m157.3921 404.2798 l156.7441 405.7202 l156.7441 407.0879 l157.3921 408.4561 l158.7598 409.104 l160.1279 409.104 l161.5679 408.4561 l162.2158 407.0879 l162.2158 405.7202 l161.5679 404.2798 l160.1279 403.6318 l158.7598 403.6318 lS160.6318 397.9438 m159.2642 398.6641 l158.5439 400.0317 l158.5439 401.3999 l159.2642 402.7681 l160.6318 403.416 l162 403.416 l163.3682 402.7681 l164.0161 401.3999 l164.0161 400.0317 l163.3682 398.6641 l162 397.9438 l160.6318 397.9438 lS162.792 416.5918 m161.4238 417.2402 l160.7759 418.6079 l160.7759 419.9761 l161.4238 421.3438 l162.792 422.064 l164.1602 422.064 l165.5278 421.3438 l166.248 419.9761 l166.248 418.6079 l165.5278 417.2402 l164.1602 416.5918 l162.792 416.5918 lS188.856 438.4082 m187.4878 439.0562 l186.7681 440.4238 l186.7681 441.792 l187.4878 443.1602 l188.856 443.8799 l190.2241 443.8799 l191.5918 443.1602 l192.2402 441.792 l192.2402 440.4238 l191.5918 439.0562 l190.2241 438.4082 l188.856 438.4082 lS193.896 444.6719 m192.5278 445.3921 l191.8081 446.7598 l191.8081 448.1279 l192.5278 449.4961 l193.896 450.144 l195.2642 450.144 l196.6318 449.4961 l197.2798 448.1279 l197.2798 446.7598 l196.6318 445.3921 l195.2642 444.6719 l193.896 444.6719 lS193.5361 450.3599 m192.168 451.0801 l191.52 452.4478 l191.52 453.8159 l192.168 455.1841 l193.5361 455.832 l194.9038 455.832 l196.272 455.1841 l196.9922 453.8159 l196.9922 452.4478 l196.272 451.0801 l194.9038 450.3599 l193.5361 450.3599 lS178.5601 444.7441 m177.1919 445.4639 l176.4722 446.832 l176.4722 448.1997 l177.1919 449.5679 l178.5601 450.2881 l179.9282 450.2881 l181.2959 449.5679 l181.9438 448.1997 l181.9438 446.832 l181.2959 445.4639 l179.9282 444.7441 l178.5601 444.7441 lS187.0562 405.4316 m185.688 406.1519 l184.9678 407.52 l184.9678 408.8877 l185.688 410.2559 l187.0562 410.9038 l188.4238 410.9038 l189.792 410.2559 l190.4399 408.8877 l190.4399 407.52 l189.792 406.1519 l188.4238 405.4316 l187.0562 405.4316 lS163.8721 392.7598 m162.5039 393.48 l161.856 394.8481 l161.856 396.2158 l162.5039 397.584 l163.8721 398.3042 l165.2402 398.3042 l166.6079 397.584 l167.3281 396.2158 l167.3281 394.8481 l166.6079 393.48 l165.2402 392.7598 l163.8721 392.7598 lS166.752 393.5518 m165.3838 394.1997 l164.7358 395.5679 l164.7358 396.936 l165.3838 398.376 l166.752 399.0239 l168.1201 399.0239 l169.4878 398.376 l170.208 396.936 l170.208 395.5679 l169.4878 394.1997 l168.1201 393.5518 l166.752 393.5518 lS194.6162 402.2637 m193.248 402.9839 l192.6001 404.3521 l192.6001 405.7202 l193.248 407.0879 l194.6162 407.7358 l195.9839 407.7358 l197.3521 407.0879 l198.0718 405.7202 l198.0718 404.3521 l197.3521 402.9839 l195.9839 402.2637 l194.6162 402.2637 lS210.4561 389.6641 m209.0161 390.312 l208.3682 391.752 l208.3682 393.1201 l209.0161 394.4878 l210.4561 395.1357 l211.8242 395.1357 l213.1919 394.4878 l213.8398 393.1201 l213.8398 391.752 l213.1919 390.312 l211.8242 389.6641 l210.4561 389.6641 lS213.8398 378.3599 m212.4722 379.0078 l211.8242 380.376 l211.8242 381.7441 l212.4722 383.1118 l213.8398 383.832 l215.208 383.832 l216.5762 383.1118 l217.2959 381.7441 l217.2959 380.376 l216.5762 379.0078 l215.208 378.3599 l213.8398 378.3599 lS217.584 374.9761 m216.2158 375.624 l215.5679 376.9922 l215.5679 378.3599 l216.2158 379.728 l217.584 380.4478 l218.9521 380.4478 l220.3198 379.728 l221.04 378.3599 l221.04 376.9922 l220.3198 375.624 l218.9521 374.9761 l217.584 374.9761 lS235.1519 388.2959 m233.7842 389.0161 l233.1362 390.3838 l233.1362 391.752 l233.7842 393.1201 l235.1519 393.7681 l236.52 393.7681 l237.8882 393.1201 l238.6079 391.752 l238.6079 390.3838 l237.8882 389.0161 l236.52 388.2959 l235.1519 388.2959 lS213.7681 383.5439 m212.3999 384.1919 l211.752 385.5601 l211.752 386.9277 l212.3999 388.2959 l213.7681 389.0161 l215.1362 389.0161 l216.5039 388.2959 l217.2241 386.9277 l217.2241 385.5601 l216.5039 384.1919 l215.1362 383.5439 l213.7681 383.5439 lS195.624 392.6162 m194.2559 393.3359 l193.6079 394.7041 l193.6079 396.0718 l194.2559 397.4399 l195.624 398.1602 l196.9922 398.1602 l198.3599 397.4399 l199.0801 396.0718 l199.0801 394.7041 l198.3599 393.3359 l196.9922 392.6162 l195.624 392.6162 lS173.376 406.9438 m172.0078 407.6641 l171.2881 409.0317 l171.2881 410.3999 l172.0078 411.7681 l173.376 412.416 l174.7441 412.416 l176.1118 411.7681 l176.7598 410.3999 l176.7598 409.0317 l176.1118 407.6641 l174.7441 406.9438 l173.376 406.9438 lS176.6162 409.4639 m175.248 410.1118 l174.6001 411.48 l174.6001 412.8481 l175.248 414.2158 l176.6162 414.936 l177.9839 414.936 l179.4238 414.2158 l180.0718 412.8481 l180.0718 411.48 l179.4238 410.1118 l177.9839 409.4639 l176.6162 409.4639 lS178.8481 401.3999 m177.48 402.1201 l176.7598 403.4878 l176.7598 404.856 l177.48 406.2241 l178.8481 406.8721 l180.2158 406.8721 l181.584 406.2241 l182.2319 404.856 l182.2319 403.4878 l181.584 402.1201 l180.2158 401.3999 l178.8481 401.3999 lS146.52 397.3677 m145.1519 398.0879 l144.4321 399.4561 l144.4321 400.8237 l145.1519 402.1919 l146.52 402.9121 l147.8882 402.9121 l149.2559 402.1919 l149.9038 400.8237 l149.9038 399.4561 l149.2559 398.0879 l147.8882 397.3677 l146.52 397.3677 lS167.6162 395.4238 m166.248 396.144 l165.5278 397.5117 l165.5278 398.8799 l166.248 400.248 l167.6162 400.896 l168.9839 400.896 l170.3521 400.248 l171 398.8799 l171 397.5117 l170.3521 396.144 l168.9839 395.4238 l167.6162 395.4238 lS190.2241 392.832 m188.856 393.48 l188.1362 394.8481 l188.1362 396.2158 l188.856 397.584 l190.2241 398.3042 l191.5918 398.3042 l192.96 397.584 l193.6802 396.2158 l193.6802 394.8481 l192.96 393.48 l191.5918 392.832 l190.2241 392.832 lS189.936 410.04 m188.5679 410.688 l187.8481 412.0562 l187.8481 413.4238 l188.5679 414.792 l189.936 415.5117 l191.3042 415.5117 l192.6719 414.792 l193.3198 413.4238 l193.3198 412.0562 l192.6719 410.688 l191.3042 410.04 l189.936 410.04 lS504 468 m499.6797 468 l504 468 l503.9277 471.7441 l503.7119 475.4878 l503.3521 479.2319 l502.9199 482.9761 l502.3438 486.7197 l498.0962 486 l502.3438 486.7197 l501.624 490.3921 l500.7598 494.064 l499.752 497.7358 l498.6719 501.3359 l497.4478 504.936 l493.416 503.4238 l497.4478 504.936 l496.0801 508.3921 l494.6396 511.9199 l493.0562 515.3042 l491.3281 518.688 l489.5278 522 l485.7842 519.8398 l489.5278 522 l487.584 525.168 l485.4961 528.3359 l483.3359 531.4316 l481.104 534.4561 l478.728 537.4077 l475.416 534.6001 l478.728 537.4077 l476.208 540.2158 l473.688 542.9521 l470.9521 545.688 l468.2158 548.208 l465.4082 550.728 l462.6001 547.416 l465.4082 550.728 l462.4561 553.104 l459.4316 555.3359 l456.3359 557.4961 l453.168 559.584 l450 561.5278 l447.8398 557.7837 l450 561.5278 l446.688 563.3281 l443.3042 565.0562 l439.9199 566.6396 l436.3921 568.0801 l432.936 569.4478 l431.4238 565.416 l432.936 569.4478 l429.3359 570.6719 l425.7358 571.752 l422.064 572.7598 l418.3921 573.624 l414.7197 574.3438 l414 570.0957 l414.7197 574.3438 l410.9761 574.9199 l407.2319 575.3521 l403.4878 575.7119 l399.7441 575.9277 l396 576 l396 571.6797 l396 576 l392.1841 575.9277 l388.4399 575.7119 l384.6958 575.3521 l380.9521 574.9199 l377.208 574.3438 l377.9277 570.0957 l377.208 574.3438 l373.5361 573.624 l369.8638 572.7598 l366.1919 571.752 l362.5918 570.6719 l358.9917 569.4478 l360.5039 565.416 l358.9917 569.4478 l355.5361 568.0801 l352.0078 566.6396 l348.624 565.0562 l345.2402 563.3281 l342 561.5278 l344.1602 557.7837 l342 561.5278 l338.7598 559.584 l335.5918 557.4961 l332.4961 555.3359 l329.4722 553.104 l326.52 550.728 l329.3281 547.416 l326.52 550.728 l323.7119 548.208 l320.9761 545.688 l318.2402 542.9521 l315.7202 540.2158 l313.1997 537.4077 l316.5122 534.6001 l313.1997 537.4077 l310.8237 534.4561 l308.5918 531.4316 l306.4321 528.3359 l304.3438 525.168 l302.3999 522 l306.144 519.8398 l302.3999 522 l300.6001 518.688 l298.8721 515.3042 l297.2881 511.9199 l295.8481 508.3921 l294.48 504.936 l298.5122 503.4238 l294.48 504.936 l293.2559 501.3359 l292.1758 497.7358 l291.168 494.064 l290.3042 490.3921 l289.584 486.7197 l293.832 486 l289.584 486.7197 l289.0078 482.9761 l288.5762 479.2319 l288.2158 475.4878 l288 471.7441 l288 468 l292.3198 468 l288 468 l288 464.1841 l288.2158 460.4399 l288.5762 456.6958 l289.0078 452.9521 l289.584 449.208 l293.832 449.9277 l289.584 449.208 l290.3042 445.5361 l291.168 441.8638 l292.1758 438.1919 l293.2559 434.5918 l294.48 430.9917 l298.5122 432.5039 l294.48 430.9917 l295.8481 427.5361 l297.2881 424.0078 l298.8721 420.624 l300.6001 417.2402 l302.3999 414 l306.144 416.1602 l302.3999 414 l304.3438 410.7598 l306.4321 407.5918 l308.5918 404.4961 l310.8237 401.4722 l313.1997 398.52 l316.5122 401.3281 l313.1997 398.52 l315.7202 395.7119 l318.2402 392.9761 l320.9761 390.2402 l323.7119 387.7202 l326.52 385.1997 l329.3281 388.5122 l326.52 385.1997 l329.4722 382.8237 l332.4961 380.5918 l335.5918 378.4321 l338.7598 376.3438 l342 374.3999 l344.1602 378.144 l342 374.3999 l345.2402 372.6001 l348.624 370.8721 l352.0078 369.2881 l355.5361 367.8481 l358.9917 366.48 l360.5039 370.5122 l358.9917 366.48 l362.5918 365.2559 l366.1919 364.1758 l369.8638 363.168 l373.5361 362.3042 l377.208 361.584 l377.9277 365.832 l377.208 361.584 l380.9521 361.0078 l384.6958 360.5762 l388.4399 360.2158 l392.1841 360 l396 360 l396 364.3198 l396 360 l399.7441 360 l403.4878 360.2158 l407.2319 360.5762 l410.9761 361.0078 l414.7197 361.584 l414 365.832 l414.7197 361.584 l418.3921 362.3042 l422.064 363.168 l425.7358 364.1758 l429.3359 365.2559 l432.936 366.48 l431.4238 370.5122 l432.936 366.48 l436.3921 367.8481 l439.9199 369.2881 l443.3042 370.8721 l446.688 372.6001 l450 374.3999 l447.8398 378.144 l450 374.3999 l453.168 376.3438 l456.3359 378.4321 l459.4316 380.5918 l462.4561 382.8237 l465.4082 385.1997 l462.6001 388.5122 l465.4082 385.1997 l468.2158 387.7202 l470.9521 390.2402 l473.688 392.9761 l476.208 395.7119 l478.728 398.52 l475.416 401.3281 l478.728 398.52 l481.104 401.4722 l483.3359 404.4961 l485.4961 407.5918 l487.584 410.7598 l489.5278 414 l485.7842 416.1602 l489.5278 414 l491.3281 417.2402 l493.0562 420.624 l494.6396 424.0078 l496.0801 427.5361 l497.4478 430.9917 l493.416 432.5039 l497.4478 430.9917 l498.6719 434.5918 l499.752 438.1919 l500.7598 441.8638 l501.624 445.5361 l502.3438 449.208 l498.0962 449.9277 l502.3438 449.208 l502.9199 452.9521 l503.3521 456.6958 l503.7119 460.4399 l503.9277 464.1841 l504 468 l499.6797 468 l504 468 lS494.1357 464.5439 m494.1357 471.3838 lS483.5518 464.5439 m483.5518 471.3838 lS472.3198 464.5439 m472.3198 471.3838 lS460.5117 464.5439 m460.5117 471.3838 lS448.1997 464.5439 m448.1997 471.3838 lS435.5278 464.5439 m435.5278 471.3838 lS422.4961 464.5439 m422.4961 471.3838 lS409.248 464.5439 m409.248 471.3838 lS396 464.5439 m396 471.3838 lS0 O0 0 0 1 k0 J 0 j 1 w 4 M392.5439 468 m399.3838 468 l392.5439 468 lf402.9121 527.9038 m402.1919 528.2642 l401.832 528.9839 l401.832 529.6318 l402.1919 530.3521 l402.9121 530.7119 l403.5601 530.7119 l404.2798 530.3521 l404.6396 529.6318 l404.6396 528.9839 l404.2798 528.2642 l403.5601 527.9038 l402.9121 527.9038 l402.9121 527.9038 lf402.1919 528.9839 m402.1919 529.6318 l402.1919 528.9839 lf402.5518 528.624 m402.5518 529.9917 l402.5518 528.624 lf402.9121 528.2642 m402.9121 530.3521 l402.9121 528.2642 lf403.1997 528.2642 m403.1997 530.3521 l403.1997 528.2642 lf403.5601 528.2642 m403.5601 530.3521 l403.5601 528.2642 lf403.9199 528.624 m403.9199 529.9917 l403.9199 528.624 lf404.2798 528.9839 m404.2798 529.6318 l404.2798 528.9839 lf0 R0 0 0 1 K1 J 2 j 0.75 w 10 M398.2319 400.6079 m397.5117 400.896 l397.2241 401.6162 l397.2241 402.2637 l397.5117 402.9839 l398.2319 403.3438 l398.8799 403.3438 l399.6001 402.9839 l399.96 402.2637 l399.96 401.6162 l399.6001 400.896 l398.8799 400.6079 l398.2319 400.6079 lS393.3359 530.5679 m393.3359 537.4077 lS0 O0 0 0 1 k0 J 0 j 1 w 4 M389.9521 533.9521 m396.792 533.9521 l389.9521 533.9521 lf385.9199 528.6958 m382.4639 534.8877 l389.376 534.8877 l385.9199 528.6958 l385.9199 528.6958 lf383.832 534.168 m385.9199 530.7837 l388.0078 534.168 l383.832 534.168 lf385.9199 532.7998 m385.272 534.168 l385.9199 532.7998 l386.6396 534.168 l385.9199 532.7998 lf386.6401 534.168 mF393.1919 521.208 m393.1919 526.6797 l398.7358 526.6797 l398.7358 521.208 l393.1919 521.208 l393.1919 521.208 lf393.9121 521.856 m393.9121 526.0317 l393.9121 521.856 lf394.5601 521.856 m394.5601 526.0317 l394.5601 521.856 lf395.2798 521.856 m395.2798 526.0317 l395.2798 521.856 lf396 521.856 m396 526.0317 l396 521.856 lf396.6479 521.856 m396.6479 526.0317 l396.6479 521.856 lf397.3677 521.856 m397.3677 526.0317 l397.3677 521.856 lf398.0161 521.856 m398.0161 526.0317 l398.0161 521.856 lf0 R0 0 0 1 K1 J 2 j 0.75 w 10 M407.7358 528.6958 m407.8081 528.9121 l407.8081 529.1279 l407.7358 529.416 l407.7358 529.6318 l407.6641 529.8477 l407.5918 530.1357 l407.52 530.3521 l407.4478 530.5679 l407.3042 530.7837 l407.1602 531 l407.0161 531.2158 l406.8721 531.4316 l406.728 531.5762 l406.5117 531.792 l406.2959 531.936 l406.0801 532.1519 l405.8638 532.2959 l405.5762 532.4399 l405.3599 532.5122 l405.0718 532.6558 l404.856 532.728 l404.5679 532.8721 l404.2798 532.9438 l403.9917 532.9438 l403.7041 533.0161 l403.416 533.0161 l403.1279 533.0879 l402.8398 533.0161 l402.5518 533.0161 l402.2637 533.0161 l402.0479 532.9438 l401.7598 532.8721 l401.4722 532.7998 l401.2559 532.728 l400.9678 532.584 l400.752 532.5122 l400.4639 532.3682 l400.248 532.2236 l400.104 532.0078 l399.8877 531.8638 l399.6719 531.7197 l399.5278 531.5039 l399.3838 531.2881 l399.2402 531.0723 l399.0962 530.856 l399.0239 530.6396 l398.9521 530.4238 l398.8799 530.208 l398.8081 529.9917 l398.8081 529.7759 l398.7358 529.4878 l398.7358 529.272 l398.8081 529.0562 l398.8081 528.7681 l398.8799 528.5518 l398.9521 528.3359 l399.0239 528.1201 l399.168 527.9038 l399.2402 527.688 l399.3838 527.4717 l399.5278 527.2559 l399.7441 527.04 l399.8877 526.896 l400.104 526.6797 l400.3198 526.5361 l400.5361 526.3921 l400.752 526.248 l400.9678 526.104 l401.2559 525.96 l401.4722 525.8877 l401.7598 525.7441 l401.9761 525.6719 l402.2637 525.6001 l402.5518 525.5278 l402.8398 525.5278 l403.1279 525.4561 l403.416 525.4561 l403.6318 525.4561 l403.9199 525.5278 l404.208 525.5278 l404.4961 525.6001 l404.7842 525.6001 l405 525.7441 l405.2881 525.8159 l405.5039 525.8877 l405.792 526.0317 l406.0078 526.1758 l406.2241 526.248 l406.4399 526.4639 l406.584 526.6079 l406.7998 526.752 l406.9438 526.9678 l407.0879 527.1118 l407.2319 527.3281 l407.376 527.5439 l407.52 527.7598 l407.5918 527.9761 l407.6641 528.1919 l407.7358 528.48 l407.7358 528.6958 lS388.584 401.9038 m388.584 401.3281 l388.6563 400.8237 l388.728 400.3198 l388.8721 399.8159 l389.0879 399.3838 l389.3042 398.8799 l389.52 398.4478 lS391.9678 395.856 m392.3281 395.5679 l392.832 395.2798 l393.4082 394.9917 l393.9121 394.7041 l394.4878 394.4878 l395.1357 394.3438 l395.208 394.272 lS398.7358 393.8398 m398.9521 393.8398 l399.6001 393.9121 l400.248 393.9839 l400.896 394.0562 l401.4722 394.1997 l402.1201 394.416 l402.2637 394.4878 lS405.4316 396.144 m405.8638 396.5039 l406.2959 396.8638 l406.728 397.2959 l407.0879 397.728 l407.376 398.1602 l407.6641 398.6641 l407.8081 398.8799 lS408.6719 402.3359 m408.6719 402.6958 l408.6001 403.1997 l408.4561 403.7041 l408.312 404.208 l408.168 404.7119 l407.9521 405.144 l407.7358 405.6479 l407.6641 405.7202 lS405.2158 408.312 m405.0718 408.3838 l404.6396 408.6719 l404.1357 408.96 l403.5601 409.1758 l403.0562 409.3921 l402.48 409.6079 l401.9038 409.752 lS398.376 410.1841 m398.3042 410.1841 l397.6563 410.1118 l397.0801 410.04 l396.4316 409.9678 l395.856 409.8237 l395.2798 409.6802 l394.8481 409.5361 lS391.6802 407.8081 m391.6079 407.8081 l391.1758 407.4478 l390.8159 407.0879 l390.4561 406.6563 l390.0962 406.2241 l389.7358 405.792 l389.52 405.3599 l389.376 405.0718 lS403.3438 534.0239 m403.3438 534.6001 l403.272 535.104 l403.1997 535.6079 l403.0562 536.1118 l402.8398 536.5439 l402.624 537.0479 l402.4082 537.5518 l402.0479 537.9839 l401.7598 538.416 l401.3999 538.8477 l400.9678 539.2798 l400.5361 539.6396 l400.104 540 l399.6001 540.3599 l399.0962 540.6479 l398.52 540.936 l398.0161 541.2236 l397.4399 541.4399 l396.792 541.584 l396.2158 541.7998 l395.5679 541.8721 l394.9199 542.0161 l394.272 542.0161 l393.624 542.0879 l392.9761 542.0879 l392.3281 542.0161 l391.6802 541.9438 l391.0317 541.8721 l390.4561 541.6558 l389.8081 541.5122 l389.2319 541.2959 l388.6563 541.0801 l388.0801 540.792 l387.5039 540.5039 l387 540.144 l386.4961 539.856 l386.064 539.4238 l385.6318 539.064 l385.1997 538.6318 l384.8398 538.1997 l384.5518 537.7681 l384.2637 537.2642 l383.9761 536.832 l383.7598 536.3281 l383.6162 535.8242 l383.4722 535.3198 l383.3281 534.8159 l383.2559 534.2397 l383.2559 533.7358 l383.2559 533.2319 l383.3281 532.728 l383.4722 532.2236 l383.6162 531.7197 l383.7598 531.2158 l383.9761 530.7837 l384.1919 530.2798 l384.48 529.8477 l384.8398 529.416 l385.1279 529.0562 l385.5601 528.624 l385.9199 528.2642 l386.3521 527.9038 l386.856 527.5439 l387.2881 527.2559 l387.792 526.9678 l388.3677 526.752 l388.8721 526.5361 l389.4478 526.3198 l390.0239 526.1758 l390.6001 526.0317 l391.1758 525.8877 l391.8237 525.8159 l392.3999 525.7441 l393.0479 525.7441 l393.624 525.7441 l394.272 525.8159 l394.8481 525.8877 l395.4961 525.96 l396.0718 526.104 l396.6479 526.248 l397.2241 526.4639 l397.7998 526.6797 l398.3042 526.896 l398.8799 527.1841 l399.3838 527.4717 l399.8159 527.7598 l400.3198 528.1201 l400.752 528.48 l401.1118 528.8398 l401.4722 529.272 l401.832 529.7041 l402.1919 530.1357 l402.4082 530.5679 l402.6958 531.0723 l402.9121 531.5039 l403.0562 532.0078 l403.1997 532.5122 l403.272 533.0161 l403.3438 533.52 l403.3438 534.0239 lS180 342 m378 342 l378 144 l180 144 l180 342 lS180 342.5039 m378.5039 342.5039 l378.5039 144.5762 l180.5762 144.5762 l180.5762 342.5039 lS180 144 m189 144 l189 148.752 lS189 144 m215.3521 144 l215.3521 148.752 lS215.3521 144 m241.7759 144 l241.7759 148.752 lS241.7759 144 m268.1997 144 l268.1997 148.752 lS268.1997 144 m294.624 144 l294.624 148.752 lS294.624 144 m321.0479 144 l321.0479 148.752 lS321.0479 144 m347.4722 144 l347.4722 148.752 lS347.4722 144 m373.896 144 l373.896 148.752 lS373.896 144 m378 144 l378 144.5762 l180 144.5762 lS180 144 m180 152.9282 l184.752 152.9282 lS180 152.9282 m180 187.5601 l184.752 187.5601 lS180 187.5601 m180 222.1919 l184.752 222.1919 lS180 222.1919 m180 256.8237 l184.752 256.8237 lS180 256.8237 m180 291.4561 l184.752 291.4561 lS180 291.4561 m180 326.0161 l184.752 326.0161 lS180 326.0161 m180 342 l179.4238 342 l179.4238 144 lS2 w276.8398 152.9282 m276.8398 332.9282 lS0.75 w189 326.0161 m192.5278 326.0161 lS196.1279 326.0161 m199.7998 326.0161 lS203.3281 326.0161 m206.9282 326.0161 lS210.5278 326.0161 m214.1279 326.0161 lS217.728 326.0161 m221.3281 326.0161 lS225 326.0161 m228.6001 326.0161 lS232.2002 326.0161 m235.7998 326.0161 lS239.3999 326.0161 m243 326.0161 lS246.6001 326.0161 m250.2002 326.0161 lS253.7998 326.0161 m257.3999 326.0161 lS261 326.0161 m264.6001 326.0161 lS268.1997 326.0161 m270.7202 326.0161 lS189 319.1758 m189 332.9282 lS270.7202 319.1758 m270.7202 332.9282 lS189 152.9282 m189 323.9282 l195.9121 323.9282 l195.9121 268.5601 l202.8242 268.5601 l202.8242 242.2798 l209.7358 242.2798 l209.7358 214.5601 l216.6479 214.5601 l216.6479 218.7358 l223.5601 218.7358 l223.5601 193.8242 l230.5439 193.8242 l230.5439 191.0161 l237.4561 191.0161 l237.4561 182.7358 l244.3677 182.7358 l244.3677 170.9282 l251.2798 170.9282 l251.2798 164.0161 l258.1919 164.0161 l258.1919 162.6479 l265.104 162.6479 l265.104 160.5601 l272.0161 160.5601 l272.0161 161.9282 l279 161.9282 l279 157.8242 l285.9121 157.8242 l285.9121 155.0161 l292.8237 155.0161 l292.8237 159.1919 l299.7358 159.1919 l299.7358 155.0161 l306.6479 155.0161 l306.6479 153.6479 l313.5601 153.6479 l313.5601 154.3682 l320.4722 154.3682 l320.4722 156.4561 l327.4561 156.4561 l327.4561 155.0161 l334.3677 155.0161 l334.3677 153.6479 l341.2798 153.6479 l341.2798 152.9282 l348.1919 152.9282 l348.1919 153.6479 l355.104 153.6479 l355.104 152.9282 l362.0161 152.9282 l362.0161 153.6479 l369 153.6479 l369 152.9282 l189 152.9282 lS0 To1 0 0 1 177.5 582.5 0 Tp0 TvTP0 Tr0 O0 0 0 1 k0 J 0 j 1 w 4 M%_ 0 50 XQ/_Helvetica 12 12 -5.3555 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 1 TA%_ 0 XL0 TY0 TV36 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti0 Ta0 1 2 2 99 Th0 Tq248 Tg0 0 Tl0 Tc0 Tw(N) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 392 585 0 Tp0 TvTP0 Tr(N) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 82 565 0 Tp0 TvTP0 Tr(a\)) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 302 563 0 Tp0 TvTP0 Tr(b\)) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 135 331 0 Tp0 TvTP0 Tr(c\)) Tx 1 0 Tk(\r) TX TO0 To0 1 -1 0 144.5796 220.8921 0 Tp0 TvTP0 Tr(Fraction) Tx 1 0 Tk(\r) TX TOu0 To1 0 0 1 272 116 0 Tp0 TvTP0 Tr(V) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 280 114 0 Tp0 TvTP0 Tr/_Helvetica 10 10 -4.4629 Tf(w) Tx 1 0 Tk(\r) TX TOU0 To1 0 0 1 150 323 0 Tp0 TvTP0 Tr/_Helvetica 12 12 -5.3555 Tf(0.25) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 150 289 0 Tp0 TvTP0 Tr(0.20) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 151 254 0 Tp0 TvTP0 Tr(0.15) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 151 220 0 Tp0 TvTP0 Tr(0.10) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 151 184 0 Tp0 TvTP0 Tr(0.05) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 152 147 0 Tp0 TvTP0 Tr(0.00) Tx 1 0 Tk(\r) TX TO0 To1 0 0 1 184 129 0 Tp0 TvTP0 Tr(0              4              8             12) Tx 1 0 Tk(\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF