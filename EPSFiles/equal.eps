%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: equal.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 2/7/08
%%BoundingBox: 0 0 568 603
%%HiResBoundingBox: 0 0 567.9571 602.0967
%%CropBox: 0 0 567.9571 602.0967
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 124 128 8%%BeginData: 20326 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDB8FF27FF7DA8FD77FFA852527DA8FD77FFA852A1F8FD79FFA8FF%A8FDFCFFFD6BFFA8FFA8A87DA87D7D52FD057D767D7DA87DA8A8FFA8FD62%FFA8A8A87D7DA8A8A87DA87D7D7DA87DA8FD057DA87DA87DFD04A8FD5AFF%A8A87DA87DA87DA8A87DFD04A87DA87DA87DA87DA87DA8A8A87DA8A87DFD%04A87DA87DA8A8FD53FFA87DFD04A8FFA8FFA8FFA8A8A8FFFD06A87DFFFD%0BA8FFA8FFA8FFA8A87DFD4FFFA87D7D52FFFD07A8FF7DA8A8A87DFD05A8%7DFD05A8A1A87DFD04A8FF7DFFFD04A8FFA8527D7DFD4AFFA8FD067DFFA8%FFA8A8FFFFA8FFA8A8A8FFFD04A87DA87DFD08A8FFA8FFA8FFA8A8A8FFFF%FF7DA87D7D7DA8A8FD45FFA87D7D7DA1FD057DFFA8FFA8A8A8FFA8FFFD08%A87D7DFD0BA8FFFD05A8FFFD097DFD42FFA87D7DA87DA87DA87DA87D7D7D%FFA8A8A8FFA8FFFD07A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8CBA8%FF7D7D7DA87D7D7DA87DA87D7DA8FD3EFF527D7DA87D7D7DA8FD067D52FD%04A8FFFD06A87DFFA8A87DFD04A8FF7DA8A8FFA8A8A8FFA8FFA8A87DA8FD%057DA87D7D7DA87D7D7DFD3BFFA87DA87DA87D7DA8A87DA87DA8A8A87DA8%7D7D7DFFA8A8FFFFA8FFA8CAA8A8A8FFA8FFFD05A8FFA8FFFFA8A8A87DA8%A8A87DA8A8A87DA8A1A8A87DA8A87DA87DA8FD37FFA87D7DA8A8A852A8A8%A87DA87DA87D7D7DA87D7D7DA87D7DA1A87DFFA8A8A8FFA8FFA8A8FFFFA8%FFFD04A87DA87D7D7DA87DA1A8A87D7D7DA87DFD05A852A8A8A87D7DA8FD%34FF7D7DA1FD05A87DA8A8A87DFF7D7D7DA8A17D7DA87DA8A8A87D7D7DA8%7DFD05A87DFD05A87DA17DA87DA87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA87DA8A8A87D7DA8FD32FF7D7DA8A87DA27DA8A8A8527DA8A87DA8A8A8%7DA17DA87DA17DA87D7D7DA87DA87D7D52A8FD077DA87DA87D7DA1A87DA8%7DA87DA17DA87DA87DA87D7D7DA87DA8A87D7DA87D7D7DFD30FF7DFD05A8%7DA8A8A87DCAA8A87DFD09A87DA87DA8A8A87DA87DA87DA8A8A87DFD05A8%7D7DFD04A87DA87DFD09A87DA8A8A87DA8A8A87DFD05A87DFD2DFFA852FF%FD06A87DA87DA87DA8A87D7DA87DA87DA8A87D7DA8A8A87DA87D7D7DA87D%7D7DA87D7D7DA87D7D7DA87D7D7DA87DA87DA87DA87DA87DA87DA87D7DA2%A8A8A87DA8A8A87DFD05A852A8FD2AFFA87DA87DFFA1FD05A87DA8A8FFFD%06A87DA87DA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA87DA8%7DA8A8A87DA8A8A87DA87DA87DFD06A8FFA8A87DA8A8FFA8A8A8FF7DA87D%A8FD28FFA27DA8A8A87DFD05A87DA87DA87DFD05A87DA87DA87DA87D7D7D%A87DA87DA8A8A87DA8A1A87DA87DA87DA8A8A87DA87DA87DA17D7D7DA87D%A87DA87DFD04A87D7DA8A8A87DFD05A87DA8A8A87DA8FD26FFA87DFFFD04%A87DA8A8A87DFFA8A87DA8A8FFA8A87DFFA8A87DFD04A87D7DA87DA87DA8%7DA87DA8A8A87DA87DA87D7D7DA87DA87DA87D7DFD04A8A1A8A8A87DFD09%A87DCAA8A87DFD04A8FF7DA8FD24FFA2A8A87DFFA8A8A8FF7D7D7DFFA8A8%7DFD05A87DA87DA87DFD05A87DA8A8A87DA8A8A87DA8A8FD047DA8A1A87D%A87DA87DA8A8A87DA87DA8A8A87DA8A8A87DFD09A87D7DA1FFA8A8A8FF7D%A87DA8FD22FFA87DA8A8FF7DFD04A8FFA8A87DFD07A87DFD09A87DA87DFD%0BA8A1FFA8A87DFD07A87DA87DFD09A8A2FD07A87DA8A8FFA1FFA8A87DFF%A8A87DA8FD20FF7D7DFFA8A87DA87DA8A8A87DA8A8A87D7D7DA8A8A87DFD%05A87DA8A8A87DA8A8A87DA87DA8A1A87DA87DA87DFD05A87DA8A8A87DA8%7DA87DA87DA87DA87DFD05A87DA8A8A87D7DFD04A87DFD05A87DA8A8FF52%A8FD1EFFA8A8FFA8FFA8A8A8FFA8A87DFFFD08A87DFD05A87DCAFD0EA87D%A8A8A87DA8A8A87DFD0FA87DFFFD04A8A1A8A8FFA8A8A8FFA8A8A1FD08A8%FF7DA8FD1CFFA87DA8A8FF7DA8A8A87DA8A1FD05A87DFD07A87DA87DFD05%A87DA8A8A87DA87DA8A8A87DFD09A87DA8A8A87DFD05A87DA87DA8A87D7D%A87DA87DA8A8A8A1A87DFD05A8A2FD06A8FFA8A87DFD1CFF7DFFA8A8A2FD%04A8FFFD06A87DA8A8FFA8A87DFFA8A87DA8A8A87DA87DA87DA8A8A87DA8%A8A87DFD08A8CAA8A87DA8A8A87DA8A8A87DA87DA87DFD07A87DA8A8FFA8%A87DCAFD05A8FFFD07A8FF7DFD1AFF7DA87DA8A87D7DFD09A87DA8A8A87D%A87DFD05A87DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DA87D7D7DA87D%A87DA17DA87D7D7DA8A8A87DFD05A87DFD05A87DFD05A87DA8A8FFA87DA8%CAA8A87DA8A8A87DA87DFD18FF7DA8A8FFA8A8A8FFFD05A8FFFD0EA87DFF%FD07A8FFFD08A8A1A87DA87DFD06A8FFFD07A8FF7DFD05A87DA8A8CAFD0B%A8FFA8A8A1A8A8FFA8A8A8FFA87DA8FD16FF7DFD05A87DA87DA8A8A87DA8%7DFD0DA87DFD05A87DFD05A87DFD06A8FFA8A87DFD05A87DFD05A87DFD05%A87DFD05A87DFD09A8A2A8A8A87DA87DA8A8A87DA8A8A8A1A8A87DA8FD14%FFFD05A8FF7DA8A8FFA8A87DFFA8A87D7D7DA8A8FFA8A8A8FFFD13A8CA7D%A8A8FFA8A87DFFFD0AA87DFD0FA87DFD05A87DA87DA8A8CA7DA8A8FFA8A8%7DFFFD04A8FD14FF7DA8FF7DA87DA8A8A87DA87DA8A1A8A8A87DA87DA87D%A87DA8A1A8A8A87DFD05A87DA87DFD05A8A1A8A8A87DA8A8A87DFD0BA87D%FD05A87DA8A8A8A7A87DFD05A87DA87DA87DA87DFD07A8A1A8A8A87DA8A8%FF7DA8FD12FFA87DFFA8FFFD05A8FFA8A8A8FFA8FF7DFD04A8FFA8A87DA8%A8A87DFD04A8FFA8FFA8A8A8FF7DA8A8A87DFD04A8FFA8A8A8FFFD04A87D%FD05A87DFFFD0AA87DA87DFD06A8FFA8A8A8FFA8CAA8A8A8FFFD05A8FFA8%A87DFD12FF52FD06A8FFA8A87DFD11A87DA87DA87DA87DA87DA87DA87DFD%05A87DA8A8A87DA87DA87DA87DA87DA8A8A87DFD05A87DA87D7DA8A87DA8%A8A87DFD14A8FFA8A8A8FFA87D7DFD10FF7DA8A1A8A8FFFD1BA8CAA8A87D%FFFD04A87DA87DA8A8A87DFD05A87DA87DA8A8A87DA87DA87DA87DA8A8FF%A8A87DFD08A8FFA8FFFD05A8FFFD07A8FFFD05A8FFFD05A8FD0EFFA87DA8%FFA8A87DFD05A87DFD05A87DFD05A87DFD05A87DFD05A87DA87DA8A8A87D%FD0BA87DFD07A87DFD05A87DFD05A87DFD05A87DFD05A87DA8A8A87DA87D%FD05A87DFD04A87D7DA8A8FFA17DFD0EFFA8A8FFFD06A87DFD04A8FFA8A8%7DFFA8FFA8FFA8A8A8CAA8CAFD09A8FFA8FFFD05A8FFA8CA7DFFFD05A8FF%A8FFA8FFFD05A8FF7DA8A8FFFD05A8CAA8CAA8A8A8FFFD07A8FFA8A8A1FF%A8FFFD04A87DFD06A8FFA8A8FD0DFF7DA8A8FFA8A87DFD04A87D7DA87DFF%FD0EA87DFD0BA87DFD0BA87DFD07A87DA8A8A87DA87DFD05A87DFD08A8FF%FD0CA87DA87DFD05A87DA8A8FFA8A87DFD0CFF7DFD06A8FFFD05A8FFA8A8%7DA87DA8A8FFA8A8A8FFFD07A8FFA8FFFD09A8FFA8FFFD09A8FFA8CAA8FF%7DA8A8FFFD07A8CBA8A87DFFFD05A8FFA8A8A8CAFD04A87DA87DA8A8CAA8%FF7DFD04A8FFFD07A8FD0AFFA87D7DA8A8A87DFD0BA87DA8A8A87DA87D7D%7DA8A8A87DFD13A87DA87DA8A8A87DFD09A87DA8A8A87DA87DA8A8A87DFD%07A87DA87DA87D7D7DA8A8A87DFD07A87DFFA8A8A1A87DA8A8A87D7DFD0A%FFA8A8FFA8A87DA8A8FFFD05A8FFA8FFFD05A8CAFD08A8A1A8A8A8A1A87D%A8A2FFFD0DA8FFA8A8A8FFA8A8A8FF7DA8A8FFA8FFA8A8A8FFFD04A87DFD%05A87DA8A8FFFD0BA8FFA8FFFD05A8FFFD05A8FF7DFD0AFF7DA8A2FD0FA8%7DFD05A87DFD05A87DFD05A87DA8A8A87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87DA8A2A87DFD09A87DFD0AA8CA7D%FD04A8FF7DA8A8A8A1FD07A87DFD08FFA8A8FFFFA8A87DA8A8FFA8A87DFD%04A8FF7DFFFD04A87DFD04A8FFFD0EA87DFD04A8FFA8A87DFD14A8FFA8A8%A8FFA8A8A8FFA8FFA8A8A8FFFD0AA87DFFFD04A87DFFA8FFA8A87DA8A8FF%A8A1A8FD07FFA87DA87DA87DA8A8A87DA87DFD05A87DFD07A87DFD05A87D%FD05A87DFD0DA87DFD05A87DA8A8A87DA8A8A87DFD04A8FF7DA8A8A87DA8%A8A87DA8A8A87DA87DFD0BA87DFD07A87DFD07A87DA87DA8FD07FF7DFFA8%A87DA87DA8A8FFFD09A8FFA8FFA8A8A8FFA8A8A8FFA1A8A8FFA8FFA8A8A8%FFA8FFA8FFA1FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFFD09A8FFA8A87DFFA8%FFA8FFA8A8A8FFA8FFFD09A8FFA8FFA8FFFD05A8FFA8FFA8FFA8A87DA87D%FFA8FF7DFD06FFA8A1FD05A8FFA8A87DA87DFD04A8FF7DFD08A8FFFD05A8%FFFD04A87DFFFD1AA87DFD0DA8A2FD0DA87DFD08A8CAA8A87DA87DFD04A8%FFA8A8A87DA8FD05FFA8A8FFA8FFFD05A8FF7DA8A8A87DA87DA87DFD06A8%FFFD05A8FFA8A8A8FFFD0BA8FFA8A8A1FD04A8FFA8A8A8FFFD07A8FFA8FF%A8FFA8FFA8FFFD07A8FFA8A8A8FFA8A8A8FF7DA8A8FFA8A8A1A8A8A87DFD%04A8FFFD07A8FFA8A8FD05FF7DFD0BA87DFD05A87DA8A8A87DA87DA87DA8%7DA87D7DFD06A87DFD05A87DFD07A87DFD0DA87DFD0BA87DA87DA87DA87D%CA7D7D7DA87DA87DA87DA87DA8A8A87DA8A8A87DA87DA87DCAA8A87DA8A8%A87DA87DFD04FFA8A8A8FFA8CBFD05A8FFA8FFA8FFFD05A8FFA8FFA2FFA8%A8A8FFA8A8A8CAA8A87DA87DA8A8A8A1A8A8A8A1FD05A87DFD07A87DFD05%A87DFD07A87DFD0BA87DFFFD05A8FFFD09A8FFA8FFA8A8A8FFFD04A87DFF%A8FFA8A8FD04FFA87DFD17A87DFD04A8FF7DA8A8CBFD0AA87DA8A8A87DA8%A8A87DFD0DA87DFD07A87DA8A8CAFD15A8FFFD09A8FFFD06A87DA87DFD04%FFA8A8A8FFA8A87DFD06A8FFA8FFA8FFFD09A8FFFD07A8FFA8FFFD05A8FF%A8A8A1FFA8CAA8FFA8A8A8FFFD05A8CAA8FFFD05A8FFA8FFFD07A8FFA8A8%A8FFA8A8A8FFA8A8A8FFFD07A8FFA8A87DFFA8A8A8FFFD06A87DA8A8FFA8%A8A8FFFFA87DA8A87DA87DFD04A8FFFD04A87DA87DFD0DA87DFD0DA87DFD%07A87DFD0DA87DFD07A87DFD0DA8A1FF7DA8A8A87DA8A8A87DA8A1FD05A8%A1FD04A8CAFD04A87DA87DA8FFFFFF7DFFA8FFFFA87DFD08A8FFA8A8A1FF%A8FFA8FFA8A8A8FFA8CAA1A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFFD05A8FFA8FFA8A8A8FFA8FFA8A8%A8FFFD07A8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8CAFD05A8FF%A8FF7DFFFFA87D7DA87DA87DFD06A8FFFD0FA8FFA8A87DFD0DA87DFD15A8%7DA8A8A8A1A8A8A8A1FD04A8FF7DFD15A87DFD08A8FFA8A87DA87DA87D7D%A8FFA8A8FFFD06A87DA8A87D7DA87DFD0AA8FFFFA8A8FFFD07A8FFA8FFFD%09A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8FFA8A8A8CFA8FFA8A87DFFA8A8A8FFA8A87DA8A8A87DA87D%A87DA87DFD04A8FF7DFFFF7DA87DA8A8A87DA8A8FFA8A87DFD05A87DA87D%A87DA87D7D7DA87DA87DA87DA87DA87DA87DA17DFD05A87DFD07A87DA87D%FD0BA87DFD0DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87D%FD05A87DFD04A8FF7DA87DFD04A8FFA8A8FFA8FFFD06A87DFD08A8FFA8FF%A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8CA7DFFFD0CA8A1FD07A87DFD07A87D%FD0CA8FFA8A8A8CAFD09A8FFA8FFA8A8A8CAA8A8A8FFA8FFFD05A8FFA8A8%A8FFA8FFA8A8FF7DFD08A8FFFD08A87DCAFD12A87DFD07A87DFD07A87DFF%FD0BA8CAFD08A87DA87DFFFD0AA87DA8A8A87DA8A8A87DFFA8FFA8FF7DFD%05A87DFFFD04A87DFD05A87DFFA8FFFFA8FFA8A8A8CAFD07A8FF7DA8A8FF%FD04A87DFFA8FFA8FF7DFD08A8FFA8A8A8FFA8A8A8FFA8A8A8FF7DA8A8FF%FD05A8FFA8FFFD07A8FFFD09A8FFA8FFFD07A8FFA8A8A8FFFD0EA87DA8A8%FFFD05A8FFA8A8FF7DA8A8A87DA87DA87DA8A8A87DFFFD0AA87DFD0AA8FF%A8FF7DFD07A87DFD15A87DFD07A87DFD08A8FFA8FFA8A87DFD0DA87DFFA8%FFA8FFFD06A87DA87DA87DA87DFFA8A8FFA8FFA8A8A8FFA8FFFD05A8FF7D%FD04A8FFFD05A8FFA8FFFD09A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FF%A8CAA8CAA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8A8%A8FFA8A8A8FFA8CAA8FFA8A8A8FFA8FFFD09A8FFA8FFA8FFA8FFA8FFFFA8%FF7DFD05A87DFD05A87DFFFD0AA87DFFA8FFA8FFA8A8A8FFFD0CA87DFD15%A87DFD07A87DFD0CA8FF7DFFA8FFFD0AA87DA87DFD04A8A1FD08A87DA87D%FFA8A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8FFA8A8A8CAA8FFA8CAA8A8A8CAA8A8A8FFA8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFFD05%A8FFA8FFA8FF7DFFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8FF7DA87DA87DA87DA87DA8FD057DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87D%A87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA8A17D7DA27DA87DA87D%A87D7DA8A87DA8A87D7DA87D7D7DA87DA87DA87DA87D7DA1A87DA87D7D7D%A87DA87DFFA8A8FFA8FFA8A8A8FFA8CAA8A8A8FFA8A87DFD04A8FFA8A8A8%FFA8A8A8FFA8A8A8FFFD07A8FFFD0AA87DCAA8A8A8FFA8A8A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8CAA8FFA8A8A8CAFD07A8FFA8FF7DA8A8CA%A8FFFD08A87DFFA8FFA8FFA8FFA8FFA8A8FF7DA87DA8A8A87DFD05A87DFD%0BA87DFD0DA87DFD07A87DFD1DA87DFD0DA87DFD0DA87DA87DFD07A8A1FD%07A87DFFFD04A8FFFD05A8FFA8A8FFFFA8FFA8FFFD09A8FFA8FFA1FD04A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8CAA8FFA8A8A8FFFD07A8FFFD07A8FFFD%07A8FFA8FF7DFFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8CAA8FFA8A8FFA8A8%FFA8FFA1FFA8A8A8FFA8FFA8FFA8A8FF7DFD05A87DA87DA8A8A87DFD08A8%FFA8FF7DFFFD0AA87DA8A1FD07A87DFD15A87DFD07A87DFD0DA87DFD0AA8%FFA8A87DA87DFD04A87DFD04A87DA8A1A87DA87DFFA8A8FFA8FFA8A8A8FF%A8FFFD05A8FF7DA8A8FFA8FFA8A87DFFA8FFA8FF7DFFA8CAFD05A8FFA8FF%A8FFA8A8A8FFA8FFA8FF7DA8A8FFA8CAA8CAA8FFA8FFA8FFA8A8A8FFA8FF%A8FFFD07A8FFA8FFFD07A8FFA8A8A8FFA8A8A8FFFD09A8FFA8FFFFFFA8A8%A8FFA8FFA8A8FF7DFD07A87DA8A8A87DFFA8FFA8FF7DFD08A8FFA8FFA87D%FD05A8FF7DFD07A87DFD07A87DFD0DA87DFD07A87DCAFD0AA87DFF7DA8A8%FFA8FFA8A87DA8A8FF7DA87DFFFD04A87DA87DA8A8A87DA8A8A87DA8A8FF%A8A8FFFD05A8FFA8FF7DFD0AA8FFA8A8A8FFA8CAA8FFFD08A87DFD15A87D%CAFD21A8CFFD09A8FFFD07A8FFA8A8A8FFA8FFA8A8FF7DA87DA8A8A87DFD%04A8FFFD04A87DA87DCBA8A87DA87DA17DA87DA87DA87DA87DA87DA87D7D%A2A87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA8%7DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA8%7DA8A8A87DFD04A8FF7DFFA8A87DA87DA87DA8A8A87DFFA8A8FFA8FFA8A8%A8FF7DA8A8A17DA87DA8A1FD04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFFD05A8FFA8A8A8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8CAA8FFA8A8A8FFA8%A87DA87DA87DFD05A87DA8A8FFA8A8A8FFA8FFA8FFFFA8A87DA87D7D7DA8%7DA8A8A87DA8A8FFA8A87DFD07A87DFD05A8A1A8A8FFFD0AA87DFD07A87D%FD1BA87DFD04A8FFA8A87DFD0EA8FFA8FFFD06A87D7D7DA87DA87D7DA8FF%FF7DA8A8FFFFFD0CA8FFA1FFA8A8A8FFA8A8A8FFA8A8A1FD04A8FFA8A87D%FFFD07A8CAA8A8A8FFA8A8A8FFFD04A87DFD16A8FFFD07A8FFA8A8A8FFA8%FFA8A8A8FFFD05A8FF7DFD04A8FFA8A8A8CAA8FF7DFFFFFD04A8A2A87DFD%09A87DA87DFD0DA87DFD0DA87DFD07A87DFD0DA87DFD07A87DFD08A8FFFD%04A87DA87DA8A8FF7DA8A8A87DA87DFD07A87DA8A8FFA8A87DA87DA8A8A8%FFFFFFA2CBA8FFFD0BA8FFA8A8A8FFA8A8A8FFA8A8A8FFFD07A8FFA8FFA8%A8A8FFA8FFA8A8A1FFA8FFA8FFFD05A8FFA8FFA8FFA8CAFD05A8FFA8FFA8%FFA8A8A8CAA8FFA8A8A8FFA8A8A8FFA8A8A8FFFD07A8FFA8FF7DFFA8FFFD%07A8FFA8FFA8FFA8A8A8FFFFFFA8A1A87DFD04A8FFFD0DA8FFA8A87DA8A8%FFA8A87DFD15A87DFD0DA87DFD07A87DFFFD12A87DFD13A87DA8A8A87DFD%04FFA8A8A8FFA8FFFD06A87DFFA8A8A8FFA8A8A8FFA8A87DFD04A8FFA8A8%7DFFFD04A87DA8A1A87DA8A8A87DFD05A87DFD05A87DA87DA8A8A8A1A87D%FD07A87DFD05A8A2A8A1FFA8FFA8A87DA8A8FFA8FFFD09A8FFA8FFFD09A8%FFA8FFA87DFD05FF7DFD0BA87DFD07A87DA8A8A87DA8A1A87DA87D7D7DA8%A1A8A8A87DFD05A87DFD05A87DA87DFD0DA87DA87DA8A8A87DFD05A87DA8%7DA87DA87DA87D7D7DA87DA87DA87DA8A8A8A1FD05A87DA87DA8A8FFFD06%A87DA87DFD05FFA8A8FFA8FFFD05A8FFA8A8A8FFA8A87DA87DFD08A8FFA8%A8A8FFA8CAA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8%FFA8FFFD05A8FFA8FFA8FFA8FFA8FFA8CAFD05A8FFA8A8A8FFA8A8A8FFFD%04A8A1A87DFD04A8FFFD09A8FFA8FFA1A8FD05FFFD04A87DA8A8FFA8A87D%A87DA87DA8A8A87DFD05A87DFD07A87DFFA8A8A8FF7DA87DFD17A87DA87D%FD0DA87DFD10A8FFA8A87DA8A8A87DA87DA87DFD0AA8FD06FF7DFFA8FFA8%A87DA87DFFA8A8A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD07A8FFA8%FF7DFFA8A8A8FFA8A8A8FFFD12A87DCAA8FFA8FFFD11A8FFA8FFFD05A8FF%FD04A87DA87DA8A8FFA8A87DFD07FFA87DA87DA87DA8A8A87DA87DA8A8FF%A8A87DFD0DA87DFD05A87DFD0DA87DFD05A87DA8A8A87DA8A8A87DA87DA8%A8A87DFD07A87DFD05A87DFD06A8A2FD09A8FFA8A87DFD07A87DA87DA8FD%07FFA8A8A8FFA8A8A1A8A8FFA8FFFD05A8FFA8A8A8FFA8FF7DA8A8FFFD0D%A8FFA8A87DFFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF%A8A8A8FFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8FFFD05A8FFA8FFA8FFFD05%A8FFA8FFA8A87DFFA8FFA87DA8FD08FF7DFD14A8FFA8A87DFFFD04A87DFD%05A87DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DA87DA8A8A87DA8A1A8%7DA8A2A87DA87DFD0DA87DFFA8A8A8FF7DFD05A87DFD11A87DFD09FFA8A8%FFA8A87DA8A8FFA8FFFD05A8FFA1FD08A8FFFD04A87DA87DA87DA87DA87D%A87DA87DFD0EA8CAA8A8A8FF7DA8A8FFFD04A87DA87DA8A8A87DFD05A8A1%A8A8CAA8FFFD09A8FFFD05A8FFA8FFA8A8A8FFA8FF7DA8FD09FFA87DFD04%A87DA8A8A87DFF7DFD05A87DFD05A87D7D7DA87DA87DA8A8A87DFD0FA87D%A87DA8A8A87DFD0DA87DFD04A8CB7DFD07A87DA87DA87D7D7DFD05A87DFD%09A87DA8A8FFA8A8A87DA8FD0AFF7DFFA8CAA8A8A8FFA8FFA8A87DFFFD04%A87DA8A1A8A8A87DFFFD05A8FFA8FFA8FFFD05A8FFA8A8A8FFA8FFFD05A8%FFA8A8A8FFA8FFA8FF7DA8A8FFFD07A8FFA8A87DFFFD05A8FFFD04A87DFF%FD04A87DFD04A8FF7DA8A8FFA8FFA8A8A8FFFFA8A8FD0BFFA87DFD08A8FF%A8A87DA87DFD19A87DFF7DFD05A87DA8A8A87DA87DFD0AA8CAA8A87DFD05%A87DFD15A87DA87DA8A8FFA8A87DFD05A87DFD0DFFA8A8FFA8A87DA8A8A8%7DA87DA8A8FFA8A87DA8A8FFA8FFFD06A87DFD08A8FFA8CBFD05A8FFA8A8%7DFD06A8FFA8FFA8A87DFD04A8FF7DA8A8CBFD13A8FFA8A87DA8A8FFA8A8%7DA87DFD06A8FFA8A8FD0DFFA87D7DA8A8A87DA87DA8A8A87DFD05A87DFD%05A87DFD05A87DFD05A87DA87DA8A8A87DFD0BA87DFD07A87DFD05A87DA8%7DA8A8A87DFD05A87DFD05A87DA8A8A87DA87DFD05A87DFFA8A87DA17DA8%A8A87D7DA8FD0EFF7DFFA8A87DA8A8FFFD05A8FFFD0BA8FFFD07A8FFA8A8%A8FFFD04A87DFFFD04A87DFD05A87DA87DA8A8A87DA87DFD06A8FFA8CFFD%05A8FFA8A8A8FFA8A87DFD04A8FFFD05A8FFA8FFA8A8A8FFA8A87DFD04A8%FD0FFFCB52A8A8FFFD07A8A1A8FFA8A87DFD0BA87DA8A8A87DA87DA17DA8%A8A87DA87D7D7DA87DFD05A87DA8A8A87DA87DA8A8A87DA87DA1A8A87DA8%7D7D7DA87DFD12A8FFFD06A87DA8A8FFA8A87DFD11FFA8A8FFA8FFFD05A8%FFFD05A8FFA1FD04A8FFA1FD05A87DFD05A87DFD05A8A1FD08A8FFA8A8A8%FFFD04A87DFFFD04A87DCAFD0AA87DFD06A8FFFD05A8FFFD0DA8FF7DA8FD%11FFA87DA8FFA8A87DA8A8A87DA87DFD05A87DA8A8A87DA87DA8A1A8A8A8%7DFD05A87DFD04A87D7DA87DA8A8A87DA8A8A87DFD05A8A1FD05A87DFD05%A87DFD05A87DFD05A87DA87DA8A8A87DFD05A87DA87DA8A8A87DA8A8FF7D%7DFD13FFFD05A8FFA8A8A8FFA8A87DFFA8FFA87D7DFD06A8FFFD07A8FFA8%A8A8CAFD07A8FFA8A8A1A8A8A87DA8A8A87DFD04A8FFA8A87DFD08A8FFA8%A8A8CBFD08A87DA1A8FFA8A87DCBA8FFA8A8A8FFFD04A8FD15FF7DFD07A8%7DA8A8A87DA87DFD0DA87DFD05A87DFD05A87DA8A8A87D7D7DFD06A8FFA8%A87DA8A1A8A8A87DFD05A87DFD05A87DFD0DA87DA87DA8A8A8A1A8A1FD04%A87DA8FD16FF7DA8A8FFA8A8A8FFA8A87DA8A8FFA8A87DFD05A8A1FD05A8%7DFD07A8A1FD0DA8A1FFFD05A8FFFD07A8FFFD06A87DFD08A8FFA8A8A2A8%A8FFA8A87DA8A8FF7DA8A8FFA8A87DFD17FFA87DFF7DA8A8A87D7DA8FFA2%7DFD04A87DFD05A87DFD09A87DA87DA87DA87DA87DA87DA87DA87DA87D7D%7DA87DA8FD057DA87DA8A8A87DA8A8A87DA87DFD05A87DA8A8A8A1A87DFD%04A87DA8FFA87D7DFD05A87DFD19FFA87DFFA8A87DFD04A8FFFD09A8FFA8%A8A8FFA8CAFD04A87DA87DA87DA8A87D7DFFA8A8A1A8A8A87DA87DA87DFD%07A87DA8A8A87DA87DA87DFD04A8CAA8CAFD0DA8FFA8CAA8A87DA8A8FF7D%FD1BFFA87DA87DFF7DA2A8FFA8A87DFD0DA87DA87DA87DA8A8A87DFD09A8%7DA8A1A87DA8A8A87DA87DFD09A87DA8A8A87DA87DA87DA8A1FD05A87DFD%05A87DA8A8FFA87DA8FF7DA87DA8FD1CFF7DA8FF7DFFA8A87DFFA8A87DFD%09A87D7D7DA8A8A87DFD09A87DFD09A87DFD09A87DFD09A87DA8A8A87DA1%7DA8A8FFA8A8A8FFA8A87DFFFD07A8FF7DA8FD1DFFA87D7DA8A8A87DFD05%A87DA8A8A87D7D7DA87DA87DFD05A87DA8A8A87DA87DA8A8A8A1A87DA87D%A87DA87DFD05A87DA87DA87DA8A8A87DA87DA87DA87DFD05A87DA8A8A87D%7DA8A87DA87DA87DA8A8A87DA8A8A87DA8FD20FFA1A8A8A8FF7DA8A8FFFD%04A87DFD07A87DFFFD08A87DA8A8A87DA8A8CAFD04A87DA87DA8A8A87DFD%09A87DFD09A87DFFFD06A87DFFA8A8A8FFA8A87DFFFD04A8FD21FFA87DA8%FFFD05A8FF7D7D7DA8A8A87DFD05A87DA8A8A87DFD05A87DA8A8A87DA87D%A87DA2A8A87DA8A8A87D7D7DA8A8A87DA8A8A87DFD05A87DA8A8A87DA8A1%A8A8A87DA8A8A87DA8A8A87DA8A8A87DFF7D7DFD24FF7D7DFFA8A87DA87D%FD06A8FF7DA8A8FFA8A87DA8A8A87DA8A8A87DA8A8A87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87D7D7DA8A8A1FD04A87DA8A8A87DFD05A8A1FFA8%A87DA8A8A87DCA7DA8A8FF7DA8FD25FFA87D7DA8A8A852A8A8A87DA87DA8%7DA87DA87DA8A8A87DA8A8A87DA87DA87D7D7DA87D7D7DA87DA8A1A87DA8%A8A87D7DA8A87D7D7DA8FD057DA87DA87DA87DFD05A87DA87DA87DA8A1A8%A87D7DFFA8A87DA8FD28FF7DA8A87DFFA8A8A8FFFD0CA87DA87DA87DA8A8%A87DA8A8A87DA8A8A87DA87DA87DA8A8A87DA8A8A87DA8A8A87DA8A2A87D%A87DA87DFD09A87DA8A8FFFD04A87DFF7DA8FD2AFF7D7DFD05A87DA8A8A8%7DA8A8A87DA87D7D7DA8A1A87DA87DA87DA87DA8A7A87DA87DA8A1A87DA8%A8A87DA8A8A87DA8A8A87DA87DA87DA8A8A87DA17DA27DA87DA8A8A87DA8%A8A87DA87DA8A8A852A8FD2CFFA87DA8A8A87DFD05A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA87DA87DA8A8A87DA87DA87DA8A87D7DA8A8A2A8A8%7D7DA8A87DFD08A8A17DA8A8A87DFD05A87DA8A8A87DA8FD2EFFA87DA87D%A87D7DFD04A87D7D7DA87DA8A8A87D7D7DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87D7D7DA87D7D7DA87DA17DA87D7D7DA87D7D%7DA87DA87D7D7DA87DA87DFD32FF7DFD07A87DFD09A8A1A8A8A87DA8A8A8%7DA87D7D7DA87D7DA8A87DA87DA87DA87DA87D7D7DFD05A87DA8A8A87DA8%A8A87DA8A8A87DFF7DFD05A87DFD34FF7D7DA8A87DA876A8A8A87DA87DA8%7D7D7DA87D7D7DA87D7D7DA87DFD05A87DFFA87DA8A87DFD05A87DA87D7D%7DA87D7D7DA87D7D7DA87DA87DA8A87D52A8A8A87D7DA8FD36FFA87D7DA8%7DA87D7DA8A87D7D7DA87DA87DA87D7D7DFD04A8FFA8FFA1FFFFA8A8A87D%FFA8FFFFA8A8FFA8FFFD04A87D7DA8A87DA8A8A87DA87DA87DA8A87D7DA8%7DA8FD3AFFA8527DA8A87D7D7DA87D7D7DA87D7D52FD04A8FFFD05A8FF7D%A8A1FFA8A8FFFD04A8FFFD05A8FFA8A8A8FD047DA87D7D7DA87D7D7DA8A8%7D7DA8FD3DFFA17D7DA87DA87DA8A8A87DA17DFFA8FFA8FFA8FFA8FFCAA8%A8FFA8A8A8FF7DFFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8A87DA87DA8A8A8%7DA87DA87D7DA8FD40FFA8A8FD077DA87DA8A8FFA8A8A8FFA8FFA8FFFD06%A87DFD0CA8FFA8A8A8FFA8A87DA8FD077DA8FD45FFA87D7DA87D7D77FFFF%A8A8FFA8A8A8FFA8A8A8FFA8A87DA8A8A87DA8A8A87DFD04A8FFA8FFA8FF%A8FFA8FFFFFF52A8FD047DA8FD48FFA8A8767D52FFFD05A8FFFD06A87DA8%A8A87DFD05A87DA87DA87DFD06A8FFA8FFA8A8FFA8527D7DA8FD4DFFA8A8%7DA8A8FFA8FFA8FFA8FFA8A8A8FFFD06A87DFD0CA8FFA8FFA8FFA8A87DA8%FD53FFA8A87DA87DFD0BA87DA87D7D7DA87DA87DA8A8A87DFD05A87DA87D%A8A8FD58FFFD05A87D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA8A8A8FD5FFFA8FFA8A87DA87D7D527D52527D7D7D5252FD047DA87D%A8A8FD32FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">schmidt_net.cdr</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>djiang3</rdf:li>
            </rdf:Seq>
         </dc:creator>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-02-07T18:41:21-08:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-07T18:42:41-08:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-07T18:42:41-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>244</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FWKfmjquuaX5LubrQrlbPVWutPt7a5kRZUU3V/BbtyRgQQUlIPfwocVS38vfP&#xA;Gq+Y/M/mCyvozZvpFrp0d1pbKtba+ke7W5AkA5OjiGNkatCnEilTirPcVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVWyyxRRtJK6xxruzsQqge5OKpU/nHyk&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:6054CDA6D73911DCB070BAAE3245C8CE</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6054CDA8D73911DCB070BAAE3245C8CE</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6054CDA5D73911DCB070BAAE3245C8CE</stRef:instanceID>
            <stRef:documentID>uuid:6054CDA4D73911DCB070BAAE3245C8CE</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>AvantGardeITCbyBT-Book</stFnt:fontName>
                  <stFnt:fontFamily>AvantGardeITCbyBT Book</stFnt:fontFamily>
                  <stFnt:fontFace>Book</stFnt:fontFace>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -602.097 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 602.097 li
567.957 602.097 li
567.957 0 li
cp
clp
[1 0 0 1 0 0 ]ct
567.457 318.118 mo
567.457 162.014 440.082 34.6406 283.978 34.6406 cv
127.874 34.6406 0.5 162.014 0.5 318.118 cv
0.5 474.223 127.874 601.597 283.978 601.597 cv
440.082 601.597 567.457 474.223 567.457 318.118 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
1 lw
0 lc
0 lj
2.613 ml
[] 0 dsh
true sadj
567.457 318.118 mo
567.457 162.014 440.082 34.6406 283.978 34.6406 cv
127.874 34.6406 0.5 162.014 0.5 318.118 cv
0.5 474.223 127.874 601.597 283.978 601.597 cv
440.082 601.597 567.457 474.223 567.457 318.118 cv
cp
0.137255 0.121569 0.12549 rgb
@
0.2 lw
380.319 53.2896 mo
402.856 63.0815 li
424.385 74.7461 li
444.906 88.2104 li
464.059 103.332 li
481.844 120.108 li
498.189 138.325 li
512.806 157.767 li
525.694 178.503 li
536.783 200.176 li
545.927 222.713 li
553.128 245.97 li
558.312 269.732 li
561.408 293.854 li
562.488 318.118 li
561.408 342.384 li
558.312 366.505 li
553.128 390.267 li
545.927 413.523 li
536.783 436.061 li
525.694 457.733 li
512.806 478.471 li
498.189 497.911 li
481.844 516.128 li
464.059 532.905 li
444.906 548.026 li
424.385 561.491 li
402.856 573.155 li
380.319 582.948 li
187.637 582.948 mo
165.1 573.155 li
143.571 561.491 li
123.05 548.026 li
103.897 532.905 li
86.1118 516.128 li
69.7671 497.911 li
55.1509 478.471 li
42.2622 457.733 li
31.1729 436.061 li
22.0288 413.523 li
14.8291 390.267 li
9.64404 366.505 li
6.54785 342.384 li
5.46826 318.118 li
6.54785 293.854 li
9.64404 269.732 li
14.8291 245.97 li
22.0288 222.713 li
31.1729 200.176 li
42.2622 178.503 li
55.1509 157.767 li
69.7671 138.325 li
86.1118 120.108 li
103.897 103.332 li
123.05 88.2104 li
143.571 74.7461 li
165.1 63.0815 li
187.637 53.2896 li
379.599 54.8735 mo
401.776 64.8813 li
422.945 76.7622 li
443.034 90.4424 li
461.827 105.708 li
479.18 122.412 li
495.021 140.558 li
509.277 159.999 li
521.806 180.447 li
532.535 201.904 li
541.391 224.226 li
548.375 247.123 li
553.344 270.524 li
556.368 294.213 li
557.376 318.118 li
556.368 342.023 li
553.344 365.714 li
548.375 389.114 li
541.391 412.012 li
532.535 434.332 li
521.806 455.789 li
509.277 476.238 li
495.021 495.68 li
479.18 513.824 li
461.827 530.529 li
443.034 545.794 li
422.945 559.475 li
401.776 571.355 li
379.599 581.363 li
188.357 581.363 mo
166.18 571.355 li
145.011 559.475 li
124.922 545.794 li
106.129 530.529 li
88.7759 513.824 li
72.9351 495.68 li
58.6792 476.238 li
46.1499 455.789 li
35.4209 434.332 li
26.5649 412.012 li
19.5811 389.114 li
14.6133 365.714 li
11.5879 342.023 li
10.5801 318.118 li
11.5879 294.213 li
14.6133 270.524 li
19.5811 247.123 li
26.5649 224.226 li
35.4209 201.904 li
46.1499 180.447 li
58.6792 159.999 li
72.9351 140.558 li
88.7759 122.412 li
106.129 105.708 li
124.922 90.4424 li
145.011 76.7622 li
166.18 64.8813 li
188.357 54.8735 li
378.735 56.3853 mo
400.552 66.6816 li
421.361 78.7783 li
441.018 92.6035 li
459.379 107.939 li
476.372 124.716 li
491.781 142.79 li
505.605 162.086 li
517.774 182.392 li
528.215 203.632 li
536.783 225.594 li
543.479 248.203 li
548.375 271.244 li
551.256 294.573 li
552.264 318.118 li
551.256 341.663 li
548.375 364.992 li
543.479 388.034 li
536.783 410.644 li
528.215 432.604 li
517.774 453.846 li
505.605 474.15 li
491.781 493.447 li
476.372 511.521 li
459.379 528.298 li
441.018 543.635 li
421.361 557.458 li
400.552 569.556 li
378.735 579.852 li
189.221 579.852 mo
167.404 569.556 li
146.595 557.458 li
126.938 543.635 li
108.577 528.298 li
91.584 511.521 li
76.1763 493.447 li
62.3511 474.15 li
50.1821 453.846 li
39.7422 432.604 li
31.1729 410.644 li
24.4771 388.034 li
19.5811 364.992 li
16.7012 341.663 li
15.6929 318.118 li
16.7012 294.573 li
19.5811 271.244 li
24.4771 248.203 li
31.1729 225.594 li
39.7422 203.632 li
50.1821 182.392 li
62.3511 162.086 li
76.1763 142.79 li
91.584 124.716 li
108.577 107.939 li
126.938 92.6035 li
146.595 78.7783 li
167.404 66.6816 li
189.221 56.3853 li
377.799 57.8252 mo
399.256 68.4092 li
419.705 80.7222 li
438.93 94.6191 li
456.859 110.101 li
473.348 126.876 li
488.396 144.877 li
501.861 164.03 li
513.67 184.191 li
523.75 205.216 li
532.031 226.961 li
538.583 249.211 li
543.263 271.964 li
546.071 294.934 li
547.007 318.118 li
546.071 341.304 li
543.263 364.272 li
538.583 387.025 li
532.031 409.275 li
523.75 431.021 li
513.67 452.045 li
501.861 472.206 li
488.396 491.359 li
473.348 509.36 li
456.859 526.138 li
438.93 541.617 li
419.705 555.515 li
399.256 567.827 li
377.799 578.411 li
190.157 578.411 mo
168.7 567.827 li
148.251 555.515 li
129.026 541.617 li
111.097 526.138 li
94.6079 509.36 li
79.5601 491.359 li
66.0952 472.206 li
54.2871 452.045 li
44.2061 431.021 li
35.9248 409.275 li
29.373 387.025 li
24.6929 364.272 li
21.8853 341.304 li
20.9492 318.118 li
21.8853 294.934 li
24.6929 271.964 li
29.373 249.211 li
35.9248 226.961 li
44.2061 205.216 li
54.2871 184.191 li
66.0952 164.03 li
79.5601 144.877 li
94.6079 126.876 li
111.097 110.101 li
129.026 94.6191 li
148.251 80.7222 li
168.7 68.4092 li
190.157 57.8252 li
376.719 59.3374 mo
397.888 70.1382 li
417.905 82.5942 li
436.698 96.7075 li
454.195 112.188 li
470.251 128.964 li
484.868 146.965 li
497.973 165.975 li
509.421 185.991 li
519.142 206.729 li
527.206 228.186 li
533.543 250.219 li
538.007 272.612 li
540.743 295.293 li
541.679 318.118 li
540.743 340.943 li
538.007 363.624 li
533.543 386.018 li
527.206 408.052 li
519.142 429.509 li
509.421 450.245 li
497.973 470.263 li
484.868 489.271 li
470.251 507.272 li
454.195 524.05 li
436.698 539.529 li
417.905 553.643 li
397.888 566.1 li
376.719 576.899 li
191.237 576.899 mo
170.068 566.1 li
150.051 553.643 li
131.258 539.529 li
113.761 524.05 li
97.7051 507.272 li
83.0879 489.271 li
69.9829 470.263 li
58.5352 450.245 li
48.814 429.509 li
40.75 408.052 li
34.4131 386.018 li
29.9492 363.624 li
27.2129 340.943 li
26.2769 318.118 li
27.2129 295.293 li
29.9492 272.612 li
34.4131 250.219 li
40.75 228.186 li
48.814 206.729 li
58.5352 185.991 li
69.9829 165.975 li
83.0879 146.965 li
97.7051 128.964 li
113.761 112.188 li
131.258 96.7075 li
150.051 82.5942 li
170.068 70.1382 li
191.237 59.3374 li
375.639 60.7056 mo
396.304 71.7944 li
415.961 84.4663 li
434.322 98.6514 li
451.387 114.132 li
467.083 130.981 li
481.268 148.91 li
493.941 167.846 li
505.029 187.647 li
514.534 208.24 li
522.31 229.41 li
528.359 251.155 li
532.751 273.26 li
535.415 295.653 li
536.279 318.118 li
535.415 340.583 li
532.751 362.977 li
528.359 385.081 li
522.31 406.827 li
514.534 427.996 li
505.029 448.589 li
493.941 468.391 li
481.268 487.327 li
467.083 505.257 li
451.387 522.105 li
434.322 537.585 li
415.961 551.771 li
396.304 564.443 li
375.639 575.531 li
192.317 575.531 mo
171.652 564.443 li
151.995 551.771 li
133.634 537.585 li
116.57 522.105 li
100.873 505.257 li
86.688 487.327 li
74.0151 468.391 li
62.9272 448.589 li
53.4229 427.996 li
45.646 406.827 li
39.5981 385.081 li
35.2051 362.977 li
32.541 340.583 li
31.6772 318.118 li
32.541 295.653 li
35.2051 273.26 li
39.5981 251.155 li
45.646 229.41 li
53.4229 208.24 li
62.9272 187.647 li
74.0151 167.846 li
86.688 148.91 li
100.873 130.981 li
116.57 114.132 li
133.634 98.6514 li
151.995 84.4663 li
171.652 71.7944 li
192.317 60.7056 li
374.415 62.1455 mo
394.72 73.3784 li
413.873 86.2666 li
431.801 100.523 li
448.434 116.076 li
463.699 132.854 li
477.524 150.781 li
489.837 169.574 li
500.565 189.232 li
509.709 209.609 li
517.271 230.634 li
523.174 252.091 li
527.422 273.908 li
529.943 295.941 li
530.807 318.118 li
529.943 340.295 li
527.422 362.328 li
523.174 384.146 li
517.271 405.604 li
509.709 426.628 li
500.565 447.005 li
489.837 466.662 li
477.524 485.455 li
463.699 503.384 li
448.434 520.16 li
431.801 535.713 li
413.873 549.971 li
394.72 562.859 li
374.415 574.092 li
193.542 574.092 mo
173.236 562.859 li
154.084 549.971 li
136.154 535.713 li
119.522 520.16 li
104.257 503.384 li
90.4321 485.455 li
78.1201 466.662 li
67.3911 447.005 li
58.2471 426.628 li
50.686 405.604 li
44.7822 384.146 li
40.5342 362.328 li
38.0142 340.295 li
37.1499 318.118 li
38.0142 295.941 li
40.5342 273.908 li
44.7822 252.091 li
50.686 230.634 li
58.2471 209.609 li
67.3911 189.232 li
78.1201 169.574 li
90.4321 150.781 li
104.257 132.854 li
119.522 116.076 li
136.154 100.523 li
154.084 86.2666 li
173.236 73.3784 li
193.542 62.1455 li
373.047 63.4414 mo
392.992 74.9624 li
411.713 87.9941 li
429.21 102.323 li
445.41 117.948 li
460.243 134.726 li
473.636 152.51 li
485.588 171.231 li
496.029 190.744 li
504.885 210.978 li
512.158 231.714 li
517.918 252.883 li
521.95 274.484 li
524.398 296.229 li
525.262 318.118 li
524.398 340.008 li
521.95 361.752 li
517.918 383.354 li
512.158 404.523 li
504.885 425.26 li
496.029 445.493 li
485.588 465.005 li
473.636 483.728 li
460.243 501.512 li
445.41 518.288 li
429.21 533.913 li
411.713 548.242 li
392.992 561.275 li
373.047 572.795 li
194.91 572.795 mo
174.964 561.275 li
156.244 548.242 li
138.747 533.913 li
122.546 518.288 li
107.713 501.512 li
94.3208 483.728 li
82.3682 465.005 li
71.9272 445.493 li
63.0708 425.26 li
55.7988 404.523 li
50.0381 383.354 li
46.0059 361.752 li
43.5581 340.008 li
42.6938 318.118 li
43.5581 296.229 li
46.0059 274.484 li
50.0381 252.883 li
55.7988 231.714 li
63.0708 210.978 li
71.9272 190.744 li
82.3682 171.231 li
94.3208 152.51 li
107.713 134.726 li
122.546 117.948 li
138.747 102.323 li
156.244 87.9941 li
174.964 74.9624 li
194.91 63.4414 li
371.679 64.8096 mo
391.12 76.4746 li
409.408 89.6504 li
426.473 104.124 li
442.242 119.749 li
456.715 136.525 li
469.675 154.238 li
481.268 172.887 li
491.349 192.256 li
499.917 212.201 li
506.973 232.794 li
512.519 253.748 li
516.478 274.988 li
518.854 296.518 li
519.646 318.118 li
518.854 339.72 li
516.478 361.248 li
512.519 382.489 li
506.973 403.442 li
499.917 424.035 li
491.349 443.981 li
481.268 463.35 li
469.675 481.998 li
456.715 499.711 li
442.242 516.488 li
426.473 532.113 li
409.408 546.586 li
391.12 559.763 li
371.679 571.428 li
196.278 571.428 mo
176.837 559.763 li
158.548 546.586 li
141.483 532.113 li
125.714 516.488 li
111.241 499.711 li
98.2813 481.998 li
86.688 463.35 li
76.6079 443.981 li
68.0391 424.035 li
60.9829 403.442 li
55.439 382.489 li
51.478 361.248 li
49.1021 339.72 li
48.3101 318.118 li
49.1021 296.518 li
51.478 274.988 li
55.439 253.748 li
60.9829 232.794 li
68.0391 212.201 li
76.6079 192.256 li
86.688 172.887 li
98.2813 154.238 li
111.241 136.525 li
125.714 119.749 li
141.483 104.124 li
158.548 89.6504 li
176.837 76.4746 li
196.278 64.8096 li
370.166 66.1055 mo
389.176 77.9863 li
407.032 91.2344 li
423.665 105.779 li
439.002 121.477 li
452.971 138.253 li
465.643 155.895 li
476.804 174.399 li
486.596 193.625 li
494.949 213.425 li
501.717 233.802 li
507.045 254.54 li
510.862 275.564 li
513.166 296.805 li
513.958 318.118 li
513.166 339.432 li
510.862 360.673 li
507.045 381.697 li
501.717 402.435 li
494.949 422.812 li
486.596 442.612 li
476.804 461.837 li
465.643 480.343 li
452.971 497.983 li
439.002 514.761 li
423.665 530.457 li
407.032 545.002 li
389.176 558.25 li
370.166 570.132 li
197.79 570.132 mo
178.781 558.25 li
160.924 545.002 li
144.291 530.457 li
128.954 514.761 li
114.986 497.983 li
102.313 480.343 li
91.1519 461.837 li
81.3599 442.612 li
73.0068 422.812 li
66.2393 402.435 li
60.9111 381.697 li
57.0952 360.673 li
54.791 339.432 li
53.999 318.118 li
54.791 296.805 li
57.0952 275.564 li
60.9111 254.54 li
66.2393 233.802 li
73.0068 213.425 li
81.3599 193.625 li
91.1519 174.399 li
102.313 155.895 li
114.986 138.253 li
128.954 121.477 li
144.291 105.779 li
160.924 91.2344 li
178.781 77.9863 li
197.79 66.1055 li
368.582 67.3291 mo
387.159 79.4263 li
404.584 92.8193 li
420.785 107.436 li
435.618 123.132 li
449.226 139.909 li
461.467 157.479 li
472.34 175.911 li
481.772 194.992 li
489.765 214.577 li
496.389 234.738 li
501.501 255.259 li
505.246 276.068 li
507.405 297.021 li
508.126 318.118 li
507.405 339.216 li
505.246 360.168 li
501.501 380.978 li
496.389 401.498 li
489.765 421.659 li
481.772 441.244 li
472.34 460.325 li
461.467 478.759 li
449.226 496.327 li
435.618 513.104 li
420.785 528.802 li
404.584 543.417 li
387.159 556.811 li
368.582 568.907 li
199.374 568.907 mo
180.797 556.811 li
163.372 543.417 li
147.171 528.802 li
132.338 513.104 li
118.73 496.327 li
106.489 478.759 li
95.6162 460.325 li
86.1841 441.244 li
78.1919 421.659 li
71.5669 401.498 li
66.4551 380.978 li
62.7109 360.168 li
60.5513 339.216 li
59.8311 318.118 li
60.5513 297.021 li
62.7109 276.068 li
66.4551 255.259 li
71.5669 234.738 li
78.1919 214.577 li
86.1841 194.992 li
95.6162 175.911 li
106.489 157.479 li
118.73 139.909 li
132.338 123.132 li
147.171 107.436 li
163.372 92.8193 li
180.797 79.4263 li
199.374 67.3291 li
366.998 68.5532 mo
385.071 80.7944 li
401.992 94.3315 li
417.761 109.021 li
432.162 124.789 li
445.338 141.493 li
457.219 158.99 li
467.731 177.279 li
476.876 196.216 li
484.58 215.729 li
490.989 235.674 li
495.957 255.979 li
499.485 276.5 li
501.646 297.31 li
502.293 318.118 li
501.646 338.928 li
499.485 359.736 li
495.957 380.258 li
490.989 400.563 li
484.58 420.508 li
476.876 440.021 li
467.731 458.957 li
457.219 477.246 li
445.338 494.743 li
432.162 511.448 li
417.761 527.218 li
401.992 541.905 li
385.071 555.442 li
366.998 567.684 li
200.958 567.684 mo
182.885 555.442 li
165.964 541.905 li
150.195 527.218 li
135.794 511.448 li
122.618 494.743 li
110.737 477.246 li
100.225 458.957 li
91.0801 440.021 li
83.376 420.508 li
76.9683 400.563 li
71.999 380.258 li
68.4712 359.736 li
66.311 338.928 li
65.6631 318.118 li
66.311 297.31 li
68.4712 276.5 li
71.999 255.979 li
76.9683 235.674 li
83.376 215.729 li
91.0801 196.216 li
100.225 177.279 li
110.737 158.99 li
122.618 141.493 li
135.794 124.789 li
150.195 109.021 li
165.964 94.3315 li
182.885 80.7944 li
200.958 68.5532 li
365.271 69.7065 mo
382.911 82.1621 li
399.328 95.7715 li
414.593 110.532 li
428.634 126.3 li
441.378 143.005 li
452.827 160.43 li
462.979 178.647 li
471.836 197.44 li
479.324 216.737 li
485.444 236.539 li
490.269 256.627 li
493.653 277.004 li
495.741 297.525 li
496.389 318.118 li
495.741 338.711 li
493.653 359.232 li
490.269 379.609 li
485.444 399.698 li
479.324 419.499 li
471.836 438.796 li
462.979 457.589 li
452.827 475.807 li
441.378 493.231 li
428.634 509.937 li
414.593 525.705 li
399.328 540.466 li
382.911 554.074 li
365.271 566.531 li
202.686 566.531 mo
185.045 554.074 li
168.628 540.466 li
153.363 525.705 li
139.323 509.937 li
126.578 493.231 li
115.13 475.807 li
104.977 457.589 li
96.1211 438.796 li
88.6318 419.499 li
82.5122 399.698 li
77.688 379.609 li
74.3032 359.232 li
72.2148 338.711 li
71.5669 318.118 li
72.2148 297.525 li
74.3032 277.004 li
77.688 256.627 li
82.5122 236.539 li
88.6318 216.737 li
96.1211 197.44 li
104.977 178.647 li
115.13 160.43 li
126.578 143.005 li
139.323 126.3 li
153.363 110.532 li
168.628 95.7715 li
185.045 82.1621 li
202.686 69.7065 li
363.47 70.8584 mo
380.607 83.4585 li
396.592 97.2114 li
411.425 111.972 li
424.961 127.813 li
437.346 144.445 li
448.434 161.87 li
458.228 179.943 li
466.724 198.592 li
473.996 217.745 li
479.9 237.331 li
484.508 257.275 li
487.82 277.437 li
489.765 297.741 li
490.485 318.118 li
489.765 338.495 li
487.82 358.801 li
484.508 378.961 li
479.9 398.906 li
473.996 418.491 li
466.724 437.645 li
458.228 456.293 li
448.434 474.366 li
437.346 491.791 li
424.961 508.425 li
411.425 524.266 li
396.592 539.025 li
380.607 552.778 li
363.47 565.379 li
204.486 565.379 mo
187.349 552.778 li
171.364 539.025 li
156.532 524.266 li
142.995 508.425 li
130.61 491.791 li
119.522 474.366 li
109.729 456.293 li
101.233 437.645 li
93.9609 418.491 li
88.0562 398.906 li
83.4482 378.961 li
80.1362 358.801 li
78.1919 338.495 li
77.4722 318.118 li
78.1919 297.741 li
80.1362 277.437 li
83.4482 257.275 li
88.0562 237.331 li
93.9609 217.745 li
101.233 198.592 li
109.729 179.943 li
119.522 161.87 li
130.61 144.445 li
142.995 127.813 li
156.532 111.972 li
171.364 97.2114 li
187.349 83.4585 li
204.486 70.8584 li
361.598 71.9385 mo
378.231 84.6826 li
393.784 98.5073 li
408.112 113.412 li
421.289 129.18 li
433.17 145.813 li
443.898 163.167 li
453.331 181.167 li
461.611 199.744 li
468.523 218.753 li
474.284 238.123 li
478.676 257.852 li
481.916 277.796 li
483.788 297.958 li
484.437 318.118 li
483.788 338.279 li
481.916 358.44 li
478.676 378.386 li
474.284 398.114 li
468.523 417.483 li
461.611 436.492 li
453.331 455.069 li
443.898 473.07 li
433.17 490.424 li
421.289 507.057 li
408.112 522.825 li
393.784 537.729 li
378.231 551.555 li
361.598 564.3 li
206.358 564.3 mo
189.725 551.555 li
174.172 537.729 li
159.844 522.825 li
146.667 507.057 li
134.786 490.424 li
124.058 473.07 li
114.625 455.069 li
106.345 436.492 li
99.4331 417.483 li
93.6719 398.114 li
89.2803 378.386 li
86.04 358.44 li
84.168 338.279 li
83.52 318.118 li
84.168 297.958 li
86.04 277.796 li
89.2803 257.852 li
93.6719 238.123 li
99.4331 218.753 li
106.345 199.744 li
114.625 181.167 li
124.058 163.167 li
134.786 145.813 li
146.667 129.18 li
159.844 113.412 li
174.172 98.5073 li
189.725 84.6826 li
206.358 71.9385 li
359.654 73.0186 mo
375.783 85.9063 li
390.832 99.8032 li
404.728 114.78 li
417.473 130.548 li
428.994 147.182 li
439.29 164.462 li
448.434 182.319 li
456.355 200.752 li
463.051 219.617 li
468.523 238.915 li
472.844 258.427 li
475.868 278.229 li
477.74 298.102 li
478.316 318.118 li
477.74 338.136 li
475.868 358.009 li
472.844 377.81 li
468.523 397.322 li
463.051 416.619 li
456.355 435.484 li
448.434 453.917 li
439.29 471.774 li
428.994 489.056 li
417.473 505.688 li
404.728 521.457 li
390.832 536.434 li
375.783 550.33 li
359.654 563.22 li
208.302 563.22 mo
192.173 550.33 li
177.125 536.434 li
163.228 521.457 li
150.483 505.688 li
138.963 489.056 li
128.666 471.774 li
119.522 453.917 li
111.601 435.484 li
104.905 416.619 li
99.4331 397.322 li
95.1118 377.81 li
92.0879 358.009 li
90.2158 338.136 li
89.6401 318.118 li
90.2158 298.102 li
92.0879 278.229 li
95.1118 258.427 li
99.4331 238.915 li
104.905 219.617 li
111.601 200.752 li
119.522 182.319 li
128.666 164.462 li
138.963 147.182 li
150.483 130.548 li
163.228 114.78 li
177.125 99.8032 li
192.173 85.9063 li
208.302 73.0186 li
357.638 74.0264 mo
373.335 87.0586 li
387.879 101.1 li
401.272 116.076 li
413.513 131.845 li
424.673 148.406 li
434.61 165.687 li
443.394 183.471 li
451.027 201.76 li
457.507 220.553 li
462.763 239.634 li
466.868 259.003 li
469.82 278.588 li
471.619 298.317 li
472.196 318.118 li
471.619 337.919 li
469.82 357.648 li
466.868 377.233 li
462.763 396.603 li
457.507 415.684 li
451.027 434.477 li
443.394 452.766 li
434.61 470.551 li
424.673 487.831 li
413.513 504.392 li
401.272 520.16 li
387.879 535.138 li
373.335 549.179 li
357.638 562.211 li
210.318 562.211 mo
194.622 549.179 li
180.077 535.138 li
166.684 520.16 li
154.444 504.392 li
143.283 487.831 li
133.347 470.551 li
124.562 452.766 li
116.93 434.477 li
110.449 415.684 li
105.193 396.603 li
101.089 377.233 li
98.1372 357.648 li
96.3359 337.919 li
95.7612 318.118 li
96.3359 298.317 li
98.1372 278.588 li
101.089 259.003 li
105.193 239.634 li
110.449 220.553 li
116.93 201.76 li
124.562 183.471 li
133.347 165.687 li
143.283 148.406 li
154.444 131.845 li
166.684 116.076 li
180.077 101.1 li
194.622 87.0586 li
210.318 74.0264 li
355.55 75.0342 mo
370.742 88.2104 li
384.783 102.323 li
397.744 117.3 li
409.552 133.142 li
420.281 149.63 li
429.858 166.838 li
438.354 184.551 li
445.626 202.769 li
451.891 221.345 li
456.931 240.282 li
460.891 259.507 li
463.699 278.948 li
465.427 298.461 li
466.003 318.118 li
465.427 337.775 li
463.699 357.288 li
460.891 376.729 li
456.931 395.954 li
451.891 414.892 li
445.626 433.469 li
438.354 451.686 li
429.858 469.398 li
420.281 486.607 li
409.552 503.096 li
397.744 518.937 li
384.783 533.913 li
370.742 548.026 li
355.55 561.203 li
212.406 561.203 mo
197.214 548.026 li
183.173 533.913 li
170.212 518.937 li
158.404 503.096 li
147.675 486.607 li
138.099 469.398 li
129.602 451.686 li
122.33 433.469 li
116.066 414.892 li
111.025 395.954 li
107.065 376.729 li
104.257 357.288 li
102.529 337.775 li
101.953 318.118 li
102.529 298.461 li
104.257 278.948 li
107.065 259.507 li
111.025 240.282 li
116.066 221.345 li
122.33 202.769 li
129.602 184.551 li
138.099 166.838 li
147.675 149.63 li
158.404 133.142 li
170.212 117.3 li
183.173 102.323 li
197.214 88.2104 li
212.406 75.0342 li
353.39 76.0425 mo
368.078 89.2183 li
381.615 103.476 li
394.144 118.524 li
405.521 134.293 li
415.817 150.781 li
425.033 167.918 li
433.17 185.56 li
440.226 203.632 li
446.202 222.137 li
451.027 240.93 li
454.843 260.011 li
457.579 279.309 li
459.163 298.677 li
459.739 318.118 li
459.163 337.56 li
457.579 356.929 li
454.843 376.226 li
451.027 395.307 li
446.202 414.1 li
440.226 432.604 li
433.17 450.678 li
425.033 468.318 li
415.817 485.455 li
405.521 501.943 li
394.144 517.712 li
381.615 532.762 li
368.078 547.019 li
353.39 560.194 li
214.566 560.194 mo
199.878 547.019 li
186.341 532.762 li
173.812 517.712 li
162.436 501.943 li
152.139 485.455 li
142.923 468.318 li
134.786 450.678 li
127.73 432.604 li
121.754 414.1 li
116.93 395.307 li
113.113 376.226 li
110.377 356.929 li
108.793 337.56 li
108.217 318.118 li
108.793 298.677 li
110.377 279.309 li
113.113 260.011 li
116.93 240.93 li
121.754 222.137 li
127.73 203.632 li
134.786 185.56 li
142.923 167.918 li
152.139 150.781 li
162.436 134.293 li
173.812 118.524 li
186.341 103.476 li
199.878 89.2183 li
214.566 76.0425 li
351.23 76.9063 mo
365.342 90.2983 li
378.447 104.555 li
390.472 119.604 li
401.416 135.445 li
411.281 151.935 li
420.137 168.926 li
427.985 186.496 li
434.682 204.496 li
440.442 222.857 li
445.122 241.578 li
448.722 260.516 li
451.315 279.596 li
452.899 298.821 li
453.403 318.118 li
452.899 337.415 li
451.315 356.641 li
448.722 375.722 li
445.122 394.658 li
440.442 413.379 li
434.682 431.74 li
427.985 449.741 li
420.137 467.311 li
411.281 484.304 li
401.416 500.791 li
390.472 516.633 li
378.447 531.682 li
365.342 545.938 li
351.23 559.33 li
216.727 559.33 mo
202.614 545.938 li
189.509 531.682 li
177.485 516.633 li
166.54 500.791 li
156.676 484.304 li
147.819 467.311 li
139.971 449.741 li
133.274 431.74 li
127.514 413.379 li
122.834 394.658 li
119.234 375.722 li
116.642 356.641 li
115.058 337.415 li
114.553 318.118 li
115.058 298.821 li
116.642 279.596 li
119.234 260.516 li
122.834 241.578 li
127.514 222.857 li
133.274 204.496 li
139.971 186.496 li
147.819 168.926 li
156.676 151.935 li
166.54 135.445 li
177.485 119.604 li
189.509 104.555 li
202.614 90.2983 li
216.727 76.9063 li
348.997 77.8423 mo
362.606 91.3066 li
375.135 105.635 li
386.728 120.685 li
397.24 136.525 li
406.744 152.942 li
415.169 169.936 li
422.657 187.433 li
429.138 205.36 li
434.61 223.577 li
439.074 242.154 li
442.603 260.947 li
445.05 279.884 li
446.563 298.965 li
447.066 318.118 li
446.563 337.271 li
445.05 356.353 li
442.603 375.289 li
439.074 394.082 li
434.61 412.659 li
429.138 430.876 li
422.657 448.806 li
415.169 466.303 li
406.744 483.295 li
397.24 499.711 li
386.728 515.553 li
375.135 530.602 li
362.606 544.931 li
348.997 558.395 li
218.959 558.395 mo
205.35 544.931 li
192.822 530.602 li
181.229 515.553 li
170.716 499.711 li
161.212 483.295 li
152.787 466.303 li
145.299 448.806 li
138.819 430.876 li
133.347 412.659 li
128.882 394.082 li
125.354 375.289 li
122.906 356.353 li
121.394 337.271 li
120.89 318.118 li
121.394 298.965 li
122.906 279.884 li
125.354 260.947 li
128.882 242.154 li
133.347 223.577 li
138.819 205.36 li
145.299 187.433 li
152.787 169.936 li
161.212 152.942 li
170.716 136.525 li
181.229 120.685 li
192.822 105.635 li
205.35 91.3066 li
218.959 77.8423 li
346.693 78.6343 mo
359.726 92.2432 li
371.823 106.644 li
382.911 121.764 li
392.992 137.533 li
402.064 153.95 li
410.2 170.943 li
417.329 188.296 li
423.521 206.152 li
428.778 224.297 li
433.026 242.73 li
436.338 261.379 li
438.714 280.172 li
440.154 299.109 li
440.586 318.118 li
440.154 337.127 li
438.714 356.064 li
436.338 374.857 li
433.026 393.507 li
428.778 411.939 li
423.521 430.084 li
417.329 447.941 li
410.2 465.293 li
402.064 482.287 li
392.992 498.703 li
382.911 514.473 li
371.823 529.594 li
359.726 543.994 li
346.693 557.603 li
221.263 557.603 mo
208.23 543.994 li
196.134 529.594 li
185.045 514.473 li
174.964 498.703 li
165.892 482.287 li
157.756 465.293 li
150.627 447.941 li
144.435 430.084 li
139.179 411.939 li
134.93 393.507 li
131.618 374.857 li
129.242 356.064 li
127.802 337.127 li
127.37 318.118 li
127.802 299.109 li
129.242 280.172 li
131.618 261.379 li
134.93 242.73 li
139.179 224.297 li
144.435 206.152 li
150.627 188.296 li
157.756 170.943 li
165.892 153.95 li
174.964 137.533 li
185.045 121.764 li
196.134 106.644 li
208.23 92.2432 li
221.263 78.6343 li
344.317 79.4985 mo
356.846 93.1074 li
368.438 107.579 li
379.023 122.772 li
388.672 138.542 li
397.313 154.886 li
405.088 171.808 li
411.929 189.16 li
417.833 206.873 li
422.801 224.874 li
426.905 243.234 li
430.074 261.739 li
432.378 280.46 li
433.674 299.253 li
434.178 318.118 li
433.674 336.983 li
432.378 355.776 li
430.074 374.497 li
426.905 393.002 li
422.801 411.363 li
417.833 429.364 li
411.929 447.077 li
405.088 464.43 li
397.313 481.351 li
388.672 497.695 li
379.023 513.465 li
368.438 528.657 li
356.846 543.129 li
344.317 556.738 li
223.639 556.738 mo
211.11 543.129 li
199.518 528.657 li
188.933 513.465 li
179.285 497.695 li
170.644 481.351 li
162.868 464.43 li
156.028 447.077 li
150.123 429.364 li
145.155 411.363 li
141.051 393.002 li
137.883 374.497 li
135.578 355.776 li
134.282 336.983 li
133.778 318.118 li
134.282 299.253 li
135.578 280.46 li
137.883 261.739 li
141.051 243.234 li
145.155 224.874 li
150.123 206.873 li
156.028 189.16 li
162.868 171.808 li
170.644 154.886 li
179.285 138.542 li
188.933 122.772 li
199.518 107.579 li
211.11 93.1074 li
223.639 79.4985 li
341.941 80.2905 mo
353.894 93.9712 li
364.982 108.517 li
375.063 123.708 li
384.279 139.478 li
392.56 155.822 li
399.976 172.671 li
406.456 189.952 li
412.146 207.592 li
416.897 225.521 li
420.785 243.738 li
423.737 262.171 li
425.897 280.749 li
427.194 299.397 li
427.626 318.118 li
427.194 336.839 li
425.897 355.488 li
423.737 374.065 li
420.785 392.498 li
416.897 410.716 li
412.146 428.645 li
406.456 446.285 li
399.976 463.565 li
392.56 480.414 li
384.279 496.76 li
375.063 512.528 li
364.982 527.722 li
353.894 542.266 li
341.941 555.946 li
226.015 555.946 mo
214.062 542.266 li
202.974 527.722 li
192.894 512.528 li
183.677 496.76 li
175.396 480.414 li
167.98 463.565 li
161.5 446.285 li
155.812 428.645 li
151.059 410.716 li
147.171 392.498 li
144.219 374.065 li
142.059 355.488 li
140.763 336.839 li
140.331 318.118 li
140.763 299.397 li
142.059 280.749 li
144.219 262.171 li
147.171 243.738 li
151.059 225.521 li
155.812 207.592 li
161.5 189.952 li
167.98 172.671 li
175.396 155.822 li
183.677 139.478 li
192.894 123.708 li
202.974 108.517 li
214.062 93.9712 li
226.015 80.2905 li
339.421 81.0103 mo
350.942 94.8354 li
361.454 109.38 li
371.103 124.572 li
379.887 140.341 li
387.735 156.687 li
394.792 173.463 li
400.984 190.672 li
406.313 208.24 li
410.849 226.098 li
414.521 244.17 li
417.401 262.531 li
419.489 280.964 li
420.713 299.542 li
421.073 318.118 li
420.713 336.695 li
419.489 355.272 li
417.401 373.705 li
414.521 392.066 li
410.849 410.14 li
406.313 427.996 li
400.984 445.565 li
394.792 462.773 li
387.735 479.551 li
379.887 495.896 li
371.103 511.664 li
361.454 526.857 li
350.942 541.401 li
339.421 555.227 li
228.535 555.227 mo
217.015 541.401 li
206.502 526.857 li
196.854 511.664 li
188.069 495.896 li
180.221 479.551 li
173.164 462.773 li
166.972 445.565 li
161.644 427.996 li
157.108 410.14 li
153.435 392.066 li
150.555 373.705 li
148.467 355.272 li
147.243 336.695 li
146.883 318.118 li
147.243 299.542 li
148.467 280.964 li
150.555 262.531 li
153.435 244.17 li
157.108 226.098 li
161.644 208.24 li
166.972 190.672 li
173.164 173.463 li
180.221 156.687 li
188.069 140.341 li
196.854 124.572 li
206.502 109.38 li
217.015 94.8354 li
228.535 81.0103 li
336.973 81.7305 mo
347.845 95.6274 li
357.854 110.172 li
367.07 125.437 li
375.351 141.206 li
382.839 157.479 li
389.536 174.255 li
395.44 191.392 li
400.48 208.817 li
404.8 226.603 li
408.256 244.603 li
410.993 262.819 li
412.938 281.18 li
414.089 299.613 li
414.521 318.118 li
414.089 336.623 li
412.938 355.057 li
410.993 373.417 li
408.256 391.635 li
404.8 409.636 li
400.48 427.42 li
395.44 444.846 li
389.536 461.981 li
382.839 478.759 li
375.351 495.031 li
367.07 510.801 li
357.854 526.065 li
347.845 540.609 li
336.973 554.507 li
230.983 554.507 mo
220.111 540.609 li
210.102 526.065 li
200.886 510.801 li
192.605 495.031 li
185.117 478.759 li
178.421 461.981 li
172.516 444.846 li
167.476 427.42 li
163.156 409.636 li
159.7 391.635 li
156.964 373.417 li
155.02 355.057 li
153.868 336.623 li
153.435 318.118 li
153.868 299.613 li
155.02 281.18 li
156.964 262.819 li
159.7 244.603 li
163.156 226.603 li
167.476 208.817 li
172.516 191.392 li
178.421 174.255 li
185.117 157.479 li
192.605 141.206 li
200.886 125.437 li
210.102 110.172 li
220.111 95.6274 li
230.983 81.7305 li
334.381 82.3784 mo
344.749 96.3472 li
354.254 110.964 li
362.966 126.229 li
370.814 141.998 li
377.943 158.271 li
384.279 174.976 li
389.824 192.041 li
394.648 209.465 li
403.658 245.25 407.73 281.247 407.896 318.118 cv
407.73 354.99 403.658 390.987 394.648 426.772 cv
389.824 444.197 li
384.279 461.262 li
377.943 477.967 li
370.814 494.239 li
362.966 510.009 li
354.254 525.273 li
344.749 539.89 li
334.381 553.858 li
233.576 553.858 mo
223.207 539.89 li
213.702 525.273 li
204.99 510.009 li
197.142 494.239 li
190.013 477.967 li
183.677 461.262 li
178.133 444.197 li
173.308 426.772 li
164.298 390.987 160.226 354.99 160.06 318.118 cv
160.226 281.247 164.298 245.25 173.308 209.465 cv
178.133 192.041 li
183.677 174.976 li
190.013 158.271 li
197.142 141.998 li
204.99 126.229 li
213.702 110.964 li
223.207 96.3472 li
233.576 82.3784 li
331.86 83.0264 mo
341.653 96.9951 li
350.654 111.685 li
358.862 126.948 li
366.278 142.717 li
372.975 158.99 li
410.621 256.749 410.621 379.489 372.975 477.246 cv
366.278 493.52 li
358.862 509.288 li
350.654 524.554 li
341.653 539.241 li
331.86 553.21 li
236.096 553.21 mo
226.303 539.241 li
217.303 524.554 li
209.094 509.288 li
201.678 493.52 li
194.982 477.246 li
157.335 379.489 157.335 256.748 194.982 158.99 cv
201.678 142.717 li
209.094 126.948 li
217.303 111.685 li
226.303 96.9951 li
236.096 83.0264 li
329.196 83.6025 mo
338.485 97.7153 li
346.909 112.404 li
354.687 127.668 li
361.67 143.438 li
405.458 249.175 405.458 387.062 361.67 492.8 cv
354.687 508.568 li
346.909 523.833 li
338.485 538.521 li
329.196 552.635 li
238.76 552.635 mo
229.471 538.521 li
221.047 523.833 li
213.27 508.568 li
206.286 492.8 li
162.498 387.062 162.498 249.175 206.286 143.438 cv
213.27 127.668 li
221.047 112.404 li
229.471 97.7153 li
238.76 83.6025 li
326.532 84.1782 mo
335.245 98.2915 li
343.165 113.052 li
350.438 128.316 li
400.189 240.827 400.189 395.409 350.438 507.92 cv
343.165 523.186 li
335.245 537.945 li
326.532 552.059 li
241.424 552.059 mo
232.712 537.945 li
224.791 523.186 li
217.519 507.92 li
167.767 395.408 167.767 240.828 217.519 128.316 cv
224.791 113.052 li
232.712 98.2915 li
241.424 84.1782 li
323.868 84.6826 mo
332.004 98.8672 li
339.421 113.628 li
346.189 128.893 li
352.31 144.661 li
357.782 160.862 li
362.75 177.352 li
387.073 267.271 387.073 368.966 362.75 458.886 cv
357.782 475.374 li
352.31 491.575 li
346.189 507.345 li
339.421 522.609 li
332.004 537.369 li
323.868 551.555 li
244.088 551.555 mo
235.952 537.369 li
228.535 522.609 li
221.767 507.345 li
215.647 491.575 li
210.174 475.374 li
205.206 458.886 li
180.884 368.968 180.884 267.27 205.206 177.352 cv
210.174 160.862 li
215.647 144.661 li
221.767 128.893 li
228.535 113.628 li
235.952 98.8672 li
244.088 84.6826 li
321.132 85.1143 mo
328.692 99.3711 li
389.355 222.295 389.355 413.941 328.692 536.865 cv
321.132 551.122 li
246.824 551.122 mo
239.264 536.865 li
178.601 413.943 178.601 222.293 239.264 99.3711 cv
246.824 85.1143 li
318.396 85.6182 mo
325.38 99.8755 li
381.35 223.062 381.35 413.176 325.38 536.361 cv
318.396 550.618 li
249.56 550.618 mo
242.576 536.361 li
186.606 413.177 186.606 223.062 242.576 99.8755 cv
249.56 85.6182 li
315.66 85.9785 mo
375.468 213.562 375.468 422.676 315.66 550.259 cv
252.296 550.259 mo
192.488 422.676 192.488 213.562 252.296 85.9785 cv
312.853 86.4102 mo
327.693 121.301 337.396 158.592 343.669 195.928 cv
350.514 236.188 353.576 277.295 353.606 318.118 cv
353.576 358.941 350.514 400.05 343.669 440.309 cv
337.396 477.646 327.693 514.934 312.853 549.826 cv
255.105 549.826 mo
240.266 514.941 230.558 477.64 224.287 440.309 cv
217.442 400.05 214.38 358.941 214.35 318.118 cv
214.38 277.295 217.442 236.188 224.287 195.928 cv
230.558 158.6 240.266 121.294 255.105 86.4102 cv
309.972 86.6982 mo
323.471 121.624 332.105 159.258 337.765 196.216 cv
343.942 236.616 346.616 277.266 346.693 318.118 cv
346.616 358.972 343.942 399.62 337.765 440.021 cv
332.105 476.979 323.471 514.613 309.972 549.538 cv
257.985 549.538 mo
244.485 514.614 235.851 476.979 230.191 440.021 cv
224.014 399.62 221.34 358.972 221.263 318.118 cv
221.34 277.266 224.014 236.616 230.191 196.216 cv
235.851 159.259 244.485 121.621 257.985 86.6982 cv
307.163 87.0586 mo
319.253 122.261 326.766 159.683 331.86 196.504 cv
337.249 236.801 339.798 277.467 339.781 318.118 cv
339.798 358.77 337.249 399.436 331.86 439.732 cv
326.766 476.556 319.253 513.976 307.163 549.179 cv
260.793 549.179 mo
248.703 513.975 241.19 476.557 236.096 439.732 cv
230.707 399.436 228.158 358.77 228.175 318.118 cv
228.158 277.467 230.707 236.801 236.096 196.504 cv
241.19 159.682 248.703 122.262 260.793 87.0586 cv
304.283 87.2744 mo
326.054 162.05 332.357 240.534 332.869 318.118 cv
332.357 395.702 326.054 474.187 304.283 548.962 cv
263.673 548.962 mo
241.903 474.187 235.599 395.702 235.088 318.118 cv
235.599 240.534 241.903 162.05 263.673 87.2744 cv
301.403 87.5625 mo
320.033 161.82 325.55 241.743 325.884 318.118 cv
325.55 394.493 320.033 474.416 301.403 548.675 cv
266.553 548.675 mo
247.923 474.416 242.406 394.493 242.072 318.118 cv
242.406 241.743 247.923 161.82 266.553 87.5625 cv
298.523 87.7065 mo
314.035 162.364 318.694 241.977 318.9 318.118 cv
318.694 394.261 314.035 473.872 298.523 548.53 cv
269.433 548.53 mo
253.921 473.872 249.263 394.262 249.056 318.118 cv
249.263 241.976 253.921 162.365 269.433 87.7065 cv
295.643 87.8506 mo
308.108 163.483 311.757 241.545 311.916 318.118 cv
311.757 394.691 308.108 472.753 295.643 548.387 cv
272.314 548.387 mo
259.848 472.753 256.199 394.691 256.041 318.118 cv
256.199 241.545 259.848 163.483 272.314 87.8506 cv
292.762 87.9941 mo
302.08 163.963 304.807 241.62 304.931 318.118 cv
304.807 394.617 302.08 472.273 292.762 548.242 cv
275.194 548.242 mo
265.876 472.273 263.149 394.617 263.025 318.118 cv
263.149 241.619 265.876 163.963 275.194 87.9941 cv
289.81 88.0664 mo
296.127 164.374 297.8 241.568 297.947 318.118 cv
297.8 394.668 296.127 471.863 289.81 548.17 cv
278.146 548.17 mo
271.829 471.864 270.156 394.667 270.009 318.118 cv
270.156 241.569 271.829 164.373 278.146 88.0664 cv
286.93 88.1382 mo
289.972 164.688 290.949 241.512 290.962 318.118 cv
290.949 394.725 289.972 471.55 286.93 548.099 cv
281.026 548.099 mo
277.984 471.55 277.007 394.725 276.994 318.118 cv
277.007 241.512 277.984 164.688 281.026 88.1382 cv
283.978 34.6406 mo
283.978 601.597 li
@
0.8 lw
293.699 35.6484 mo
308.099 37.8086 li
331.716 43.0645 li
354.687 50.2642 li
376.719 59.3374 li
397.888 70.1382 li
417.905 82.5942 li
436.698 96.7075 li
454.195 112.188 li
470.251 128.964 li
484.868 146.965 li
497.973 165.975 li
509.421 185.991 li
519.142 206.729 li
527.206 228.186 li
533.543 250.219 li
538.007 272.612 li
540.743 295.293 li
541.679 318.118 li
540.743 340.943 li
538.007 363.624 li
533.543 386.018 li
527.206 408.052 li
519.142 429.509 li
509.421 450.245 li
497.973 470.263 li
484.868 489.271 li
470.251 507.272 li
454.195 524.05 li
436.698 539.529 li
417.905 553.643 li
397.888 566.1 li
376.719 576.899 li
354.687 585.973 li
331.716 593.173 li
308.099 598.429 li
293.699 600.588 li
274.258 600.588 mo
259.857 598.429 li
236.24 593.173 li
213.27 585.973 li
191.237 576.899 li
170.068 566.1 li
150.051 553.643 li
131.258 539.529 li
113.761 524.05 li
97.7051 507.272 li
83.0879 489.271 li
69.9829 470.263 li
58.5352 450.245 li
48.814 429.509 li
40.75 408.052 li
34.4131 386.018 li
29.9492 363.624 li
27.2129 340.943 li
26.2769 318.118 li
27.2129 295.293 li
29.9492 272.612 li
34.4131 250.219 li
40.75 228.186 li
48.814 206.729 li
58.5352 185.991 li
69.9829 165.975 li
83.0879 146.965 li
97.7051 128.964 li
113.761 112.188 li
131.258 96.7075 li
150.051 82.5942 li
170.068 70.1382 li
191.237 59.3374 li
213.27 50.2642 li
236.24 43.0645 li
259.857 37.8086 li
274.258 35.6484 li
293.194 36.5122 mo
306.875 39.8242 li
328.908 46.8804 li
350.078 55.6655 li
370.166 66.1055 li
389.176 77.9863 li
407.032 91.2344 li
423.665 105.779 li
439.002 121.477 li
452.971 138.253 li
465.643 155.895 li
476.804 174.399 li
486.596 193.625 li
494.949 213.425 li
501.717 233.802 li
507.045 254.54 li
510.862 275.564 li
513.166 296.805 li
513.958 318.118 li
513.166 339.432 li
510.862 360.673 li
507.045 381.697 li
501.717 402.435 li
494.949 422.812 li
486.596 442.612 li
476.804 461.837 li
465.643 480.343 li
452.971 497.983 li
439.002 514.761 li
423.665 530.457 li
407.032 545.002 li
389.176 558.25 li
370.166 570.132 li
350.078 580.571 li
328.908 589.356 li
306.875 596.412 li
293.194 599.725 li
274.762 599.725 mo
261.081 596.412 li
239.048 589.356 li
217.879 580.571 li
197.79 570.132 li
178.781 558.25 li
160.924 545.002 li
144.291 530.457 li
128.954 514.761 li
114.986 497.983 li
102.313 480.343 li
91.1519 461.837 li
81.3599 442.612 li
73.0068 422.812 li
66.2393 402.435 li
60.9111 381.697 li
57.0952 360.673 li
54.791 339.432 li
53.999 318.118 li
54.791 296.805 li
57.0952 275.564 li
60.9111 254.54 li
66.2393 233.802 li
73.0068 213.425 li
81.3599 193.625 li
91.1519 174.399 li
102.313 155.895 li
114.986 138.253 li
128.954 121.477 li
144.291 105.779 li
160.924 91.2344 li
178.781 77.9863 li
197.79 66.1055 li
217.879 55.6655 li
239.048 46.8804 li
261.081 39.8242 li
274.762 36.5122 li
292.474 37.2324 mo
304.931 41.6963 li
324.876 50.3364 li
343.741 60.4893 li
361.598 71.9385 li
378.231 84.6826 li
393.784 98.5073 li
408.112 113.412 li
421.289 129.18 li
433.17 145.813 li
443.898 163.167 li
453.331 181.167 li
461.611 199.744 li
468.523 218.753 li
474.284 238.123 li
478.676 257.852 li
481.916 277.796 li
483.788 297.958 li
484.437 318.118 li
483.788 338.279 li
481.916 358.44 li
478.676 378.386 li
474.284 398.114 li
468.523 417.483 li
461.611 436.492 li
453.331 455.069 li
443.898 473.07 li
433.17 490.424 li
421.289 507.057 li
408.112 522.825 li
393.784 537.729 li
378.231 551.555 li
361.598 564.3 li
343.741 575.747 li
324.876 585.9 li
304.931 594.54 li
292.474 599.004 li
275.482 599.004 mo
263.025 594.54 li
243.08 585.9 li
224.215 575.747 li
206.358 564.3 li
189.725 551.555 li
174.172 537.729 li
159.844 522.825 li
146.667 507.057 li
134.786 490.424 li
124.058 473.07 li
114.625 455.069 li
106.345 436.492 li
99.4331 417.483 li
93.6719 398.114 li
89.2803 378.386 li
86.04 358.44 li
84.168 338.279 li
83.52 318.118 li
84.168 297.958 li
86.04 277.796 li
89.2803 257.852 li
93.6719 238.123 li
99.4331 218.753 li
106.345 199.744 li
114.625 181.167 li
124.058 163.167 li
134.786 145.813 li
146.667 129.18 li
159.844 113.412 li
174.172 98.5073 li
189.725 84.6826 li
206.358 71.9385 li
224.215 60.4893 li
243.08 50.3364 li
263.025 41.6963 li
275.482 37.2324 li
291.466 37.9521 mo
302.411 43.2803 li
319.764 53.3613 li
336.037 64.5933 li
351.23 76.9063 li
365.342 90.2983 li
378.447 104.555 li
390.472 119.604 li
401.416 135.445 li
411.281 151.935 li
420.137 168.926 li
427.985 186.496 li
434.682 204.496 li
440.442 222.857 li
445.122 241.578 li
448.722 260.516 li
451.315 279.596 li
452.899 298.821 li
453.403 318.118 li
452.899 337.415 li
451.315 356.641 li
448.722 375.722 li
445.122 394.658 li
440.442 413.379 li
434.682 431.74 li
427.985 449.741 li
420.137 467.311 li
411.281 484.304 li
401.416 500.791 li
390.472 516.633 li
378.447 531.682 li
365.342 545.938 li
351.23 559.33 li
336.037 571.644 li
319.764 582.876 li
302.411 592.956 li
291.466 598.284 li
276.49 598.284 mo
265.545 592.956 li
248.192 582.876 li
231.92 571.644 li
216.727 559.33 li
202.614 545.938 li
189.509 531.682 li
177.485 516.633 li
166.54 500.791 li
156.676 484.304 li
147.819 467.311 li
139.971 449.741 li
133.274 431.74 li
127.514 413.379 li
122.834 394.658 li
119.234 375.722 li
116.642 356.641 li
115.058 337.415 li
114.553 318.118 li
115.058 298.821 li
116.642 279.596 li
119.234 260.516 li
122.834 241.578 li
127.514 222.857 li
133.274 204.496 li
139.971 186.496 li
147.819 168.926 li
156.676 151.935 li
166.54 135.445 li
177.485 119.604 li
189.509 104.555 li
202.614 90.2983 li
216.727 76.9063 li
231.92 64.5933 li
248.192 53.3613 li
265.545 43.2803 li
276.49 37.9521 li
290.242 38.5283 mo
299.387 44.7202 li
313.716 55.8813 li
327.036 67.9775 li
339.421 81.0103 li
350.942 94.8354 li
361.454 109.38 li
371.103 124.572 li
379.887 140.341 li
387.735 156.687 li
394.792 173.463 li
400.984 190.672 li
406.313 208.24 li
410.849 226.098 li
414.521 244.17 li
417.401 262.531 li
419.489 280.964 li
420.713 299.542 li
421.073 318.118 li
420.713 336.695 li
419.489 355.272 li
417.401 373.705 li
414.521 392.066 li
410.849 410.14 li
406.313 427.996 li
400.984 445.565 li
394.792 462.773 li
387.735 479.551 li
379.887 495.896 li
371.103 511.664 li
361.454 526.857 li
350.942 541.401 li
339.421 555.227 li
327.036 568.26 li
313.716 580.355 li
299.387 591.517 li
290.242 597.708 li
277.714 597.708 mo
268.569 591.517 li
254.241 580.355 li
240.92 568.26 li
228.535 555.227 li
217.015 541.401 li
206.502 526.857 li
196.854 511.664 li
188.069 495.896 li
180.221 479.551 li
173.164 462.773 li
166.972 445.565 li
161.644 427.996 li
157.108 410.14 li
153.435 392.066 li
150.555 373.705 li
148.467 355.272 li
147.243 336.695 li
146.883 318.118 li
147.243 299.542 li
148.467 280.964 li
150.555 262.531 li
153.435 244.17 li
157.108 226.098 li
161.644 208.24 li
166.972 190.672 li
173.164 173.463 li
180.221 156.687 li
188.069 140.341 li
196.854 124.572 li
206.502 109.38 li
217.015 94.8354 li
228.535 81.0103 li
240.92 67.9775 li
254.241 55.8813 li
268.569 44.7202 li
277.714 38.5283 li
288.874 39.0322 mo
295.859 45.8003 li
306.947 57.8252 li
317.1 70.6426 li
326.532 84.1782 li
335.245 98.2915 li
343.165 113.052 li
350.438 128.316 li
400.189 240.827 400.189 395.409 350.438 507.92 cv
343.165 523.186 li
335.245 537.945 li
326.532 552.059 li
317.1 565.596 li
306.947 578.411 li
295.859 590.437 li
288.874 597.204 li
279.082 597.204 mo
272.098 590.437 li
261.009 578.411 li
250.856 565.596 li
241.424 552.059 li
232.712 537.945 li
224.791 523.186 li
217.519 507.92 li
167.767 395.408 167.767 240.828 217.519 128.316 cv
224.791 113.052 li
232.712 98.2915 li
241.424 84.1782 li
250.856 70.6426 li
261.009 57.8252 li
272.098 45.8003 li
279.082 39.0322 li
287.29 39.3203 mo
292.114 46.5923 li
299.603 59.2656 li
306.515 72.5142 li
322.792 106.293 333.259 142.48 340.646 179.151 cv
349.557 224.911 353.593 271.519 353.606 318.118 cv
353.576 358.941 350.514 400.05 343.669 440.309 cv
336.574 482.388 325.063 525.17 306.515 563.724 cv
299.603 576.972 li
292.114 589.645 li
287.29 596.916 li
280.666 596.916 mo
275.842 589.645 li
268.353 576.972 li
261.441 563.724 li
245.165 529.945 234.696 493.754 227.311 457.085 cv
218.399 411.324 214.364 364.72 214.35 318.118 cv
214.38 277.295 217.442 236.188 224.287 195.928 cv
231.381 153.85 242.894 111.066 261.441 72.5142 cv
268.353 59.2656 li
275.842 46.5923 li
280.666 39.3203 li
285.634 39.5361 mo
298.877 79.4194 305.796 122.596 310.692 164.246 cv
316.467 215.145 318.934 266.903 318.9 318.118 cv
318.934 369.333 316.467 421.094 310.692 471.99 cv
305.796 513.641 298.877 556.817 285.634 596.7 cv
282.322 596.7 mo
269.08 556.818 262.16 513.64 257.265 471.99 cv
251.489 421.094 249.023 369.333 249.056 318.118 cv
249.023 266.903 251.489 215.144 257.265 164.246 cv
262.16 122.596 269.08 79.4185 282.322 39.5361 cv
283.978 34.8042 mo
283.978 601.864 li
@
0.2 lw
293.843 34.7842 mo
293.315 41.1992 274.641 41.1992 274.114 34.7842 cv
303.779 35.3604 mo
301.87 47.7773 266.086 47.7773 264.177 35.3604 cv
313.644 36.2246 mo
310.365 54.3784 257.591 54.3784 254.313 36.2246 cv
323.437 37.3765 mo
318.946 60.9575 249.01 60.9575 244.52 37.3765 cv
333.229 38.9604 mo
326.773 67.5313 241.183 67.5313 234.728 38.9604 cv
342.949 40.8325 mo
334.465 74.1094 233.492 74.1104 225.007 40.8325 cv
352.526 43.0645 mo
342.001 80.6772 225.955 80.6772 215.431 43.0645 cv
362.103 45.6563 mo
349.136 87.2314 218.82 87.2314 205.854 45.6563 cv
371.607 48.5361 mo
355.964 93.7705 211.991 93.7705 196.35 48.5361 cv
380.967 51.7041 mo
362.825 100.339 205.131 100.339 186.989 51.7041 cv
390.184 55.3052 mo
369.062 106.844 198.895 106.844 177.773 55.3052 cv
399.256 59.1211 mo
375.538 113.375 192.419 113.375 168.7 59.1211 cv
408.256 63.2974 mo
381.467 119.854 186.489 119.854 159.7 63.2974 cv
417.041 67.8335 mo
413.945 72.8022 li
376.458 124.661 191.498 124.661 154.012 72.8022 cv
150.915 67.8335 li
425.681 72.5864 mo
422.225 77.7705 li
381.623 131.04 186.334 131.041 145.731 77.7705 cv
142.275 72.5864 li
434.178 77.6982 mo
430.29 83.0986 li
386.033 137.422 181.923 137.422 137.667 83.0986 cv
133.778 77.6982 li
442.53 83.0986 mo
438.21 88.6426 li
433.026 93.7554 li
379.931 142.028 188.025 142.028 134.93 93.7554 cv
129.746 88.6426 li
125.426 83.0986 li
450.595 88.7861 mo
445.842 94.4033 li
440.298 99.6592 li
383.748 148.354 184.208 148.354 127.658 99.6592 cv
122.114 94.4033 li
117.362 88.7861 li
458.515 94.7632 mo
453.331 100.523 li
447.354 105.779 li
387.367 154.668 180.589 154.668 120.602 105.779 cv
114.625 100.523 li
109.441 94.7632 li
466.219 100.956 mo
460.603 106.787 li
454.195 112.188 li
432.646 127.741 405.619 135.232 379.887 140.341 cv
348.382 146.43 316.029 148.592 283.978 148.694 cv
251.928 148.593 219.575 146.43 188.069 140.341 cv
162.333 135.23 135.314 127.743 113.761 112.188 cv
107.353 106.787 li
101.737 100.956 li
473.636 107.436 mo
467.66 113.34 li
460.819 118.74 li
438.47 134.215 409.508 141.78 383.127 146.821 cv
350.624 152.791 316.997 155.025 283.978 155.03 cv
250.959 155.025 217.332 152.792 184.829 146.821 cv
158.448 141.78 129.486 134.215 107.137 118.74 cv
100.297 113.34 li
94.3208 107.436 li
480.908 114.204 mo
474.5 120.108 li
467.155 125.508 li
443.987 140.74 413.246 148.542 386.223 153.375 cv
352.479 159.176 318.191 161.414 283.978 161.51 cv
249.766 161.414 215.477 159.176 181.733 153.375 cv
154.711 148.542 123.968 140.74 100.801 125.508 cv
93.457 120.108 li
87.0479 114.204 li
487.892 121.188 mo
481.052 127.092 li
458.722 143.989 428.415 152.356 401.344 157.767 cv
363.407 165.216 322.61 167.889 283.978 167.918 cv
249.23 167.953 213.008 165.636 178.709 159.999 cv
147.879 154.588 112.332 146.273 86.9038 127.092 cv
80.064 121.188 li
494.661 128.46 mo
487.388 134.293 li
479.252 139.621 li
453.052 154.753 421.656 161.868 392.056 166.694 cv
356.327 172.351 320.12 174.345 283.978 174.471 cv
247.836 174.345 211.629 172.351 175.9 166.694 cv
146.301 161.868 114.904 154.753 88.7041 139.621 cv
80.5679 134.293 li
73.2949 128.46 li
501.141 135.877 mo
493.437 141.709 li
484.868 146.965 li
457.69 161.718 425.125 168.775 394.792 173.463 cv
358.129 178.947 321.019 180.847 283.978 181.023 cv
246.937 180.847 209.828 178.947 173.164 173.463 cv
142.832 168.776 110.266 161.718 83.0879 146.965 cv
74.519 141.709 li
66.8149 135.877 li
507.333 143.582 mo
499.269 149.271 li
490.269 154.454 li
462.256 168.896 428.358 175.726 397.384 180.303 cv
359.748 185.521 321.957 187.623 283.978 187.576 cv
245.999 187.623 208.208 185.521 170.572 180.303 cv
139.598 175.726 105.701 168.896 77.688 154.454 cv
68.687 149.271 li
60.623 143.582 li
513.31 151.502 mo
504.813 157.046 li
477.994 172.778 443.718 180.237 413.297 185.199 cv
370.933 191.792 326.831 194.229 283.978 194.2 cv
245.294 194.302 206.501 192.142 168.124 187.215 cv
133.532 182.243 93.6392 174.856 63.1431 157.046 cv
54.647 151.502 li
518.998 159.566 mo
510.069 165.039 li
482.063 180.228 447.159 187.517 415.889 192.256 cv
372.585 198.532 327.716 200.876 283.978 200.896 cv
244.799 200.917 204.71 198.936 165.82 194.128 cv
128.935 189.17 91.1211 182.646 57.8872 165.039 cv
48.958 159.566 li
524.398 167.918 mo
515.11 173.175 li
485.907 187.785 450.555 194.823 418.409 199.313 cv
374.136 205.447 328.652 207.56 283.978 207.592 cv
243.798 207.625 203.589 205.762 163.66 201.185 cv
126.804 196.562 86.3701 189.866 52.8462 173.175 cv
43.5581 167.918 li
529.511 176.416 mo
497.42 194.417 456.776 201.516 420.713 206.512 cv
375.521 212.258 329.515 214.289 283.978 214.361 cv
238.441 214.289 192.436 212.258 147.243 206.512 cv
111.18 201.516 70.5361 194.417 38.4458 176.416 cv
534.263 185.055 mo
501.15 202.18 459.542 209.033 422.873 213.713 cv
376.803 219.146 330.347 221.075 283.978 221.129 cv
237.609 221.075 191.153 219.146 145.083 213.713 cv
108.415 209.033 66.8071 202.18 33.6929 185.055 cv
538.799 193.84 mo
504.56 210.137 462.225 216.542 424.817 220.914 cv
378.139 226.198 330.929 227.753 283.978 227.969 cv
237.027 227.753 189.817 226.198 143.139 220.914 cv
105.731 216.542 63.396 210.137 29.1572 193.84 cv
542.975 202.84 mo
507.306 218.187 465.063 224.051 426.689 228.258 cv
379.356 233.098 331.542 234.687 283.978 234.738 cv
236.414 234.687 188.601 233.098 141.267 228.258 cv
102.893 224.051 60.6489 218.187 24.981 202.84 cv
546.791 211.914 mo
510 226.384 467.552 231.61 428.418 235.603 cv
380.403 240.014 332.182 241.597 283.978 241.65 cv
235.774 241.597 187.553 240.014 139.539 235.603 cv
100.404 231.61 57.9561 226.384 21.165 211.914 cv
550.392 221.129 mo
512.551 234.451 469.807 239.387 430.001 242.946 cv
381.541 247.032 332.603 248.476 283.978 248.491 cv
235.355 248.476 186.415 247.032 137.955 242.946 cv
98.1489 239.387 55.4053 234.451 17.5649 221.129 cv
553.56 230.49 mo
542.039 233.946 li
529.943 236.97 li
517.271 239.634 li
504.021 242.01 li
480.073 245.866 455.559 248.594 431.37 250.363 cv
382.469 254.104 333.015 255.356 283.978 255.403 cv
234.941 255.356 185.487 254.104 136.586 250.363 cv
121.25 249.139 li
106.345 247.626 li
91.7998 245.97 li
77.6162 244.098 li
56.3892 241.045 34.8179 237.154 14.397 230.49 cv
556.44 239.994 mo
516.725 251.003 473.666 254.795 432.665 257.852 cv
383.101 261.072 333.64 262.314 283.978 262.315 cv
234.316 262.314 184.855 261.072 135.29 257.852 cv
94.29 254.795 51.2319 251.003 11.5161 239.994 cv
559.032 249.571 mo
518.367 259.243 475.384 262.646 433.746 265.34 cv
383.959 268.15 333.842 269.3 283.978 269.228 cv
234.114 269.3 183.997 268.15 134.21 265.34 cv
92.5723 262.646 49.5889 259.243 8.92383 249.571 cv
561.264 259.147 mo
520.215 267.623 476.566 270.457 434.754 272.828 cv
384.514 275.3 334.274 276.176 283.978 276.212 cv
233.682 276.176 183.443 275.3 133.202 272.828 cv
91.3901 270.457 47.7412 267.623 6.69189 259.147 cv
563.136 268.867 mo
521.212 276.1 477.997 278.303 435.546 280.316 cv
385.053 282.439 334.512 283.131 283.978 283.196 cv
233.445 283.131 182.903 282.439 132.41 280.316 cv
89.96 278.303 46.7441 276.1 4.81982 268.867 cv
564.72 278.66 mo
522.303 284.395 478.944 286.259 436.194 287.877 cv
385.463 289.585 334.733 290.064 283.978 290.181 cv
233.223 290.064 182.493 289.585 131.762 287.877 cv
89.0122 286.259 45.6528 284.395 3.23584 278.66 cv
565.872 288.453 mo
523.074 292.864 479.694 294.249 436.698 295.438 cv
385.802 296.736 334.889 297.026 283.978 297.166 cv
233.067 297.026 182.155 296.736 131.258 295.438 cv
88.2622 294.249 44.8818 292.864 2.08398 288.453 cv
566.737 298.317 mo
523.669 301.266 480.286 302.188 437.13 302.998 cv
386.073 303.774 335.04 304.155 283.978 304.149 cv
232.916 304.155 181.883 303.774 130.826 302.998 cv
87.6699 302.188 44.2871 301.266 1.22021 298.317 cv
567.313 308.253 mo
472.953 311.082 378.378 310.882 283.978 311.134 cv
189.578 310.882 95.0039 311.082 0.644043 308.253 cv
567.457 318.118 mo
378.471 318.118 189.485 318.118 0.5 318.118 cv
567.313 327.983 mo
472.953 325.156 378.378 325.354 283.978 325.103 cv
189.578 325.354 95.0039 325.156 0.644043 327.983 cv
566.737 337.919 mo
523.669 334.972 480.286 334.05 437.13 333.239 cv
386.073 332.462 335.04 332.081 283.978 332.087 cv
232.916 332.081 181.883 332.462 130.826 333.239 cv
87.6699 334.05 44.2871 334.972 1.22021 337.919 cv
565.872 347.783 mo
523.074 343.373 479.693 341.989 436.698 340.8 cv
385.802 339.5 334.889 339.211 283.978 339.071 cv
233.067 339.211 182.155 339.5 131.258 340.8 cv
88.2632 341.989 44.8818 343.373 2.08398 347.783 cv
564.72 357.576 mo
522.303 351.843 478.944 349.978 436.194 348.36 cv
385.463 346.651 334.733 346.174 283.978 346.056 cv
233.223 346.174 182.493 346.651 131.762 348.36 cv
89.0122 349.978 45.6538 351.843 3.23584 357.576 cv
563.136 367.369 mo
521.212 360.138 477.997 357.934 435.546 355.92 cv
385.053 353.799 334.512 353.105 283.978 353.04 cv
233.445 353.105 182.903 353.799 132.41 355.92 cv
89.96 357.934 46.7441 360.138 4.81982 367.369 cv
561.264 377.089 mo
520.215 368.614 476.566 365.781 434.754 363.408 cv
384.514 360.937 334.274 360.062 283.978 360.024 cv
233.682 360.062 183.443 360.937 133.202 363.408 cv
91.3911 365.781 47.7412 368.614 6.69189 377.089 cv
559.032 386.665 mo
518.368 376.994 475.384 373.592 433.746 370.897 cv
383.959 368.086 333.842 366.937 283.978 367.01 cv
234.114 366.937 183.997 368.086 134.21 370.897 cv
92.5732 373.592 49.5889 376.994 8.92383 386.665 cv
556.44 396.242 mo
516.724 385.233 473.667 381.441 432.665 378.386 cv
383.101 375.164 333.641 373.923 283.978 373.921 cv
234.316 373.923 184.855 375.164 135.29 378.386 cv
94.29 381.441 51.2319 385.233 11.5161 396.242 cv
553.56 405.747 mo
542.039 402.29 li
529.943 399.267 li
517.271 396.603 li
504.021 394.227 li
480.073 390.371 455.559 387.643 431.37 385.873 cv
382.47 382.133 333.015 380.88 283.978 380.833 cv
234.941 380.88 185.486 382.133 136.586 385.873 cv
121.25 387.098 li
106.345 388.61 li
91.7998 390.267 li
77.6162 392.139 li
56.3901 395.191 34.8169 399.082 14.397 405.747 cv
550.392 415.107 mo
512.552 401.786 469.807 396.849 430.001 393.29 cv
381.542 389.204 332.603 387.763 283.978 387.746 cv
235.355 387.763 186.415 389.204 137.955 393.29 cv
98.1499 396.849 55.4053 401.786 17.5649 415.107 cv
546.791 424.323 mo
510 409.854 467.551 404.626 428.418 400.635 cv
380.402 396.224 332.182 394.64 283.978 394.586 cv
235.774 394.64 187.554 396.223 139.539 400.635 cv
100.405 404.626 57.9561 409.854 21.165 424.323 cv
542.975 433.396 mo
507.307 418.051 465.063 412.186 426.689 407.979 cv
379.356 403.139 331.542 401.551 283.978 401.498 cv
236.414 401.551 188.601 403.139 141.267 407.979 cv
102.894 412.186 60.6479 418.052 24.981 433.396 cv
538.799 442.396 mo
504.56 426.1 462.225 419.694 424.817 415.323 cv
378.14 410.038 330.928 408.483 283.978 408.268 cv
237.028 408.483 189.817 410.038 143.139 415.323 cv
105.731 419.694 63.396 426.1 29.1572 442.396 cv
534.263 451.182 mo
501.149 434.057 459.542 427.203 422.873 422.523 cv
376.802 417.092 330.348 415.161 283.978 415.107 cv
237.608 415.161 191.154 417.092 145.083 422.523 cv
108.414 427.203 66.8071 434.057 33.6929 451.182 cv
529.511 459.894 mo
497.766 441.841 456.504 434.691 420.713 429.725 cv
375.521 423.979 329.515 421.948 283.978 421.875 cv
238.441 421.948 192.437 423.979 147.243 429.725 cv
111.452 434.691 70.1899 441.841 38.4458 459.894 cv
524.398 468.318 mo
515.11 463.062 li
485.908 448.451 450.555 441.413 418.409 436.925 cv
374.136 430.79 328.652 428.678 283.978 428.645 cv
243.798 428.611 203.589 430.475 163.66 435.053 cv
126.804 439.676 86.3691 446.37 52.8462 463.062 cv
43.5581 468.318 li
518.998 476.67 mo
510.069 471.198 li
482.064 456.011 447.158 448.721 415.889 443.981 cv
372.586 437.704 327.715 435.361 283.978 435.341 cv
244.8 435.32 204.71 437.302 165.82 442.108 cv
128.935 447.066 91.1211 453.591 57.8872 471.198 cv
48.958 476.67 li
513.31 484.735 mo
504.813 479.19 li
477.996 463.458 443.716 455.999 413.297 451.037 cv
370.933 444.445 326.831 442.009 283.978 442.036 cv
245.295 441.935 206.5 444.096 168.124 449.021 cv
133.533 453.992 93.6382 461.382 63.1431 479.19 cv
54.647 484.735 li
507.333 492.655 mo
499.269 486.968 li
490.269 481.782 li
462.255 467.341 428.359 460.513 397.384 455.934 cv
359.747 450.717 321.958 448.615 283.978 448.661 cv
245.998 448.615 208.209 450.717 170.572 455.934 cv
139.597 460.513 105.702 467.341 77.688 481.782 cv
68.687 486.968 li
60.623 492.655 li
501.141 500.359 mo
493.437 494.527 li
484.868 489.271 li
457.691 474.519 425.125 467.46 394.792 462.773 cv
358.129 457.289 321.019 455.39 283.978 455.214 cv
246.937 455.39 209.828 457.289 173.164 462.773 cv
142.832 467.46 110.265 474.519 83.0879 489.271 cv
74.519 494.527 li
66.8149 500.359 li
494.661 507.776 mo
487.388 501.943 li
479.252 496.615 li
453.051 481.482 421.656 474.369 392.056 469.542 cv
356.327 463.888 320.12 461.892 283.978 461.766 cv
247.836 461.892 211.629 463.888 175.9 469.542 cv
146.301 474.369 114.904 481.483 88.7041 496.615 cv
80.5679 501.943 li
73.2949 507.776 li
487.892 515.049 mo
481.052 509.145 li
458.721 492.247 428.417 483.88 401.344 478.471 cv
363.408 471.021 322.609 468.348 283.978 468.318 cv
249.231 468.283 213.008 470.601 178.709 476.238 cv
147.877 481.649 112.333 489.963 86.9038 509.145 cv
80.064 515.049 li
480.908 522.033 mo
474.5 516.128 li
467.155 510.729 li
443.99 495.497 413.244 487.694 386.223 482.863 cv
352.48 477.061 318.191 474.823 283.978 474.727 cv
249.766 474.823 215.477 477.061 181.733 482.863 cv
154.714 487.693 123.965 495.498 100.801 510.729 cv
93.457 516.128 li
87.0479 522.033 li
473.636 528.802 mo
467.66 522.897 li
460.819 517.496 li
438.47 502.021 409.508 494.456 383.127 489.415 cv
350.625 483.446 316.996 481.211 283.978 481.206 cv
250.961 481.211 217.331 483.446 184.829 489.415 cv
158.448 494.456 129.486 502.021 107.137 517.496 cv
100.297 522.897 li
94.3208 528.802 li
466.219 535.281 mo
460.603 529.449 li
454.195 524.05 li
432.649 508.496 405.616 501.003 379.887 495.896 cv
348.38 489.807 316.03 487.645 283.978 487.543 cv
251.927 487.645 219.576 489.807 188.069 495.896 cv
162.339 501.003 135.308 508.496 113.761 524.05 cv
107.353 529.449 li
101.737 535.281 li
458.515 541.474 mo
453.331 535.713 li
447.354 530.457 li
387.389 481.57 180.567 481.57 120.602 530.457 cv
114.625 535.713 li
109.441 541.474 li
450.595 547.45 mo
445.842 541.833 li
440.298 536.577 li
383.747 487.884 184.21 487.884 127.658 536.577 cv
122.114 541.833 li
117.362 547.45 li
442.53 553.139 mo
438.21 547.595 li
433.026 542.481 li
379.93 494.208 188.026 494.208 134.93 542.481 cv
129.746 547.595 li
125.426 553.139 li
434.178 558.538 mo
430.29 553.139 li
386.033 498.814 181.923 498.814 137.667 553.139 cv
133.778 558.538 li
425.681 563.651 mo
422.225 558.467 li
381.623 505.197 186.333 505.197 145.731 558.467 cv
142.275 563.651 li
417.041 568.403 mo
413.945 563.436 li
376.458 511.575 191.498 511.575 154.012 563.436 cv
150.915 568.403 li
408.256 572.939 mo
381.466 516.383 186.489 516.383 159.7 572.939 cv
399.256 577.115 mo
375.539 522.861 192.418 522.861 168.7 577.115 cv
390.184 580.932 mo
369.062 529.393 198.895 529.393 177.773 580.932 cv
380.967 584.532 mo
362.825 535.897 205.131 535.897 186.989 584.532 cv
371.607 587.7 mo
355.96 542.466 211.996 542.467 196.35 587.7 cv
362.103 590.58 mo
349.136 549.005 218.82 549.007 205.854 590.58 cv
352.526 593.173 mo
342.001 555.56 225.955 555.56 215.431 593.173 cv
342.949 595.404 mo
334.465 562.127 233.491 562.126 225.007 595.404 cv
333.229 597.276 mo
326.773 568.705 241.183 568.706 234.728 597.276 cv
323.437 598.86 mo
318.946 575.279 249.01 575.279 244.52 598.86 cv
313.644 600.014 mo
310.366 581.858 257.59 581.858 254.313 600.014 cv
303.779 600.876 mo
301.87 588.459 266.087 588.459 264.177 600.876 cv
293.843 601.453 mo
293.315 595.037 274.641 595.037 274.114 601.453 cv
283.978 601.597 mo
283.978 601.597 li
@
0.8 lw
333.229 38.9604 mo
326.773 67.5313 241.183 67.5313 234.728 38.9604 cv
380.967 51.7041 mo
362.825 100.339 205.131 100.339 186.989 51.7041 cv
425.681 72.5864 mo
422.225 77.7705 li
381.623 131.04 186.334 131.041 145.731 77.7705 cv
142.275 72.5864 li
466.219 100.956 mo
460.603 106.787 li
454.195 112.188 li
432.646 127.741 405.619 135.232 379.887 140.341 cv
348.382 146.43 316.029 148.592 283.978 148.694 cv
251.928 148.593 219.575 146.43 188.069 140.341 cv
162.333 135.23 135.314 127.743 113.761 112.188 cv
107.353 106.787 li
101.737 100.956 li
501.141 135.877 mo
493.437 141.709 li
484.868 146.965 li
457.69 161.718 425.125 168.775 394.792 173.463 cv
358.129 178.947 321.019 180.847 283.978 181.023 cv
246.937 180.847 209.828 178.947 173.164 173.463 cv
142.832 168.776 110.266 161.718 83.0879 146.965 cv
74.519 141.709 li
66.8149 135.877 li
529.511 176.416 mo
497.42 194.417 456.776 201.516 420.713 206.512 cv
375.521 212.258 329.515 214.289 283.978 214.361 cv
238.441 214.289 192.436 212.258 147.243 206.512 cv
111.18 201.516 70.5361 194.417 38.4458 176.416 cv
550.392 221.129 mo
512.551 234.451 469.807 239.387 430.001 242.946 cv
381.541 247.032 332.603 248.476 283.978 248.491 cv
235.355 248.476 186.415 247.032 137.955 242.946 cv
98.1489 239.387 55.4053 234.451 17.5649 221.129 cv
563.136 268.867 mo
521.212 276.1 477.997 278.303 435.546 280.316 cv
385.053 282.439 334.512 283.131 283.978 283.196 cv
233.445 283.131 182.903 282.439 132.41 280.316 cv
89.96 278.303 46.7441 276.1 4.81982 268.867 cv
567.161 318.118 mo
378.402 318.118 189.643 318.118 0.885254 318.118 cv
563.136 367.369 mo
521.212 360.138 477.997 357.934 435.546 355.92 cv
385.053 353.799 334.512 353.105 283.978 353.04 cv
233.445 353.105 182.903 353.799 132.41 355.92 cv
89.96 357.934 46.7441 360.138 4.81982 367.369 cv
550.392 415.107 mo
512.552 401.786 469.807 396.849 430.001 393.29 cv
381.542 389.204 332.603 387.763 283.978 387.746 cv
235.355 387.763 186.415 389.204 137.955 393.29 cv
98.1499 396.849 55.4053 401.786 17.5649 415.107 cv
529.511 459.894 mo
497.766 441.841 456.504 434.691 420.713 429.725 cv
375.521 423.979 329.515 421.948 283.978 421.875 cv
238.441 421.948 192.437 423.979 147.243 429.725 cv
111.452 434.691 70.1899 441.841 38.4458 459.894 cv
501.141 500.359 mo
493.437 494.527 li
484.868 489.271 li
457.691 474.519 425.125 467.46 394.792 462.773 cv
358.129 457.289 321.019 455.39 283.978 455.214 cv
246.937 455.39 209.828 457.289 173.164 462.773 cv
142.832 467.46 110.265 474.519 83.0879 489.271 cv
74.519 494.527 li
66.8149 500.359 li
466.219 535.281 mo
460.603 529.449 li
454.195 524.05 li
432.649 508.496 405.616 501.003 379.887 495.896 cv
348.38 489.807 316.03 487.645 283.978 487.543 cv
251.927 487.645 219.576 489.807 188.069 495.896 cv
162.339 501.003 135.308 508.496 113.761 524.05 cv
107.353 529.449 li
101.737 535.281 li
425.681 563.651 mo
422.225 558.467 li
381.623 505.197 186.333 505.197 145.731 558.467 cv
142.275 563.651 li
380.967 584.532 mo
362.825 535.897 205.131 535.897 186.989 584.532 cv
333.229 597.276 mo
326.773 568.705 241.183 568.706 234.728 597.276 cv
@
0.2 lw
283.978 601.597 mo
283.978 601.597 li
@
%ADOBeginSubsetFont: AvantGardeITCbyBT-Book Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /AvantGardeITCbyBT-Book def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 78 /N putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private15 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604583 def/StdHW [67] def/StdVW [88] def/StemSnapH [67] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F872B2DD35BA9F526AA31403949B904F2FBFFA219269CB793CC5D4E2B92EAFFDD1A748A3F84A703B249550493724F424782ACE69D75F53E9659B9B2838FB0059CC29141042064D2E7FC418574> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/QERTCH+AvantGardeITCbyBT-Book /AvantGardeITCbyBT-Book findfont ct_VMDictPut/QERTCH+AvantGardeITCbyBT-Book*1 [78{/.notdef}rp /N 177{/.notdef}rp]QERTCH+AvantGardeITCbyBT-Book nfQERTCH+AvantGardeITCbyBT-Book*1 [23.9997 0 0 -23.9997 0 0 ]msf276.064 20.0879 mo(N)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/QERTCH+AvantGardeITCbyBT-Book*1 uf/QERTCH+AvantGardeITCbyBT-Book uf/AvantGardeITCbyBT-Book ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (equal.eps)%%CreationDate: 2/7/08 6:42 PM%AI9_DataStream%Gb!j.k?8hNdQ"`qTR.59A>I<JgL)09@)-05_#Z)PJ;fS#L#4n>5O>dr<VLU(Ues*uhZ'bW!7FP:GBN#Im[>aB[bHGcA#&_0h>[.<%hU(l*mcJ@nbI`Lp.hq[rBD#T08Q#(qCf[o[$efoU;6u4oX8>?+eh),[Vu8;oX1.r'h=a4Lf;l9Jm;?he?hmoAjc=3'E2T#:WAg=6%J*"//[>.iJO_VMYLSj0_C9@JAXnu3b\>\3_h7d"KDR\_NkCZO-fr.+FBjX'.n#D@Z^"VngebXQA'X-c@h=dMhI/H*O]<?E;ns4"K%Ab1pIHJ&B3!F#Cp0-@PBRY/ZW.DT,:4EuM54hTb1OjE4`INOXR;!7o;g"s/"m>\bJr\&[aX$8OhrGJapBX`FCduH*HDk1LB?RLXe%25b-N:#EtJicEHZ-:(i"?Ja+\5ZZ`a"/lC7li/g,s4RGm5;ZRBG41,[kd9kF0i@B4cPuldF)uGrQZ(6OB7jg0HeE-V*m#_#5'G_1%X>e7sJnM./)U=L@8/K$TK8Wq-\_[R/Bf?8Va,Ra0"h+KX8%$,)DD14u^H:]0>8QZW!q!R1q#CkIVVA\MpFS1>32CmKn(PT;3Z0FJ%"s:m@=g'G#rY.nCdVV**=rRK9mbM3YnL2K=)L7DC,%)3Ml,RF$'L%n!^L(m_n,g@(N^Z1$<]iRD"'iJ=$aj^Y`04WGO-fS@Q>N:;%CT#ae!Cep[-F7(ZGCKF-+8JBYJ#8(;*=%)k55q]afN$D=^SZj39bZua-G<Wcim[NKa2(f:KARXR><*2%Eh$m0p$)A+`qQ`t&-)-5%hoAd3O0.mbrl/!($FZs6nB"9+mo1dhVHUsNeZ.Zfe(#r)Y?'mD'OhD&Knk[Zn)BPt^1l^:p`!GrSFAJG_E"lhdX*qur/GQ47edqc%bqMGU`Aumqr.[#Ehq/U]'C?ZMKYMN`p_U-nS8_/Z9fbJH_Kk*YCf@Iq2+A[@SDooFO^\WHdjOD(.J+<t$6(!++_NW@/a,E8L%E4>%fFt)(SMe)N.>E>W(!_k;Qstb5Mt=jDp^Lk+l&WS.jELiX@k4&krh`Yj>XIsQa2\c0%j9qlIi-EYHkbo!MW0WSL!H2TO-!;Mkd\!4%7PEJIrPLNQ43![J4+*LBRbl$ZiGWO$q&AKeEC-;:hq/-GQRac8B!OcY7n96-c$5WG$KF$tS8ntu"XY%EVA/J53f8&@0#\brc7$Ql%7Ua><CinAmI@f;ns!Zr-1+>.\RT&"g*ie9Cj^01uoU/s88ZRq(L*sh7Pe.gj$i\&A"V3=Z(K>!K(3Dft(aeceJIMf6K9qQjqk[*R%\jl\X?`Fk6i1FH)45qplB3Fl=pe1YK$FW[4LqiSSldG7]0E('ZoXj:kZ+](&\P2IJ^\$FW2Z59-dXSgEc47N3rmH;.]C``19E/`(%+4]OF48_h;9#%]NoInG7YUYrEh:_M%<Ptq>h4:iQh/VCPfs;.B:qr@i.Xq!Z)a98UW^qseB:E3XHY!_[EHg1YgSjOR2LKQ7)nf#$%5^NUtMVi,Pp5+6.Xm,HD3de:'RU)e#Zg4]*ej@)#m`MX34-k7)qD8d&5"8QM:mg4Q6ge$te(`h>pnUodI?9lW'/&,VUZ615@)U`r%Z7_2/qduTJk"21VMD*5jqtMugY?Hq$B1[@=@cpS,Ve$iXcTqFY^S4YcX3UtJH\c_M'qIR["o7Ht=:Nh[)#sA<d$sdnW_c/.VE^>_%3cDhPnedTebh[$!i_8.*=@4^:oTlI)o*_<jG[/7@n?f<X9<hlBe+q.J6obbA:"kBd<[ig.@IqfFq.[[U_-^L1AHnpo$JaZkOB&J(%:b4/!ibuV`Oa0kB&EbfUENJJ"C,s&^Cd^Q$n;Stk1Wi_g/-IQJ\uZi=Y<kk"?YgZ/dF#`([+ZnDOV,Ar>8dQE!h9+%2O5E)EB%%\%?\S3bTQ_)R\Ha9&!?Z#DqRLcW:f@iIGPp[;eaML3<==[s<BLTC)EUpU&FC%MLT4A7^.5Rg*BTk=i\[rm4+m*L'LI[kUF[Z"4t6CD%B]KHSg&;>9`SD\633kH([02sXJIo"(@H`u*m-)+Hdh.u?ppg[E&ic6S[oD(7AWB%?"BLQ(21(e6A9a,C4fQja/7VO@BA_t&<,41Z%Ugm%;cLikVBd#*?#j=FF7:kit`Gh'mfY>4<*6r%?`+P5b6c#>u3"<lmJc4`^4*]Tk9/#lW=HB2ABN[732:@t-.sX93\jgZ`qcr)?%W;M0h/6N<ZY)?afco\e'i"T0XD1bH;^<>l$C2Gt,.\']l_l$d0Ym>It:1i:Xp.=n0a*\+IIRU*#/9?u^OXXb?;A."nnM3o1&`tt=%o@X/@*LUCK50iaSIS62I7eD=$0b0Pjr/FZM-Zbj!,ZO@*>fPrQR;"mBmKtT1e&aA5A-is`VV#2i`t@2OJ==bF3`cB*N2J&JDO8H^%Rjl=GO:+N0)&$J$JuNV(k>aucPp6APFOV\U1'VrG&n\058e_dccC$R^eoAQj"K8E;gU"fsYi%>Z1J$0I9q45-:dp\nMO]F`MpI2,%aLk[J"0_q!=q*jDoT[Ke>XE!0_abBF<^_RVe#-1u/\=l)AI24\P&uVuCocjI$[ii"&;l-5;.iuma\U$`Sq()(43T/4=@9mC\-:j"%URF^acX+RYe<Yc;U6K'>6CtZ(Kk5pBeUmV_SBnWt"q/Ht8bt@U-=K:'-onBhV!g53*d36T8X$r7bp7'n`c[Gg0]Zq&%uK/#[td-K%\]1a%O)lVmTe`Kc).Jio/O(//U4eEm9Wpm-"T;)BP.8`$XDm[9j;W&E6Z!Xe2i>'^B]NH%B#@_MofU8l5]?Es$/Z2O<sb\O;/r7T%\V^O$&jH6WB>at6/RcbtR1(^O[S2H15ND?7[kJ^)@tL5OOhSVcN!1,\M&*%fe%HRj*ltf@Y"!63/*m>DO3C'9KHa&81hA)U&TE`6%Z(`lqTeqD1'Ck<$lP.m+Wb*I,\(*3E%]7l(D%16ZipmS!Z5ETTk9J#\+[a76e_JZ/<gA&3R<k]':FNcA-kA+@;-6_MGBW*:;=,n0%/Q'`X3R:lfmOAWu@QNIC=3ZRJ8>`-Y'YP9EdLa_SplTDbBV_kuQ+35Kl0\g-W:5]e`W6%>LTs5B4S[=Ag,4IP?hLD:e"X62^+(oo%elb2%kq-pGQaI1@KZ..e;CL9r@UI:[s$RXTe".O>Yl<_=4i+$Ja*"D9OL]pW=P;/fYd5oaN2Xe7orYGd&PEe<,KbmN-q.,53=<O<%2$rj!jI=C>QDYH-P^bA>8]lcVGo2%l3(D0c.,Nd'QqN\4#30dTm]0h*%3-al4L/qf\Z%(ZM&NoSF:3_kkT8<A,gg-LAJGlA^U>@S%;%DriY!>gK172()j&1.ip-)H4$e]Xioot)F%CPEJltghsACieJKlq-tQR*TN5Ygc'MD9MtQ>"r]ODqPDq)ll^dW_3Y*7lq1_q9MK%L-63]DTJRm(>DEdVFi9"d;i35`r2157Fc`V3`5:0H^\i"M`BNDEZF^c_V*_bOu4'?=jk1h]=O0;=/:]=?el3%9D5P7.8b=U>%K-=%S4EAikT/[B,Rh`l%Bn"[G`cVWOs4%-KsT,7K2LGOiQ[BHS[qRh7s-EX*O]N_V#>s:#Y.i&B%d0&Sn%U\_Pp+/jUkIgXEnn>+1i0F%_N5O-=sF`mKu'_?GE:GfN9s!<mkTkrZ,Z_1@+J3k6)ClK*neG3r(L>%Mo_3k%N^RG7=3Qo0Gq4\N+/fqXf=+C+p$60pLS_)@kl8!%&Tb+4**-4i%NM*efMX13,jC)anFilE2)Zde;>hb&.1mMPk-'#f8\,BTB+b"0f&:CQNN?=#GW5gRn0h=sWMI$J4FT/Df+Gb0c_JAL%9@-S^H<FgNo9XmdABc3/?Nf74`C+PA9KH0&Q#WCkF49[*4>'&dL/:J?@D5+!(9B!4C>s]l>m"5YAA--/M.Cle=T(1Q:CI,b[YjG>%M!Vdcg(I2*R8RHV+1?ck(/2W1WE)`fC)XcsM%LY'katJ8q^it>/'fAT;2%]k<Q-q9:QP/Z72qI-mOM>53eg4GN1:-e9cV`IFG5Cm%i%H*Tk45=>AB>Jtb$g-lVPKKC.UO!&j%>V5ZIBKb/pUnM'.c+7r%6+X7PVQskoErGiLCdKIGprYVo(;+]qjujW/mJ02(EdWWbOs+%_b(\FJR,O;_W+P]BRHmJjrE"Z@D;u+A=86\&Wm#"XXI[W=SFMqE`ig\!2K;RNhN4T>`H[\.fH*).ch[1PUmbIIe9R^':K@Q2oa7a%oLI2!B%+qD>;_Hmr-JbD&FF%&0V=3WkAuSoGiES9P$a.+GZdg2gSmuHfj7[fYd*<c#qZbtLP1X8ej:-Bb'f0?/ad?DfKe>[1!ZEJ%Q0.Lf.8&qghrP_H/W2CV3%Ti!_,o7DYdK_+(K[m%q-UQ7MPOHb9[ah5nCe:'-.6+fE)%W4UZ$2sU@.:UH2"V9;YcZ!$_a@n@CoaQ%,IiW9AV+,#IZh"Q<@(uae`JX<_H`HjVXT.J)lg9BI&ZHfY"EIZZ;(k^3u,Y5&P99N,[%=Mnk`?[fS4%4nq+OB0AB1W11;JoXV6Da%acQ$F;`YO7qQb:;c\F9kTlifSc_MGa1cVO.2F;6s>pkMEAM0CnbUI_#HqS;<?,a<),r2Afj1+&O;MnpN4<;Js@IBs))W=6/V^r)+%G_mdnc'3lY_5V6%2JZUC'X=^-as/'(?RAT/EnhCi/E4'EP-bEJE(gWh=2J%64"jPQMi:5t25)!0`f+RKP<[C#f#B[LN"gTl.FXP+%?\M!49/TZ#g8&_hZE$75LrO4oAB]sW-f#5GXN9[`lK&@:T_$S5X/=(K3FN@XNlRkYZCVAM#O_+^V(<8>DF"Mu8X%JBC97-(1Xq,d%N3AICFN^iR"%\YJfQgEH.F,L(lpn=];OTo=#&?(gT.sKDn6YbF?<)_B_X4jjYoVt$[eF*cTR@\j%"m)<LB,ei.L.].a6Z'Ljf3RN%Me:i]CqHCgCmbW&4uH6_,5VH&0A&4DDac_j]]=i&06;"gfVp!,cM*ESXAhSL96#OH27g7D`3Z.r]=cG2GA9)\H:6<td:3LW0#k%`%p**Aj#jY?15!/q=ZI^Vn98'Es"@mJ,k#lhI9p[_X^n&)P1a[9I<Rb`:eg(Fn8A#VJG>@(o;J#Gpo'#'Z?*k`E$I('TZrVuK<n<P%%OhFHR]Oa5;LGe`rp6eoh"oN,V*2Z'&lVW^8=Z6o^OrgJAdt:Y32']ccJprlg)kh[me\F[f2O$Nr^;]ju#rp:cN(MAF<?,a\''suu%OWDD\>TUdA'RDgKDC51U_PSeBi'%g^-&S$([u4=IO$2Uhm4)<LOEdk$`-#(gldut5.5cF4opleeb;0^D@WI,uNC4#IXY/?@[SpG>%85VMcVHZ=S+LB8BqBaF-A^4BPe<!`o";O;P&bqi9C`RJl&WCR\Ah)?6-3(4JMLeg7UDt#pmjsb9Z+n4SbX5i'7T<aj1:Qc:-0,pI%rC&]-_'AYGL@<J0'LAoaCkT$W@'3"EnH?1Q6Jn=f49DhiVs6!=MV6fWgICQIS%[#<:;DDqYnLL;`+>PiZo?K1qodsG`ST7O<a]/N%^_!cm68QaS2aea6ALW@8,Nq,RL?PT.a<6OjMZ'CE=c?QqIu\M`<Q_IX?FZ?cNaNUb*3T\E(1Co2B?b+jep*uj$cZU0^m^tB<V;Z@%Sn>5n4LQ*F<,N-q>1po1;o9M&\PN#KBjWKJ?*?lr"u-4K9i?72<3?@G[T3=66PVQFf^Vd-f/Q2VZ-]bMKrcF2q,h9kbF#)jWiS.u%$<BL>LZTVP8WkK06tAuKXb8&9^f+ieQ['ooJHH>!<2GgbFj;bnL;JtBV%K;[qJHU/;h.iI*_bM_#inQ:'Akh5)!ks3SR?A`g5#aZ%Y-8qp)]Gdh5=P3TFt&:0:d'1hBpFP*h+MaL?]KAO@V7:i)^i[@e/h+7Th0p&j6n.!4ZZFH%F6[I@0k#VZ6n]S^J=l[LYn%u3^R>4%VrK3OW#9j'3fE)K]n7_%NE@aBa(1d:@fnihU-uWt+c6Y*+/Zu$6'VY8Q(fuU\K97+L\hd5%\o5Frj^/^g%36?,4((c`lNU]g.M>r%B*P*C-7E>;49ON!QI2d-Q"T!Tb2,9a^X=1apSnAfG*,Pb53t8D5,;VO\'[`H=B2HV',ZJo=>(/6rs\Mp*E>_K[\=\_U+gHjqNYg`%_g#2JLSNit`BDpnqMlS1e87L*..q.""0CnBSARg!a-Q*0oMH'="l]o>ka^lb_7=Aue7(t"_J\ZO?bf/r<SDBdK#A^W2;`,Wh/#=)%Hi,\1F'e;G3k=]>dkCY;[/9N&U\3EDkC'9#go^NRa#Ep]b)_O.([gofjY#=@<?CFdNFoLtg9!LHqXr;"I\Z^@0:f=Z\^DdRU.1X%%88k?Y6_jN4G^F2Vs';X]2Y?e`l26*T?7/P28p0uD?$`m'+)TBm)mi=,C=D*X>,;%#WD2-UC"p)G[a!R8.4>;PF?l<*7+5CT^tV'(%StG?)dN\`oYEp:1hkaYohJM7'HM%Mj-Y2Ijctq;1V,".N)!JVsi/+pHlg_[q=R)&.A3t3qV2'6WDn#97dP(:*[E&,JXnu:r0_"%Y%X`j`Lr_tB9Q;2bN>43cX06N_9hHQa4&<5?"^\(XlD%OFOMmQuDgYKoJ3crncea`68XnOM_iYU1=#1nLTrs\0USE+2W?`d6)h[duc%)u0cpeTe#Mi;rr-;mQqONIp[_!)hG+gAPX^W@tt_9[oQV7L*S_ldR!@V(s>d3FK;RcYf_A4OSNYO@o1)nqSnSTU9iD^<f'c2fYBp%Hu/`05R-1<j#Fg4T:WVO9$uH\[nRtkP/?0)haht%dSg5p*3][,>jB*am71[u6>I`WpU+=u"%^-ke,E!eciY'*Q-'_tmRj+pPV[JC%E4ZfA#P@kDbcV2`d/e*+65uIdrNUX?ck_tT`MMA7-,&u-Pj7o[-0],9Lpu)*(\taKVp/re6m/F!;i/eb?3[Op>'KJeX:>"KL[A.@%[Id:JkAhBN3IK5RrTWaE2gDBAj?LQ,*-p9h;,b*/LGll/G9_SRs6A@72r]9>,s5!rk_Hm#p#6o2*:tNr3e,Nte1^fElFHApUBb8#%f3P]ckc=_$e=,mG.5b:)+?ob=P#*@F8-@5<oboRdI`^iGNj8u&U#2e+*ue!O-(+QKH!tTidqq;Z*^Fd'TZ97]5j7(r9.+ZNk?:'I%qfW8["j0tSpYA`L!tY;kJAV%Q48!4#Q8`n9?u?Ous/EK!lZpCrY]1?/rU0UPgO6\Z=/(1spY=2bgD'%!5_`41+he4?pUPp#]XuYT%!,h1HgOmd;l`$FZ.R1B1lhT"5s!>G9"B"M;kC[RBCS!]j=-":"eEOAMXjL9HmI-d-DtSP(TA9GNAI8qQ(W<6C6).d/hU2-$^>$)c%hsLu#0DUNL]?0#1DfII`bN(.]s5,QN.=%S/d\<+hNYF;UO&YQ@s4<53Xcl8*S,\t)YLL?A&Sp6JL`7K!4s,X<)e#scZdu7:kK-g!%2Zm7sa_pb-"?/qS:/UUF2!a=S_$bN-hV1g(WSMudcpk2+[f36bgDpSkIKcfTrbJXj8a@;:"<-kD,_X7F5\'\nKC<6pT>/l:FTQI\%V+Op_B40b3X]=]La`ZGdWZU/+ctB@NU=XXf2QD1.orYEqlbno-nECs@5C*8^R"nr2YQ_0Cq3'Wc3OIK?>Np4rXe&nCQ-L=eTX!0U%/Urr4MN7.>-GI=NE@kD8^SYr5%X`4I*=NO-cqW,rD>[f*[c<P^[cQ\UCH;)PF"Mn?(VY9K&&7)O^[bG)3</rTQ@FRgf4Uo827OhE%C%$(fYUiT>2[&Sn\69h.q`iP\k-%\'rr`ZG!T<W.K1s4i9JR8_ZT[lBE_Z9K%VRjYe9V2G"S4l.JbPkV40=)6%UfVQH?u2(g@5".%agA8O-Pq%]rolf<FIU1aL)YhnNhAJ%"HdD]#32qeY0gHQBj`n"=)]$<$=-?h4Fi^1ZCclMG9ur'3!6oQLi6Sbrh\MUO,lK6+7$0j%hrU4(r<C*W@so@+;7CNU^+))^CY6#LmFM9ol!b"u9<B7A^k_@/>I9BP0-(%)pg*gJs,/?<mk-3!H?]D=]"N;1CZg+fYgoWNe=$Kj%(9dHFg9j1@BsRf&T(;:K;!`_lXCjdlZi0AsJ'<K^eoL/m40SMc3KZ_U0K3C"o6UEmRDeUjafVI/rWt<QVd^k!r#<'@Aj$O^&#JRk%8V4\H:M*JEVZ14f`p#VpHN!QlIohj4kP0"k=$mc0D'"L8<d+D%b6>]P^Bg)(01]gGl!OIKXmpmD%!p1<_uJu4Qll<-3igl$a`IEM%Kt;d6gT!1ld;6m/rgemEs4_V"*Ok7e6OE@f`af#pbCkJ%s4p7,RShR^BBZF'lF>c6AQl1sIs54l9"*LAPR60Tqqqu)eXu^1A@!gc%Ma$aI_"JG<GMXB_+6qo@_>h+:#8?df#2u]@Y<@Ij1asFDKQ,-u#0DWOga+ht.iRI+nq!t,ftDd.f>_;0oCoc'6.RFi_JG3'E;@;q%+4kimq6M!Bpbr,,UjqspoYAuE?X"(p[Kld/1JMKp`Fi;-(LR;kYBBa:m996=s+"`"k)FbT7BNGaJ8m@.GG)!Y5TJN:mH!-s4>)(o%D0sTK5I;jEg5oM2]<t\C;Zd5Kp^70_*qR(bs3rj!5n#raWAGu.+iJ*(hQ(l#WTPr"s6f&o*uk14IA>KZs5d2f3eb")ZUK%<jH"&X%k<\LGSj.(9)!R@#+4hSRK/X,&QoMcq2'.;H(e_mA(*(e*mo#8DGnIN@'tNQ_U3C@5O!44CX7]dd'CBqr@32U0)hH.R)*&a"N?Z&H%"]k\L>qR_jK7%skDfb'@8(cPAGA8.K^Xm]L1i%^%oL-Pa$)6OR3$'-0N=N>53:#IIgecC1T!PRkFHI[0'&_@@WB^$+m.[o"Xn<5/%<-\UW%sL>#q`t1'GWLd`gAf[7*DD1\Z?>!hGMB<Dme$\L*noGjqI>c"q9nGL?b*;^phdFXf_J!p+K+$?.k<'m-ZP]>#;W/qRQP`@%[Xp?7">i*%C#B>,VbJUMPccG&[q4>Fg6/o$_^03]IU#F<l8,66'\u5#3^RZB+s0!:"?-1>.bqY6k:&3C[QOp&FtOGE3*,:].;4ud%72ol/(2Z5b[cgZ-d5?UQPf98V%P%kCWs$;pUq<?8<[(J.g\(EfiZmiQn8LP;!))S4j'tB%@DK33ds6=ngW`c2TK8.%4/_m+re0\o%oZI\*SSk]`#:gU12c7#LrAJ^!Hn2mA=#g2^D5=Y;Xu+a3dA@H,p0[3bVd@&$XP$7F=TkY;g\66I?K8Rr;`p`*L4lr.JL`mj@Jd%O%XCl3JleOMrDm`>d;qe)fp!k7g+.D$F6b<Ne[u^5>"]T<[eau!G$D,\SqcIZY;7)*$$6)0[.XPlRs!M38KN?#8aF2#=&P!!1S$c#]%-"FQ:P%!Z=^V(E![g!X/S,A?QVuR-=ApFSOeo11@rJQCNbOsL%6lL3Y'_Ec)h>mXk[%>u=RWYIWh'#LLGB7-Wp/6uF)?S(HO!%/[%I`Tm'X,%1$,pe\I[B(^F`9+Rb[AQ?^TeV<`6X'l^%';n>/OGZ!<knF^lu\lRXYdl]oSVj0F`A@2.Z&L@d!k3A[@jL0Ij6QFh'mNb%b(\LB\<bHDe.Atp[#j:OVR3,TB6''ha)4\<?9JeYU`&c@HbJL&+5Vn!;grugS#6'N_fl'6q#[f,#Fe*27Im\8-8=H\hronD;,Rb(%T@cb2X=\uJ"PVokJ,_IBdr##8d&(P.G[@m#.0`jN:J']WY/kPrOk>IXd[;p@g-#VJ=:9kTdkK7tI3*8iTZo]!e/$rApJ>YV=^OPN%V3iI\W7-.hS&1hobsSOuL/M^6D_uaR-W/@eE#6f]2FP.eZPZuF*TKD^$;;U7Cn';>T$>E:='X#H5P8WgC:eCl30;ji<IY3'peTVV%;3ca>ek0l0e5>2U(s)6#7s4],Hc3Vc.Jg#2[?Js3DOc=^C/N([,cOQ.Zr2$c]CV-D/s$:NPc9iNO+U;M7\RlO"dge*60f\X66NCG%XVT(mM;U;?C7#b@SM%Eol*>P?b^ZbP6i:6UKC\rFFT1sooZ)"O+(Ii,M5ET0oSrX>0I1J=r9ZS;dDP<AR5N2uL`=UfVucoe`0Q9-%Tk$qE71u(Hd#qRhObUg2nO+MY%CiI3m%73Y(n:2))]a_u=t(4(Rpf;e[o^V$;_0W2`$iCOYK()K;u7V[kXr@Nn4;^a6K>]AN5[,=%F\<m<6amsXo%:W\$*VNR&<#ZAb/&XAn'mK+Yh.E"qj4q+F`h'>8uou_X'76*'0dAcq_&m8^[[#-+ueAH>8R8*SL8pUFariG6Z)!X%]@l7hNR\PPcHFF@kH[(R](oOS'kZ%?VLb@(c)c@uqDbhR=DH&2XoJ5RZekOfbUdu<*7$1\Ip\XIHhmW:BHHurp-Y`cp!!4b"=.dK%jO^9;s6J,L!pm%,3\,85p$VN]GP1apld"J*b^$A,mdIe(90IXZs)kU@@JB)2rTn$np\]L#kNT7do5/.+jkZ6j't9Oe(="Ep&"5Sl%hg_cZoTc`:Z=bZ1?\1QWVOK*3:&*]Yc<u-6oq>KT=hB%Y5-nj#cY&R;HY`EL->mRfS`TSdJGR`!0Zi&%G-7K3QqliUHog_P7_u"7%HDTe)>8P;BIl"8k0'Hga-N^I=O5@2J,C>'nc+TMKX(V'b8Z0*#FR/=^?f0*k_1fQL4FOQRVLI%\G2Mu,Faq+e4jcmQq3"DW1?b>/%_n(:W>)OEnkO\C2)&.?i)3t]r(r&^"8V>lDDbI-<is5Oq]f^MlBc_s4Ki)gAhV>6>*B.%>FFWn?gU`7ae69RmIJ7]$*'<A#p!t=>%!ft=E<NC!ZIS:U.R@A,;QTl`(H?6,eT0Am&#";96_sYd^?dM$n?,R5a[r5Lsc#h;,[X%D$$jqrA^T4+'C\PkW'B]G7/k;nPFCTc<%lH:l[eW*K!87UjH?!IdIC>3ZNS^=#h8hfU;pZG38,%8iZ292iEl`l*!DZ)Uh)K^Jc>^H-skcpMc^7Y5SRsV-,`=MgAZFp!Grp;+O%d+*?bNQohCA<_VEF+4DOh"X1;S*sPRnGR(fTX30-^L2KHq%>Wb<c'cZJQ0Y8eX9W$5,mus%9hBW^<D"`TBYOB>2cl2FUj&8*AT$V%(d;bSEUV0]#/+/H$4UbMGs+BeKC8_`XX\sPgXM5nHkQ`jM9L)AohVaK>2*8I(fm*kdG%S_EDZ+Kp\$dbcs,n5H#bMAjk>k+Hark<%YR#5Km%EO^VOKR/d@PJo,n0Y+!`$Hh3+%]<lf"LdI^Jk*N?.X`lSfF]]r6E5]net*a-:!C[&_s#c1jScr5G_5REo*BK77+@>"BVi%=85s*H8h0If7s!9mDEf=TUub[^LnTgQ=:*tGs?X,"pMT:_nL"F(I'2SqI<11]e*IYK:]0iG#gjTis#[ur%bIB''D<&F1Y>-+8#NU%9Xe4hIDnKR,=6H\HsE68hESfK)o0R(XYeC/=2CQ5r^pkN5BlO"QOIU[DD(=WQKE:3UYXhH6.\GUjpE63(T"u?j7j%;rR_K&GkZ8L%$O6!:XbKe`6(>Wa6=]r[DgYI5_\[06pTf[/(6QY%@Cq/!KpfpVP'[:`<X3&5pn>(oPn(C%+0LA'S\=f?6.LUuFa8'S#0dmo?)-;G%0e3,,**.t?pr`O)qg.H($4QcF-B-f!GB]=?\'qh5h&4*pGS8k%oY1-?Yb(VH3+2,cb2(O#DWn7)/[aF/O)++]H,M6UIGFkJmTr<r%r6a3:?/f/JjJ0b&&'7ThcSV7mmTT5$jLZdlfA?X>dJN*.^7Y>qq9/2Lo%f51p.=JNN3R8Mc1o6FhaH#TV>H&(rUD7UpUN%M]F,SR%3e'2_r:F(Ra&:(9rKj)9]AMuDWrceYq`eGS:6M6`?*^V3mQTOZ6[*+#JU-/.9RL$QY1@C1G<Ze6/lOI$Du5icr:K/HZ^lL<jNkiX%`4HrrSb?=r`b#ue.lMbNXrG):J%YU"mbW^Vhi+8r]S5dr(gDE,*:5"8^&%`a=]N/i+mLJ3poH@4,+e>/DaB%g`9TL&7H,pGf)0Kl%o;Ym#9:rrdbgeqKmqf+t?[1lm$Np12GP\So?`[51IoIN+)U.W2a.S'q71il7]72qEC4*Nu"r<T^"`(>bVWc:mXKhQZF?KnQY&7"2%R;U<<M^4C[_9PO3qi+G'V.6^:Lu.o^lN%<9!$+l(is#[&Yb<ESW`?Hlj+K]AfQ#6'J')r,%*Jjgq2mWb35uspH-j78DjR.`$!i-k%(D#qlcYUtAVEF)>R:UY?l[3#.n#:.pK0Cn=bXq#(F;MNOh)CV0g+UWB>Mkq?K3HG_P6[Y\er$.eEs3Gt&3D-GlHE]'n1.qoS%FnN%pZ<L8m]1CTYsZC$i)kLo;G.r#/2V%CT^_F/<UugHOf26Ma1H-bdsBqeXaDONg/3et>FH9Y6]]s)Q&Tg=G(;;heV(Ye=l3?RR:p>O%O^MhNhk0pCG^n3"]<3!/>M9*%`XHM02V3-(a=lUbr*3B3WUN_Ka@!eO1EfJC<-rn5]A<?X@=V-8)#iueO[G!4L;,j)Y7$^m(p(M$%_#Vu=%OJ^#T\n4,:!Ptd/qh[%51tXAppJdXHFsNrD'_]-\I3'\J:@D`)_%13!qLO!V7omD?ZR2K/$_3JdtJZehpH62Mu+KFL<(he%aIBeqi7H\&3tWkF;RMhud[\$pWNY9amf]7.gOgB5!4!7El!$fmLVo3KIatTF6qeX\^KeUFIs6,ORUK`UphL`F(2"<FQ]m5\o(c:G%LgoM%Y4(THUY7Ic6`p@"IPhJ<P*nV:pKkT=fq*;/+3s4iIJ7Am0+mZ`;)mlI0n\Q*iE_9j"3fYFV^"4U;l.PpGmn5;<6sunbnX7O%m"SIMOdBJT,?!Q6XfES+;ccs^p!_neY!=f*;6J`o8Gk`!3Xj9h?kIMXnJ]I(;?H9(GJV#k*,H_:/+-N=UtNDJWNFJn:/.$H1:cJF%D/FY\:73#cU#cG%6Qn_)[_,c/E#D<<e_]7O5lDO3hu0gd*]KcXo4OX+L4V1QF"pYhHi\_f#r9W:,pANHUsInVM&:f0OHl-EEO=3L%9**dp3%hJ8Du<2pD#9_%.Db)g>mZFjF;C%Og?d[r.X0FIa\S0_,*b`?GAdo<jf[+#gK5]8!Zah_)PV$KEFj"\DK\!*$^@;^&j*rL%eVF]G>lht'r^X*I^FVer]/Q'd)7DGMCa;c]o[7(E+C$XPYnW?t:Ji:WhCpT6Wd4_b4K<cMp[ja<hplth_uWU)(o>6U?=32(]OArT%?NC(KOD'r#KfK)]aa;_Llffh'<b/P[5Z73>'WCkE&l9Z11mpVg%UGU,4?;G"45>'CmL=7$LA:[%"oX;Aa6,dOFgXCjB"4!DSmYi?%K$Ht+i5uciG,@tIA,>gOAkWkJk%#;:b]:L4CXKrjH!bo'XR-LU8jGpgah]*RG5M+j=`]69g3>(1Dp8^>A!2Hb09sl\Wf<W=.f3HA%,6l;$/N9!9[]fR^8[5T5#>N,Y9?3&nYMEJrN2t5:kAiLLOu!+?+^PG95[Ml);#qOY\8d%PHqOGcjBH67M$cdU;Itg+`eLnSra(P?%g*`lcXK4a4GH?O^ges2;906Djna@2!g7Q(Ar[=K'EhX*9q]J&3NeGu@J1)Q=RE]:YOL.^)mt5]c^goZ^!WZRNM`Q_o!)Xj#B7FW(%3qG/:XtId"-BkQjN/dIr/978E\Mh9j59NUNPKZhDrpKsVC%9OB#g&]lQlL@c+%e&`&`8DcZEia6Fe;P_ZEfC5"BeF63VE&@]o\&>%o6t=+4@gE_?$cAN&YC9,A)n9Hq2M6H<+tE%P\_E=Vf56d4qS?uOpu.)[nj"/5MjnkV9m^/>uD=U+[EnVH$FW[=,=)mrb8$[P[dG/%s'pdGfT[pm;VpRM=W#GQpIV_FJ=*6oV/KLX+NaEt`(dCrP-KjB"\PXXFeq`.=1WHD>\Rr8ZON#S8t0%OX)mO8b7/*ac=+ka'_@",%bok1XDJac(b`]G0nq<:-D+lQ8SO6ffZgrC[+p04s4j0qTq"ugVpE]$b2PI@s92tt>r?]DC)dd2VHT-rd!44^05F-ngiP+Ye`6]fM%ZEQ_G^+:m;WV\Wgctc5Z)a!4f(:cdY]K-?hd(Eon#\Bju^8rb?ltRc(^fYm(ODi+`54g5Rak,^>/5f#<6^+G#QZ;n""3Hp:EgcbA%70;Lq$2,cB@ASSJP$n#,8fGhBdE^AO@9+VQBG`TYNm#(.+b(0/("4HV0'ed\QMq#XC""dqf[U>s+\=VGiAJ>;<1^Q3;5qu4G!Jt`%g/U57dGS2k7`uN9ng%$i@TW*J2-P74\e<[q0tp,0Y)[1/_IKjU=-0Yme!Z%UV<c<]2-R6=G'#Z,b%''sJjp.<f[,)edqEKT9_t/^%UL>g57[*05E9ZJB=N?9m"]U)M7F9K"@4or#kpQ^jbH"Kqrq\,1!poD>=*llsM8O#B(_CeFB$@irJ6g,HQU]U$1T4I?bT'4!8D]%O%cFZ;i$jh<9$hKY9e20S2%.?\\BdND7.h(fXS1P;G?@olAe%e`$`hT&#]a6<:\?jQq=f^ieZ*6+`nL&&\iS&8N50ap5,!OLdV+DoG%$E0*Q_2sI+]/@gBRj+3@)V/Nh-P@M1?`q.=_nQGV-/$.tX;LXeeA'=;`LrhprVN6(`>0ffL!.i(lJJMn_O+=E=U`&W[>*qS;!a!?%?B;@Gf->-&9!j:?O54qWXJ*:P.YBBnNJY7F&6r[%5t7^_aJ=b`"U;Y9pF%?@%\hQCl%[Ji1'lqPfab:pd+N2\(-S_P^5`lrjL*Uh%M!2"2ald69V[3qW#X^<mFZn0u49,[NV.>p8\>pK*9D?,u=h='qm#P_F,."HeP7s(Wq4i;gdcQ&:91]13#Zl&Tk@SJ@D6IksPjqgn%_JjAVLI]h8OPKRcjcbspJL"!n'MFiPhic7t>R]C`TV^^W'on)WXpBTCc4Qkp-;D-d8.p^^'&pulO"?N13VVe8PIpFgH?K4leDEI4%'m@3u+7:JYU#VbS/*OoU![atA9<Y#3'rFnsQX2tE:b=YI%Gbc6"Wac^S?Ra.%iSY<-e;TOX.`1iTTcD[-`Ne4*Y^-g&uu1+XJ&:j%TMqio-`E_3YFoC+$'WreV,u%6Q,J3Da/u%.YFq*2pW'8,$Z/F0Yh);:5BMX8]s;"3>_.%(^)%"e[pn$@!g"nrogEkYH4QP;kUqJ3%dtQY#2T*OFHACN0+h$25>Pf8cAQn,H!R;AQOsf9=VTS%CTrf70R'!7+m;,49kH,:d6eD*23ZG@89:B4&c,e8S\ZGC\a]sg_F9,;!%k!$>90,r>pA?JhlA`TSr(q2M.XQ@-jd.]hBOj")6^Y@R(eZ)[%Ah>pO=e?RGD%>fnO>_imh.0'*%@J,Sh1tI1)-6*iA`5j4]\"f7%`]/B51s\BpWp42uPJ.bWQPD6s$P"&kO:Wf.,fdG53`ELqXU#_0j=Y2t@53$Soh^VUHIWEqk-2<q*N?uAkiAN`dsL+NRZit!ECRSK%5ZZ%IJ1QO5FV2k*BC?FBY?lE6mKCc!3`]_qeUjRHJL.j4A(C+g]XhJjeb\PAXa`Xf?-6!4VXAO7QPPUc#9JDa9*@hJ/rkC#FaRp.%F6KYB;X4$Z"uE7@4gTN"mL?4RJZa6P,XZ5/Da?pH/$qMY4,XlrN&sUK;l5,N+Vcf.@4Yt=A9<ca1tlW,$mgB"Rt&LKVbm'8m21jn%[%(oQ&<a(b`K1Z)KJ']FZ>,;nFg:pHo".;A/l&TmnnX&)hS/t6aYrfD`sh\81B`';-8F?lgCGrW,_u4f*CP)`Uej+W/8T"A/#,qX%SmL?=?:pculI*UD(`'UjQi5n,a;i&CXRa;0aebH8U]i<>&4h*3qdDhM<Jhk9Ze"sL5^8D_2--_!R9\u4bg-ij4L@@k"K`@+5go=l%A:$M/5PDEjLoo=)rn'aSIum[i"dTdGlt:fjEFM%mb->?PIHL1Bpm#hUe!gZBd5!I,85`4I@+:-/$:pkL9MC.GAisYNa@)dK2'ZVV%ql_;',P,XAN(c?pRI_B(PGTqg4peSn\r9LX_b-C.(UE-T16gtGDs3+C9T?uUDkBKPc\VY]VsJNLr'$rQP@S2l]T6W;P@e>rF^@a2%-KZ=m_[p<j+EqM":[EPR:Dq;r1)K+iD4L=ANX2HkFmH=eA2d3uB,Q(Wa_6Z<PB](8:'R`oPG4AgiH3oqL32,DZ8?hE>3_Ee>Tjc9%DL@koZumOC5D,NE8Ft4e"38k?@FK&F],4^Q2qHi.`JPgJ16mq0h2?ioEAMTT`bk$71$be$_r'(4D,##GHFW$<Cmt$9KTdVqET;b@%an9Ttn^uLeE1n;P5t0R>C&_j0gmC0&8$%J=MI*2b%l_.)E#SCg>[&Ot2O/Tu>kV'T$0pKDHf2.QDVFc&)6,Zo:_/o(`g:CBV\48^%n[S7$PO=8A^*OPe9l!PcALNKY;tdEK,Pge"<LgbSeOeO&d0n'G9t%o3q\`^kQ-7\'Uc%kUNXYl^]VoMN*R@hm(JT7smt&fnj8#Pc%'goJHZaLe+7?C4P8)D]+pVpnu5FU0Sj=;F-UZo$O0t^-6RQQ0\Nqf1kN+R3[@)^_E(IRO8DM.qEd4=Tsj?gqT8hTIC;DBH1%*uh%%F7![SaigjWDk]eE9/";t&f=9SNeY'lTm$to<i#`i1R3hsI<N\)<3fT$lEda8j*2<<qQ)PP&=QFX>+;X,.(Vuo(VWYD,5(8d.T4#V%V'>TuPU]SG-GB\QD!O>j3NR[(-!9@gd)q)sUeO=ha@WL=$tETGNO;lTklr^)DVP1V.9rS^RqaD-B^^No[hLH$.]6PZ2k@I!==IK7%Y"Z&k':-LhZ3gT]J"dW01s15b.bjA@TpH%?CTBsP,<Yh@=l'E+H5gfqQ.R?8</Y.#=pIi2obr=>iM8Y2V<DNqR`TKu#SjTRaap8&%-C@i/hkV1(%)pI7OMVt\n%-WR#?=;JSf&?fc2e+<<)04_N+\op^>-u7?/=r..I";tl_")\4=\$rT5O-\nI,9f&J#WV1paW3<l&-f%+K%HMaghu"@do3hJ-Di\GC+X%5'B`(:pO\m%6qSpm/?9;g2V,OF`gK`;KoSGhK]$_0W6d_a(g*".X(]T;IS1HXo;(rY^?4oSiA,>%Wr8#9kbD<i(Ttd35*lH_'t`F%dsTM]!>lk8c"@rtYd9X6&kg"?_&ngjm'NdrI81X/R@?Ef1N!jVlu#]Om!;_'TR1IhY!RajkOI)h%gm=i.pkid<*\A]Kg?i0`c6QHC3HHtuJ$*-,<3?%6Gk*:+`,atoj'-iA>_0>r*PAe7p?9a!\_Xq_);<Ab$2?,,S[;_i7lfXfZ96B0%oTb0]61QHrM-Fk]4kQ,ZU@11]?Mg@&Y@Gk_3aJhA&l5K0PEZa=\0%5XcW,""O8;%rTmNr>G*6+#pIj,$VKn>0gp&)6ADq^;Dim`N%%tj&>XX&X+1&Lgqc@,Rq^D_RhgB`SU-$GP(N)3^RDWlp,$1ePl:WC<+L@(MV$Bhd&2!LNmN(>&%ANI01]Gl0W9$E<-FZBog2a6&4%3XJ-EGFg&j'44HM(C,aIgpF*GiY#Sa/C*K[e&>$UIIlMVWp/M$J4P#$Vc6A,[u;@!Y+#`ukqZhP-a'=F]@&'R6V(ZD*Q*kA9:*.Y%EU7GO\9/_S9s%?oVMgA%\ZMB*2-jH=?"iVJ$Is6<[<+,\,84,,`RWBGH-b"XeT?Z<r`#r_if'#4RP::I\i>e7p;;hr9c'Y`lhlhX%F2k/U9D4UI=\T^a<SRrMACYdA[<+cN7`MC(Rg-le=4<.ZYmIGpibI^)^fWo\S]&IZQ7bgieS*KTELpfN?P9peVj^BJ?oDPXVc?G-%=%emLH8T"!M$DG1VMgoT56GA0eT;+EXf#Du2a"757Q"KLb58QHl/F%SoF@SuV\DG&8#HoXP2q7>J+i;gC&iK4iiAO]UEo'823SXD%WJ+-[Z%]O+hSm"feW&Km9Q4<DR$)\th(\:A,G#\"6-<cYdr<>OR0Af^m[q1Zb^#'h+K;@`oM59WI*"[s/Bi391_$Bl*^CL&5f3Ru%RDjFg84V6lN#G/dR;,.^Tc];NYc)<hmNZ07e'_WBT;Jh3.`4Pr'-D:^I*P7qqStVY/p^]%bX$HJ-=\7?gl8^+H/rK'P,^M?&^N"a%,ni5uP@PB6+*3bf[O30%1\!2DOuJt[d+tLe4ihMF2/b/Q1MhFfU_>J0SV=Usl"2>mNHMeLlXGY6>C\M)D)l12_?bj;WolOr?>H3Z%IB;&iWtUp.YORTN)SC2qaAN%#UakacFkbk'S&dXG\.<c4'=Lg(M/%6mOa<bUh/[B=Ve96&_=GAuWQVk7rUara]:kn(C$gX9IET,>%._X'$G*i#@aRmWqjb\nB8M;U3W1U>e+U^*:XSo4p!f]/eEB25,A/TQ6@9;F4Attp4*\+6sNnV24M^c@T&3:c,lmpoT8'!G71YHrj%TT[^aEP]_<:6$#ZVA:qcY@7u2JZBaSbBqo?IsY8a37iT.aqQOJ6fpLIf8\Ke-M<M_"N0)s0a66k]_?[;b/[B8M:c+)Qd]'l-,!"2%/HMZ>E=*RM]/rPJabOYk[T=2f;hWJIaAg<D/;DQ#'j-;okmWDU15]M;'CLV+=&.k14/qp*Gm!i[-es^?NK8(r>uKeEKOW#K$&!9W%PO^KZ'4j-PD[IlI"Xd!?0:udV%nStD0!&J:SmX_@$$W/XeJtW^c8*$PA!e>73k`DaYJSOmnhPZ&mFMbDFb[5oJ,G`0rD^/pEIA1J%[EqQU2CnZr/)&<o),*J[Oa\W1XG'tYh[;AHI6/L:Qb5gchHD.8H;hfPXrA*C\<\kQ's*6>QSC(@pmu`WHKHCuDT+N"1;5Y06P7dQ%2\`^@]rs*L%NFacA([@l*k:*M1Sq)"<ZrcJ3R`g8JWa*n&2c&B9Mf!GUDGZH$E69bksbG*8m4'[YA`"026PmS*KTM'i^nFEX)Yh0%475s6(8KHjDI:/ULIL/:)rci)e@:6WD2eL0.^HeG02*TRM'qC2]Urr/PO_1(mP3tn%<s)Q[#TJ9ODt5!VQ/fYiuf=bgg5?WM]%SJ%bCbL@1Fn7LFAeoiAUW_tCNkgU1Fj8Q#="a`[=*gS[T9tgFT]PQU&?GCa0J?Qjj[22OB@7ho1hrIN)0,6]>aSh7lGJ33G_@_o4P7I%,d*`Vp*4k0g$7sNih0ItgGqhBe="Jpk$-u[];.3pgQY"uB'eSEp\)0WHr.1ZC)Pm`+(t'fWAH3'*mXZRnOsj#/PUjphDHsMb4+ba%Q&f9R3_;bbad%@+hIfQf@c?%UTDM1`LX'/`[<-P`1h\I\cs-S_XDK6.[G-'-1m^2cb`=dI1'tX0@SiN&<9JS3&>CY3juOBOHt"Ch%K?$[Q:?LiAL.Q,?Hh(Sl6bDdEm^41*8XskGmLCSTnFYF4aE4;5:FBd0eh2'=6-*7n?$HaZ#=W[2':`O_)0*hrEqRc!n<UNP.:u^Y%q&4QgN3^fqGV[J:S^FoI-%RliFtu_A9G6:J1jK1,GUI#OSed*Qh2o/sD7$EF.0X,-qGM]@g'IWKDCrd(1@4DE'">5"Ri1A/C9.E6%ig<8tJ/$h9'jaPUMKE]=nrgLY$Ph9)r8-(fZFX1S7F"R==m!gmM4:nl@ItBsf\Or=>DX3/h4<-.p!*@"jJtDT);[bC4?n"qesSM$%7B/=kZ7PDR4]*jYZRkKp+'Jh-r_$q8XTZRQX;;fo[:!)$0!/"BA*TqRR!6MLj(`2HdP/)^lbSfpjQb6$G$;dBJu7n')_DXu9md\)%E4T;/Un,*P[Mmsen@4h[ech3!cW]/e-(iVTkoCAak2UEhEe6W`aSX")-pL=JhK%RDOVFJb>G%(;=pAnM"\R2:=\8].ki^8&YM[Z2%$J<L!#REIO$O+udFYYY'jR_iB`ggj-2J4HFeCaB37d97drVZ*20K-"uB-`EF=h,M`P-RQH(h<5,*?g[U1Q3XWLM9b==bGDgZdQ-Y%!G8G7*;3EmUb5+u;3.eZO'MpV[0@2UMt*hJZdo-IGMA-X"dl\%0`)`e8R.FT"u)CTU,/kX0P_,*jr19gFCZg>8m2tS<X"ku#*;j;%V,dU$`/2bhl_/])3K\1BTmZ-0Rf?<Ao!-9q5C4ec3",JQ3Ku2YSG+HRb*OWWU$7'h:qjFjh"2-=$eL@8B+F$mo_cjJL[km[h^:[c%ps'SBU$m`)cFJDoojI,c^W@t9VY4o+N9C%KH8j?lkPB%mT'DYjT2PNrI[T(&2:8s`@RAOg2cS59IO!HGNchL3N6Fnlq@2EEbiei!%TB[5A9Co[VqP>u8C*hJrFt7#Jf9?oZWMfT(5/2-Z\UN6&QBRp+a(_.8FGB>2oc%V#lIb:rW>#]3l5-cCDQIpXd\W;t*h;k-^N;h5%X(s(If.[)%^KgUNV9Hs^Un?p"jnU8bf5J$%d,U_`VsI09SE`'4H$lA$i23*d2sF2Jr)CE>k9X\#f5LGAeMPSE9AekIGmhlakPD#F%C<Cka"R#VM,[*4Y0=C4jKQI)IX<^R">efn?f?.4u':eBTYpsToFUtaTqSi8rj.,EoVX0@gY$Y'eii5t?3n\e+_r'I9m6&*3S7>Qk%`jpQ_VtuOGdM1""Md,-ST"MX9@Jk3FP&gdTKF+PfNI7m9%'rU)qB],MNI%bbBR4LMF8[l^,+.k)5@0?eH`Gt*kOFQ&17b3]h.*#A%(Y]<6_XZO?TUtHcTDoPt-/GuTHELW;2sO(YY$ZK?*Lt2/"[]#UlBa#[P`ed(f.Yt)8Z8^4q-:[:4iL4iS+o+[9NAS?cJtD,(nR>>%2hc>Od]7>nm^\38f5H=Opi(+ugiNE,MrDdWIWTMSjQHBY'sjaNl"I/>r=TN7i!.PnpW:bS9+Tc%F;a[T^BD&Q1J)0?F8_sL<t7=D%0E"j7W?uVZF8`ruWVN`^\'9tUY+IIAjA`n(>1%?8oh-ro*H%"GSa2VK&1d[`aj0Pe@4[X,:<FuFHELV4+j]5eA38BrI;pETDpQAb%qJE+$l5-eaEia?\dZ"@_b#IsDI0FToY!".6F]6+VGC35()+s:20ra!tBrTo3)t2mPMfGYC27-#d,3Q1Z'q1$4UW^[O&6$OfTO:nh%bGK^AQ8;U9=;5Q.p:^-eKu*3/mB8<bmCX)h\Z8fCh%.O!k2jpYV3sZn[:U15[-Gk-qu"WrZ#P6*qQ@B6]t4$5qf2<"n-)V1g\on^%[Aq"=;60]o\ZbD&%F2=*GPf!qo_mNsG.c6RC?P%$D=.7=CKnFKIK-6O/[eumX!@S(G1HCFYC56<hpHnE]H1fPqo*@<mU3`)rE;33%BYWE]/pFq"f3sn]YPcl6p=]lZh8)S\HZ-'nrDYV7]KoBIq:n0iF;AML0=M=D]2W"9T?^_j]@`WlF\C6g_n,`Xq!3=FS%\UhYeGE\%4^Hk@o"OOnnj:.2rVDT2>[cGO>5/OP=fl/dg\OUQnZu1SBcN`WG<\R`"941mYhWpg1TO79MfJqGSgS5(hlOPA^V3!1"W.UjMkC/!%]V,3a?M]gKe(&XQ(-JX7D/.UZY>oFXY'o$kH!_Xb,q1JV7="]*=sp4FcI/0"h;-tbDXU*m*F>3CAL=C@#k?UGd#jLWe=?lNX[g)<%^VjPij_&^dB4G8sj"o;I^L#5;Xk.0i`:alDHA>"*T$FF((2a_$Rs<NH%m3D38)U2i/''2jEr"o2C6d]18%nKPf<;Za4)9O9F_Um6%!$]e!+4\!bmtW%72`>t%o;H(?i;PUC:*ZZ2qaV13Q3&@Kmk=6-96c%qPNJ,!=IoC*>5&C?HO[`m"^`e!,(;-7#>;,0=4d<Tbn"m]%Wj>uFe4R;Qg9d/*Qp8"!V54WE@q-fd&@_;fgPtsof#KXf"3fNI-G*,,8iM2/DEkEG8"-q2&&5TY9JRl7bOX;4+'/X6jH92:lf&-=%Vr??,M;![3hMHu*K3L4rrO4t<]eltV(!nFY5?A-%33B8kUG_i.[c$Jf3n#DX>#,=RNf'V=3Q;9;SnY..FnkWc?a"1Qk12u%8EmTG%?X+)lOgWW^!MLfu;UOA*KAN+4aXH;[B6s%3\'%R4(T2Sbh=ThlM'8"g7%odh,13I<r6XJ,Bo5&?J!ZVfcaitX;$#rh0"h']H#X?V%jbn0F/!22hqtnMfjko0Tlc-th7l+FYY7$Q#f.WQ+pIBg8C*8ta2n4$36j0W#&Pk[j2:,K-lf8^%rHs<JgAY^PUTiVU/%n.Q^V!c.%FRTE0QAPQp]G)=AT:@>'bFcO$JXeBFfFKl2NW&k#g@Ef`N7`n]c"6@Q/:G$2,!5mi.k_Ju@1mhA$.uWY#<*d^JE),o/SV'\&k_Fp%^Ue2#H\&E]53D_13gP'X0@LiqVo:m]lRH%aD%dUMT_WTi-_U`:r#1DR$*m0_l[FtNd>bPn<MD7biS4;FQP'=NI6OG8_LGFdmh/*0%6,kh=AP!V5ak?Trb!8.d=pH8RSBG><dW]KQ+%eVehR>A:"Z6,U&FK=f:7C5N[*db(*s[VnHigc@YOM?>e$Dap[j8r[@%?"Zg>Iu)%Ij_&1%`YfPYJ+ne2]'%9mu1VG+"g1qqr>,ilth&VAbF]r&a,/G*Qc\`0`qbkPU(dR^.IQJi==kbB_>N?,jZ5U<j4dVI*iuCXW;*1%?'Tgud_Yg_F/aeE+)=;j*LV-SS!S=L(e("gnLWlsjc'N;I-<T4pK73&I$/k6C2De"L^q.t-Pt5a#"f^/$i;]nX`I[W:C%0MjC\SP%"UHZn[_I]lMYpY7?NW60mJIL;97NqQqsaI&f<hC6[uaG6f,bX_chrsO0ZGoRq$SR!JDRO(i!/\Alj&_qDfJ+pnk\hj$ZL:Q3R[BQ%cEpLBDMB0u%,M/1<TI47Yd/L?QgNm%mX+@$/C+7/,Yf.=Z5T98!_oi%]X7@F.65'%KnokAVL.kPGWWo1(N'`X7jl>\l(gK^3P:cN%R7C-D]kcI0mo=mH2fsTR4GW]t+ebjI7Y@<&7ZhX?UVM-R_GTes7KGcLm"M4r'^8/e^&KXF@"*%Z?MLH6C!aZSqajTqS0sncKVIE(%l^;p1Qh!FdqrW5`557)[.uAqe#;ZDf1KNuA!_:+M$6S3C5JuKA,Y#AB4I4L9Gq25uBcW<.mB\uQJ*\f/g0>a4l12XS'(4c"T*_D]%hMW.kO=ZZr?'%`XVJ3u_;oKlU7MAPWAIr=M!+R6-<HDboY#M^%S#9>i0r:@^E79j5!9THXM]\K]29b;jJs+8KNRRcB+q,ms=f,'b%%Ah(e][Xbuj\K+&>]$(H9ZU22YClHWW9gF*d@M59b#FSVS`SSR\p4rpB`#h/%s#j_+.ROm,\Y_0$":HX%`bY'o2oB51EbhWSkS%#%4Eg>ERuB<cYK>:ZGV$7\emK,1,sHg&%&KZ50UPRiJaup3W8-9k/+K]nQ`f8O0tV\T6I&PgI,F3b,4X$rT>A#Q\J&LnqHL!;WS15o%9C^_?1UEA;/4PPh<1BPhPTs?MQ!tSBCu;>^ZClFPSFb3:/*=:TN%6qjIqXX>HC^nCM]c)1lUs&I8,'[1%5!&q@-9(jo"OnU?FB^-%npT]j@-/FQbRaU,mcK<%SZUH6Mk/#iO.RUtb?n=N+Y.9\do(#f;qJ)HRXSNglVP-DZ$c&t:JX-4P'F3!XD.$;\I[a*faIOsSYBWW%9*GhEqH@@][BC-jh#C>tiW(-8Q8(pXPC:Xj,Ic(O="<+BiUG`<A/Kb[9K3eVB:3<Y#V&VgBFY"u)k<)[bcQg&D@lGMhG2pZp%I3H%0NUI#$MqZniQ:B9ZF=Q'm<:&"cC8=Kh"c4#;cQ8oa"N+ob4&IR^+""aH=Otql>Nc`qtbce>2%rIREsN>#'?n]P_%K`kcDM,oYEC$%IQ^s?8WD=,'05BA`8i1N,:018^>42m(,olM_u]q49*bNESLtE#*p9sI8hX!.Nk*N(pPbs3B0<l-VST1>,NuT3*n(bRjK0>JalGO_%9[TFa4!1jXrV&$l5KoC2m&i=[J@k1n%/PD4mU5-Aqt,28KV8A09F:Raq?#Oog[>0tD\[?PlPC(LB`"XGk"/!kpi<orWIk;K94@fB%=EXiKiX),dFW(a8msM*Sh`3R;=-)Ii4!?%!C$$mk,?Ne`n&nP-H&@Gj?=O^E2,>sS/E`3aWTGWVRcRC5WTGWVRXt<,WTGWVR]0&B%9f5^$dB$:U72!Me8i-dC4K6%:P%Y'b-`*8%9/L.-5q$l=k+[^gQ*Rk9XB@6K5A^XaEW*Jk"RWWfNGN+uFFeIh[T)V@>Z]$"d^LEa%'mfXi/X'[\!6gL@U5j@mOIJXBJtR+/JnM5C.W)[FN+IE+Z6rW/].JK,_ABsCAmaS1GsU.i[:p^8d?BLgk\FAf(W5h&8s%E%'KQ99%+H&3lgdlJZ-R+,Tqq(5tCoaS>FXe;&pR^S8L=lAT.1>Kj=<TK=FRL\VCEgOjIrFISca357mCE&@fq;L:SobptNE1K[pF]Ms+6`Q4%l`ja_f'=.FJ+n0@%th?;X.S:jQceKVK*0HVWB[a3lhNDi^L+..;PTul9P]@u$2=s=6aq92r4U_\\[)gSSL<f:1U;UImXN$k!f-hq%V;OM>*r%O,0+GGal`#\5#j4!Za4EC/le8U0('`dl.nGimc$B3[If3?Um=$q#7sPd%?+ki]-?rhX[Edr2*tS>,VRQU)CU)UmAmOeI%Isf^g^/])(WZTA**f.Oe<]S>rTns/N0UHK)KeB1U-^OFtb#2oII7!3pD(.<h50;Afihb!iqa@jGPa4WLm1]5,Vm-r)BV0lRVRCF]%DkD'(.5$<$g*bh>kq.T9g*_8Tqp^ou',Nu4p8>>5R^`otS*!U^i^,'-P@eQ&Tns/N`!;g`;J>&VB]*Zb^(a2Wf^OXX8?C+g8-qB%%n(ucl`BZ:6Yq@[55'VjVe\mlDrXr#)p.dsqOF50m?I@I[ZfSS*m?Qn@kPDGcpbA*4)cKo3FQR0Bg[dM.K85.W#<9kL8a8XG?LR,V%BMX<m/M_Wt&D(4U&ha_4A<ZL1]6<k&?+]?e)CI+5W:/XD,)hg<&8"de`!MTc6p'@\JlU*(ZWF;[msVCE,tGgO_.m2!_3#^j38T63%h&imaiG+iG,WRhH^\I):(_T$$!XWrX3'`$p&h"#+3^A(-`lX'.f\1Re0dNiR%RX@E]'rBg:l.QVLZ,5O1d7RN`*dA`6sC.*H4KI2%E5XEK,$?F^%M5RM>.Y9EP=Og\dR!>E3Rg?t0No9cj]CFe,$c8Nr=S6$Y"gg5Vi@O\\.1i'RG(*+\3BaG8-_FL0>9BW38$,@2bJo7%q'90&]SkO*g.3/,660G;al:Ll,gqYal>h1UA:I!^(OgjF1)MKp<SZgPdmZ`@k\E\hCDgO$'iL\I-VKE51IGN]FX]t?*@2q+"2(&'%>T(V3Ul.u:)iDcpPIE`*TT]k3Z[;T(6<cKl\7arbe.Nb%je-2X[k?Cn%]j#X];+$oL=r'b!jgB!EZRk@bhd1k$[n5<]D$-D$Q^7F%3.%3U/1O$LZ#CNVo,gU=9k/[dW\GP6:MK%icB4\5L4I=]:u'qD-Bn6%N\6GmZH1_2GaN^,-aUnj_to/J6k]OX<5RX`d3=4t9\).]%m2Q"3Q(M0ro:enSlDogJo\A6-)#1V[USKue(lsFqIV[AfQ_emsm"a6q(Ae8tTj:o6TCaEBWs#\nm?4+Z$_7gDhm>V0,f:fde*K.a%BQg5n*itZP+K<Ikf]('p:NS542uJ,ahcQ.^*3Dj!MMLNgX]r9[T..l@3gF?,,8B-G^'^Srl.Y7I4_ss51KW#,BBt];.Zual78ott%296X*oOj^aSblW(q"9R#p\j\5@eNG+Qi\pYn3$qja),#5"71_(nYJVtD#If.!7CKdkk<uY-0Z0UC3i*7Oudj);'AL+XBWb&(D9o1%jfOU481G@LUl56*G-gtV;EfMR3[2bg8P@'c=#'5)el^e4^?<VkE.@HC8_JIgEqDYnHgUgsI!tJH2t+;)5+$9TIX=2r<;VA%\<jkC%N@4:7DGA,WnVbbp)4$rSPKr`^?c`Y)S$$%djE$EFWnuF1e:en4<a$WFGkU'8/)^2dq?eMT:E:$r0n/h&nG"G:,9<.U?[$9OjpH_E%Or[i&W>4pW8bQ+/;bP-UqY*u6BO%"W$0Mk&_\09@?rhW0b<]PlL`WO%j_qmFYJ@@Q1b;8r'"lD>^!MA,?SR![L,,rCVY]`Jj*(PY%b2PGs6CMNfq9'Ku$/BX+p+*mabE)EVcR)q^!&rkjbKr"ODqINp?OZ)+pMj3dptbh^2fldJ\D2&4gNo*N)KLN5>WK"^#9@Vghegu;%)m,mhhg.5ZkNRI*ro7qKcg-=P2f'GIfQd)Q5.<r6k4Rj6;(G_X/![aFS]4%3d;ILGJ+FV(l2(2=nmEi[Of*'bT^BAh&jW5J6#4!<%N9_F,!9%3YbEq2NqHraX,cBb3?uZ$n?-?p_1sk58I/*meI`&"3jfSH#rqfJCrs1ksTB0n8/)$;O[ktd3S#2<tj-OT:/NTa:pDglF%4)WpFm%U@mDVin$K4BcH%lrJ:MSAJ99*Y%OfqO\g4!3W/(L/[G]4`(RRqH$j\l[Bt9+8]k4QI>-r"9*tpC`lj-2.NJ36Q#)a7hF>%cbg">Z??(\qM+FR#M7CH(I.*`.MAk^)nPG3jF_=Fq<N(H-p"r-5=V1Crr[,Ogr]W$B&ruWMa79-Mi;\@4,8_`;:dZYYIi/@D.#`K%pS"8cdK"g_)W9B>i=TGkntoh1IDbU=("_'&H*UJ:$dSjMo"6@)L?F)3Gs7g0_K.a=)khd0Fit@u!F/n80HEZ0<]>o)M,S$bP:IDF%?%R[;iir!FpjDj]I+AQ,6>MrL\S-9"78RD,IGN?1;7Gb8/q!0]U1*:PpRYrY/"1C&.Op$N#cd#1-A%7ogFaBs+u^?u9GuK8i'GtP%So<<[,,2n*)S5>A&%X_@YNU7t(\DR]"i.EX(b-;Q7MJPFb4CYW<'3=i8)k8[=E#[=jJq>e/I]r+&npo?dfj;sGSWQ*6nrM8DS2]Z%^-W4aML^R,nt'e]KZD_a3+^-R",>1IU1^/JZE&K^_ZZ++q3*eDk6!SUk90&ei;d"t7mR8n`;sQKn@A&)pl$XCbbF?K5.PDf^at9H%Xlu6$Z@`7mH9cioYj*r\F3&R]:a"[j#hs+@L@o$1%R>V*#_p4LH5]<Z`IUs0%G)@s&I3b^pOSe";&B@BB/0^_S#0?<1ds$BRfGq7%$(hACMU.Ps5QbHeW'GlZeI_m9?r=7YU5&_o-HoRBRMN1B+P?;l%R:>QITDRB['BZNNbcP.=\ktVJLs^*K(3fs^1B#UpdI[T+Sf#&%K4tEQRN=R!@L5^t_4gfPj22VhZRln*5q<#;:XBjK`95%Yj0L)Bn5-fN+R:]nhfT2`3$<F6l]Gfh'8A7^ZY9/&3C(&3aus"WOagqI%YZ;%1:UC5i$0U?"^<6';*$Cj8!H/NS(^:6qLciEZ\?Gs,h)!!U-BQb4M1Q$0a"'?rN/S.qMSmS`iq)-hnQAdq=@Lhb4`]*CI%0$q%oU?ZT_K%2LV4`<G4!JUWL"66LehpD9_-0to0Vsg'PP%<pW^^q>N/+_DM%*8^'QaBZiC1ZfaI\6cOZdF4J8*327.5B>[k1TD==Xk1%mtoAF&'*j,0`dGo.KlqY0"%999;5`%Yd]XNiXI\!>RP*IACCe,CB/n#kV-.i$S8/N0VK:g*8:H$Y+pML?m%"Ncu_NKH[9YMp/Oc'%>/:W?:Gc';8!XBhD^0&(d;7<[`4b(Oferigphl[UD>PrC0rjMHEen/Y2ZdtU4;cBX(D6*YgEna&O8>;?n-;<B62.=ZD4mn?Rh?.,%mD3:uJ<S7l]&Zd5<ua`<Coe@A$gWUYNXmJ1Q\.\_@"[(M^nue%kCU6aC(_Gskem2fWihg<Ts7n1nJXTkRHPCd+8[DY%ULOR3)TcV%S53O39T>,N\-X^^:*:hu$_(?[,Yl@!OUc>a.S?,K5q>?^l.M:S8PbWWZ[qq0nIWO&$/REP/d0=OcI$XWF1?(/eP(s3Ls-@nl.[Q8%G$pi=a2G/*Pq?s??u5D8JW:#WNUCR_d(cOn8pD,=!!roE`e<KO!7c2,!RZ!V9SZkm6-gs$%U*l%n=DW9pimF73E24Wi:(^,.CIN%%Z2&C.;G)Rjo"]n*5o)T#-CtbCi@ke,Al(fn\/^EO!2+m/V%?OThld\1^q]@MnL"%n+Am\E5nD[[M?IODrSVlfOA'9;L>^%jLOsCT%FV_R(Hn[smMs_fi*!@PA_-*J'?pGs99T4l(e/WE<Lgs'!%/S6p*_()`am;l&ct>4.<8nqHrfMUL<61pi6Xc]:m<_S..nG3T>"-It%2^"It\H#C/6=n^r^^KUc@u_'HiKo.lfoui4Kes:TVK>/mA<Z''Ubi9WbL7l!5phC.#QN+n9nW58^5Ie[=$U2ESOGhWcQT<EJ5ZT&%hh7+@^Bt7":.RplTB0.!s84ke"bdC&h4amb1djc6JY5L<X?u[+S=tLNo/2K&*)KPkWpqSTN^J>.:H:K44#R/`3X:jE4"&Dtpd9_A%r9>6k$O@R>LRU:3U,EBsL`uO.$3ne44VrWP&\[cBiL#@P:'oPhE*n1.IB$)j47mN]#$<&<"e.LmiZe[G!JK%C!&aOhTolTWD6o!;%eGGhl6HhO3$/)8EaY\QA%.ok]<LbD]%[79L)Q!fAO_'+/TOYc>liI1hm98ujLU/0ckOYCR[&L6]=#JkYScRJP@P%"___ViGBYGMZ%5BRf@Zfi^BLT"#lOp1J=GRYP1`8JnU\D&1o5`$@:$.CJb$uoYW+s;\)$#WuQAq1;b1D>_=$ed"P`NiA@U;@0WZZ.V3O-ZC3DM,%$%&4+E7fH@T9Y:7iPi4ZbtJ2A\[7DJmS*/Vc^^0QfFPT^@t66N#PZDc%,=5Sg3-iU:@1hmF<!siTT1`G<(=>D][MCsXo'%A6r9-+A?%4?F5Oeh_/o"QXoj]#FkO/dZEJ.hnJ]SS+"'PZL9A&nO$:&d:;&&uGE*"@M\#974X>`;,=3*B7UK`pV2pi11bTZjSK-4:Qb5jq'k2%)=^rcIm2#V9kXa>`^-Z)lUYLn-.)63BeaKN4sn$rdACQLap]<nZN/8bHGut(Ul+P<^0r-D"r\h\n,idC6)t58#.+V@L421uMR7T#%CZHi41`?P8QH(,&__;6>5WqK4kbZX8"O=0s)$))[@sm,Jf"$GR%YB@$%P#LVT`@'b*cMLt$Kd9!(LRu6f+%;XDU@XCMehUVec9"6%lk0q50L)%WJpA@NB1u0qpAk?\ft'PL!k&EA53RNl.V9JJijE58c(;5Wl@UN1l9FJOZ/^1c!eLLY`3<K=W;oo927ef<@R^hu^Lf2D%[8C`)VRVM:o"f'UVXuQ_\F3Y549jGK:nkN&Mi%9Ee$^6,,TdTLP30_9n<rmG3-m'KGC`0mKS4+NX$dUb-Vc`qd3*ae$XaBV=qFV&%*_(c'^nt%!#a.HVq<4<[0"D2S-,sBu(_RLP"@?#eg-O*eTF(VVRLVl1cqd#)?aJ,sJI_igq`]j8F?jQ3?a2:Q#"LStT0j-Z=T"'?%+&V8i9J=9aHj]del8$"C)W,P5iXY,45UW5JbWp03q'2^VO:+\[+MqS(JbfA2CLV0J4H%YL6=_4"@:Dn7U+O7aTf,?#">_H!oJR^E%2dcqJ&3l$Q$l.G1N[=ZEa(7^30B&G=+jl%^/('I)9;4;953E6p.=j.QK3`Pt@tOscI2s.5=P+(YS7Ie*!0lOdWS,j-N8c[uSA=<@%-Qj6`0N9_k($Z!s)=k.q\HPXHZjCH%%^1Ma<=FL7s)peX-NfoI9X7eZ_'^*1K/?7jHXQH$0#<dC5pKaWZ)E7!3@'C)"m*X"eh^DI%$TJE^,LetE2rKb6(#@4-_/)B>m\+$/R(s@>`Mn,<lo*dYK](8u1#*m([tG,.Z[9.FaZ-VT#WMl5KAkA^1[TDih#R[!#Z]*a_.%M,%9XMRq8RuP)WdB3fNPque4-q!XrF25ZM=;Z^%lmDVA4TD@D%LVg1;kNBL):b2M4"Bs!qUt@P;%Mn-ZNTA9NaE\'IGgW6;]taA4bp=%?l]=LTVA>ob*,[,YP=\-Eq*2#`k3\E#(/DU//82O`)I_(M>?p',pqa;OI2H29k&F/>tI!m&L87RZso1f`=HED#Es/k<a$8194CNB%a+fuEYaF1Hj!pR[B%*X:#DU==FI_L@,gd21$6>(m%6tDCAs$B83,.TE>I\]_0Ms(o)X9mj`BLhE#+8,W%"tSc1:g5h6`&*_M8mn^%FbD:l!G9Hb"^XRreu#5KC_5l[@U_(1!Z!00@R(G)0[e>Aa^Uk0"th'FUkAa?ROtA^UfJ7&U3O9!).=K&K/BG/Y)c)FA>!(m\YkGf%T7R5Fk1AfjO].B[&jC,*Y[IT3_OHN6%H!;q$P!H%$R@L[B`'E]+W.atih01#:SOik]OXm1b"1t$!B%cj5tJd8.-&%81!.H>;05so%<KqkB*5d!^VpVX@:#D6@!FlGp!2_UW-lDAV`7GVE>FGlSJJO?EL@XE`qLZM5"np^UoctahI9,+-/IA$bY%a"55_4($_!Hm>ajdS7%Q,(@D+t'+=JNa@59PY$f5[7R0'J+ge^q7$cf&?!A#35YRN6$d>pm$IZnMQqn`;b4nP+6Km8E.RM-]&j6Z6Z$3(m5_WU.O@iBe-.d%c3$CYE)tpYL1hVL_ugWCU@sSV=#qtPTd15R$/KXV_a"VN+.k<amc(GrLZ<_<KEpYfd9mfY>dLD]![9mWBTSWJY>/KO%J5(2[T$2"%j8j@%mq?eU,ZB9iBHJ$gD)78jJ,rS>+G78NPR#Ss/m3D<$^ap>\U5?D*TG@Q*ll8',8/a!X+8eenJb#8%o^Fm1d_3[6;gV,400GX%)-J>QqEnkj[Zh;<U"`0'`KV4.SNpNc'0uPP3>p7-@6S(,FBq?@8s<%*'HkZ/0H]T%W("i#*NDdM$#E9ql;[K_Pd8[mFD4k##RWK$%BXl9c-<*LC!CiA),*i\S=^$+_l140E]*_0N2/%SGH5b1GS!`<sK:"hTO1;V,$eTsYM677BjsiJ\1ZbU0@0^\4&-*1JXoOh%Q7NFe%I2kKp'-1rI1`[Is6:l.E&@LKu[n-.tJ8&j:_f&:^n<lQF>[QUtZKaf?/X"7bm3M,Zh+:kmLR#B76RS7i:I=&g5$:HD3)1_b@[NA?%N?_O<925aaHo]"g1$<YDZiR'hf,5bO`&%kP2f>9m*#M&Lahg.iB+&jI9@m.)5:r>-f.kWA77Q[Dmo"k7)cY_!p]2^9G"SEp3/!l2%pHT#uG]aN5M?82Nkn^S2$$0=2@g&rfLW`f0.7PN_+.,,hQ"8@'O/eQs!s<OqU]F&^b/L5A2Nfc@^c4RL.*N_r;r%MHU_W)4#YXRC%R\`*G\d=fKK,M*HpP-mYJk'NOA66s<5sq7;FZO+g!t2J+O=O`1ZuNR;mHYBCCbU!>O:3"@-uOUj6SSu=0sD-f,<Q8&1hpA$R8CbK%Mg@^KRc(G<$laFSPir[0K4"lYfRPn#TH174OKNTM@QTmcqF6cWHuS<1VbI[8$EbZcJgM0o)bUB)KIm7;$XGVHM:12+S84-s$O!-4%@I,+FahlRU',q6g>3LihL4XJG#+ga]6'0*<YfQuE'*P\`8;9HCb6"E$h'%@hn=$Cn^8c(&FqSldrZiiOUIr2ATp'_icU-W>5$LTH%(fDVFig>qjNFQ(R9+c^]n`:Gu;U,S!klT-1P0W!E_GptD35D6mV?bJ2kU':h+;@"B/P#OdE,iZD_k`a)d>T#b1AZ0)3s8_,LGT)R%Bd0R5-Qi*l!#P0(0J0,81lsD*W++]92^@fj?q+\)0$#<C!n:j:0TPc_\etdM(d(S%=;hciGgpLof@tBUZ:ta\P!gYTcOiqV$)qET%&[0#fUbh!3[5M>X,ieS1i!Z!nK#U7*0iT6M2+'8X"-8*-Asp0p9(V.AO_K4^%<L_a5c7'6asMZpi8W<P0io&(f;8!Q6]#YpFC1/`%3ZGOk=JdHSfZ"(pa4=fgfU1coAsa7Up)P(J$bAAITIr)@N;O11b#2"_?kWe4TkuL>"3pq#:uWti*qZ<d=+2()I[Z.\7R:giCIIo9%?nAP<Xpmd\J@9PQn6!Wi0O7@=/I;Y1I%"ra19QG)ckVdK(/Q%U6GgBH\TIL8&BM-X!8BGC3a-^2r%6=NZ7WX)-1Q\C4REugU4-3+%_.L>A_2Nb@M.\hf&o[A582A!C.Z"L&M'Pq<Fctg*'MB(]8KeBq-^c7LS@"Ggi%-#8&'cY0cVX!BCl-!/_-2JBnYC']c7>B%&>_"j%JPIeW6D?<*;]t3)pO7WsjT[W1FG"B=/5-3OQfcE0%%$6X)J442ZXUc_,!RT>5F:`2,p*1)!].;F79$L97DhiaW-hk(R&U/mEHOU@%+E.HdTF#RBbR7Z@h$+?T2]q9YJr:kZjkTG/m:.(lrr^l'Klfc^Y]e*"2H>a<46/j]:e8F$QAro0OF]dM%alPK&f+Stg^D29C?rBX%d?fsrR\gpHFpr"ARb'fa#H5$b=f5-q`(0n-52C9.OUAR[Oa0JCF``i8O?=/O#O)8,n^o<J@1e<k?n-!KT5?+<=$cG._r>+196qNT%F0\S>)MKFMHq0NsZ#js$a@l`d(>7#gM-_nu$o8=9PR/Us!/9e>k,:ToK#B#<Tb`<=*\KkeUn^\8#gANI6[Tou1CFh!2FsR'.Y\TT%9*bq^E-`ooi$HDQq)kaH`*L#7M$s-P'";o>,d-9NOLUoY<K[uT&M?WpD3DPOoLa/GaWS\Y-^Q+AS?.l;i8g6s#%nUP?`;P,LX7eb%-t/d3HR!;9AChTo,[BiAnq!jEiArYRqj("k#R7R_fo2`cDC0+HaX1mma)rbh-@g*6!A=8;%dl9L$3p/ck*SI+"%t_,,@Ghb&ooj7%M^:t(G?0ka5S&'&;#pj5=XL;&JLH(f9pL<+=5Im$X6l!R\W0m:9M.lq3Tqd-+5(Ld]6C2`JI?-WlqKB&i$D(1L=HcNL2?!KGZe\#%N35OuA2#@9XK0_`.0^^Y;mq)-N(j=s)JObPa/3V;<ftB:*$_n+:^&"NcGj-N]'[TV[c%7R.Q0a%)gip%0!tlD_C]\B-'V9W6"\U1%XpIRGE;P/B(0t5R\-,fjVtko'!BLg@_CiQbh'HV'S+JE2l+de34GX/=6R!$I(h.f2#Fb]2,6ecjM2>BN6mT4'k)V]VMu+J>4B]2<%D;YUUN_X[c*:ObUXBU]#3&cFM(2bZj01;P/jZ#(pP_a1-6oc$kj#ga1Qupm/KJI<iE>\.>@RND]`3:4DM6H_3,lZu5Q/mU.7?T$Y%4\>'$OsTqb[#j@9dnGpK:0U:AE#t+j#@eLOAVfb/8V_RJ_B97t-.std]Sp[pl3;=[D6,kJ4dYTr7eZQ.en"F=W'"ND!J6(q5n6mX%5ZH@O,qfo_NTJT5_[BENmWPn7nKrTH*Eo2qe(&B-Wb7q<.JQ33'eCBYM1_`3P@QI,J@i!Vh2*4%$^d&Of!7sbLP#,SeL/l0+iS2@%%1S1ddl`/0U8'E9B;u8)h@;Qj1MORjonSr%c*imWdBl20XpcC$+EG"'7HT/a^jWLr^:%q.K`_W7!/J'"i6MV!!u0rSSo$;>3Xm)3%EnImHV?P@c5W)'\BLSCY>t;r[#^"DMs3oiXm<Z&WfDQ$<*TfgV@`3;:OR2Drb1X3(!BWi&@jA\q%^lk3!4/N[8;Z]B:]FIDY^4<G%'O+*\cG#e(dsj8Y//H@-<NAFo#)Ajh(GXC(qlFCs;DUR?Zs25Tl+:1#NI883>=,`g[&ihT[ZV7.p3UrdIq[Fk0mcTU8$7_)0O,a3%/JJ5)**<3p'LB!!O$RO<'I_"`/suDJ4LTc?;WakXjom28k-5p,4b.Cpq/5pV;0H9n$cU66MD?jR'g9b6ME^0HMr$qtML+G6ath&c%QK=9-.Ea3;=-d2c\Lc3sN3\mncH;m-\LkfE<M11k<0]9uAq;o_JWmh0N.lYG'B%k"ME>qHRiQT1'G=cf><W.:d`_k'b`n3X\K_O1%HGlZ<m_FRX!6E0.)mK"a4J/VUiA4gL:3XR&XK>tS^-kcBs2`Y(PV^AeD?-?46;!Vr1Tjt7G2-));m+Se*Tu+%?a7]d!9qC%EBh(%%Ln+CAKlUAafr[e@O&*EDRU([hCSEuA;1S?1?.;pFXjTG`q`_K*FW;Ncn(i#bj6`MQr&3eKl%EEWHQg'trm/;a<Qb'U@a<(U(ELjt%c_q[:2AWN98"J8:iX,+Y]?gMmGHs;dbgkc<R?KMk!Hf.rd.D_^/f0&NVrcN\aH'ocl;n7tC`?^FljVa,Yn0a(?"U^_n._+LiMlKD%\<HtP']jr`8[1h\<W;+l-moW&6]0YR""W6W1-b=lDtc"<o>lD#BP,P6]<<)EfU6Kj,6OVTlf5/`/^)_&2We)!en4B.G3:9r.`fGl%eWN6JX"&f^(LP=pXO3Pr\Wh0Tb(@s-/Tr9pT\,=TPV=n*HTXM*5AB/,pML8@bHm?@Kud\<;]=ZK%A@EiHb3-,Um"nKk9(5m1pj(L%J8D8M^fU$-V>3$!704JqJh>b46nFU)?s$f3%1R^LM0mE"5W^$:j^^2`Q=l[I-[0F\(.5]prbE1Co=gW1[Zj?7<-%EZ!f"5UP>sl+%<EO!_,\Y38q"SXC$C'@FRR7r5?(%>8RG$@cd5qscpMm<X'TL>/`PQma=B:<Bm\WN9Z)>Q78kAC,H[gLIHPLM_HtsekR"p,`mf(L7%kA,#?lg%a;FkeGnaM@,3IZf6MTc)M/eR[TD=:\2A3BXE$T=u9@N!!Ma20"gYq4mO3SF(IU0>2']X:sWm]k41NZVM'kCW=nhQlRBd%6o:2sOVC:i"eCN9=inen.WX-t8"&^bIbM@/HT@(FbZL^-ce34.PL+L#MT4@7O/Lk_hO@-'bnXO.Y83\RhA+kl;3Wr"UFg7-V,EUY%$EpPDP]9j"3>Z6QkF@ePT6"3f6gDHD+K6i)B?^3;!jM4eYiHn-&&,_e-AEFV`),-rcoV/I44kVVpfn\m3UiHZq"06RJQndoHqO0b%iqEF)&dY,\\K9Xk)Wo*oB850thE,>-o1Kn)!C!_r@3Q>16l*%%>i)nLHjb^hSJgiWm!Un&$,=`m/BGubO"i`(Moo:tX_g1=?L](_%[N!LFRUbn(44D/=;;0tMkia#@T0$h0&.S9qFZp:+rVk;lq*!2;d^f+CGo`163k=(A4[e(^QSlO8q,I!5RSL>15%A(GiNI0B@`PTR%^59l-B@?D;<0KV/!Z%u'_Q=pMn6I_kJbI9*_2X8uUjRbmrI)+g[4?dn3[jXKis&9[f!1/br>nB/%DW7ch'/g\1DGDGQFf[lVVk&)%4Lo9m$,V?4DKJWa,FS_OIa3-NW1Ut(C'B,2V,^LT'<`,sbLVP+k#\J+B'5%dk9.n[aMF1=P!UTj.YUr)?4+6Ed%$'#P&o'oMU0Br%L*;hT(m*74Zno!O>V_*n&<gi*)Yp@UcllWCDJ2!<2GX]dO+?5Q'@$R4#C6bc!N$"eK/[jf&_C0Q5&s!djc0nhGXc^pROb<KnDtWY%<+F61"26l0]o9i>)]!SWg:<]fH#jT/\0H1keoJF<n3Q(F%F_XfLiFdh@Hd1WDJYG([%]W)H?E<+_t<_N6Aq:N/_`W/*JC'B<K(Fo%gKF.Zh7eraB,sL_jg!RBb=C=??S6slL/9q9Lj^e:K9Kn1+7efD&_n`Mo?]K!S%\RL]'o*2PKPC$mIk@FlLB]Y^"@`pW?=S+*>)f5%?q@Y]Vj<-T-_1!J*!Or?e;jlh].04$]0^>2'/5gpArd_YY`&rg5_eqO4`6FCs'^dUmUObY8<SU[S2Wmpm<%3M1,5/V$aQfgJbY#E%&C$'ojJ3LYU(Gt`>A'N;kBO0Y=LM9F0u$p,2Z$Pi43(265`U&kPE\[B9d.-Zk#0'-A`cCF'q>q<<dMu*Ym3;f`G23;UieD]6]Z6R%J7%PYEtg!KjHl#D,o8EF5]M4'b=ELGHu?8b'p#"MjBLanU`X70LgZkoi![fOPko*0?rrrm#+43*o(6d+Lp-:0n#n&B1,3"LCGR*M%NWN>>pStm/DS.m^0P_jt<7bAnX2T^WDJ)^d6JMo1,@9%F2CDfu`PuJF)K/?s0+39M2c85f\fQ:[.'3SB)$13(FJM_A[1c\F/2D/7%k^p:t/N'=."4XH&:Nm?nYh`LS8K\U+E]R[48=NW#\'-9]Rs(dPW@qE-W?MH8YVf=UJ>mLhc_p5P45PkFlE:NHT&X"t8")E9J3)#j%LaV1q[EI$I1IoG3/k3/k!P*C*;$@-*beRpi`0kDNLg?_J+Y&bI*c/kOQD72b?^t4K-bIQ0mStJmNgKWn:c0V,/,But'fF32(2_=!%'s4'>.$["e>1Q4MA?M^B>?Pjm&N#hcbX,IG3E]pUkF<;tOE4cf7d<M_(Ge(BoNNqNc2?Y3aghpWD&:94r7jQc@&"Zo9W7B`1Vs`<%f*KE87CYNW\]!/J/85Gl'_#h8D?RZD<!0teBn;ruD)^a__"_<q=-;9T$">5HdQfALH=.O"dKDi'_ai`+/=&Zp:-RsQm'DTiqbH3_%q'I@SEq)CD<_JalAEk6ASTkMOMr7erf#0XY\"3:BBsG;GMkY,<a1a-d0m"CXo7!RAp2*MHZ\tUmd'[6Caf!#sBID.<n9nH]0NLjM%WSR,TQO+lAGT:>3@p[7l^@1c]j5SN`9!PZ`?Dj5#J2Ek\8)@X/^G6kEImR]+g04Gl>7[Ld.c2A=+s0SE$]\#Hb3UqCm05JNN,9VQ%V@;OV;6W5QeT=gO[4+r'n\U/6K#[p14l)VN=V%ZkEumEP$+j[.F=Rq3et\rTA83Nb]c*JeY:*P^=*-/]>BDd8=*-NZ;:[uB\#bjZ%8m,*a#W.lS9"?M#S;jh=F4SKsce4kT+dHHhO&VB$1M2#X-j&gl];;I=:[FK'DMOc)cHA+'*1*_pn!MWP8C9W-U)!ioOZ!n;B?27c%FUL"2RVN[l!WNT2g$/#TP*h#ehC[kY^onrIK-p0gCA68[)!emA6EAGl-b)DFZG1PXr[o<'Ro'Al_O;`nRd"O07cug]M*58R!5h7F%rq^RE``l\f%<<(UTnu.MO3]\7`pJ!`^#GJ5<-%5O?^q8,N3[A+T#=kN*H/g#5@at\g_MV"QRu_KUQ%;<A73%02Q)FKc#p]@;bBCN%H+;]#W@.T7hHc,9_),\Q:hhTM=F`[)q8fK&'6[E*9['Dc>qI-q0%+_Z[51N2Sb&qRB&O-c43+3(od]]:ML^&o!h3+#'eU6[",fQM%`?I,jP)#>q1dtu1YTA/KH_!aT61USlq3KKum=-ShStngYl!\f6[A%*_>#E69l;ZC%>Z'c+6rEq'Cfr#4Pd6ZSG\,-rN6Br!\L;5Q%kH(cXSD.Kd;?r*H86ne+@tk59+h+Z*]Mo^h&q(%M5rrN!5_1tM]'bQTfuAoUmuRid1UB&cG=XhXkN8HZOA1Z":,D73\Q7$NoT;n)%_,=Jh9+][KiSL;O1LAkpd^+Qp'CYD/EC-:OrK$S8Yn!C7;04!.\&`f$J9ca,JS+"IOV/'Bg59k4fK4&F4eh3?NkB+Ml&KpPCah9-%*tp!fd'5BQKL0$`];+Cl3Pfl=p$j=e@1blYTm'_A\<;'3Lm=4meSh<.IT!qG#u[XWABg3E9IFOT\'POAiNl;MkLg=4j2u?\ipaj7%Vc74uD"8_rB@pg&ILAbKLtM8->R/-SQ+i>S+;UQsB7_s\UQi%B:Yci8,c1tggeSpXMl_`#)k6G`.Ar#RR&B#1f;/Vs3C=Vn-/Qml%ls,EjL7,B-0g!IB.S@Ot`!oR\::sXB/DHXt(gekpR[kr9*FgL4T0k3R,=PL2;2VNX[M3^aPrTRjp#_L(<M!,nX?il%1`E&9Bj/a;%gt%AD;;bRN]iFc<2:>I.cDP1MDSrHW*g9nSZ64]nlO8We41be\Ap<%T/P!_<0IL'4Q]:Q,.SBsKdt$IePM4he"=9;B.3U3%l@!;4%fS8:BUBuV9SlKut/9anKGq4nmh'_i(gs(X,)F_MkiZ5XL6-\omCdu_rd<GuR)O=kM9qd1;S6t=M/.0pJ=LuK63@`EpoHliH5.V6m%JGZH8#[R5SjWU]l%$<k&QWlH",((#s]%OEW,P%\>^cU:MP#c.I%lrTZ?Yu;0OA.A45dP<cCXoQ=0WrI6GD.f\k4r9]>J-#,Ll!cF%,pMrcF9KSiZ^BEQGe=H.1P`s27ffj:M]iiVc?rPaS6o"m/Oc1T]dZjOa,rABQj2YcQ9":NKPocrNHllL]d^^3C'.&-gK-D0q-Hq#%Cp%GZI^UY>G->S#%\kG#%_&O!'MDRq.DE+;;Tr]Dk%p9YS$Q.]GYW-2"fVXD@YCn[@?It6^CT4:j/OJ-E5H)DDcVVdZ:<9[,*#!g%?Tej^1i-8O#WMNm"E4'a)=d-?=[3t03Nh&2Rs>o!K2b0!(4@pIo-u0O.;k5g[9P6W8ia5q`ijRS<U5GpBN`YeRjKME9ma]bUn0=S%3o02anf$g+)^Q(rfKbZdHTs:66ZbYnD`uK.ASR7?K758:4rY\1B!F1^pfrGZA6iuKg=_mmg3(]apG$in,=EE9D-U'R:s<a(WraM=%q_5g2b*@q.bZf5cPD9]?".ppgUeX-+`GC^gi+]5Hl"!!e9DEY[(q17GXh4<Eljqb`naKhc/fRR4q,>qG`8!O@J@'!+p4?\0jB"C#%#BUPboc+[5(Y(MoK5\p$!mm/el?J(Zgcn`%_?ppT.O&M^T0e4VRDD#L3a!f6X)\64i]5?C&J`leg&Om('4<[Ur`7FICoh;WI^CM;%G-:%L%\fnL%^rHtPY#"D.D)n6;T<cDk#@RflP!<"GKsqX!]g(q=G2^19ef"&.MrF3de,Wd@;-35D1Y2Tf3\\@;_/V"lnU\YEO/Im%a7AZj=)D'J)oqNBR/hJkOfdkOlP5L,EOtPObo`6#3t*-W02D;0GsmOX;%k\T%8rtuaf<HHSV`6P)g6m5)XM?_-ihEgLsF^JhmZ:n%#@BK28]V8kIO>?a8&2su;<lr>IE1)>)P2pA5),@QB4:LiM=u:MG8h92>oRdBXc#'5<s_.^E""i+KVV.rD!P#o1PmOahlgfNEqfd"%P0g\uX:kn`fHH#)ha!.P_fN7k0*\u_G$"H6=b+QFO80JOF5'.)%EblD1;`dfI"\S97:/\p\?@<U[e,uLYG+E25>1pl4IQoH65=CO%8rDAY:ARn^EZ>IGOA]_>.tOtL%J^]JOj>APOJmLJMFcl'j-g`5\*-0a0"=,Uj8!$/X_b1S@",TKC%cI[F,ZilI#bTcN0Hn:5:O4M%c;MS<m4,!-XP98NZG(BlM]G=t./"iB-1-Rm)o*W&6'?Y[[INm#OFnTnJO9N=5SarX'e]48+#$)F$+`9WG:MObVi_t(9s2J=8$(je%4e>:D&?2)n<h&Vf?o58SiXK%Uak#JB%d]k[96"oc*[.R->B2+KB%'eZi\nE9kVq69+hbPhhdH%/R:HRIQ%[*X[!OJGkA`]@2XqOi%f'LBuD#pFf%"s++OO/!MV,P6U#ppBM-V32Djqs`3WB;LK@N`9DI-Vq.ZB82JfLiE3[<-6lhNmrY/dQ^/cVacFk@A3#WRj/n!Yu_,%7]=>j\>e<>1hTgsBC@W^H2`n]L:UF>=/+\C>'g8qj#GBjAp4P[lbCWI6rQB$;Ah[]P[S_q`Ph^b?/&])f`=<gk:'<tWWs]6>0IH<%6(kkGK3Zc&d:5p-LF?GYMDAT-G3WjCCD6.Oe]R$3#3KQVU1WkO3p.oKf&p_ii^g&523cN>CFuAfen!&q=h?\0AW>m>(/p;e0J,b/%8fAI$2t.MjK1Ot2ltk-%6AWh4"/lG+5HTlu:2f@dIEpSC,6Yc)A+>JmD1s6*M?#'iD&e,>lg+(3a24g,Kd7]+ZI$U:3l<op*%!dW%I4Ce]^d5;lc9QSCCcG8t>fE:Ub?&LlpS1s]$%jq^qdq<tH#Xgm1iYd!Yd`fggYY?4j@G5qK\:0ROSjId_t9Y)gcG[c_?$dqEN\17%H\fLp)TG-U/qP]hQD9=B;Dk:#,YF*4iV073I)5F:$j"+a`QaeRV73(?c\`#6c*migWp.K>/OG1/Rp2QWdCYOj/W,PN0*/55#BbKG%EX%-1QB#L/[K;O8+eT5P%,G#RG``%mLcUM16#clA*SfP:-i[.`kEJ#`*CWTCeA-d>g(S$!Z!s:!Eg^S2]Ym1+b.s54.kb8D<>@#f%X83W>/S^`f/)$MG-p!uQ/Lr'";AN(9YGP9QONVsoaf*#7R'a05@r@2B8/7NC_UKh_MOBmgRCZU\+LmdEnJ2,TfeQ9#J.CLJkIEuA%ZsmUXq[[2=cq03r$M*BHL;/TZ#W'r2njU5DkqWe^C*gp!JCRd"*8lU@2$/&"J1<EuOu*X`,>eose!_1)E.Y-fRH+=="EodNe8H2d%(?iBg!k[`(SMk[]^\9\qlQt''_-^p]E5HLsq=kZ2#47R4_#)%6<KtS2dtL7IL'A`P#Aum/dbUa<<DFeV*R2j;M3GNS_)!*0+!<Po%a5dZT\aoQkT#SH4g""3BH)N!WkF0"D%%I[E=o=g5Ul)#0drtgGG0\:mf?i:ZZr+O=XBqJkl\KS]TuEO--$gb7^`:_6+jG"j,;)Hs%+s6_<G)hu"`-\5<TLbOcKiG6L$LAW(ok:O-8)D1ppW!\p0'lRA\eEFQ9FL;g?&FB:`l/1`>"6Pip>u@4Nor[N;FlA''f3$jF('cM%bPKCb.*FFpW\!>'d'E"ZihpoirCA/BVM-Yd>dF`gqQ;Y>0u"=?M"GM$"T,F7)KI"8MOR3U[%Ma5AR^+@Ae$TC5H5"/-Hslob2tYm%n^<r4CgVcd"F`dN5IAU[Y"`8&]VO@B"(IDF%k8Sl[+4*lE//JMAZNRV0Tjao28t;WTi\EE$[:06.<)2U:mK^B?nbRBR5#a9_7B$F%bg@,K=*MIUpXf\7g6@#spOXec'-67>I2NMYL8R,E!OP0!B]_!E8'2/e^GGSN5XF6f%s(8^Umt''Q.Z18G<)X1bT[$(OY+>nfcK_<%=VrWQ@Xrh"Jf-Xf7Ui4an6P:+f:`VQr2iNUY3#25-4o%Je\7+lX\)orccrHjeY*R-12b#M4qM/u08c"Hk)H$_$F;5m-K9oIH.S"X%F_7RS4ZHH,q<L)O.PZ.m16ZICfM`ZB4!CVlM>*lZATL<?o!;=j]m!JC@h;)hF0K4aUeo518_KA?Q6Is)0rL`sg75IS\8uDC&P*Wb%`Zd8dCl0+!eVZ?&8gU4UG=-TU0-h+sL/eNk]9=YH]B(g?-0h(o2<F!ZJu`n,HV3JTh3j1Fg-B2,<RRY(f60/l7:@0V3EhX*5,'GN%'M"(?l?t0[SgrKci<Lcf#-JR;qga%mS8FQ!7h0;#`]m&6Mid=<fFa>k.7)a@'Kb>nWO@RnKLB$X?n;J0:)0''+WF\g?o9K\f_Z,0%b97o]\?:FK70"g^]rb:,'O<e\rMm/&je'Fg(II6aj*G(X3]BDP]=5g#JpOu9A67>eK9"V9TU\%tZt@>?L?:=";a,UGPY3PXjk!,"%IXFNA$rs0sI8O-Y2Y>F1HjKI=+*DCJnbS#0#$pAKXFr#PJim*3.ce]O7&B+EbcshlIag,/(]iYmS+B./>H+*5P48k#rBF;U$_[OT%RI\%c=P6s,^\I(ndd118A04+fp)%CE'.JsIFAcprJYdJO.a1I4M_ul_/8Cg*ZLi4tMhst.8Q0(&B!I#:&/k%&^T4;`=:>ldp&)pO%(kK+dI'5[=3`VE+:jNgrJb*&*j-Lu4/OZY$4#in`,]s,.=fk$CAh7^3<S\*Ih8>qkNPeBbH;+eZh/\9HVN6)E<WXFlpH`U%?.u.g%\5&KCVZLJ*T$RfM[&@jkNn2[;W4DGc$57?/)Gn,.C^M6NJ1]F:)QkbeZ&_(+($[j2ddp&O'#PpqiQ8M\!m]bQZmmH=ZKL_a;AU\d%[jt:(/p9e1K9%me#9$FRf]P'mGOYg#Qu,YS:83tV0jpq!,Q,9BAI@VLGB%kcYFte31i5V?k=5NJY05C3?V#cbQ6MoK-7[bLJ2rD)%3TN"DMA-)8#,1gMUq3d^3,PNT\X*T]4f,:oo&L4F\\SDj/:!dQ:'ltqjt(**B;RGGZR$s3C1Q>;U0?DWdD,TkdF.AcdH)?7<V[JH%=W&ZO\UIFsAW_[sb>QQ0-qcJ]X"<Y.em\]$qMV=D2+`uU6\EKrG[kopC46t:F;p*!@0XCd_D%E:!:Lu<`-\T($h7SI@j'V<X.lPS%]AKA!?l=mQ/3g8"#d_/M.&<"@\j.Yt\V^&LnHLt,G$42QaJ_1#m'(^AD//T$_YBHg?\c8:h5kS&[+mMk\0Bhq?CL\=jQ4feLLH4a%h4Pk?d.g8tQ6#Xn-#hU6''5F7:q%hBH'_'+ERLZH30Ad0W_pe*#W0%0KFkN<)2l$3$K0VNWLke;k^atF18GC8-148X4-8k6Za*@N%gjJ;L7i@q8K%*g^1/q_AU`f\4jP$WmRnqp16?"UVIK!8$'<8[20*$H"ikasekV7YK97HusD^6BgEFBqi&J`X^F(#UnB+Ycl?m.^k%/9RZ7Q#qnR.o%n;Rkcd3;<ILjBPP]gc8hbf?F/?sTa7['282E@`G7oAZF-ER@<\T#B$Z>Qk6QsRk=Fp5#`4eRPEIFh/1"QP@Eq8D%Y;p$&?0B.loq0]?lpRjFg(UeJ@[u@9j)DeXO`S]U-[so&ZhRM8P?:iG3o]*1=&.3,XFQ^7N0]S'%RN79EIj4!2r?Ua6BV<(k0W(W%65SW"VFI&cXbl-u8g]VlkEkXIG"s0\[9l[aG`.57[W6Q8>'*DRfu8kW"\TW]3FJ^cF2_'J&c;nAi?!1-%Oc%!l:npFG'U=0RmI93%$Xq!Ja=J4,dsYH(`$DS=Y&f;7LN_r"*uR/@mI;>'?14o]+Y.!P-;7Se"`WH9.RN^qjuM3]-`Cuhj[9`,^-)!3-Cjk<-q@XB@LQq8%`u;C@kU"iNGks$LqF/*HnnS:^,(q@O&LKs%>_R1`lis=?]iJGPbAn(&R99jb.0Eg/Am)"0"JR(<ZUcq!#Y"5g`I-X^RaZ=SXH.Xt%PGl&q(]2LJCM;Q.*%;d,`2=\Q`Q@k3IV!jp%J.2#=gNHDVfN\DolIWSJV7"F1.pereWrNSM_ZZT/Dco(\]/].M^_1;-mg0],u"ac%oOi[Jl-K@LVd#u^s8E[rK_UhPM.=qHg&)GmJB&OtrLc75Nok)$T@-86^eo5I:^H.<o%ZZ^"IrW3""1d?'NN8+pU0kb;qA;-Xru*l%)7SNHlXBs6p-`WCZT`-<7DS;(V:5pAr"b!DcZM7oDjA(e(7ept'FSc">Nklgp%EcL!tX%1^[e*2%hI@3dp"Z%S;,s=r0I6ci:_ET%Z['j9#K>dt-bs71SmG\CQI@?RfGG's0:$iFLR^#o@'ZI??@K&53'1[b!II+SgubVbcI(a$g6bt3k,_20l/GfTH&A(lpcCk8SX9%q%]RJnFgR"oSF<`:J.HZsmYW6QT03'T;Wg5&#S,DeT2+uZ&e1t$p-cU/Pf7"T;"Q`Jh7Y^eoXE8>(6GVj-hOj'V-OkoJj?`I4H70eq%0\K13.r`Zc#8qOGHi!M?hon7=FY,nb_eOQr86AmA@UqmXf),1Uo6(/U61.b/6;E0cSgBbZ37/l1+kTCJ`A!Jd;6/FeM*ANK<YXr6%2nu&DH$G7R.pkKV4UP$qLIM$=Oj`)c-1QEj%XR=iP_=aK\YC5O:-c\d5\sD\$,#^MrtKZ.mE*UDdAoGP?C@0s;6V;W.)DsEHHD^O%0s3lcmFYQn')/RX"j-u]gu*ntSH>T:KE\):5,B6%WmAkQ5Z+kP<7/\sBI^,UGnK\*LCI?DRXG.$i:*c=&ZaD.L=`>UM4!/M`3JY_%C5sV$]!GXl4uh(t-Rf?5cfrEoWB4M0"KEh^;$Z`T,^N^g!dB*Uqa0HP87DajasZ8LSH'bkBAMA<.%RgV22euk9,CuTft/P*7otQD%[_qlj@n;8kgn13+0.toldEpiq2'k.PU9A'd8dYrO^t3si&eB3$QJVa/h4JRlno!#W/B$5.]`f:mln]6<I:(Pd2UkBa==F9M+F@bB%l&5!(g1sEKc02(t`8hB4@f.cijWtfu;jUc<1Rq`&RZKld)O!NAR[#'H)AnW27FdZR'RnHpJhDS*o3F7E(!FQ8l\,O_q/>[-oh1%f%X;@OJ0ErKWmb:@DY90$K5:YXk+"H6H((l:@ph=Kt&DGbI!n,21BPTLFijq4seZ0\Hp&[ti;>p@/GF<Z-T$6'n`D@/6r5-a.6p.@=%j4bKcY9,WJ5AKii&N+l5Ru2&VSLZTTFgK`S<8k4+AuQ;.AW!g%kQ1piZ8,E]q7!IGaREGFh8HDO%D0)PC8)bU7IBCR1TqlHAmR\o%bl"^lAl>JneTgi:kXn58E#>#:KS#6E52[9eBIYbQg+*/5[l4\kk>Mf`DZ5@\CMp."0r=ff/gH)eHhQOTni*`oj_m?*hu'b@Dc3Eh%]hHBqFu:#Af\]Zh[*rX#EL1."\&Ct2@D/.IX/$9)MBY]lRAUG8hB!IrKfEX9QF;9lr?hkT?U"g#56tKn&7K@Sd_L)E/isbb$nnXW%3q[M)U@4t5TtfXC,+7IQ3D"P;(rt*L\HGnOUAS1"5([n<.i\toI\ejXo#\UpnB$.Kao4Rig!lj-,?*d&.8A>D"ufOA%C;JgDF"UB%g#[$uQQ$=6#6YsJ@*h*ZLP_3k=b(\a2>VeX(Jhe#J&RB;qSA-]_2Rs"@n'$!_DcJ*k1^>>]+5T?\,<haa)P>b,=o3_/DNCLeo76Z%)^(`dbJAZkI_-9e'`C=H!T0`=CmuI@L:$(8K='`m[,hg][\PAfX-af,XJbAqZ*C:ABo9en>G;[#$=gR:1i/q?*q@*Ojh+=PSar3X%X8Kj2C9#(p`\=JlpbsWpY9,2d+"9k?VC[GdkT"s7#acNbPG4P7857$jEEYfPe5u\^?JW\=ZZ:Qe.CL+/=`?.ff/pOXnlO/@lj*>+%l_?DrA5p6kA5mtf<;hps<N/g618a%G".BR#$uIJ7)WV5*g'Rh9Fh>H2rr2:0I^=M&/%)844TD1f\aOhk[hS&8Tq'b>'#u?n96juD%qtQ_t-:DUigm,u@KJqM;7U_LlGNKXkGhc6`+UiNX\OB8*GlCI?OiB_u;au)6Pm.<4%;^t#_MUpTQMrrfF?@h0YLHTgG.lr0EEI<%%-_BUJ;<qO;A;AOl>Br!8]H-Mm22):'9j\VUjC$],TagiaobG$ah+M1/]>^@<oF+Lu?h7X(.B5@8h,d%M%s@2e:PG(lYim#+ZVED7%S"-'l]*N-TjmU\;(qWe?E"0B__m=T6aM_s7XPm4ZhOtC$f:%/b[Q)+g-FMet>SZ*W=F=GF;:GuDFm`JlktdPD2\`RAT=m3=R+2T&%E+VWs!.7Ea;?E_LCUqS`EkA_,i-$:6gg,%8d6tt.Kr'J.BQ^*P6k-2si9lV++k^8jB6geQ7UDOu;er26NRIm?#A6RWlRW5cKWnBC%(#m(kkMNfE:Q/WZ8o8.R;^7g/bS2hA#=Fie=k0?0]8utTZRFi]f$G-@%Eh=gf<FB)`:^,O'0e;*>s,qaH#*C@[75[Kp\7`GOP^c]%1j!e_.=I>H!Z,T\)Xa@_b6&#LQHLf@kuTO1F@c(J"_AG-)E7[+Tamm%qnb@7X>Zt`]OJ-Wb;Tpk.Y5:!#:_7/8nn6*pP2`,!Zu;=%?4FR'S+q>Tkr,>bNYim244*6Zd+8c2[OhHk:>WT!5E@0W/f!l6T=lXH,hh[&?/L<%H`_5#X3@U6&eV>6QD;lt\NQb20J7_bE)S3,%5inGLYc:$@>RCB4_5[uXrpE4Ai,`8Wg-4!?f<t6<]`Z:TW/<OC7E^Y:JRSKeXt!a$jHe6)g!\6)TQa,[>a/YZ^t"%)f<FfP0)EJI%:&_I87GVc!R*Dr_DDaCd2lq(e_ng:O*&?[8lDcZk:dr0ZQa`YA$7q+YQi"?F"98c`6g#+*3?41PB.r3dXrL0+'SL.Y5,`,h2RG\I%.I[m7$Q__=Wj1QsnF/C"JhQ+!=.)'67g^qI[bLSd=-*j]^3gq'J%NtrA^Ep%GH-rON^$KYgV(6mm+IjX8=r4H*^N+/05\sJj0PFt%Yrls)7,OZlb"eXEpU+q1*WPg_ocdj(TgGXkfY0c-T@/l2K@h\'No.g5Tno@8?$FogC2Uou+"3c[U'7@@0pm=,0Up5UD72-!U-5I<%[]Xe+;tTEN2dKi`LJ^S/W?"l%_J1O9do'K]Wbb[Ri[+Oj#ZP^Ibu`mjq%gW13m_K"=I.defFcJ\dq\I9fNtZGJOn^s%$Eo[cp<0U%8Hk#o7u-k\eNjTsZLFk/9n"#Q%'-I.r"l'K(IaTIf[k))E-kIi]J`LpjQQAIUHD(GH.-c,&"P%*_nH4Th@>]^a=5]64X<S8!B/e"%gVO$S90,?E.-Bn>J5^$mk1A6JN;@ZUFrd;7$g/MqotKaRH_.!km6qV]mTZ3>?sObuRZ]H%EUm.@OoUd4S,pZ;Xbud\)!ru^6crD.%gd_8gDJP/!5'89okG/N`7/O`u^6'$=^c-&?M9i17!TYr?+"8`^m(:GUB-YkM.n%Xe$e6RXX6:kg"6&boS*A25#:&RS`u6G3Y@]E,%acT]X)4aHKBJ1i;FrT[]MElceU,$EfXRu*<\XZ\>(Z"aGf`H8@=F#IOF3#/cB19Og0I,,W.EIQi;f*t^S3ZO$1*aB'921;_I_Ig'%gsElQ0\d[<3'(Vn(tI1h/-`4K1[u)YmNBb-)e'[jV\"[[3Pp'Re0[51jYu.#a$6UWd`Hfkd@%A+:,dk,)'&CfOHd[RNLp[L3Va_:%l,"1.]7c-Zf)Ee'jVQIF3,CHp;cjN"S'h/9_I7p'U-a$iAN"EU$kI8)5VQ;J#mf@2YbGd'TK)A,lkW8j]L+p%b+J'KKACq(RHef4%J3(V/gQO_3bMTnV?9W(QBP$h680kAQOid!4N?&d.GZU.A-2)5Vq!0e'ep)@?<9fD,:@EF7Khm5,^BLmk-85Y'MC[A9Vd]Hk[IC&^%X#e.k8:*,u`=eD1b^)nL?C/77,Ip2'4RsKre?g9lRItUcd.4;=Zt,V!mh+/!jjmtGUM*^=m0/sAj4L@3"@FeNP3dATOht:,WY4'O%?U5`->:^6TMZSsJiUpWIcpS6&6_L?0!`%GU:?=a2G&r/^F_k1k@g<dlLANLY_8i[p]MhX^*I-J+qI-GbE#d0c84&d0^"_L=$^fZk%2Y'T*B\@(TUq7TNbq_.73%)ape-#$CSTA<p7&c2Pk0M%#Tl=:MU>T697:CkQ?i(j5=a?rQ'VJadAS!1nQAHi_&G_c;Wo1:3>Iohe%O,Qp)`2Ls]";"Q):atj-e92uK'pN$@fl]rNe$E?#0XeN('eOVfGLF3I7n.B%';2kdB%]q"Dera8%S%0"L-o:CD3!ocWc>"YN8?t^%e?6(:+Hg0r'6Ku+)C(@Q4'J<;)r$3e$Hgct>,fq[jQKhgHA$"HpX(p^)="pH[>5H&#p^KPR7UA>=*]c:$EdpJTf2um:9GCZf!N1"%jpSP@[7Z%q:54R!fd:X;25^RldS)8KK3,<ue"st*g&n&&<SGI5p6(BU+T[FrHW=_0VM`Q,ZVN*g\ET`>9jp(X!?ZkSHqnW4h:._S%bqAGm^'STs/ur8pHOUR`hb=CsB(!c+]'Q#N0Bq3*D6oddVO+L&cm,WBpZPM4__o&"ZhndgEP6%m%bP6E.td?I2D&3-c>HI/VW*Ss%p23>O_9H5TOk4$`ODj9[4NAUqK(pkj>H2.bfr=ORp#g2!4Lg[PdV)E$)p4L*Km^^j7RPs0AMWE"n.7l(O?M#EZE:IZh%T6u?oHf`%pg]DC&.iFnc22Unf2Z%rU1q4*!";D,frX3Hr0oq^[rNDdH#UgE#J4rG`oXk!4.),HI+<tP@XdhW-a3tZO).;)U8Xbl50!:=T18J:%<1_V+1A&R\<1H-)N>=/f!X.DKUHK(M9J5$!B2.`4"];NTGgO]4IjdHl>ts;7KZ.h>PEN6rVZF[U)XV6hm5\E)Re*DTMs)MI*U]9S%*4$CN%sOj6c#9_RA_^jPf]F_>ds_%:0Sc#I7NLn?G_/7AS&dUon]TT3>f4X@kD2b"@V6t"dLPc5eJ2;"]9FWmm#K`'&#1B%7$@Xi%b$*(fHGDt*d6\BrPdA-C?"=Mh[t`Q!g%r0Y^W+O;Q:LQRrWXf:oU7o83A(aVQ5=Ei\X)*3nt-j/;<_"m3A-/WD$@"ZH/mtK9,Ei;%N`ggp:JEVO"0b5/GB70M0NY>:8'CkS'5:I9??'t78M8!8$A@g%UZ[DOWf+h@]5roJ](];E*7m''AV4j.7"GB\")ncoloIE"W[=uS%(ap5S3@fF4Fts/@G]-&S_:d;C)7jA\I*iC,)&#D4jJZcBmE$ug4$nVMgt(R<&A,ZuDE%TJ13"m)QV/7j&+;,P_C<.Hgfu2=Ab2p#%H:]ET%c*nn+WU2:<934]R;L)]UJJQBoj,?PR>8b^[Vg8o-jf71-h/`:K>Y?kgpDT:&U8k!Uq7oS6V5;;Y"Y'q9&8XH_['0)`U5Rp%<u34I_RWqn*T]JWgf`_%l4`1N-BFkup4QI_WF<$A.Y.k(i$QF_KADP]8te^"nWNf%d_]ZgcDg!YE16!QF[o8;ML'Vf3DV<.&+1[j%30iSW2KTF'_p1c=1R=,Rb+ZNu3D`9U_e^p]>BsIr!pmN::Ou:oD2IhP.!9eKZ1V^_9QRS.<Er-S>5:\[,t>M&RE+%oaX\aYo!NW%%ps**k-Vi0]TsEEFQ9EPS2B20u4A`\fE[(76&Yc9:$VEZ2"b)Z\7KA53Tu=EX"hBK2lE"eH[S1)Aiu4P/J6,\:24_MELbG/<#2J\`%YO`d)&ZY&XmANGFWH[oKkdrh5ZVPP3X0c_cHdhfURU`Z92`mcY?sWch`>Q"E6E<:8=D'Rhc-iK"^ept'A9l,6PUuZC[2t/@m[WRS%C9\l_X>+U9X%Da^^)ncQAg?^__MFOXF7a"]d?&)M;U;"`%XNI*^p6mTIYr>>\#Ha=Zu_8P7dR5:48F9DqC@`h;dGHQki>^A]J"Zo%BFZ2%_0b[@neiBdDZZd%)QZUOI_knD=]R29_Q1`LhC$Zm^*LbS@8B&h!YHu$IKS63Jk"E*Z$2tRdFZW'piA\Ybb8MZ/W$1]>tg"T%amSZ/?qhN8bc:Gn`b$Zi$If/:3;YaaR!,XO+IM/4^V2ro<aE[,kb+ehXK)\;`_22q2(qM!L(a/W5)6IYDs'/C"l"fW*2DE@#K!+!%K<l.Gs-pian&&&p+j24jIoL6>>tu7uqrr!EMRtD1=@j>(h;0^J,m,@.:hgHu,=&0+etZ-F3T@pni,$=52oe!>Eg9Unc)BplWmBkK%E6*oS1:oB5Pp(KKb^7aj^kZM(jrfT%>m?@:<ubYBQ4P?(CrJZ_:CV$0(kO4uIW<(]FXF$U/tf\$M$fn*0q/Wgd\:@?>BF9Kr)`/O%YCs(IQI+',J[*;<8k)m-U8rY?r>6&"AO-mMJ-]V`M&[(&AC#WcH@rL3AN]KX%O[b9iT-mX)?d3kh]E2Y_b?R6WBegh$Ybh4FRN@u%qcaa_I$C<hr2iY_lo#Tjba%>UPHUeY6mJZoj\)R9fq6W_luHc8%'/*;-4J#F5.#:JR=1_043'`]Lo#M"[Nn@YYn&hnWEu+W_$ZE%%9;oo3nD%Inighn9d7W,IngUmSa#6!n[NYMf[NPnL0`#=OM)hLOIA6O0<(WkB-pVg`3L%p0ifqRDb3BXPdiBu65I^f(hWB>sGKSU(%l-G^EoOgO*s3'SG"3=5O"$eB2hm!4Ci#XsAKms5M.Qb8"am,Vh4$2:<);X*$nRupf/fQl_qhcT[`f;FN:TjtPl?Z:8Fak\rokYm4%p%bH>e$D-@Ve:cp:X;m$c>?8nc?9q]EuT=hL$Y*f[u%$O;BpX.,I/GPO`G=A<kNXAb4TfpSZqEHN0ae;`:7nQ^6@`gCa[PGj_K$W%6O;);34EJ.j4or1H^r>h<#/.fcK8g-rFXN[`nA"]/Xs$XEAh`%@BK39cGc1/7@q_cYt6(X$OujmDB(m/k=]eMO(Rrj5!NWAEdAc)%M0!rc3R6_HY/cN[kbB&P)qS[#l(RdK/(\NBHq54DcBXekjj&S%m`2a3SI7VOd'7q'\pD`,HKWG;o$3L0`LX&W/aclkT=AuSLZ?sN%UO(_fa`gpDfT>*i:EmTZ36QJE'N1CIqGi6D,qB\K9tr,8Z**bs:K"=a:3k=/ZRqP]hXnXhDAIl5Rm-RtdB,BLhXh\\h82L+4Ks?[%>kIV.]BEaQU7Js\kL\ib+&1tbp.3kQi\kIO^$->j]X[2b799+6DYhW1KZ<"QI5Vlrior40=8`j1_oG/*Ui*Xd\X;#0!F7/n&2#<J%^;7jY/gfYZ#n%Q5&VkZu0m>>qoC_>=3iE;$G7AaNj\+`Fb#[<:<'FhF-J!6[-X9?uj)?`lW2f<JKFMcOdru'hLH)H]GDP(1VPUED%F\$5F`=A*o3^bc(%/&8MlVRE9S/19Y:E=_<k:kdJc_7_qgBl27q3X:"KW:e;mPp_BQK'Y(ol(8%YB&=uP><%'T_%/:4.VJ6.9rqG%8,!;toR-%Aoa16$1bF*l.dK9U=!R%D:S2U?'0bAk-%3Yl>NQS_B8:RFJDMXMlosAFf>HLL#cJ9bh>LWl--Ai$GJBl%M`*utpS/pq%>kn2e[)JP#o(U<nYZb(ANg=It\ZP,cf3-!u8rnH[PTKkq\b,Z0VqgC+h%#d$%.+YP+UHjV'i;,RcFnX.<I5.,LNBDAVXS>REs+n`%c]%#5d,OhFMrq*Y$p\p[dFpX=@#cX9r>c:.*9V,cJiWF,`,b_@9LNp,]+N0,0tl'j*=#`pZW`a!6["#OX<8\&0:]pcjWPA]nN^Ae%4j0u2l<#I_[g^d69@YMP_0-t@CR?_]YqXup>KJR)q%dC"0h>r<ckRsBZI9DabE9KfBJ!G\JfuFF$NlOh?P0G@jg*F"(c,FO2htXL%\5nt(:4OWq$U."Tcl&u4jhii+63]R9EmS@,<mMJfN.<L4<_PCR[U$*FMcN<_(@&jB:S.f,H#%ItEs-<#F>I<o6E%0fY3`Z)6i0Ia%+l!j,I<*+@rMEL0TmaiZ7M8Uk%.-QMB92BmjJR*mE8PnD"dA.B2^l;P*cN!Vf`(:lM3gA7q[!-SCq7U[RJFR6f*q)J(*iVS#jucj%'9>chpN'j_glLDY0H_&@&ZVm^5Y/6_-f>gQc>SM@.ID_;?lBT>plbd]6BaH;(C1:U3kLpN"p*rqW"cao*e:p7#fp_\F)Soo#m+R9%aue^$!X$;uE$,Mo#_^G!@:s,'J1thb-]k8o5[mt3!Ks4]Qm,-V/42im&lV1=]A;bM-)LqL:h@C'V?fT'(h;WE&>k9F.&%H.VL^0_%FLo-hVJ)=_<2dSd7:'#643Nf@h0U$,U,LnK9[RZ&+[tKkCK*@=%N2'UXL$@V.E[c!Uo970+[miV#E0*mA_kQ<NifA!Mq+[!3l*@d%Cu)*r>l25>Nf@?oRJ\QN[=Vjdq/\>\Nabr7Lnu)bGVBO=&1Fu7-W+^5cIZTQ'?"Lrl&K2i)Fo"d8SLj(>8_ZnfMXmDlm,Ppla9t4%4Gci\'&NaRagG0+'nMqr</PR:Ce42/:FB,7-Tbm4jC(jRA1'SU,F.1Y2A"7?VW^;0SIT.Nn797ti5od`_3=J+M4MjC-$D&US`%U0%>QIV9+U!*HAbCT8P'SaiB7]/B_5VXrr#JOZe-3tJr+I_2-bG$:-o[")"-i,K</EpGb%3eKHQf.8AJP):TQ2?6eV[QV.[Pl@!@(FO%=`kla\\"t-A^^sNH\gZl59q^KjlXVk.Q8[CJ9t4ke(JO>mQDHA'CAL;)H#5lg7*C"Ca=%umLDG@[O48,KR7p1UN!pMgfk`?ia/:.%HZrJ>5)LrPaP36>gYq#b;S]uPSV2?VY8Q,bNBqueIPuFhmKVA5`-^\2-Jl@2n-@`1-1seg)!nH,'hjU?".3e]RlU'Li#'p59>1G<%/"],')dj.D(6n%f=:C=<H+Lh$K2auHb;\(\:e&8pg>>J\0%X(8A'"q128ZekaTgj"R;@u`a^g%fEon;$\4Wp?*.Fb'Um)o,08")&%b@TiC014999`)QG8WJIje]<$$EG#S2brFHG:%U%7AgG$.B`QAdJR[9FApfrgk*fU;[PA@P.c3[X=H.=Gnm,3<`nU<T37[V+<$`NU%8F\m-mW+b9\o\/P-AR#H]+c,n\kC32Oj#(cdaO@:4IPG2khD;hP)I5AR<6I\Wt4^X`G&0?8L-+RcSCofQ8=S4VX22F#Ai2q/N?MI%!Mcrl-0f%K(_,c9&Lh*G+,Zap$<VS8).<9@Oo[H[cNLK=_]sAC?pFKDGE1YtO[:)!F$lk]Of<CA?;tNK[lMLU`IgjSM]\4s\^GZ`%c".t<R=rqekjUAa$1l-!8Vjj)gI`Yu4GZ,:r)(Q\bdJTrP0e,!6a49uQ/kY:rQeG7'lM"piMi!,5@IKO>flnHad(*4?V;:c[(A*F%,nH4ap0q^'H(_0c(2-J65k@;(J`a-e%l>5SXXU@$0<r(jQGL.9I2-alB*N-8aUHbqfd![9Y(]W#,Ho[$aGq=0[=f(NafJY`5C4[R%%TQaR>>=nCb$TtA=i,+VSI*(,X%+Z1J:6-pnOuA`OmGqLE:)h9&;eL(X%/?F@)qp!'M=NPD<4ss#Ekm&bKM>r,b;\sjDREAIM&D+%q:gP6fm6p[IsXBLr9aF8,I'?k0hPoc8pK?`p;HOtG9iL;Y9#.]it.ICX=<UjU2c_#Q19mJdt;ci]]ZI>RJ>dC\)Vb2i_p/&2*)OL%`Lfpg'gI3A?jM9l:Uo^W&MV'RQ4sAkM,OQ<cQ:R>6^a:X2AgQ;MF!e7-&.5f!6pm,S@ftopRkM'b!]>^WrfVV*^Qe+o3X\#:5/Jj%MmK(4mQng#N8$>V*g!M4VPJQ`4>A?.^O&Q#$"tTso$!_d)<"A]jT#64/,^]\pg9Obr/l$ocV1nHC$!&+Uu:i/3LFSio/>BB?\.eO%&q>H'NpV\JZ\%O>E8F@r:@o3WqZ#&sL`_*DItf'F_rLDCp3?OcnQ>]<YLe9H]Ae8/q7i]Yqhr5e`Oc'9&-).2ci<^qg&BuLIf//[%^\d[WJ+NKnfO*ONs6tqRs71qpYeRsMh/@c?a8#PhIC_(6^]3(Qs+gKdQHt'\b>70i^\ZQSs8G64HN!T1IeK,Ckl9bJJ,RRBn,Mp5%+928b5Q0q]s69DfrU@9\IfJ<>r:&aE?iB]qs7sRqmsk<%hu)p>hu3'%n,N4]WulidmG7ULT7?`FJ+J#YgcpYIJ+g4`rf;R#l$ia')($'~>%AI9_PrivateDataEnd