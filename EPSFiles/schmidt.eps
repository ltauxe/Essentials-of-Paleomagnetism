%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: schmidt.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 11/11/08
%%BoundingBox: 0 0 396 270
%%HiResBoundingBox: 0 0 395.4409 269.9351
%%CropBox: 0 0 395.4409 269.9351
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 7630 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD09FF7D52FFFF527DFFFFCFFD69FFA8FD0EFF7DFFA87D7D52274D%28754B9A76777D84FD267D52FD0B7D52FD0B7D52FD0B7D52FD0B7D52FD07%7D525858527DFD0CFF7D52A8A8527D7DFFFFA97E837DFD04C3CAA8FD0BFF%A8FD0BFFA8FD41FFAEAE5FAEAEFFA87DFD0DFFA8FD04FF7DA8FD04FFAE83%AECACABDC3C3CAFD56FFA88383FD05FF7DFD12FF7DFD07FF83AEAFFFFFCA%BDC3CAFD53FF8383FD06FFA8A8FD12FF7DA8FD05FF7FFF8383FD04FFCAC3%BCCAFD50FF58AEFD08FF7DFD12FF7DFD07FF79FFFF83FD06FFC3C3CAFD4D%FF83FD09FFA8A8FD12FF7DA8FD06FFA97FFFAE83A8FD05FFCABDBCFD4BFF%83AEFD09FFA87DFD12FF7DFD08FFA9FFFFA88AFD07FFCABCCAFD48FF5FFD%0BFFA8A8FD12FF7DA8FD0BFFA883FD08FFBCBDCAFD45FF5EAFFD0BFFA87D%FD12FF7DFD0DFFAE83FD08FFCABCC4FD43FF83AEFD0CFFA87DFD12FF7DA8%FD09FFA3FFFFFF83AEFD09FFBDBCFD0AFFA827A8FD34FF8483FD0EFF7DFD%12FF7DFD0AFFCB7FFFFFFF83AEFD09FFCABCFD07FF7DA87D7D7DFD33FFA8%83FD0EFFA8A8FD12FF7DA8FD0AFFA3A9FFFFFF83AEFD09FFCABCCAFD04FF%A85227A852A8FD1EFF52FD13FFA883AEFD0FFF7DFD12FF7DFD0BFFA9A3FD%04FF83FD0BFFBCC4FD04FF27A8FD20FF7D527DFD12FF83A8FD0FFFA8A8FD%12FF7DA8FD0BFFA9FD04FFA883FD0BFFBCC3FFFFA87DFFA8A8FD1DFFA8A8%277DFD11FF8484FD10FFA87DFD12FF7DFD12FFAEA8FD0BFFC3C3FD04FF7D%7DFD1CFF7D527DFD13FF83FD11FFA8A8FD12FF7DA8FD11FFA883FD0CFFC3%BCCAFFFF7D7DFD1CFF7D277DFD12FF5EFD12FFA87DFD0CFFA87DFFFF7DFF%7DFD0DFFCBA9FD04FFAE83FD0CFFCABDCAFFA8FD1DFF52A8FF7DA8FD0FFF%83AEFD12FFA8A8FD0BFFA87D52A8A8277D7D7DFD0DFF79FD05FF83AEFD0C%FFCABCCAFD1EFFA8A8FF277DFD0EFFA883FD13FFA87DFD0CFF7D7DA8FF7D%7D7DFD0FFF7FFD05FF83FD0EFFBCCAFD20FF7C7DFD0EFF83FD14FFA8A8FD%0CFFA87DFFA87DA8A8A8FD0EFFA3A9FD04FFAE5FFD0DFFCABCC4FD1FFF7E%A9CBFD0CFFAE83FD15FF7DFD12FF7DFD0FFFA9FD06FFAEAEFD0EFFBDCAFD%1AFFA9A9FFFFFFA3A3A3FD0BFF5FFD15FFA8A8FD12FF7DA8FD15FFAE83FD%0FFFBCC3FD17FFA97FA3FD06FFA9A9FD09FF5FFD16FFA87DFD12FF7DFD17%FFA8AEFD0FFFBDC4FD15FFA9A3FD12FFAEAEFD16FFA8A8FD12FF7DA8FD10%FFA9FD06FF5EFD10FFBCC3FD15FFA9FD0BFFA9FD05FFAE83FD17FFA87DFD%12FF7DFD11FF7FA9FD06FF5FFD10FFBDCAFD21FF79FD04FFAEAEFD17FFA8%7DFD12FF7DA8FD11FF79FD06FF84A8FD10FFBDCAFD0FFFA9A9FD0FFFA979%FFFFAF5FFD19FF7DFD12FF7DFD12FFA9A9FD06FF83FD11FFBCCAFD0EFF7F%A9FD10FFA9A9FF83FD19FFA8A8FD12FF7DA8FD11FFA9FD07FFA8AEFD10FF%CABCCAFD0CFFA3A3FD13FFA8A8FD1AFF7DFD12FF7DFD1BFF5FFD12FFBCCA%FD0AFFA97FFD13FFAE83FD1AFFA8A8FD12FF7DA8FD1BFF58FD11FFCABCCA%FD09FFA9FD14FF84A8FD1AFFA87DFD12FF7DFD1CFFAEAEFD11FFCABCFD1D%FFAF83FFA3FD19FFA8A8FD12FF7DA8FD13FFA3A9FD07FF83AEFD11FFCABC%CAFD05FFCBFD15FF83FFFFA97FFD18FFA87DFD12FF7DFD15FF7FFD07FFAE%8AFD12FFCABDFD05FFA3FD14FF83AEFFFFFFA3FD18FFA87DFD12FF7DA8FD%14FFA97FFD07FF83AEFD12FFC3BCFFFFFFA3A3FD13FFA883FD04FFA3A3FD%18FF7DFD06FF7DA8FD0AFF7DFD1FFF83FD13FFC4BDFFFF7FFD14FF8AFD1E%FFA8A8FD05FF522727FD04FF7D52FFA8527DA8A8FD1EFFAE83FD13FFC3BD%7FFD14FFAE83FD1EFFA87DFD05FFA87D7DFD04FF7D7DA8A87D7D7DA8FD1F%FF83AEFD13FFC3C3FD13FFAE83FD1FFF7DA8FFFFFF5252A8FD06FF7D52A8%7D527D7DA8FD17FFA9FD08FF83A8FD13FFC3C3FD12FF83FD09FFA9A9FD16%FF7DFFFFFF5252A8FD0CFF7DFD18FF7FFD08FFA8AEFD11FFCBFFFFC3CAFD%10FF83AEFD0AFF7FFD15FFA8A8FFFFFF52FF7DA8FD0BFF7DA8FD17FF7FA9%FD08FF83AEFD0FFFA97FFFFFFFBCC3FD0EFF83AEFD0BFFA97FFD14FFA87D%FFFFFFA8FF7DA8FD0BFF7DFD19FF7FFD09FF83FD0FFF7FFD05FFBCCAFD0D%FF84AEFD0CFFA9FD14FFA87DFD05FF52A8FD0BFF7DA8FD18FFA9A9FD08FF%AE83FD0DFF7FA9FD06FFB6CAFD0BFF83A8FD0DFFA9FD15FF7DFD12FF7DFD%24FFAE83FD15FFBCCAFD09FFAEA8FD23FFA8A8FD12FF7DA8FD24FF83A8FD%15FFBCCAFD08FF5FFD25FF7DFD12FF7DFD1BFFA9CBFD09FF83FD16FFBCCB%FD06FF5EFD12FFA9FD12FFA8A8FD12FF7DA8FD1BFF79FD09FFAE5FFD07FF%A97FFD0DFFBCCAFD04FF83AFFD12FF7FA9FD11FFA87DFD12FF7DFD1CFFCB%7FFD09FFA8AEFD06FF7FFD0FFFBCFFFFFF83AEFD14FF7FFD11FFA8A8FD12%FF7DA8FD1CFFA9A9FD09FF83AEFD04FF79FD10FFCABCFF8384FD15FFA3A9%FD10FFA87DFD12FF7DFD29FF838AFFFFA9FD13FF75AEFD28FFA87DFD12FF%7DA8FD29FF8383FD14FF8483BCFD29FF7DFD12FF7DFD20FFA9A9FD09FF83%AEFD12FF8383FFFFBCFD27FFA8A8FD12FF7DA8FD1FFFA97F7FFD06FFA979%FF8383A8FD0FFF5EAEFD04FFBCCAFD15FFA9CBFD0FFF7DFD12FF7DFD22FF%A97FFFFFFFA9A3A3FD04FF83A8FD0CFFAE83FD07FFBCFD15FF7FA9FD0EFF%A8A8FD0CFFA87DFFFF7D7D7DA8FD23FFA9FFFFFFA9FD06FFA858AEA8FD07%FFA88384FD09FFBCCAFD14FF79FD0FFF7DFD0AFFA8FF7D7D7DFF527D7DA8%FD30FF84AE83AEA8AE83AE83AEAFFD0BFFBCCAFD13FFA9A9FD0DFFA8A8FD%09FF7D7DA87D527DA8A8527DA8FD32FFAEA8AEA8AEAEFD0FFFB6CAFD21FF%A87DFD0CFFA87DA8A87DA87DFD49FFBCCAFD20FFA8A8FD12FF7DA8FD36FF%7D52FD11FFBCC3FD20FF7DFD12FF7DFD35FFA8FF527DA8FD11FFC3C3FD11%FFCBA9FD0BFFA8A8FD12FF7DA8FD33FF7D2752A87DFD13FFC3BCCAFD0FFF%A97FFD0CFF7DFD12FF7DFD34FFA8277DFD16FFCABCCAFD0FFF7FA9FD0AFF%A8A8FD12FF7DA8FD33FF527DFF7D7DFD15FFCABCC3FD0FFF7FFD0AFFA87D%FD12FF7DFD34FFA8A8FF527DFD17FFC3C3FD19FFA8A8FD12FF7DA8FD35FF%A8277DFD18FFC4BCFD18FFA87DFD12FF7DFD37FFA8FD1BFFBCCAFD16FFA8%7DFD12FF7DA8FD53FFBDBDCAFD0BFF7FCBFD08FF7DFD12FF7DFD55FFCAC3%C3FD0BFF7FFD07FFA8A8FD12FF7DA8FD56FFC3BCCAFD09FFA97FFD07FF7D%FD12FF7DFD59FFC3C3CAFD08FFA9FD06FFA8A8FD12FF7DA8FD59FFCABDBC%CAFD0DFFA87DFD12FF7DFD5DFFC3C3C3FD0BFFA8A8FD12FF7DA8FD5DFFCA%C3BCC3C3CBFFFFFFA3A9FFFFAF7DFD0CFF7D7DFFFF527D7DFD0BFFA8FD0B%FFA8FD0BFFA8FD3DFFCAC4C3C3C3CACAA37EFFA87DFD09FF7D7D7DFF52FF%A87D7D7D52FD627D847676709A6F704C767DFD0AFFA8FFA852A8A8527DA8%A8FD08FFA8A8A8FFA8FD09FFA8FFA8FD09FFA8FF7DFD09FFA8FFA8FD07FF%A8FFFFA8FFA8A8FD05FFA8FFA8A8FFA8A8FD05FFA8FFFFFFA8A8A8FD05FF%A8FFFFA8A8FFA8FD05FFA8FFA8A8FFFFA8FD0AFFA8FFFFFFA87D52FD09FF%7D7D7D527DFD07FF527D7D527DFD07FF527D7D527DFD07FF52527D527DFD%06FF7D7DA8527D527DFD05FF527DFF527D527DFD05FF7D7DFF27A8527DFD%05FF7D7DA827A8527DFD05FF7D52A8277D7D52FD0FFF527DA8FD08FFA8FD%047DFD06FFA827527D7D7DFD06FFA85252527D7DFD07FF5252527D7DFD06%FF7DA87DA8527D7DFD05FF7D7DFFFD047DFD05FFA8A87D27527D7DFD05FF%A8A87D52527D7DFD05FFA87D7D5252A852FD0FFF7D52FD09FF52A87D52A8%FD07FF7D7D7D52A8FD07FFFD047DA8FD07FF7D7D7D52A8FD06FF7D7DA852%A8527DFD05FF7D527D52FF527DFD05FF7D52FF52A87D7DFD05FF7D52A852%A87D7DFD05FF7D52A852A87D7DFDFCFFFD3DFF7D7DFFFFA8A8FFFFA8FFFF%FFA8FD05FFA8FD05FFA8A8A8FD64FF7D527DA87DA852A87D7D27A87D2752%A8A8A85252A87DA8FFFD0552FD63FF7DA8FF527D525252FD047DA852A87D%7D277D525252FFA87D5252527DA8FD62FF7D52527D527D527D52A87DA8A8%7DA87D527D277D5252A8FF527D527D52FD64FFA8FD05FFA8FD07FFA8FD05%FFA8FFFFA8A8FFA8A8FDAAFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-11-11T17:44:26-08:00</xap:CreateDate>
         <xap:ModifyDate>2008-11-11T17:44:26-08:00</xap:ModifyDate>
         <xap:MetadataDate>2008-11-11T17:44:26-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWFa7p1+v5m6HrN&#xA;n5fmu4oNPu7S91mJrJAonkjeGFvVnjuGVDE7HjGQOYpX4qKsS81aN5ustX1rznbWH1C7t7a51OHV&#xA;pJIJJIbaPQjAmlsgaTn6eoD6ydjGeta9VU3v/K/512apJp/nWPVNyJIbjTrS3cV+yVZFKtQ05A8d&#xA;q0qdsvEccgdzCXzifuI9/q9zMSA5i/jX2718ipBPzdtZVt7zXYHufTR2dreO1tWZ2CenFcmC5V35&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E482F779A4B1DD118683865CECBFB1D0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E582F779A4B1DD118683865CECBFB1D0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D1A02437D72411DCB070BAAE3245C8CE</stRef:instanceID>
            <stRef:documentID>uuid:D1A02435D72411DCB070BAAE3245C8CE</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ComicSansMS</stFnt:fontName>
                  <stFnt:fontFamily>Comic Sans MS</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Comic Sans MS.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.008</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -269.935 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 269.935 li
395.441 269.935 li
395.441 0 li
cp
clp
[1 0 0 1 0 0 ]ct
49.0005 233.304 mo
383.8 233.304 li
383.8 4.34424 li
49.0005 4.34424 li
49.0005 233.304 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
49.0005 4.34424 mo
50.8604 4.36133 li
52.7207 4.41406 li
54.5806 4.50098 li
56.4404 4.62305 li
58.3003 4.78027 li
60.1606 4.97119 li
62.0205 5.19727 li
63.8804 5.45801 li
65.7407 5.75342 li
67.6006 6.08301 li
69.4604 6.44727 li
71.3203 6.84619 li
73.1807 7.27832 li
75.0405 7.74512 li
76.9004 8.24512 li
78.7603 8.7793 li
80.6206 9.34619 li
82.4805 9.94727 li
84.3403 10.5811 li
86.2007 11.248 li
88.0605 11.9482 li
89.9204 12.6802 li
91.7803 13.4453 li
93.6406 14.2412 li
95.5005 15.0703 li
97.3604 15.9302 li
99.2207 16.8223 li
101.081 17.7441 li
102.94 18.6982 li
104.8 19.6812 li
106.661 20.6953 li
108.521 21.7393 li
110.38 22.8135 li
112.241 23.916 li
114.101 25.0474 li
115.96 26.208 li
117.82 27.3965 li
119.681 28.6133 li
121.541 29.8564 li
123.4 31.1274 li
125.26 32.4253 li
127.121 33.749 li
128.98 35.0991 li
130.84 36.4741 li
132.701 37.874 li
134.561 39.3003 li
136.42 40.749 li
138.28 42.2222 li
140.141 43.7183 li
142 45.2383 li
143.86 46.7793 li
145.721 48.3433 li
147.581 49.9282 li
149.44 51.5342 li
151.3 53.1611 li
153.161 54.8081 li
155.021 56.4741 li
156.88 58.1592 li
158.741 59.8623 li
160.601 61.584 li
162.46 63.3232 li
164.32 65.0791 li
166.181 66.8511 li
168.041 68.6392 li
169.9 70.4434 li
171.76 72.2612 li
173.621 74.0933 li
175.48 75.9395 li
177.34 77.7983 li
179.201 79.6704 li
181.061 81.5532 li
182.92 83.4482 li
184.78 85.353 li
186.641 87.269 li
188.5 89.1943 li
190.36 91.1294 li
192.221 93.0723 li
194.081 95.0225 li
195.941 96.9805 li
197.8 98.9453 li
199.661 100.915 li
201.521 102.891 li
203.38 104.872 li
205.241 106.858 li
207.101 108.846 li
208.96 110.838 li
210.82 112.833 li
212.68 114.829 li
214.541 116.826 li
216.401 118.824 li
218.26 120.822 li
220.121 122.819 li
221.981 124.815 li
223.84 126.811 li
225.701 128.803 li
227.56 130.79 li
229.42 132.776 li
231.281 134.756 li
233.14 136.733 li
235 138.704 li
236.861 140.668 li
238.72 142.625 li
240.581 144.577 li
242.441 146.52 li
244.3 148.455 li
246.161 150.378 li
248.02 152.294 li
249.88 154.201 li
251.741 156.095 li
253.6 157.978 li
255.46 159.851 li
257.321 161.708 li
259.18 163.554 li
261.041 165.388 li
262.901 167.205 li
264.76 169.009 li
266.621 170.796 li
268.481 172.57 li
270.34 174.326 li
272.201 176.064 li
274.06 177.787 li
275.92 179.49 li
277.781 181.175 li
279.64 182.841 li
281.5 184.488 li
283.361 186.115 li
285.22 187.72 li
287.081 189.304 li
288.941 190.869 li
290.8 192.41 li
292.661 193.929 li
294.52 195.427 li
296.38 196.9 li
298.241 198.349 li
300.1 199.773 li
301.96 201.173 li
303.821 202.55 li
305.68 203.9 li
307.541 205.224 li
309.401 206.521 li
311.26 207.792 li
313.121 209.037 li
314.981 210.251 li
316.84 211.441 li
318.701 212.601 li
320.56 213.732 li
322.42 214.835 li
324.281 215.91 li
326.14 216.953 li
328 217.966 li
329.861 218.951 li
331.72 219.904 li
333.581 220.826 li
335.441 221.718 li
337.3 222.578 li
339.161 223.408 li
341.02 224.203 li
342.88 224.968 li
344.741 225.701 li
346.6 226.4 li
348.46 227.068 li
350.321 227.701 li
352.18 228.302 li
354.041 228.869 li
355.901 229.404 li
357.76 229.904 li
359.621 230.371 li
361.481 230.802 li
363.34 231.201 li
365.201 231.566 li
367.06 231.894 li
368.92 232.191 li
370.781 232.451 li
372.64 232.677 li
374.5 232.869 li
376.361 233.025 li
378.22 233.148 li
380.081 233.234 li
381.941 233.287 li
0 0.992157 1 0 cmyk
@
[3 3 ] 0 dsh
49.0005 4.34424 mo
50.8604 4.396 li
52.7207 4.55322 li
54.5806 4.81445 li
56.4404 5.18018 li
58.3003 5.64844 li
60.1606 6.22021 li
62.0205 6.89404 li
63.8804 7.67041 li
65.7407 8.54639 li
67.6006 9.52246 li
69.4604 10.5962 li
71.3203 11.7671 li
73.1807 13.0342 li
75.0405 14.394 li
76.9004 15.8472 li
78.7603 17.3911 li
80.6206 19.0234 li
82.4805 20.7422 li
84.3403 22.5454 li
86.2007 24.4312 li
88.0605 26.3984 li
89.9204 28.4414 li
91.7803 30.561 li
93.6406 32.7524 li
95.5005 35.0142 li
97.3604 37.3433 li
99.2207 39.7373 li
101.081 42.1924 li
102.94 44.7051 li
104.8 47.2744 li
106.661 49.895 li
108.521 52.5654 li
110.38 55.2822 li
112.241 58.04 li
114.101 60.8384 li
115.96 63.6724 li
117.82 66.5381 li
119.681 69.4331 li
121.541 72.353 li
123.4 75.2954 li
125.26 78.2554 li
127.121 81.229 li
128.98 84.2153 li
130.84 87.208 li
132.701 90.2041 li
134.561 93.2002 li
136.42 96.1934 li
138.28 99.1792 li
140.141 102.153 li
142 105.113 li
143.86 108.055 li
145.721 110.975 li
147.581 113.87 li
149.44 116.736 li
151.3 119.57 li
153.161 122.368 li
155.021 125.126 li
156.88 127.842 li
158.741 130.514 li
160.601 133.133 li
162.46 135.704 li
164.32 138.215 li
166.181 140.67 li
168.041 143.065 li
169.9 145.395 li
171.76 147.657 li
173.621 149.847 li
175.48 151.966 li
177.34 154.009 li
179.201 155.978 li
181.061 157.863 li
182.92 159.666 li
184.78 161.384 li
186.641 163.017 li
188.5 164.562 li
190.36 166.013 li
192.221 167.375 li
194.081 168.642 li
195.941 169.812 li
197.8 170.886 li
199.661 171.863 li
201.521 172.738 li
203.38 173.513 li
205.241 174.189 li
207.101 174.759 li
208.96 175.228 li
210.82 175.593 li
212.68 175.855 li
214.541 176.011 li
216.401 176.064 li
218.26 176.011 li
220.121 175.855 li
221.981 175.593 li
223.84 175.228 li
225.701 174.759 li
227.56 174.189 li
229.42 173.513 li
231.281 172.738 li
233.14 171.863 li
235 170.886 li
236.861 169.812 li
238.72 168.642 li
240.581 167.375 li
242.441 166.013 li
244.3 164.562 li
246.161 163.017 li
248.02 161.384 li
249.88 159.666 li
251.741 157.863 li
253.6 155.978 li
255.46 154.009 li
257.321 151.966 li
259.18 149.847 li
261.041 147.657 li
262.901 145.395 li
264.76 143.065 li
266.621 140.67 li
268.481 138.215 li
270.34 135.704 li
272.201 133.133 li
274.06 130.514 li
275.92 127.842 li
277.781 125.126 li
279.64 122.368 li
281.5 119.57 li
283.361 116.736 li
285.22 113.87 li
287.081 110.975 li
288.941 108.055 li
290.8 105.113 li
292.661 102.153 li
294.52 99.1792 li
296.38 96.1934 li
298.241 93.2002 li
300.1 90.2041 li
301.96 87.208 li
303.821 84.2153 li
305.68 81.229 li
307.541 78.2554 li
309.401 75.2954 li
311.26 72.353 li
313.121 69.4331 li
314.981 66.5381 li
316.84 63.6724 li
318.701 60.8384 li
320.56 58.04 li
322.42 55.2822 li
324.281 52.5654 li
326.14 49.895 li
328 47.2744 li
329.861 44.7051 li
331.72 42.1924 li
333.581 39.7373 li
335.441 37.3433 li
337.3 35.0142 li
339.161 32.7524 li
341.02 30.561 li
342.88 28.4414 li
344.741 26.3984 li
346.6 24.4312 li
348.46 22.5454 li
350.321 20.7422 li
352.18 19.0234 li
354.041 17.3911 li
355.901 15.8472 li
357.76 14.394 li
359.621 13.0342 li
361.481 11.7671 li
363.34 10.5962 li
365.201 9.52246 li
367.06 8.54639 li
368.92 7.67041 li
370.781 6.89404 li
372.64 6.22021 li
374.5 5.64844 li
376.361 5.18018 li
378.22 4.81445 li
380.081 4.55322 li
381.941 4.396 li
0.87451 0.243137 1 0.129412 cmyk
@
[12 12 ] 0 dsh
49.0005 4.34424 mo
50.8604 4.44922 li
52.7207 4.76221 li
54.5806 5.28418 li
56.4404 6.01221 li
58.3003 6.94531 li
60.1606 8.08105 li
62.0205 9.41602 li
63.8804 10.9482 li
65.7407 12.6714 li
67.6006 14.582 li
69.4604 16.6763 li
71.3203 18.9473 li
73.1807 21.3892 li
75.0405 23.9971 li
76.9004 26.7632 li
78.7603 29.6812 li
80.6206 32.7422 li
82.4805 35.9395 li
84.3403 39.2642 li
86.2007 42.708 li
88.0605 46.2622 li
89.9204 49.918 li
91.7803 53.665 li
93.6406 57.4951 li
95.5005 61.3984 li
97.3604 65.3633 li
99.2207 69.3804 li
101.081 73.4404 li
102.94 77.5322 li
104.8 81.646 li
106.661 85.77 li
108.521 89.896 li
110.38 94.0132 li
112.241 98.1094 li
114.101 102.176 li
115.96 106.203 li
117.82 110.18 li
119.681 114.097 li
121.541 117.944 li
123.4 121.713 li
125.26 125.393 li
127.121 128.977 li
128.98 132.456 li
130.84 135.819 li
132.701 139.061 li
134.561 142.174 li
136.42 145.151 li
138.28 147.983 li
140.141 150.666 li
142 153.193 li
143.86 155.56 li
145.721 157.757 li
147.581 159.787 li
149.44 161.638 li
151.3 163.312 li
153.161 164.804 li
155.021 166.113 li
156.88 167.232 li
158.741 168.166 li
160.601 168.91 li
162.46 169.462 li
164.32 169.828 li
166.181 170.003 li
168.041 169.992 li
169.9 169.792 li
171.76 169.412 li
173.621 168.847 li
175.48 168.107 li
177.34 167.191 li
179.201 166.105 li
181.061 164.855 li
182.92 163.443 li
184.78 161.876 li
186.641 160.164 li
188.5 158.306 li
190.36 156.316 li
192.221 154.195 li
194.081 151.955 li
195.941 149.601 li
197.8 147.145 li
199.661 144.59 li
201.521 141.952 li
203.38 139.233 li
205.241 136.448 li
207.101 133.602 li
208.96 130.706 li
210.82 127.77 li
212.68 124.806 li
214.541 121.819 li
216.401 118.824 li
218.26 115.829 li
220.121 112.843 li
221.981 109.878 li
223.84 106.943 li
225.701 104.047 li
227.56 101.201 li
229.42 98.415 li
231.281 95.6973 li
233.14 93.0571 li
235 90.5044 li
236.861 88.0474 li
238.72 85.6943 li
240.581 83.4531 li
242.441 81.333 li
244.3 79.3423 li
246.161 77.4854 li
248.02 75.7715 li
249.88 74.2051 li
251.741 72.7944 li
253.6 71.543 li
255.46 70.457 li
257.321 69.542 li
259.18 68.8003 li
261.041 68.2373 li
262.901 67.8555 li
264.76 67.6572 li
266.621 67.645 li
268.481 67.8203 li
270.34 68.1851 li
272.201 68.7393 li
274.06 69.4834 li
275.92 70.415 li
277.781 71.5361 li
279.64 72.8442 li
281.5 74.3364 li
283.361 76.0103 li
285.22 77.8623 li
287.081 79.8901 li
288.941 82.0894 li
290.8 84.4551 li
292.661 86.9824 li
294.52 89.665 li
296.38 92.4971 li
298.241 95.4741 li
300.1 98.5874 li
301.96 101.829 li
303.821 105.193 li
305.68 108.671 li
307.541 112.255 li
309.401 115.935 li
311.26 119.704 li
313.121 123.551 li
314.981 127.467 li
316.84 131.446 li
318.701 135.473 li
320.56 139.54 li
322.42 143.635 li
324.281 147.752 li
326.14 151.878 li
328 156.001 li
329.861 160.117 li
331.72 164.208 li
333.581 168.267 li
335.441 172.285 li
337.3 176.251 li
339.161 180.154 li
341.02 183.982 li
342.88 187.73 li
344.741 191.386 li
346.6 194.941 li
348.46 198.384 li
350.321 201.708 li
352.18 204.906 li
354.041 207.968 li
355.901 210.884 li
357.76 213.652 li
359.621 216.259 li
361.481 218.701 li
363.34 220.972 li
365.201 223.066 li
367.06 224.978 li
368.92 226.701 li
370.781 228.232 li
372.64 229.568 li
374.5 230.703 li
376.361 231.636 li
378.22 232.365 li
380.081 232.886 li
381.941 233.199 li
0.780392 0.72549 0 0 cmyk
@
0.5 lw
0 lc
[] 0 dsh
49.0005 4.34424 mo
49.0005 8.34424 li
49.0005 233.304 mo
49.0005 229.304 li
0 0 0 1 cmyk
@
49.6963 237.361 mo
50.6685 237.361 51.4126 237.755 51.9404 238.525 cv
52.4565 239.304 52.7207 240.433 52.7207 241.896 cv
52.7207 243.373 52.4565 244.5 51.9404 245.269 cv
51.4126 246.037 50.6685 246.419 49.6963 246.419 cv
48.7124 246.419 47.9565 246.037 47.4404 245.269 cv
46.9243 244.5 46.6724 243.373 46.6724 241.896 cv
46.6724 240.433 46.9243 239.304 47.4404 238.525 cv
47.9565 237.755 48.7124 237.361 49.6963 237.361 cv
49.6963 237.361 li
cp
49.6963 238.296 mo
49.0845 238.296 48.6284 238.595 48.3164 239.197 cv
48.0044 239.796 47.8604 240.697 47.8604 241.896 cv
47.8604 243.095 48.0044 243.996 48.3164 244.595 cv
48.6284 245.197 49.0845 245.496 49.6963 245.496 cv
50.3086 245.496 50.7646 245.197 51.0767 244.595 cv
51.3765 243.996 51.5327 243.095 51.5327 241.896 cv
51.5327 240.697 51.3765 239.796 51.0767 239.197 cv
50.7646 238.595 50.3086 238.296 49.6963 238.296 cv
ef
86.2007 4.34424 mo
86.2007 8.34424 li
86.2007 233.304 mo
86.2007 229.304 li
@
81.7847 245.269 mo
85.9126 245.269 li
85.9126 246.265 li
80.3564 246.265 li
80.3564 245.269 li
80.8003 244.812 81.4126 244.189 82.1924 243.396 cv
82.9604 242.617 83.4526 242.113 83.6567 241.884 cv
84.0405 241.464 84.3047 241.105 84.4487 240.804 cv
84.5923 240.517 84.6763 240.216 84.6763 239.927 cv
84.6763 239.472 84.5083 239.087 84.1846 238.8 cv
83.8604 238.511 83.4404 238.357 82.9126 238.357 cv
82.5405 238.357 82.1445 238.427 81.7363 238.548 cv
81.3286 238.679 80.8843 238.873 80.4165 239.136 cv
80.4165 237.937 li
80.8965 237.744 81.3403 237.601 81.7485 237.503 cv
82.1567 237.408 82.5405 237.361 82.8887 237.361 cv
83.7886 237.361 84.5083 237.587 85.0483 238.044 cv
85.5884 238.5 85.8643 239.101 85.8643 239.857 cv
85.8643 240.216 85.7925 240.564 85.6606 240.876 cv
85.5283 241.201 85.2886 241.583 84.9287 242.017 cv
84.8325 242.136 84.5205 242.46 83.9927 243 cv
83.4644 243.541 82.7324 244.296 81.7847 245.269 cv
81.7847 245.269 li
cp
ef
90.7363 237.361 mo
91.7085 237.361 92.4526 237.755 92.9805 238.525 cv
93.4966 239.304 93.7603 240.433 93.7603 241.896 cv
93.7603 243.373 93.4966 244.5 92.9805 245.269 cv
92.4526 246.037 91.7085 246.419 90.7363 246.419 cv
89.7524 246.419 88.9966 246.037 88.4805 245.269 cv
87.9644 244.5 87.7124 243.373 87.7124 241.896 cv
87.7124 240.433 87.9644 239.304 88.4805 238.525 cv
88.9966 237.755 89.7524 237.361 90.7363 237.361 cv
90.7363 237.361 li
cp
90.7363 238.296 mo
90.1245 238.296 89.6685 238.595 89.3564 239.197 cv
89.0444 239.796 88.9004 240.697 88.9004 241.896 cv
88.9004 243.095 89.0444 243.996 89.3564 244.595 cv
89.6685 245.197 90.1245 245.496 90.7363 245.496 cv
91.3486 245.496 91.8047 245.197 92.1167 244.595 cv
92.4165 243.996 92.5723 243.095 92.5723 241.896 cv
92.5723 240.697 92.4165 239.796 92.1167 239.197 cv
91.8047 238.595 91.3486 238.296 90.7363 238.296 cv
ef
123.4 4.34424 mo
123.4 8.34424 li
123.4 233.304 mo
123.4 229.304 li
@
120.665 237.517 mo
122.152 237.517 li
122.152 243.216 li
123.4 243.216 li
123.4 244.201 li
122.152 244.201 li
122.152 246.265 li
120.977 246.265 li
120.977 244.201 li
117.028 244.201 li
117.028 243.06 li
120.665 237.517 li
120.665 237.517 li
cp
120.977 238.548 mo
117.988 243.216 li
120.977 243.216 li
120.977 238.548 li
ef
127.937 237.361 mo
128.909 237.361 129.652 237.755 130.181 238.525 cv
130.696 239.304 130.96 240.433 130.96 241.896 cv
130.96 243.373 130.696 244.5 130.181 245.269 cv
129.652 246.037 128.909 246.419 127.937 246.419 cv
126.953 246.419 126.196 246.037 125.681 245.269 cv
125.165 244.5 124.913 243.373 124.913 241.896 cv
124.913 240.433 125.165 239.304 125.681 238.525 cv
126.196 237.755 126.953 237.361 127.937 237.361 cv
127.937 237.361 li
cp
127.937 238.296 mo
127.325 238.296 126.869 238.595 126.557 239.197 cv
126.245 239.796 126.101 240.697 126.101 241.896 cv
126.101 243.095 126.245 243.996 126.557 244.595 cv
126.869 245.197 127.325 245.496 127.937 245.496 cv
128.548 245.496 129.004 245.197 129.316 244.595 cv
129.617 243.996 129.772 243.095 129.772 241.896 cv
129.772 240.697 129.617 239.796 129.316 239.197 cv
129.004 238.595 128.548 238.296 127.937 238.296 cv
ef
160.601 4.34424 mo
160.601 8.34424 li
160.601 233.304 mo
160.601 229.304 li
@
160.192 237.708 mo
160.192 238.789 li
159.893 238.644 159.592 238.537 159.292 238.464 cv
158.98 238.392 158.681 238.357 158.393 238.357 cv
157.601 238.357 157 238.621 156.592 239.148 cv
156.185 239.675 155.944 240.48 155.896 241.537 cv
156.125 241.201 156.413 240.937 156.76 240.755 cv
157.108 240.576 157.493 240.48 157.913 240.48 cv
158.789 240.48 159.484 240.755 159.988 241.285 cv
160.493 241.812 160.756 242.544 160.756 243.457 cv
160.756 244.357 160.48 245.076 159.953 245.617 cv
159.424 246.156 158.716 246.419 157.84 246.419 cv
156.833 246.419 156.052 246.037 155.524 245.269 cv
154.984 244.5 154.721 243.373 154.721 241.896 cv
154.721 240.517 155.044 239.412 155.705 238.595 cv
156.353 237.781 157.241 237.361 158.344 237.361 cv
158.632 237.361 158.933 237.396 159.245 237.445 cv
159.544 237.503 159.856 237.587 160.192 237.708 cv
160.192 237.708 li
cp
157.84 241.416 mo
157.313 241.416 156.893 241.609 156.581 241.968 cv
156.269 242.328 156.112 242.832 156.112 243.457 cv
156.112 244.091 156.269 244.595 156.581 244.957 cv
156.893 245.316 157.313 245.496 157.84 245.496 cv
158.369 245.496 158.789 245.316 159.101 244.957 cv
159.413 244.595 159.568 244.091 159.568 243.457 cv
159.568 242.832 159.413 242.328 159.101 241.968 cv
158.789 241.609 158.369 241.416 157.84 241.416 cv
ef
165.136 237.361 mo
166.108 237.361 166.853 237.755 167.38 238.525 cv
167.896 239.304 168.161 240.433 168.161 241.896 cv
168.161 243.373 167.896 244.5 167.38 245.269 cv
166.853 246.037 166.108 246.419 165.136 246.419 cv
164.152 246.419 163.396 246.037 162.88 245.269 cv
162.365 244.5 162.112 243.373 162.112 241.896 cv
162.112 240.433 162.365 239.304 162.88 238.525 cv
163.396 237.755 164.152 237.361 165.136 237.361 cv
165.136 237.361 li
cp
165.136 238.296 mo
164.524 238.296 164.068 238.595 163.756 239.197 cv
163.444 239.796 163.3 240.697 163.3 241.896 cv
163.3 243.095 163.444 243.996 163.756 244.595 cv
164.068 245.197 164.524 245.496 165.136 245.496 cv
165.749 245.496 166.205 245.197 166.517 244.595 cv
166.816 243.996 166.973 243.095 166.973 241.896 cv
166.973 240.697 166.816 239.796 166.517 239.197 cv
166.205 238.595 165.749 238.296 165.136 238.296 cv
ef
197.8 4.34424 mo
197.8 8.34424 li
197.8 233.304 mo
197.8 229.304 li
@
193.276 239.736 mo
193.276 240.193 193.409 240.552 193.696 240.804 cv
193.984 241.056 194.38 241.175 194.896 241.175 cv
195.4 241.175 195.796 241.056 196.084 240.804 cv
196.373 240.552 196.517 240.193 196.517 239.736 cv
196.517 239.281 196.373 238.933 196.084 238.679 cv
195.796 238.427 195.4 238.296 194.896 238.296 cv
194.38 238.296 193.984 238.427 193.696 238.679 cv
193.409 238.933 193.276 239.281 193.276 239.736 cv
193.276 239.736 li
cp
193.708 241.609 mo
193.205 241.488 192.809 241.248 192.521 240.9 cv
192.232 240.552 192.101 240.132 192.101 239.628 cv
192.101 238.933 192.34 238.38 192.844 237.972 cv
193.336 237.564 194.021 237.361 194.896 237.361 cv
195.76 237.361 196.445 237.564 196.949 237.972 cv
197.441 238.38 197.693 238.933 197.693 239.628 cv
197.693 240.132 197.548 240.552 197.26 240.9 cv
196.972 241.248 196.588 241.488 196.084 241.609 cv
196.648 241.74 197.092 242.003 197.417 242.388 cv
197.728 242.773 197.896 243.251 197.896 243.804 cv
197.896 244.656 197.632 245.304 197.117 245.748 cv
196.588 246.205 195.857 246.419 194.896 246.419 cv
193.924 246.419 193.181 246.205 192.665 245.748 cv
192.148 245.304 191.896 244.656 191.896 243.804 cv
191.896 243.251 192.052 242.773 192.376 242.388 cv
192.688 242.003 193.132 241.74 193.708 241.609 cv
194.896 242.113 mo
194.333 242.113 193.889 242.269 193.564 242.568 cv
193.241 242.869 193.084 243.277 193.084 243.804 cv
193.084 244.332 193.241 244.751 193.564 245.052 cv
193.889 245.353 194.333 245.496 194.896 245.496 cv
195.449 245.496 195.892 245.353 196.216 245.041 cv
196.541 244.74 196.708 244.332 196.708 243.804 cv
196.708 243.277 196.541 242.869 196.228 242.568 cv
195.904 242.269 195.46 242.113 194.896 242.113 cv
ef
202.336 237.361 mo
203.308 237.361 204.052 237.755 204.581 238.525 cv
205.097 239.304 205.361 240.433 205.361 241.896 cv
205.361 243.373 205.097 244.5 204.581 245.269 cv
204.052 246.037 203.308 246.419 202.336 246.419 cv
201.353 246.419 200.597 246.037 200.081 245.269 cv
199.564 244.5 199.312 243.373 199.312 241.896 cv
199.312 240.433 199.564 239.304 200.081 238.525 cv
200.597 237.755 201.353 237.361 202.336 237.361 cv
202.336 237.361 li
cp
202.336 238.296 mo
201.724 238.296 201.269 238.595 200.957 239.197 cv
200.644 239.796 200.5 240.697 200.5 241.896 cv
200.5 243.095 200.644 243.996 200.957 244.595 cv
201.269 245.197 201.724 245.496 202.336 245.496 cv
202.949 245.496 203.404 245.197 203.716 244.595 cv
204.017 243.996 204.172 243.095 204.172 241.896 cv
204.172 240.697 204.017 239.796 203.716 239.197 cv
203.404 238.595 202.949 238.296 202.336 238.296 cv
ef
235 4.34424 mo
235 8.34424 li
235 233.304 mo
235 229.304 li
@
226.168 245.269 mo
228.1 245.269 li
228.1 238.595 li
226 239.017 li
226 237.937 li
228.088 237.517 li
229.277 237.517 li
229.277 245.269 li
231.208 245.269 li
231.208 246.265 li
226.168 246.265 li
226.168 245.269 li
226.168 245.269 li
cp
ef
235.936 237.361 mo
236.909 237.361 237.653 237.755 238.18 238.525 cv
238.697 239.304 238.96 240.433 238.96 241.896 cv
238.96 243.373 238.697 244.5 238.18 245.269 cv
237.653 246.037 236.909 246.419 235.936 246.419 cv
234.953 246.419 234.197 246.037 233.68 245.269 cv
233.165 244.5 232.913 243.373 232.913 241.896 cv
232.913 240.433 233.165 239.304 233.68 238.525 cv
234.197 237.755 234.953 237.361 235.936 237.361 cv
235.936 237.361 li
cp
235.936 238.296 mo
235.325 238.296 234.869 238.595 234.556 239.197 cv
234.245 239.796 234.1 240.697 234.1 241.896 cv
234.1 243.095 234.245 243.996 234.556 244.595 cv
234.869 245.197 235.325 245.496 235.936 245.496 cv
236.548 245.496 237.004 245.197 237.317 244.595 cv
237.617 243.996 237.773 243.095 237.773 241.896 cv
237.773 240.697 237.617 239.796 237.317 239.197 cv
237.004 238.595 236.548 238.296 235.936 238.296 cv
ef
243.617 237.361 mo
244.588 237.361 245.333 237.755 245.861 238.525 cv
246.376 239.304 246.64 240.433 246.64 241.896 cv
246.64 243.373 246.376 244.5 245.861 245.269 cv
245.333 246.037 244.588 246.419 243.617 246.419 cv
242.632 246.419 241.876 246.037 241.361 245.269 cv
240.844 244.5 240.592 243.373 240.592 241.896 cv
240.592 240.433 240.844 239.304 241.361 238.525 cv
241.876 237.755 242.632 237.361 243.617 237.361 cv
243.617 237.361 li
cp
243.617 238.296 mo
243.004 238.296 242.548 238.595 242.237 239.197 cv
241.924 239.796 241.781 240.697 241.781 241.896 cv
241.781 243.095 241.924 243.996 242.237 244.595 cv
242.548 245.197 243.004 245.496 243.617 245.496 cv
244.228 245.496 244.684 245.197 244.997 244.595 cv
245.296 243.996 245.453 243.095 245.453 241.896 cv
245.453 240.697 245.296 239.796 244.997 239.197 cv
244.684 238.595 244.228 238.296 243.617 238.296 cv
ef
272.201 4.34424 mo
272.201 8.34424 li
272.201 233.304 mo
272.201 229.304 li
@
263.369 245.269 mo
265.3 245.269 li
265.3 238.595 li
263.201 239.017 li
263.201 237.937 li
265.289 237.517 li
266.476 237.517 li
266.476 245.269 li
268.409 245.269 li
268.409 246.265 li
263.369 246.265 li
263.369 245.269 li
263.369 245.269 li
cp
ef
271.625 245.269 mo
275.752 245.269 li
275.752 246.265 li
270.197 246.265 li
270.197 245.269 li
270.64 244.812 271.252 244.189 272.033 243.396 cv
272.8 242.617 273.292 242.113 273.497 241.884 cv
273.88 241.464 274.144 241.105 274.289 240.804 cv
274.432 240.517 274.516 240.216 274.516 239.927 cv
274.516 239.472 274.348 239.087 274.025 238.8 cv
273.701 238.511 273.281 238.357 272.752 238.357 cv
272.38 238.357 271.985 238.427 271.577 238.548 cv
271.168 238.679 270.724 238.873 270.256 239.136 cv
270.256 237.937 li
270.737 237.744 271.18 237.601 271.588 237.503 cv
271.997 237.408 272.38 237.361 272.728 237.361 cv
273.628 237.361 274.348 237.587 274.888 238.044 cv
275.428 238.5 275.705 239.101 275.705 239.857 cv
275.705 240.216 275.632 240.564 275.5 240.876 cv
275.369 241.201 275.128 241.583 274.768 242.017 cv
274.672 242.136 274.361 242.46 273.833 243 cv
273.304 243.541 272.573 244.296 271.625 245.269 cv
271.625 245.269 li
cp
ef
280.817 237.361 mo
281.789 237.361 282.533 237.755 283.06 238.525 cv
283.577 239.304 283.84 240.433 283.84 241.896 cv
283.84 243.373 283.577 244.5 283.06 245.269 cv
282.533 246.037 281.789 246.419 280.817 246.419 cv
279.833 246.419 279.077 246.037 278.56 245.269 cv
278.044 244.5 277.792 243.373 277.792 241.896 cv
277.792 240.433 278.044 239.304 278.56 238.525 cv
279.077 237.755 279.833 237.361 280.817 237.361 cv
280.817 237.361 li
cp
280.817 238.296 mo
280.205 238.296 279.749 238.595 279.436 239.197 cv
279.125 239.796 278.981 240.697 278.981 241.896 cv
278.981 243.095 279.125 243.996 279.436 244.595 cv
279.749 245.197 280.205 245.496 280.817 245.496 cv
281.428 245.496 281.884 245.197 282.197 244.595 cv
282.497 243.996 282.653 243.095 282.653 241.896 cv
282.653 240.697 282.497 239.796 282.197 239.197 cv
281.884 238.595 281.428 238.296 280.817 238.296 cv
ef
309.401 4.34424 mo
309.401 8.34424 li
309.401 233.304 mo
309.401 229.304 li
@
300.569 245.269 mo
302.5 245.269 li
302.5 238.595 li
300.401 239.017 li
300.401 237.937 li
302.489 237.517 li
303.676 237.517 li
303.676 245.269 li
305.609 245.269 li
305.609 246.265 li
300.569 246.265 li
300.569 245.269 li
300.569 245.269 li
cp
ef
310.745 237.517 mo
312.233 237.517 li
312.233 243.216 li
313.481 243.216 li
313.481 244.201 li
312.233 244.201 li
312.233 246.265 li
311.056 246.265 li
311.056 244.201 li
307.109 244.201 li
307.109 243.06 li
310.745 237.517 li
310.745 237.517 li
cp
311.056 238.548 mo
308.069 243.216 li
311.056 243.216 li
311.056 238.548 li
ef
318.016 237.361 mo
318.989 237.361 319.733 237.755 320.26 238.525 cv
320.777 239.304 321.041 240.433 321.041 241.896 cv
321.041 243.373 320.777 244.5 320.26 245.269 cv
319.733 246.037 318.989 246.419 318.016 246.419 cv
317.033 246.419 316.277 246.037 315.76 245.269 cv
315.245 244.5 314.993 243.373 314.993 241.896 cv
314.993 240.433 315.245 239.304 315.76 238.525 cv
316.277 237.755 317.033 237.361 318.016 237.361 cv
318.016 237.361 li
cp
318.016 238.296 mo
317.405 238.296 316.949 238.595 316.636 239.197 cv
316.325 239.796 316.18 240.697 316.18 241.896 cv
316.18 243.095 316.325 243.996 316.636 244.595 cv
316.949 245.197 317.405 245.496 318.016 245.496 cv
318.628 245.496 319.084 245.197 319.397 244.595 cv
319.697 243.996 319.852 243.095 319.852 241.896 cv
319.852 240.697 319.697 239.796 319.397 239.197 cv
319.084 238.595 318.628 238.296 318.016 238.296 cv
ef
346.6 4.34424 mo
346.6 8.34424 li
346.6 233.304 mo
346.6 229.304 li
@
337.768 245.269 mo
339.701 245.269 li
339.701 238.595 li
337.6 239.017 li
337.6 237.937 li
339.688 237.517 li
340.876 237.517 li
340.876 245.269 li
342.808 245.269 li
342.808 246.265 li
337.768 246.265 li
337.768 245.269 li
337.768 245.269 li
cp
ef
350.033 237.708 mo
350.033 238.789 li
349.733 238.644 349.432 238.537 349.132 238.464 cv
348.821 238.392 348.52 238.357 348.233 238.357 cv
347.441 238.357 346.84 238.621 346.432 239.148 cv
346.025 239.675 345.785 240.48 345.737 241.537 cv
345.964 241.201 346.252 240.937 346.6 240.755 cv
346.949 240.576 347.333 240.48 347.752 240.48 cv
348.628 240.48 349.325 240.755 349.829 241.285 cv
350.333 241.812 350.596 242.544 350.596 243.457 cv
350.596 244.357 350.321 245.076 349.792 245.617 cv
349.264 246.156 348.556 246.419 347.68 246.419 cv
346.672 246.419 345.892 246.037 345.365 245.269 cv
344.825 244.5 344.56 243.373 344.56 241.896 cv
344.56 240.517 344.884 239.412 345.544 238.595 cv
346.193 237.781 347.081 237.361 348.184 237.361 cv
348.472 237.361 348.773 237.396 349.084 237.445 cv
349.384 237.503 349.697 237.587 350.033 237.708 cv
350.033 237.708 li
cp
347.68 241.416 mo
347.153 241.416 346.733 241.609 346.42 241.968 cv
346.109 242.328 345.953 242.832 345.953 243.457 cv
345.953 244.091 346.109 244.595 346.42 244.957 cv
346.733 245.316 347.153 245.496 347.68 245.496 cv
348.208 245.496 348.628 245.316 348.941 244.957 cv
349.252 244.595 349.409 244.091 349.409 243.457 cv
349.409 242.832 349.252 242.328 348.941 241.968 cv
348.628 241.609 348.208 241.416 347.68 241.416 cv
ef
355.216 237.361 mo
356.188 237.361 356.932 237.755 357.46 238.525 cv
357.976 239.304 358.241 240.433 358.241 241.896 cv
358.241 243.373 357.976 244.5 357.46 245.269 cv
356.932 246.037 356.188 246.419 355.216 246.419 cv
354.233 246.419 353.476 246.037 352.96 245.269 cv
352.445 244.5 352.193 243.373 352.193 241.896 cv
352.193 240.433 352.445 239.304 352.96 238.525 cv
353.476 237.755 354.233 237.361 355.216 237.361 cv
355.216 237.361 li
cp
355.216 238.296 mo
354.604 238.296 354.149 238.595 353.836 239.197 cv
353.525 239.796 353.38 240.697 353.38 241.896 cv
353.38 243.095 353.525 243.996 353.836 244.595 cv
354.149 245.197 354.604 245.496 355.216 245.496 cv
355.829 245.496 356.285 245.197 356.596 244.595 cv
356.897 243.996 357.052 243.095 357.052 241.896 cv
357.052 240.697 356.897 239.796 356.596 239.197 cv
356.285 238.595 355.829 238.296 355.216 238.296 cv
ef
383.8 4.34424 mo
383.8 8.34424 li
383.8 233.304 mo
383.8 229.304 li
@
374.968 245.269 mo
376.901 245.269 li
376.901 238.595 li
374.8 239.017 li
374.8 237.937 li
376.888 237.517 li
378.077 237.517 li
378.077 245.269 li
380.008 245.269 li
380.008 246.265 li
374.968 246.265 li
374.968 245.269 li
374.968 245.269 li
cp
ef
383.117 239.736 mo
383.117 240.193 383.249 240.552 383.537 240.804 cv
383.825 241.056 384.22 241.175 384.737 241.175 cv
385.241 241.175 385.636 241.056 385.924 240.804 cv
386.212 240.552 386.357 240.193 386.357 239.736 cv
386.357 239.281 386.212 238.933 385.924 238.679 cv
385.636 238.427 385.241 238.296 384.737 238.296 cv
384.22 238.296 383.825 238.427 383.537 238.679 cv
383.249 238.933 383.117 239.281 383.117 239.736 cv
383.117 239.736 li
cp
383.548 241.609 mo
383.044 241.488 382.649 241.248 382.361 240.9 cv
382.073 240.552 381.941 240.132 381.941 239.628 cv
381.941 238.933 382.18 238.38 382.684 237.972 cv
383.176 237.564 383.861 237.361 384.737 237.361 cv
385.6 237.361 386.285 237.564 386.789 237.972 cv
387.281 238.38 387.533 238.933 387.533 239.628 cv
387.533 240.132 387.388 240.552 387.1 240.9 cv
386.813 241.248 386.428 241.488 385.924 241.609 cv
386.489 241.74 386.932 242.003 387.256 242.388 cv
387.569 242.773 387.737 243.251 387.737 243.804 cv
387.737 244.656 387.472 245.304 386.957 245.748 cv
386.428 246.205 385.697 246.419 384.737 246.419 cv
383.764 246.419 383.02 246.205 382.504 245.748 cv
381.989 245.304 381.737 244.656 381.737 243.804 cv
381.737 243.251 381.892 242.773 382.216 242.388 cv
382.529 242.003 382.972 241.74 383.548 241.609 cv
384.737 242.113 mo
384.172 242.113 383.729 242.269 383.405 242.568 cv
383.081 242.869 382.924 243.277 382.924 243.804 cv
382.924 244.332 383.081 244.751 383.405 245.052 cv
383.729 245.353 384.172 245.496 384.737 245.496 cv
385.289 245.496 385.733 245.353 386.056 245.041 cv
386.38 244.74 386.548 244.332 386.548 243.804 cv
386.548 243.277 386.38 242.869 386.069 242.568 cv
385.745 242.269 385.3 242.113 384.737 242.113 cv
ef
392.417 237.361 mo
393.388 237.361 394.132 237.755 394.661 238.525 cv
395.176 239.304 395.441 240.433 395.441 241.896 cv
395.441 243.373 395.176 244.5 394.661 245.269 cv
394.132 246.037 393.388 246.419 392.417 246.419 cv
391.432 246.419 390.676 246.037 390.161 245.269 cv
389.644 244.5 389.392 243.373 389.392 241.896 cv
389.392 240.433 389.644 239.304 390.161 238.525 cv
390.676 237.755 391.432 237.361 392.417 237.361 cv
392.417 237.361 li
cp
392.417 238.296 mo
391.804 238.296 391.348 238.595 391.037 239.197 cv
390.724 239.796 390.581 240.697 390.581 241.896 cv
390.581 243.095 390.724 243.996 391.037 244.595 cv
391.348 245.197 391.804 245.496 392.417 245.496 cv
393.029 245.496 393.485 245.197 393.796 244.595 cv
394.096 243.996 394.252 243.095 394.252 241.896 cv
394.252 240.697 394.096 239.796 393.796 239.197 cv
393.485 238.595 393.029 238.296 392.417 238.296 cv
ef
383.8 233.304 mo
379.8 233.304 li
49.0005 233.304 mo
53.0005 233.304 li
@
19.0723 233.605 mo
26.5845 233.605 li
26.5845 234.601 li
19.0723 234.601 li
19.0723 233.605 li
19.0723 233.605 li
cp
ef
29.3687 236.869 mo
31.3003 236.869 li
31.3003 230.197 li
29.2007 230.617 li
29.2007 229.537 li
31.2886 229.117 li
32.4766 229.117 li
32.4766 236.869 li
34.4087 236.869 li
34.4087 237.865 li
29.3687 237.865 li
29.3687 236.869 li
29.3687 236.869 li
cp
ef
36.8442 236.376 mo
38.0806 236.376 li
38.0806 237.865 li
36.8442 237.865 li
36.8442 236.376 li
36.8442 236.376 li
cp
ef
43.2163 228.96 mo
44.1885 228.96 44.9326 229.357 45.4604 230.125 cv
45.9766 230.904 46.2407 232.033 46.2407 233.496 cv
46.2407 234.972 45.9766 236.101 45.4604 236.869 cv
44.9326 237.636 44.1885 238.021 43.2163 238.021 cv
42.2324 238.021 41.4766 237.636 40.9604 236.869 cv
40.4443 236.101 40.1924 234.972 40.1924 233.496 cv
40.1924 232.033 40.4443 230.904 40.9604 230.125 cv
41.4766 229.357 42.2324 228.96 43.2163 228.96 cv
43.2163 228.96 li
cp
43.2163 229.896 mo
42.6045 229.896 42.1484 230.197 41.8364 230.796 cv
41.5244 231.396 41.3804 232.296 41.3804 233.496 cv
41.3804 234.697 41.5244 235.595 41.8364 236.197 cv
42.1484 236.796 42.6045 237.095 43.2163 237.095 cv
43.8286 237.095 44.2847 236.796 44.5967 236.197 cv
44.8965 235.595 45.0522 234.697 45.0522 233.496 cv
45.0522 232.296 44.8965 231.396 44.5967 230.796 cv
44.2847 230.197 43.8286 229.896 43.2163 229.896 cv
ef
383.8 176.064 mo
379.8 176.064 li
49.0005 176.064 mo
53.0005 176.064 li
@
19.3125 176.244 mo
26.8247 176.244 li
26.8247 177.24 li
19.3125 177.24 li
19.3125 176.244 li
19.3125 176.244 li
cp
ef
31.9365 171.601 mo
32.9087 171.601 33.6523 171.996 34.1807 172.765 cv
34.6963 173.544 34.9604 174.671 34.9604 176.136 cv
34.9604 177.613 34.6963 178.74 34.1807 179.507 cv
33.6523 180.277 32.9087 180.66 31.9365 180.66 cv
30.9526 180.66 30.1963 180.277 29.6807 179.507 cv
29.1646 178.74 28.9126 177.613 28.9126 176.136 cv
28.9126 174.671 29.1646 173.544 29.6807 172.765 cv
30.1963 171.996 30.9526 171.601 31.9365 171.601 cv
31.9365 171.601 li
cp
31.9365 172.537 mo
31.3247 172.537 30.8687 172.835 30.5566 173.437 cv
30.2446 174.037 30.1006 174.937 30.1006 176.136 cv
30.1006 177.335 30.2446 178.236 30.5566 178.835 cv
30.8687 179.437 31.3247 179.736 31.9365 179.736 cv
32.5483 179.736 33.0044 179.437 33.3164 178.835 cv
33.6167 178.236 33.7725 177.335 33.7725 176.136 cv
33.7725 174.937 33.6167 174.037 33.3164 173.437 cv
33.0044 172.835 32.5483 172.537 31.9365 172.537 cv
ef
37.0845 179.017 mo
38.3203 179.017 li
38.3203 180.503 li
37.0845 180.503 li
37.0845 179.017 li
37.0845 179.017 li
cp
ef
40.9365 171.755 mo
45.5806 171.755 li
45.5806 172.751 li
42.0166 172.751 li
42.0166 174.9 li
42.1846 174.839 42.3643 174.792 42.5327 174.769 cv
42.7007 174.744 42.8804 174.72 43.0483 174.72 cv
44.0205 174.72 44.7886 174.996 45.3643 175.525 cv
45.9404 176.064 46.2285 176.785 46.2285 177.697 cv
46.2285 178.644 45.9287 179.376 45.3403 179.892 cv
44.7524 180.408 43.9243 180.66 42.8687 180.66 cv
42.4966 180.66 42.1245 180.625 41.7407 180.576 cv
41.3564 180.517 40.9727 180.433 40.5645 180.3 cv
40.5645 179.113 li
40.9126 179.304 41.2725 179.449 41.6567 179.544 cv
42.0283 179.64 42.4243 179.675 42.8442 179.675 cv
43.5166 179.675 44.0566 179.507 44.4526 179.148 cv
44.8364 178.789 45.0405 178.308 45.0405 177.697 cv
45.0405 177.095 44.8364 176.617 44.4526 176.255 cv
44.0566 175.896 43.5166 175.716 42.8442 175.716 cv
42.5327 175.716 42.2085 175.751 41.8965 175.824 cv
41.5845 175.896 41.2603 176.003 40.9365 176.148 cv
40.9365 171.755 li
40.9365 171.755 li
cp
ef
383.8 118.824 mo
379.8 118.824 li
49.0005 118.824 mo
53.0005 118.824 li
@
31.2163 114.48 mo
32.1885 114.48 32.9326 114.876 33.4604 115.644 cv
33.9766 116.424 34.2407 117.552 34.2407 119.016 cv
34.2407 120.492 33.9766 121.62 33.4604 122.389 cv
32.9326 123.156 32.1885 123.54 31.2163 123.54 cv
30.2324 123.54 29.4766 123.156 28.9604 122.389 cv
28.4443 121.62 28.1924 120.492 28.1924 119.016 cv
28.1924 117.552 28.4443 116.424 28.9604 115.644 cv
29.4766 114.876 30.2324 114.48 31.2163 114.48 cv
31.2163 114.48 li
cp
31.2163 115.416 mo
30.6045 115.416 30.1484 115.716 29.8364 116.316 cv
29.5244 116.916 29.3804 117.816 29.3804 119.016 cv
29.3804 120.216 29.5244 121.116 29.8364 121.716 cv
30.1484 122.316 30.6045 122.616 31.2163 122.616 cv
31.8286 122.616 32.2847 122.316 32.5967 121.716 cv
32.8965 121.116 33.0522 120.216 33.0522 119.016 cv
33.0522 117.816 32.8965 116.916 32.5967 116.316 cv
32.2847 115.716 31.8286 115.416 31.2163 115.416 cv
ef
36.3643 121.896 mo
37.6006 121.896 li
37.6006 123.384 li
36.3643 123.384 li
36.3643 121.896 li
36.3643 121.896 li
cp
ef
42.7363 114.48 mo
43.7085 114.48 44.4526 114.876 44.9805 115.644 cv
45.4966 116.424 45.7603 117.552 45.7603 119.016 cv
45.7603 120.492 45.4966 121.62 44.9805 122.389 cv
44.4526 123.156 43.7085 123.54 42.7363 123.54 cv
41.7524 123.54 40.9966 123.156 40.4805 122.389 cv
39.9644 121.62 39.7124 120.492 39.7124 119.016 cv
39.7124 117.552 39.9644 116.424 40.4805 115.644 cv
40.9966 114.876 41.7524 114.48 42.7363 114.48 cv
42.7363 114.48 li
cp
42.7363 115.416 mo
42.1245 115.416 41.6685 115.716 41.3564 116.316 cv
41.0444 116.916 40.9004 117.816 40.9004 119.016 cv
40.9004 120.216 41.0444 121.116 41.3564 121.716 cv
41.6685 122.316 42.1245 122.616 42.7363 122.616 cv
43.3486 122.616 43.8047 122.316 44.1167 121.716 cv
44.4165 121.116 44.5723 120.216 44.5723 119.016 cv
44.5723 117.816 44.4165 116.916 44.1167 116.316 cv
43.8047 115.716 43.3486 115.416 42.7363 115.416 cv
ef
383.8 61.584 mo
379.8 61.584 li
49.0005 61.584 mo
53.0005 61.584 li
@
31.4565 57.1201 mo
32.4287 57.1201 33.1724 57.5161 33.7007 58.2842 cv
34.2163 59.064 34.4805 60.1924 34.4805 61.6563 cv
34.4805 63.1323 34.2163 64.2603 33.7007 65.0283 cv
33.1724 65.7964 32.4287 66.1802 31.4565 66.1802 cv
30.4727 66.1802 29.7163 65.7964 29.2007 65.0283 cv
28.6846 64.2603 28.4326 63.1323 28.4326 61.6563 cv
28.4326 60.1924 28.6846 59.064 29.2007 58.2842 cv
29.7163 57.5161 30.4727 57.1201 31.4565 57.1201 cv
31.4565 57.1201 li
cp
31.4565 58.0562 mo
30.8442 58.0562 30.3887 58.356 30.0767 58.9561 cv
29.7646 59.5562 29.6206 60.4561 29.6206 61.6563 cv
29.6206 62.856 29.7646 63.7563 30.0767 64.356 cv
30.3887 64.9561 30.8442 65.2563 31.4565 65.2563 cv
32.0684 65.2563 32.5244 64.9561 32.8364 64.356 cv
33.1367 63.7563 33.2925 62.856 33.2925 61.6563 cv
33.2925 60.4561 33.1367 59.5562 32.8364 58.9561 cv
32.5244 58.356 32.0684 58.0562 31.4565 58.0562 cv
ef
36.6045 64.5361 mo
37.8403 64.5361 li
37.8403 66.0244 li
36.6045 66.0244 li
36.6045 64.5361 li
36.6045 64.5361 li
cp
ef
40.4565 57.2764 mo
45.1006 57.2764 li
45.1006 58.272 li
41.5366 58.272 li
41.5366 60.4204 li
41.7046 60.3604 41.8843 60.312 42.0522 60.2881 cv
42.2207 60.2642 42.4004 60.2402 42.5684 60.2402 cv
43.5405 60.2402 44.3086 60.5161 44.8843 61.0439 cv
45.4604 61.584 45.7485 62.3042 45.7485 63.2163 cv
45.7485 64.1641 45.4487 64.896 44.8604 65.4121 cv
44.2725 65.9282 43.4443 66.1802 42.3887 66.1802 cv
42.0166 66.1802 41.6445 66.144 41.2603 66.0962 cv
40.8765 66.0361 40.4927 65.9521 40.0845 65.8203 cv
40.0845 64.6323 li
40.4326 64.8242 40.7925 64.9683 41.1763 65.064 cv
41.5483 65.1602 41.9443 65.1963 42.3643 65.1963 cv
43.0366 65.1963 43.5767 65.0283 43.9727 64.668 cv
44.3564 64.3081 44.5605 63.8281 44.5605 63.2163 cv
44.5605 62.6162 44.3564 62.1362 43.9727 61.7764 cv
43.5767 61.416 43.0366 61.2363 42.3643 61.2363 cv
42.0522 61.2363 41.7285 61.272 41.4165 61.3442 cv
41.1045 61.416 40.7803 61.5244 40.4565 61.668 cv
40.4565 57.2764 li
40.4565 57.2764 li
cp
ef
383.8 4.34424 mo
379.8 4.34424 li
49.0005 4.34424 mo
53.0005 4.34424 li
@
29.6084 7.9082 mo
31.5405 7.9082 li
31.5405 1.23633 li
29.4404 1.65625 li
29.4404 0.576172 li
31.5283 0.15625 li
32.7163 0.15625 li
32.7163 7.9082 li
34.6484 7.9082 li
34.6484 8.9043 li
29.6084 8.9043 li
29.6084 7.9082 li
29.6084 7.9082 li
cp
ef
36.8442 7.41602 mo
38.0806 7.41602 li
38.0806 8.9043 li
36.8442 8.9043 li
36.8442 7.41602 li
36.8442 7.41602 li
cp
ef
43.2163 0 mo
44.1885 0 44.9326 0.395996 45.4604 1.16406 cv
45.9766 1.94434 46.2407 3.07227 46.2407 4.53613 cv
46.2407 6.01221 45.9766 7.14014 45.4604 7.9082 cv
44.9326 8.67627 44.1885 9.06006 43.2163 9.06006 cv
42.2324 9.06006 41.4766 8.67627 40.9604 7.9082 cv
40.4443 7.14014 40.1924 6.01221 40.1924 4.53613 cv
40.1924 3.07227 40.4443 1.94434 40.9604 1.16406 cv
41.4766 0.395996 42.2324 0 43.2163 0 cv
43.2163 0 li
cp
43.2163 0.936035 mo
42.6045 0.936035 42.1484 1.23633 41.8364 1.83594 cv
41.5244 2.43604 41.3804 3.33594 41.3804 4.53613 cv
41.3804 5.73633 41.5244 6.63623 41.8364 7.23633 cv
42.1484 7.83594 42.6045 8.13623 43.2163 8.13623 cv
43.8286 8.13623 44.2847 7.83594 44.5967 7.23633 cv
44.8965 6.63623 45.0522 5.73633 45.0522 4.53613 cv
45.0522 3.33594 44.8965 2.43604 44.5967 1.83594 cv
44.2847 1.23633 43.8286 0.936035 43.2163 0.936035 cv
ef
1 lw
2 lc
49.0005 233.304 mo
383.8 233.304 li
383.8 4.34424 li
49.0005 4.34424 li
49.0005 233.304 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ComicSansMS def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 67 /C putdup 80 /P putdup 97 /a putdup 100 /d putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 111 /o putdup 116 /t putdup 117 /u putdef/FontBBox {-93 -312 1187 1102} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB70854A4518CFB8D731A1977C1C08A> |-/zero <1C60D8A8C9B7D98F6DA0BC0D56993DFD731859E73082C2D7636333544D763DC27197575AA0521EF215B0E83E609598D159BBB4BC56CDE2CDE3149C3DB2DB921DD2B021218A530AC8F4FD6B7D0FBB9FC522AE09EAE356903AFB4F0709B48EB18E9FA0317579E49D7B062061DF3902491F8FAAFB0B6154A16F4A168AFC4E808A4715BB30BACE27> |-/one <1C60D8A8C9B77914873F98803C60EEF5E4A6DBE96AE9B81EFF493D2F1AA3FEEAA37FD443D04034D23BA9D609D2C8CD762F92B8820610EEE88821C53021C3E08017ADDCC0C56E5E2D7504080ABC696FC4B2BC78B7B384642545B6D2D0F5C638D5E5DAF1603C704B0CBDC68673A92C16CF8AB7E549BF3031EC2B504C05A0AE024AB48F99F68753D2CFADD79C925954659602A92A0F92089F7F8763F72499600C23C55121FDAC89B86D3B6C51F53AFAF0B4EDB2432FF0B89CC30A4C8DD2B8E7547AC479FCA4589851D61C952B27> |-/two <1C60D8A8C9B7D98F6D8F3D7AA695A6A6775D351A3C5B32DF9BF22260E9F8506C6C0AFACE341E1E92FBC3EF784C227B64F08462D61DD043B72D0EF946A3AE72A4250C97F9534EA1ECB8D1F844DABC2780EA5497B3400E0115082BCD52CA33A42EB31BAFC00E89283E1398238FF501EF46348166C5D0796F4F302EEFDEF2C569616B35F3A295FC3051C30E10E4927C117B901A9DA57C3B1677644528E481FA057A75ABBC2AFB35C7AE1B05FE0BDF0A1E3241A7236A535A6C63ACD853B32B2C1D37907B8E7DB8A4A38921C6A2C9DE2A43FF89B38C12B866B35B39B6383EDE8BC72433248A45DEF8A4F70A87D3942EB09EC1FED7DD26A9A13A5550450B987E697E0B> |-/three <1C60D8A8C9B7D98F6D4FB14BAE603D1D6590C382ECB216DBFEA05FD170C2FA627835C2BD2D966C4BBBC5D1C9DAB8F42A10D785196B325C66F5EDB7577122F6BE5734AA8078E8259D258866B0D1CC3F87D26DC47B5B233B398C78E29EC5A0D7BC5E21D44AFEF53F0B98F674195B01538429C08074D29DB84F0A6429366C6CB02FEB0C0C8EA9E32C08F04DD1409416FDB44D15BFEDE0E92C7DC71904655EAD8ABAF0C9913206CC1F0EC0B3F568F925BFB8C8C9726A4D41418DE9C62DE485AD8C3563A32C246DC49BA157820C0926A16B416822B6A5A4973C7FC590D71365A1C2D32D080303BF33A9ECFF4425A3324A940804108D640AA1B151> |-/C <1C60D8A8C9B7C054165765BAAF0C92CCBE2C6ADFDFC36958D81859F00796D344CC054E333538ED46E12E7F5688AFCF3135F7BCF04A6B81068C72B36BF7E3914834347D57ED2E2D044D0BCFFC5B59F76B5C38341A800AA9211C98073803A5DC16425F7A27A5DB2025E06EF163670F55818C9860E39CE252532EFC51C2C7AAEA1AC0A03F3A9AB8FDAF9C04A014034CBE8449C94C8B8BD9D90AD14C972CEE5EF16F02C7A2122CEBDBE881C9E97730465657789925229B337B911F77129D0B7B7E9920> |-/P <1C60D8A8C9B7B202A52865A9F3C88AF95BF7A4F54D680DD7C54822E5BEADA7225F1A1670EB558A170B9E3BA429D4E5C1ADD94CB40C9A15E7A8CCC05E92EA8B0358D5B8430B67FFDFA5F8F742D1081767B654F7EE148ECF84C987C9CA0747CCC899F01600CC34C28344A10C25EBF2F7876BF30D9E25BE938EAB4F41CAF28134848ACEC42218985D0F14D0A3FBFD5555B69192CCF3A02303B11B4686510CE8D8DC6FAE96D370BB0CF07E19B63533C65CA624DEAF822D7CAA14306D7136600E> |-/a <1C60D8A8C9B7BB5CA503F41BCABD6C718309D7FD3EAFD4723590A6DB54A64A3783FF0E8915C8665146025473AABA73A7307808FC49DF54120176FFCE6E5630D745DEC9D7FE687B22D69E14177C1006B659795051D4F564854E1C732886E0B2617B0D55057161A197AD04FDD89E349DC800C8FAE6C2E2E7218942027A386140843CEC6D038F4E517DF6E091EE1EC97061608AA6DD07992C53BB029F315A3C165875CF85B20BCD136667E2BE57C24163FB07309C0F29C421C91BBF197F69B4468BD92D4E0F963A574D94F4959F6C142EC285F75B0A57DCD73FA9D71DA6249A4005429B> |-/d <1C60D8A8C9B7F000DE2C8396BDB351B4990D8D398AAE78675B97459FA78429037C4BA1F4D53EE5133D48D0684659BD3916AD44F9EF388C820B65831703EFEBCB54E84A08629938E7E1E9BD71B24EDF23DBE596C10C019E480A33F574EB4B56CE5524F79CCE926D853B8A82B0FC6533439ADAC617F645B18C65D98BB846B0DC1C7B681B7522D351F2F82B4E916C460C2918D70553B74A3820D6E276C27FBDBE6C2473D5769F6125482A622191509AEBF182367421867D352ED6C0E76416F79DC149E960E3968BEA79DBC1A9A96F0CC21F57FD172BDA58BC> |-/e <1C60D8A8C9B797474FA4303150FF95D22C1576367C7C82BE107A33DB836FE273C47A9F1C294729003E4BC6906C807AE64492E567EB699590C33760698497B7D8BD4606E6533DD313B7408096D0253255EE30E5A5E3E06503BE924638C5951A143C8FB027E022BA2CC9736D9A6F100D38EB1D4C686421142EAA9CB9B186F914996503E87D112FD301022C9ED0ABE9EC3841A2AAB1D0ECFBD04DD27FAC9222691EA422325A2608DE3AA47EDFE24D5B> |-/i <1C60D8A8C9B8524CA9FFF1D59707FAB92D69C69B7C857EED4D13A4787BF89B18996B1BFB164CA796A0EF07F1407DF3454BCAB96192B46A6EDEDC573AD74AE5EBB6C7E282C40345BC6C9BD822E381040AF84910E37D38B52009BFBA09050BADAEBC8553B469DC8708DC8B7D087E48B2E8AA99CA401E54F66DDB7E9923B974D88CDA4785FD295B41FC4A68D170B03EDBFBD3758274FE3E0C921CDB5782B906DFB9938B6191061DE008B5105239C6B4135C4008792AFAA4EA6826684C0C> |-/l <1C60D8A8C9B8581A5C985F5B74008F0E2CA964639DBBD35F5DD00E39B9E95E3CD2193CB410613D02E647955F9BDFF4F3308822726BABA78ABE406A4F243D0D7526BB93B898D78CB4E4A407748C335667C85BC7C5DB0D0060EEAC> |-/m <1C60D8A8C9B6FC2D96873601FD7D92169A9B88887C32231D12B856F0FF258B62829FEDF861E7207C12D5C53BCDFD0EA3F0EF441B3104EE7A8DCCC9135A66A3908121FDEF89ECB4290FE2DEBBC0D2CEC922FC3B50F2ED674EACC69E69FA370309E0EBFB994E62CF35AAC76A68A27F1193FA80070D9751608DC309EBC2115575AE6BDEEB113F39584664AF7AAA3C82601F097876EB086034E5AE78A75047B10841E51F7380B84CCDD035E85E1A5870A2BB0942D4819E585F0952EB73250253334BF49322F96375F5B49CB7CFA7A0B232F8AD1DD38A4207A81B8B16535F38363976D31BC82130B6F42B86DA3EA4FFCCC6C8DA3BAD0E6D585D10CCC6A4EFCE59BB479065B92972F3D516BBD63C0E7C814F065EEF1040A3FF51C243D5475EBA7E962CAD4F75D3AC0EDC0C293B5BB6A5776BF4AC8F3BC665CA79374C2D10BBB5A4EE69B305850280C1> |-/o <1C60D8A8C9B78D34A55956A51486C357D04D448C2012FC2F5B0A5FE1B320E5CD61418E269420C85D10935D5D9B29D4FDDFDD85C698EDEF649FCF7B4152030DE7FB7B0AD250869A491A4776C5C05E1436F84934B318F30DD94DF542C1FA3FC71DCD30BC8EC67320F785CD0C113E143028BDC1093B4CB998C3891C7A3F7C> |-/t <1C60D8A8C9B7445140689D163BE9CD19CB6263AAD663E751BFF4FC3EFD289F54C938D7522CDBDC78B86C3A6B352FEC6C942B3A84D1DF37948F119DD042933AE483D22B2D630A0536911763BEC72090C0E7972085EC665EF1618CB3A1E365C68118F7319C489021F7E5BB1237C8B28D9185CA450113B4347A96F5A190A1E41185CC68C22E0D8B3619F65EBBC7C09A7899C42BB7EC5C668E84BEB96E5966CE04926328B6CA13AB435E16BBB7670DDC776BE2EE98FDA0050964E0FA7809BCE05F1D859FB5837E> |-/u <1C60D8A8C9B7B3D0EB94C27794C8FF7A66F97FA6CF9FABEE835E1A1626320F2E2E58AACC9742E2863A234D717CCEC554B38E6670782546BE1280DB3D026E3D97D899C4DBB14646E84E5FA9BF09835296C032D42FE102EFEF2CF2250B419A68387C6038BB86A74FB974D87A0B2F0A7872D9B0CF5DA9A83619FEC0CA43F47D29F1B253EC46F0FA880E9D913D7D1074998F6C45D6194D53073B871AAF04BD179A8644CD091C1AF599D8C323C678F3C145D207E61A3CA7E44F7257600C6DCC4283614DCCA35CB9A41B86A4FF> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CNPNBH+ComicSansMS /ComicSansMS findfont ct_VMDictPut/CNPNBH+ComicSansMS*1 [48{/.notdef}rp /zero /one /two /three 15{/.notdef}rp /C 12{/.notdef}rp /P 16{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /.notdef /o 4{/.notdef}rp /t /u 138{/.notdef}rp]CNPNBH+ComicSansMS nfCNPNBH+ComicSansMS*1 [14.4 0 0 -14.4 0 0 ]msf0 130.642 mo(P)shCNPNBH+ComicSansMS*1 [10.4 0 0 -10.4 0 0 ]msf7.49512 136.242 mo(l)sh7.2002 119.442 mo(m)shCNPNBH+ComicSansMS*1 [14.4 0 0 -14.4 0 0 ]msf157 49.9424 mo(P)shCNPNBH+ComicSansMS*1 [9.6 0 0 -9.6 0 0 ]msf164.496 55.5425 mo(1)sh165.8 41.1421 mo(0)shCNPNBH+ComicSansMS*1 [14.4 0 0 -14.4 0 0 ]msf257.4 59.542 mo(P)shCNPNBH+ComicSansMS*1 [9.6 0 0 -9.6 0 0 ]msf264.895 65.1421 mo(3)sh264.601 49.9424 mo(0)shCNPNBH+ComicSansMS*1 [14.4 0 0 -14.4 0 0 ]msf211.601 198.542 mo(P)shCNPNBH+ComicSansMS*1 [9.6 0 0 -9.6 0 0 ]msf219.096 204.141 mo(2)sh219.601 189.743 mo(0)shCNPNBH+ComicSansMS*1 [14.4 0 0 -14.4 0 0 ]msf173.6 265.442 mo(Colatitude)[8.67676 7.57227 3.94482 7.36865 6.78516 4.03564 6.78516 7.48828 8.45898 0 ]xsh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 113 /theta putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C0DADE9D447BAB8F20B1C2F9DFFE1BBAB91300314F123BEB84174064D2ABD3C0AE74168D4F3EF85FFF56369A1B6552D89C206BB88B894DAA0EE11A6360D4677FCEAE6951F7D07C37C5D14C89E15E3229B8646C595BCA5> |-/parenright <1C60D8A8C9B81F2C3AEEA7D6F96C4106F2C8F70F9F3E7F9B0AA2EE431B158AE7CC4CA4D68AB119C1BC3C2A9644CBCAF1D5954F0A602080ED248D302393AE578BFDB57B92B3202790FDCA6ECDDCEEF5068B7D792F6A6B6B614B442BF2668850> |-/theta <1C60D8A8C9B7B202EB8FDA93F636BC810CE8DD1D07FEA545978EB1838D3B614B81479C395CA88F7627B9CF3DB3BA04295E8C4C4ACA6486D548ACA634F76CEB14E9729B753C0A7D1B36069AF7CDCBA91510EDC639C978184FDA94CFD8AB60E9076EEBD43CE20016A55C7302D72B1B5009DD2E0113D8013B51229D3985F5AD7943BAC0412A6149E79C911795A5EA98A414419F8C4E0364F4E710F8195523AAA650DE0EB1843D10FFCFA16118FE6FF38CB9310CD17B978F37> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CNPNBI+Symbol /Symbol findfont ct_VMDictPut/CNPNBI+Symbol*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 71{/.notdef}rp /theta 142{/.notdef}rp]CNPNBI+Symbol nfCNPNBI+Symbol*1 [14.4 0 0 -14.4 0 0 ]msf242.604 265.442 mo( \(q\))[3.60059 4.79492 7.50195 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CNPNBH+ComicSansMS*1 uf/CNPNBH+ComicSansMS uf/ComicSansMS uf/CNPNBI+Symbol*1 uf/CNPNBI+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (schmidt.eps)%%CreationDate: 11/11/08 5:44 PM%AI9_DataStream%Gb"-6kB8=:&hnW=J9Sd0)bfNbE[Em+S?p%>Rr-S#S=)N)^1Y2\-$?#qBu414hd(GuFYKcE;Q3Vu.ObqMF[r!KZh'IJrd3*IMP=HM%#l]L=p*V-5(C2!;0,k"/SQIY28R]T*,,?K_SVi8]OG$\gR&ih6]N=<GN7s9:n@[ZWBFG+@DQDM6D#3aQWZD+2oa@?jr==lgX8=Q"%Y#YGq0t^ELG(s,,gMVIF<BGhs.sMp)?i=]j\h-:_X&6(PC,Y>jl=UV@Dl%'H;<ml0eY,2@'<k/phK#B'X+!*Ef,FT^^EP11/ADdm%2Zj$lRtU73posA;)V#ei!,J?YfS7EKI#rZLmoPM-&F]cu+O9O*&')\0Du,/i9$%>Or(X':MCd0l+d#O;Q]*&!P+k29FP6G(%YjrI%YhAEVKNP_8NHVL**B"2pZB1"kr,O-8TDEb<'8FTj-gauC"uD-$Q/Z<%-_p3-Zgk4nR":<1B@n5PZf.K758]utrS^cJ5;;Z(./?dZ%M3VD->)iMUVhnNQU'uD9Ug%cEBZU,-;QG[7&El>Us'ukIX8T6A&BLj*)W;MlrFpgIJm#$Os"sQShHK(/XOlZ@GAdfAW1o+IFAd\0%6ig,LbU!*aP+%_8U0gcB:EoJO_8-?FFg^$>9[#LjeQKZ_ea.*mW)@QqI^?1Q+&I$II1Y>A[,M%DqEKTD#!3e_3ZMV%Vu2D.NZc9%%%'bHND]l;[[>C96dXIST1k:aAamKkC_^b;HPQh(Qj59jkT-7*t!<6RI5Ee\:b[g3!T3"Zs)?7i75*]],.a.0mWJ#2r[us=aPt^2@%A.iZ(P?9?'/="^C1E!9Xa^CYJr56!")6B+F?nM;2T3*V9a'/:$^7!=-PC+G;PY1_X<(\M-m8=7_QV-Tb"u1as_8CS0:[q0P\I:4q%5Htua#sY[1N_(6?H\Nc^:TT0n_G;/\M@&u/NX7r?(QJbcYpG,PehW6k5B5KR(JAaAfI+Q`lQ9p$\F:0tPY,&Tc4<7eE6PQ-Y_8Y8%9f@"r4bK<A`d1.reN$NCY^]a_a+p;>&t;0FCA*V2)#hKX3'MJ>)-5D%3'R8Y?T:))s7j\Y`tJ<g=u\_DA@'@UK]/3hO$0L"J<6i(%UWsa0O's&E0taK1@3]F3,NK7ceh:fASM+#2rJ,N7F=Lk]kjWFICA&@^LS%\,d5R)HiInn&T3)=gk6n5QXmut>*:&/Q[n=OfXf0a(%O>BL;[%QuD3i<DT$p',ceh=o[6E\Ui3]71(el$j-Xg@cTF7tY\c8_"b1RiH?)qI?4r\=9"\XgFo$`Mj\F-_\2Sb<qDX)tPo+24l+%ONQha/?;n(k5c`(0o9i7fMH!ViDobdmBSZ>;4rF6QUsW.s-"`%7/tI0.15sSs(24XJOG*Tk^V:#</UY*s0@.=2#Eh=X*poA^MK3!%dJpM%\K(LKs(24XJO4pQk^V:#@ZgW?s0@-+p5d=:S3-XZo?)N_^Xum1T;:P57&_:/mS\alKV\u(<?Ou$8qeOTB@H@_LsPU<Wdsc<%PZ$uSUi\)[j>,Cf&r'^`/#@i^UfIghDSfaWX8"9/LB"KmJrjUVACF[2@5)4JWFB&.k=T(+B*jkD6EYdT^PW;HMqMQk4rKUS[(p*O%Y\!K3(>=DMMtq0QRk$anct]PA87LD^S<fjLK#Ut*-2(D2PtGa.=sfd$Zb?FQLMt<0K\iEsYn-ODonMjuZl0:cRtn_!H$U:h+HZkA%$UT0P^D,)$g9M&3igc?ID#-d;^.N4#.Kh`R>TV`JXPl.g[nV:JnQj!kO=Gk`hBYW,GQnUCh[JD.??6NrXGpI+E.dVp$OO`gJ"B!J%p"g#a7eR>b"14iE%*skJN::E-pbkDi1Wn7g_+#e_nI6q$&BTIeZpLlNWeJ0pStTISQRZ-B5o;TD$]N*12G+eP>A\.lm+AA_n7HMH%Z%-nUP`#BjTCd:=3=Po0$ubc5a[-#aZODd-EN\dKcQRHD:KYJ'.LD&He9C_iQW-N+EGP01iB32[Zm`7`BA?2mno)>$.;E!2HpZ/R%@&4h?$_5&f7ljZG%J^s7k7&!FCa@Z)'pG_XTL.nGEXC\nDhl4T+`6b`e#MbB,@FE,oo2q:cY6lAC9;-*7SE#KBjOaiQ#nWemHZU3%8gf:D6%qIt15sOYasDJTk?h2&VSjTi1dj<bNNco.$jMBT8kUEkGg#GJegAXe?>Y\U;Y9e90nGs!W_.3(;iV1FB#5&@4:uoj!i9N"%3K?hNQ=uP:,u-g!->tnL`:6*.=e]*F%FC`;j]%!5@9[6JSksb8a@i$A$Y#"8Z)fEV1Xp&l\!%f,_%blkRoVNUi)+aR`'^%aMs@ni%(^,/SO,E-nclbpL-S"Run.L[oZYVoG:?a?qGY<]18`Z,1BX";"Cb\OBh?ImAXYBP"2Al.eIARn(Z@["rYDdb0B[dn7)O9d$>XGuW%Ot":oRV%QEf]X(0bm]er%*Kht(n-]4Ze8BYRbl.iTM_[R@PEm+cZ4HQhICfTg@UHpE]@0nRPr5@lK=PWN_r8P_mZMdG`d)](.V"3%AijI)j-Q"QfkLmSDQ[,`N'brJ[o@;lkqO"fS<FP3^gj<KnJOqB:/RO:W?9DIj"57rY,FK$+N)dk>[HST?+Y'5PF4$8\YXikTkc@I%K3K;i?=(`.8Qt+mOX/sL`iTTtBMqHfoa-eG.-3H9MqWR$"<5K@hAS'!XgEar<N<1+<g\iBek40OTs;b?Q8-`[M3"OPXB293fbj6@%ZS])@;Oj3)WkL<s.2f3;iZ0b1I5B,WBKOPFQKE7Xei6#B\gUF69I^C<DTHjgWfiIQC"1KjN$q8RcI:ME.[ACG-D?e:TVjf0"r5DB%@MFq_pV:?/M2d_=CX=u0VjXB\B\$9TDc`b8$d<<ZhPA9Y@J[E?P_lpr[@PbtPlbmWU1_:4cm_D=.APT8OtLB(lq*)g.c=Q]LYJt0%@U'soD5U"?,e]BdS0na]7`K*JR&*\1UI(7(*/QF.`O2aa!s2_4p+]f+CW@p(Y]"Yb\2I"NH(k$l>+%>d1tMq9MGYjOcPs8=V[nKt%MtBQ'&H*5A:WeXI`pGjEhG7cW>k92DU_;=OA<Ka0@l+Q2e_^tL'ok%NZKNW,0Z/[qU2h?>VY!p3#4%ca#V/JP$fZN5rK\k3j5j<D%6CVbKSLmFeN%n)LE19:k-/B?Rfd6TZcmZKHXF%(@Aq?tfL?MUELK(l7NF!^?_sJ3t&*1nfGkk%4cnaKJD3t(]W_XlJN(_8W9s_Ui%=&nYb/=2V1hjTf@(0<tj[S/lbSi?IAgofi?X-Qa`[:O=47a%8mCf[EDN4,a/#3@,*(@m#E<K8e07\:PY_8`Rn6ZSI6BTXk4S7\*j%gR">+JFZ;)3`%o<(6lh4GtX2Dh7/6&2#)#9D8*@QI%1"C&JOT3,l"u@\XM%oZDBd.N(iC*&_^>4L_&jA_j;]%S[Ypaj:q?)o\!$o%=dg2>!8k>[9&p]>1Y,Yr,,%IXo!2FpZNNu6-B\QqB8flKH/+78*m`bA#M\H6,,<.1\A_IPN\jVk/]m^N5gQbB3R.j,Qd[K2(?m4b%r@^&!V>9#Eh&(q4,r2lr='33S6d!P#h3Q/"\Q%Z'(,7<SOqPdU;G$XZaCLL2Pb@*r]7Ik&N'QJk*og_<7@HA@[=e:eg:(+SiXrJZ%>,L"jg+Q*%WMK2RAbt.bS#3Z?=k<@+O6gEpJ$W"QnLTDt\)6tOr<CB.<$d`7b%qPfromu&gFU(UhbL+gl_UZkZ-0e(K!_>s(P.V[%j"79bN--#.H3qHf;$i"^qjg\DYR7oY7ars"`J_.Rp2ul]//h13Lb$?F6EOad8NCDEWnbVZX)u.'<I^F.)R.G[<(9P9X57*Yp1MAn%H[ED)/]0h/iuBYNX4%VOA.sZ2pqcDj7>44M.Vfc3QJmm5NQhm46Xrk&a2t>o^rD$,WVBl/O]%;cpp6-@J!DXL''io$3VL4fnX.kE%9%?u7hDj+;QI2PYhgF3*1Il&`$n$U8ViL)Uls%3Y`eF2=\cR99n$]f7m$[R<Sm4.-URpqr-YMGR8)7T`d-Q.f)ZEDcrme4Oe%iBP%GdcIFo\mn7T'aGUGlFI8Dmij"Gd7*")E-TQ_e,t+LnCZsI.80CN@Lu,V:OYVO(SE%eGa8ArZ/3-FkHRkCA^G9]KpK4iXPTr_shD.%HaUtaDmDDu6_1)TVaJ`+ia#TobNa6[Fh:i5/d#\'WfC33O^?QS+),l`eZZ/G5@+Qp)iaUti&a+>2Yo!F`LuaPHOo,D;6/4a`d?6"%@\EH9LH!r;:;,3[/G3^)#..ElIrp$eqTZ54@=6_2ef4!ks!Q*"d(5-X]#/jS1S-2<cN^N:i7k.Eoie+V]@e(dQ.3Qu)P),"A1dM7%ePlKkqt88>1tCqLn9_c.p_^F.LK^AYjh1?FUW*9==mu?j'6!gGUK)0[=.l_Y8$rLRBQ&=-\hL\T@!mrAWZ1?nYgrLglG"/_)Qd&H%LEdo5WZR4FQ;'i7'-$sMN-CCR3ctEOhIt@[,%Nqn26-X`D:1)NS/'VEs"oj'1o+hFJ'boXp8`"!Mkb`f+=0e1i20l2S1jlpKE6/b%J=bdakbhWT!hm0Uq5dU;1c,3s#?2^mG=M`X&RRY9+OQqBH^7Mu;$3uB:ij_#%uoXrW)YlhQ-NL.1IHNS\Be9:)cl"=fZXeO<6(CF%%%;1RgMA(feW2oBHb[Cs<Bl9_(eZZFp;Od:SZcdXe8A8V6f>k"VstH#W5<nqlQU2D8K>EL%n>s+VZ.>OZ<]mEVM^q*/oD-QoY28%%@$ro_4iNDAil5_LVpP)]CCk$Lg782S5AFI'kqtTtcF/)!]=slV39pPD@fA^,lf6t*Uh?V$:SU.Q[X@TTD2B2g^H2-,"X+.dHiQ9Z%[,['GgHDWrX=tK>Hk3um:^Ef&d6Y5$?THG4;33[@5OI_I6k]nq*sgD?)lScBUQ9I>1rZ9BIiA8<kQI:9q!_Y[D>4Q<*-eqSl6?Q6%"5a>XT_ng%1d]9p6,A?d[t&)L&Wdk,MHg1IIZJFJTF\%&N@lCENQr?%)NH<%l?rb6\HXJJGlG>>M\d9`r*BM77ua'L@C]"G(\,UU%(I*]4n;?Ff+'3ePpfXT)CN]E!1@iC[iVt\6VGFD5gXk?4r8fkrm&Kl8/R;GOdZ)u$!"25CX76?(n)9i/!IR#XHSpn.5E-gR1\BF?%I!5ArXdnDk0\QWNgB86gmGm!Q@CeY$+t,1q!@U"/CqMW?p]H:PBB*j-Yk50hMiF'<2/0^"$ip:2dC/g`gEWL6QoK5q]dCc.FGch6%YgEr#Zm2u6/riijIspj:_`L"$m=2Lj2V;,I3"Yr2a#Ib@Rl%_V&UsT6s+1SU,;bOf+51_U,+LquAI:6Lq#k2;prCEL"JCk-W!4Nq%XL>a^ptq'GIn4#O20?7`n,BB=72Df)CsqMt=L%4N.M2)2g*8e!U%rdd$!I"TRcgcpiG+EW_e-(Ud.I1j?FPtLP!f?g5W%#\T.iH@%deP`#!QNAkLHj%5JET'CnUPHQh1)J$\1,>3!YIC;f"`Bb0^eu!0@5CNAef+d0Zj24A=Q+"#'pR-qAH#,]%"ImWrZBE2t<Wl6!Xn2%P6O,GbsYs7h&H>2+Lk.Q5.F`fEgW4!L'a\$r4kq?kJ4G#D]%5:<26X3eXEH]qZY3m-J?rnl\^+oU*G4+7ROpHeBQeMnCFL52gP4;%c1'i0Tu6`jA#RK^+.<p<]^$?1p78Pns5*.DdgoKE:+Y0Ee:20XURHu7:I[=GmXH.GY6H'VHW_9kQkm\-cqf&uoFm1?G*O4U;d7/2%i<N,ip7jN&$!s]Hpk_u[5Lmmc@o`BQDUo93[!MM]`hP@35%GoIR&$&I%@^;2j(mrSRRu[W"/0)U8EcCK-sBp:Do5sVoc'd^m$BmW%Xf=8hDN;]H<T\,\AaA.j1\@9WUrXj6?VJQ[qneDi-B8KUPpWr`Z9h6CkZA]JK0J$>l%3g$E9A%d)5_6K4u&6tM:sUp;FXLa^XLCJ%n4TLmAW06:IRt-U19qW:q4$3e'?k3>""X'bA1I!^pRV$I8c%he21e?[IWs:'m!Nu)6,JT\*;I[K"4:*jK`&KArUdETTX4bi&M&c>%S%Xo!He3]$qZ#YAX8N*^"#'6IrS,l$3G_B,kir8Z^\@];rb1fg^[?8L)LU[;)OS1)9!SBq7N^gc6KbGf0Kn8+Y@-`HgE6F@o`DOl%H[pnObH9s.TSb04e,6H9^ui2Y'72W+B-jc%)uBI(;uQ$5/;^^&K=4O7L6?VB4J:l@rdZnA:N!:b-@FQu2C^;%rb8`)Z0ULT$#!<<%?+&R2CDs)W,UV1BIc=u\NSSagZap!8hpl%c^`@ljW90?M1'Vl-mJEkfCD+SscnEHrZUeP:>,)CgqaSsLNOm<OWF*`N-^_h/quc3b%4L,Ha$hV?OkmKZUWiKNe]nH=RdqZMRO.[$7#-k:2&c?9*6-EWPs6cpaE9ZtU^r>0Achc/@-i!3:IN61j?VpAJ^Z%KJ5J7@%3gAK.%qP\[9TaZ'J5!S7t:\[R-JYDDiR#$]BYQmFB&FAR;n'G7%c=kl)s7)'pURco0c>smDC3S.N7Ko5::;PR:WPU48/dgqW@mY"os5CrD%OJU<tE=T%<-cb6>DfPG/:^6o6P)Wf8s.S>dVisT`3GSHaN&Dr_RnaVj)k\U<YQ9Y%MP=HnLP#AOSiI"fH/<IiSaK!W$ir5GG9SF5%n]M-(+$oD&lE$$(O68dNq1J)"i.i&(C=/^+*Em2X5q]F:PiRlI!YiIsY8Lh=$8;5=[ed(9$XraA8&MM0P/V><e$-1bq""/EHM%0o%KTB;),8qQO*7b*E=R0#bF[&?)GiS>kPKG=^`tkAqo=s&<44G3H^e_^J"7MIA*maQW<EAF(2mIo,%CJC6S#n^ghlMiqJ+Y7>%0,rZ%IY2F,_:q3)ra6,T8>RD<<H)A:C0`A437R8-jMW2ZR"#!@MOdMOe*qmT<Yq9m\eiSh2&AZJZ];*;Utf_4_q9K!5_:\(0mS/dg'aAK%3AD\g@`$UhS(1]CiJ$bKcKbF(N5#+KB3*'Qs(.)-iI-Xh_f#@d/'7c3*Gu@eBJuTU!%d8t*</',!%e.;T_s:j9*_*hqB+;.s(+)*%[$i*:\'&50R>GM9KW(?m:1O7"F[e#_XOd=<$=Q%76rAW]UiH@6=W`*>)&BFNh]7u*p<81erS%u=rjPCm*M>2s1k3/sk0JO(1n"s?%1lPU^#UVj6nMt,mY]q&9pcJKXlC[.o<HlsmB[Fjls)n8N>3`j36G"tRf"i>p(QQ_0E3.Q7XMkQi)(Jhl*2;XuTD=t//fqjiYMg*%%/X6ma&q\98)!s:s%)0-"#t75jE?WrrIlcMCG"4q"(Q5;VoG1,[T8eRgW8QN[16IY3Nq!q##k4lsOpolqrG#t1$\TUO!/+t?5L:T<%':ZqZ3o59O;P^[@?-1Il`2_9CgK.\UM83j`7FOY$%'KV+_ggM;pX!9K2i#peZdg&pd:S@s3?H8B<'+H^l;tlQhX.:@B5CiBIqk[k%T%Zp5T16SNdDph8$QlK_%q%mlj55;jh!V2.UYtVG&.rddoacfUmSC`1jWTSO"!ST%C96,:\r6R:p_X&VCUg8Ai=N1LMr1R)l_$9A%U`JG9LVpuZT%XKcX_+F,;/Kac_H>Dli>TB;lrAH:I.G\Pf,OC&JGerdma1UYb_*n+/*&;!_mPL0j,?nOQPl"bfgDm$.jO%$6UJK)%FU],deZHf@>#F!Ujdie_&,2h!q)-AM>H83^R_9W`f2'Jq;qrAH+#FNi@i1TC!uE>F\i!^so':N:S8_ko7omMFN>[5DX##LFfce6$%%[njk*.mR4-p)S1&m6<GZomn\T(CR1OhXd#$fk"N`bu^sjGXLT;?O"DR;]1#KfZ(I/>@I]BGf^=%*,.e=MGS=5H_n5^Eh%)rJG+7%mu2qi]!bRU`"f?8)-O';A8IZhb2/RLef!,DfB^IZgrc%aYYLak@<&\"CA,9IT#"u1AK5J'rP`0<nHgG@qeL]ZKg+qG*FD[L^9:`t%JmB07(.arG)$.!0%ojfpJHP3J)p/m/CuYu5qQVrkm06\-*p`O7@]mN<3r^&HR!l(;mX/$hRTT##(W`RRYP%G+R8R.XO3YNMV,1gW%ChZA8/QI8-IprLb+e;F7oO=RZU!?0CgN*SpZSRQj>G`jSXb5@9q5@i9Sd)G8.$U#*/;%',M6,rFV:52@;thBCE=Y<AG)!@ZjAMm%%U,o7`a5i)RhVc"La.s+Q6ajDL0^:J!<WQm8p$Z52A1#tQ)sX)Qk6s=Lkk73O'.ODqL/&KK,?L`%_SP`Q3s56CI6biOoAN7`;!i"q%UTRGJ)`L`3Oqdn/)[&\#-?^-qh_f/AaM;hrqk&LBGA$*b+oaci4%.FhYM]:p[OcliV%.AXCoU7)BbuV1gL/(,9t_kmA?>aGYb`f`%14E1)C]ZB^2-sX^,;8NXlA2uOa"pQ*]'%)dZtXH7Bd]J'`']_u\.."nc(QVpn5s2PRXJIsV%SeLQdoZ`V2;diqtW6c$n#'P[T'T@%Zg/&oX/VOs!k&hXC25rA1pNd+KO*nD#IW]u?$28i=I%G$O%1j>'fa9Agbk-3:L$0(R[SY3_ZR[0Q"%4`2W4d,@Du"RU#4]*IlM^5%e07u2fTq.)!>)]>]ueh0YNK@<OLB"Jcrp%]5>43R"6m/VjW0_o@<8BlInWJe;E\%aQ:;8=C^o*NNrET'>eUNpqM&irP=uJq_pk^b%JI?L@3sN4:+<N^FejP1H\p]d94/oYc9I(XZ;f[F,C(HReW'/Wf5jb8R7CYA1HG0;j\)YK<A7;lC)@YE!(p'XTctjWBJqHqK[gEpl%%..eYGnEDW8MMYN*"+s_f4,Du$&4FrHYna.B)cftI5#X.R1'N?s8-L0EKbfs`@e%^f`blkC3@9?$tf0Ooo5d0D2m0\g[9lHZhhl^%a)YYrHHk-Dr8D'F;.uU*_H+RdM>'ton$WuJio-)\nD<n9`c%$GIBb5:%kb5-oO(>K],p)AT:,8r_91k7[I>V-ltT=mnBPV9HR[H\%jd.1#Y9dO`.J!H'1+$'X9B"]t?9fCLWu'9NZ?Q#V.ic2Dm3*V:n8<8VV9nGh7`FjgjfWQM\9+Q2/c<QHK>^(H['1GuX>J?Qqk)K:%k^In-P`#G&DTWdJH>S,o`/X+q2mJSX?1;0tLKcsp=c15N0*0^tmA81o@g:k0_LqU/(lTb'g:UUHSD4pHU;Da4`-38S1`"rI1cQXl%BkVN>/Z4enanFb<oY&aKh8quhIjuGN2=g_FmS5>Ql(&m_+(keil%A@bkbZdW<,Q,LO$_g1oPe*iamOPlcr(n%d.5SD9B`RBFIFO7%+N40BGa6Fe([1V&#1q3njA:X_=$bl2!+^_(Bm;/AG(8(rqO0r<TBXVo?\H6R[%/7lGKWWpqS6O.dUaa'Hg;LG/@U!-Gl+2-GDi"U%pKp[e0C1bPVd:%+LT`Ge:1%'u.s@K[!n;(mH!ChU[pttH0*V4T1!mDuoNZcEQDMh8]1rUsOcq29MYpp(CZ7EX?%49VGH*d\$RK6A%`4".V;E_RZ\dY-53e^nE>G6.e=)^EDE[>[RQ-D@4qC\"6*cLC,/P#Qe%r8FsR[8!s5Q@`1H)Kikl]t\=[t_"GFUGKX/"5YnU&Q;W%SRSK?]i4-KcYDf<ff@00Ti7dL7S9l=--&aoXg@,_;lA1FlWW3^H80WEG$=`5G1Mk_D5W$QMsSsXJ^SsmkZU$d?5P+C#7'Ro[D#qE%rR&4o#R0so?L0]f8t"\A6`8%keZ7I(Q7lW1<or:/.(pU*g5^9c1tW05`,Dhq4"WrlVj:)W(Z+P*j(n\=^=2JGG^n(%?c>c!`mB'0%g=T'c0:bA+WLgNH8h0Q8>fjR*L^#G@9jUhKDHWmVkF[oOUlYC>jf+WOm<&0^pE9.8Efnj5o`Yc[So"%gNh,V<]]HI0SN_a\X3JZ"%^=2-+ZS-9&Da]>gA%d3CgN)ZQo_IDnkL=3P\6ZjFl^bmp%,Frb7TWs)HJ5gVgPXX+m.@.p0=RH44U+NmmE,8!A$,*ODI;khZaQF]%mF=*74+2J!%e'$bJ]<Z)4tFLnflbBMe'kY,?h]9A%GOWbL9V-,:47]eH$J`5@B@d$iU,Y![XG&dqk=!fG*'3#[.l/?e2rA00aif6%]2PE?3it"Fb@[X)l]:J*'^RY=`\_<Y>G9YGq[GUBl!$3&H$S;W>ijf@A2Z!-Akb6F9i.b9qJPf<ghEiSpc;Tp:8?k/Tb:RU?:gHU%ds]U?A"rJ'RphlU"cEs#JsWd>ZZXj`bAd'oK\k'MGjAc##Wn#M3X+hYoR8#S;jFatcu!K-mBkd+$h6tN04O(+*o,fXCYR@<]Q[;R%Qq"[X1e?,fcEU:KC!;1ee'-P:rUAeX3gI^\F$Empgk5e#[f+Z[HMug"npFtnb-b?$<*e2n%\LX+gUB]'oj+g`3+&q;$?K%$/-U'p%"ak&0enQ44+IO^]MYMRXCmGUGH`AR%HeR_^c<^tn%Sqkt[(-"#U8R#g><Z:rg-<2"?J*#@38?PY4B`WT5<Tcg.cG>UA9k3?rT3)#%gZe_*B\hY7j3R>Ae8<_/C&7I!<&LWh)4+:=W\:$ijZ(LdP&!#,VrFkse*Z(1If"$?iG!2iDRJBGd8M!C<=U3kq;h4TrS&^Qd]]4'%*3t'?HMRMTn5]s%Sn]*(^&QWK#B@lEmIp!doV[h[J,8YTT"M-o*Su4tGk)"pqAt.cpA7mULGhr/pX7?-,ZV."g:0@!%@>BZ:)NjB%?G>$@*A6*\*Or_[hZfEBp["LFq`A^4o);'3LehO@>hS"sEee9D\McX\MBUpQ\+X4oA\DLKFS*9bg^%^L]fS@4$2FWAqf`uZrV:=a%[,'1n^)dT[h9<_#09TZ"Y+Ff6f.?%OROr@rDi%,L_W;g7aLAA2=2*4gQ\&#,&Ulf3%lD$84amK;kl)sK?JOB$rW"cVqp_7pF8R<>%=U00CIRMHkLt9mhXj`P[F/K4P!=NhV#jtGm0TEKT/?SB28%H7<g,3W_h%^gHs&#7G413V^+'htf4&nVne>]VFH+0m(jjIqoYu@?\%9:e.c$ANOjhKlMMMUjcQp>OP>XM!$Q;SounEk24CFXikA9cpJ7:6(og]jGZF&c?,)<4Q0iFIKqr^GL%9?X$a^3t6,9DGDdSOu:Ms%N7?Fbmo4RWE:.hYoHcJ?8tLZ$n&lILU[M$#lEoj)Bj')qFQs7th3(4dfI9uL2brRr\;g-"bp$Tmb@1Tj%0D'onVK4GeNMGE>A;a?%,9PT<F89Wba[;!bdG%I4+>%QVVHB1IEN,9q0V%G=:)W`B[liAoLP-KZ[i3;RcRo7=-P??_-Q']Z4?fQ//reY.^=L;1et;LQMWuLG%PjS0rokUUAK'm^Mmm\IN+"LM")g5XBJEEgRDWH83Y_oOY@_14Hh(8g>+!;GDHeT1.]0JW2X&\q6Fb#1@6m+`:^&X>6S^HT_OI^)1%."le[nppgm#0`EPcJdq)lAs>I,=pna1S=s?5fK3CRh>L)pgin599>@2]J?dc>fE':l1At0oZ:si[jN4u-B4'MWqQZ4+`X)>H11Hq%U/\GAr'a@?]eDB]I!h_s[Pg7lTVqT9?Zk`!'6rCH=Y>]i:.OYU_Up#)pg!iI57_=>FO^PR<EIc_k/KOC4mn,M?XR']f*9\s#,YbI%L!N,^@hh/GkBtV.JN!AHU;uJS"28-#@e"#+es_]f&Qh5'j$oFGmY]>'6OP_OXsD[A_2fsRcufb@7J*76*Q5Ag=,%\#mBn@GDB2g@%*832^jN4?,@m&fTLsW*7h7/LQXmu/4)NDq3g`I_'>uAg*+Q/UGF!5.iFH$`(&k6Q)a4AJC\oF0^bKmpDdGbOY7a1%-nBjg#?YDj&%C[&&2,n$@@f[Ge=NH&5ul4V]_&Odt#l>jjhe5N=DC.YJCB$t)YX)f.-7b@s</$WS[(,^BjbB,MQc_Vb<Z#.Rq\pP\_2AZ>\L3LYr%gAL?6pM82q.JK2iZ7"9q/neaK\P:1A\u,p&j;.e'hS/6db$)!CVi5:<=k"(Fo6[b\%J*dWS#,D[=u'O6Ya.+0^H^u1@]UsJ/8@iG%aMRJd-^!1[B%]USlL9#u$MsX+E<9i]k?6"+)6=5+$r/M@hF?g;kDp$4VI.![T^2OK8Z4^/jdWQ\qKfP/4^>^O?"7K#1=mY*iYR;'%GH5URN1"8ES/=%TZmc7%j'%u"Utko9PZd%Xj*H6W;I"`p4PVg8%5,\k>mYjApc@n^?A#(^bEW<5:OHcWr&TpG7_*#1)RDKIMVVk[%`6M])?)mb6@)on6B5^9\d#NqR[T@+XBr2.'6G_ggPc7nM4$^"d!+h>Uo)aa$[PS"oYUq6\A.mX$4N!U-dM8"ol2rqm;l90.foi3J%i\k])g8$%c99Z3Z(G#umlbF[BEJP*Bg!PPZ'-@\m!cFC3Njf+I@M_d)/P#m>3WpB+7DSg&!62K+XhX<a^:hdLP:7b8#AIGX+<@uH%$=d'$@*)%pK5XVr/a"F[njC`/1AED\O-<B=lVR?jQQN(p((J^Q,pBRkA8rDr-)T%Sj2a!^ps)]KE=T$o1pZmV7L:kFFQplhiq<rs%*_F^f8es`,O&t/.7^)Nt]Xetbo+E5:&<]2^g@+0tq#Zku3=RQ":O%NF@n1$DH%rh)qabB/IdZP,";nJ5/Va?INFn-s)/2cNc2:W)%6&^\e\,M%_T1'HIS[%2fY8IuW,f`T`#.$%D>E]5s.=H"iV-Q/*;qd(82D8+n`SIf%#1\"(_W+c2p5[C4d$>l'hA"r2`<,hrfW#$Z%V32K794m95Rr(f:&PdW?-6UVo+9No3O"%a["@2G.WpL5kALbW#_M'%I=l4Im!67jW"*V?1ZCrDuD6#>0_Pln+VWU$f,9B7W26&>t%bSu3';%MB@8$:Y?*B"]-6=0FqB6K[74u=V1.p):lci&tBRI!PH1i$$i4AB!_gG(dQ1N3i3_YI!6qIXTbAYh_3`>=oocC!a`?LO$5%VoHq2KMsa?$&b.R3Ym(+U'atm8OC=1#S!9/;)_[KJ#^9l6L1r@j06PdA453[HUO^Xr3VT")HXY.2JaYmc!hq:c-'sJmM/e[/"MBU%(:j!J_..!#Ma!.6c!J.mA('-F%31&%jnX3%`iDLs_#$%uO_?[1qfCL+"O.#!?E'JSa/-+jTeX3:EuGt+"\a:$q35_&NWBmDd\2*-%N=uC!A0'I_h$n.94?q03#P7.tFZ8$r)P:i6iH0A\ZG++B0ait8[d)\&X<s.)Z+5'Ci'&/cQ]\JbH=l@"F!3ZZ:`-)bBP2o?k7JWM%"pf+_cIS"'9+Y=D#`229cC?]D,W@R!G'Aa`1hO#],<!.&Nb*2_`4ga#mALE+H[P$e9i,5X]$S)#Q8dsJI<;d`btTXQ)!jqL<aBUE%cEG4T((o!SZTl2_]Q;\YT!d4A=8UjW(#9P$G%T<[itHS[=X;4=g(:`H7kD6uZLc&B.QX[i]QX`5)n/RnK[D\e30#('HaPo1p8HIY%dW+phSV7@cV.WF;RSpdiIP9Ki),,8d'L"1%)_fk5&4:Yb/e+%mmubrP<_n8]lpB<Yh,"codojc8Kh8DjV.O\Y.AiJl@X=D6/Wi_M%<(s]NMj*:3kF1)]J$A@;G@E3Yba#g?=^KHm>AWZ8#M$[*M`J-#[^"dr6u9`-Q[#gP`#.6_W6_9qk$."+E<d.%+,daI^,8eV>R/AZ%21^:`#n2/n/fk$Kg<"/0\4qImI(A1sC'kK8\\cS#b#1&:IFE9$gb\.j^FURac96f?TA;5G%\7I7=pCOH9#,g7FRC#gC:<'53HX[,%FG:(C>WHn7f*j]-[btCNF:Ol4$p(;&_.duSgb\0dCr,pfkU^dia^`e?7H_mgF3gMS*8Uk[d(*f9fgSGDae<e%TOY57f+#jIR6WnG%:9SpR]Q5FH^@UbKY95!JSZh]6D;=!I"[/Xd3pq%9p[rfjjI`VMfLtWqdL1:\T4Taej4(1a:YM`-'i.k!5JGH[_rilp/3G5M9MLpq%7\I$-@d(Uj2b3aR`^]03HnhfI:!.jj0':@^'$GZm&-d3lPIHde$2]t"&aVl\n*]oF49TeaDX#97[Y!]Ylt^V/Yd$6rW&9j]I[AcA%ThW38`+GqG6_rnT).\Wk4_)-Lejs_!Wb!-i]N<<QF11m-/iWi7$s`&M&TM^42*[!SL>3\'DnuLI[2_(D&Z&&_\S%=8?+tNA.=#oZ%%6efHW[(NPmB"j$7Jn%2f[RW`a`T2i&10.#<,i3aL<%1Wos30PU<+od5AB<!I]lm^H61tmd+t5]T#Wd=E.Q^"T-=e^@d_T7f=2(B%"fUD:Ob9*m1:>JO&%lK\HHM5iX?+YaPe.4@,+.6LcQS?f@SY,]`)+25ph#'#TeVlJ)86?)MT."0Wh0c2/ib`:_Y)Je+N@ZH6L]R]%F5T"-[r/=g9V4nE>i#nUYCh['].1-K`@WJ#bIKLH;VYL\%dD,OOaTp]mbs`nGIoMNN3.ttKm$al4^1iYauq;Z9fT[p@MAKST"Pm[%,Nd5HM5bM:B#qP=@]*R4T>rt2D%c<l+iBb6-;BO2$Sq(Ic+L7+Uu7aoQ\3CMSufH@`[uJ@08!HPCe#OAb)3U:REh&p1?_CF[d]M&%B:gnhQ9*;/;-q_8-e`&1e:aVu%uZpW4n^W>=rDKA4K[@hADBK3'i,mf3u/I5O'Lq[E?6>6DTQ_\^[KErV)Pum!D/kXMn&jG<CFiH%GIf(PDG!$Z,;OW*d9u>-%XBq\S)Db@M9,%?a0m@g9Xd[^BZ>jeh&c@bd=NPt0XUNKG7Yd?NQCkrmV-?U7q=:[:%AJSAo$*WZq1iI%T;VV"Gp>)C?N;h0Vrp$J-g?JN]kuZ]+-#BUDI+kghDalA=RI1_+t%C!7[t$Qp#p'/>=(B:36Y>fS_gX'S[49<S^Pl.6M%+9Tuo1U%QeCrp4IdAQo8m$4GQ-e\oeQ,f4Tf.u;b48hiQ3$,.(RV`#jTFC53(q.[T*ia?<Ob=UdA52I7KU0U,2["C.@!QoAR^Kr8+bMVT=O^%FT0p%o&49Ua"lYOhOutR+3sHfe[b80%/]n(VHS^nK4^)BB$;$\1*=e]ARqM1E'3l3/53G'HoPmMG4mdP[sU0Y.00Y/[E*_T4@@Y1%X6!%NE9""5cM:oW8EndJQ3J#n`B<UG*'7]`agUh\U.'NIQc*^QIkuS#4UN?n4!?boj)D*=1b65kNo_DA)+UM@nag:3@6;b`Z[!)Z%j;lQ*XoU6fkla.jjQ\m=Z]p5:Ct#\`IC'5,@dZTlo6(?>X"nsH2Cq&LHJfdL*-5Z.iq%eFe+D->n!9>[:2:hlpd.^XVKShJ6b@_V%BP.?^LoiZ3dSlZY_qOXB*BnAngIW5ub^@@QUsl2GFuS@S_IL%T@-PVI-+l4eR";W#N7@%J$d;.q`YOo'qYY[@)6)W$D:6\9)6)0J%PK<CeDEK-Yg0&s]KN8LFeEe'Pd#Mc5aXnafq_?H]6<Z&ra<3*jVG?!QA7`['@)Tp8fZRlG_F/WZ6g%E.P%2sQlV*iVLU6H"bQXl\%0oUC8kKK%qk;dE?="9`H?b+6W3(LZscr<!?fOWIXC`(HZ$KheAh3X&rF4M#`m5/j#@,<"\CL/#'jA4pbeK4=pd0gW5h"Cm9B+K:o%+Ceo!#8p9J_penQ6\]5Z>bDch5sJ4Z@Ufnj!V[To.iFm%I%Go[8.i;Q6&WPM(siGu29qMX:%t<Y5+b#;Ku_X/eUDn5WtbH74)[44%Kc`%AM]^ai<Z4J0Kt[!+ohP6ESFd!CHheXrY3/IPc_\4[^:RWXlA3<jL3PKRAkI5.h)"2&=g!Ze\U?Frm8,[<JF.7:T,sMch<l;I%h=,#?dB6F8G&1UI`40C8SEuQQ%)"VH]=DP+ojmYDO!WIrjmg?q;nQ0.b:+5XA=&4NhoD(F$tD/mJC.BG>,Tq^2nU9>jcFU#Em:gm%/lcDASI24Rm;n%XP:H[q[.*LR@JAoMm'`@)m^.AHo'"G7qB0b.4K1ASfNl)Da*2iWleH3ZGZ-BDkpj<_/jeG)\Tjm/S[bMnI6BSD%Gc4-ArGH41e-p8=LIGKk_O)DZX!+Jpi)nJXb=Bji3)u0Ogfh/.De'M)o*S?'r(NBD;gW\X2jP?@QJO7m)F$pN"%ZpKXoPEuKKE@"%B))le?ID/YP-^'!q)ee*-f--32%$6'HT!OK\q80UibnYiVS5ID/IFH6-$#TtLV7rfX#k$C'CQk/%+J7e!]im'W.Kg%j1L#?Kl<K!%QF,E73r9)&`^oQ-ZK]$?@HPn5;_&f.knqDUR8%<Q1uH0Vl0RuRHi[ZlflVB>nsK54k;"r0jFq3pfqF,tQ\B&#9fsS0+k^to2"J<4%F9[g`^Y(bb4\I](?(?V>5de[L3kJWXgV#akA^f<ML??04Mo_d%bGDO0=(.\:3]k`(=;>+<2OtjZ9YW,6S'EXQ::$0#Q;)")S2-R`%OkFi"oB54iWTg_Qm$aAOKm,jASR#0sq3<aIdlClRU"OMq`7Q?QE!"&Ac_e$Q7^:\M5@6=>>qV](*NAXAe(Nj23M"h\HT%F[[kX4e%;L[a"flVBH\Em"_0q6HT.]!!tmsLWOS'K<TEF,i=24MmM%*AAq1lgehWnqPf31MLgc=qJ-!]ArR[)ig9?Ehec3.TH#i+m#_EAqrj%fTHIp1ftR>M,0^aDk3U_9I;F`^,f?]@U]#]g#Z['Y)<3>S9/Q.6p.FdRHJG5Em/Z>Kq\B,[(^7)ngk-L+H>202`En!+MIFq=lWiY%2"C9BMhH'NW\NJB%6K\dp4m+#\,WgrbT;nkrZa(Y\YDU[L777n4"WD-m@q4lp*2UkQjFSbc$dj-nc$[fM0(PG$*N_:G.HgSM?2C;%F(Z^L-Y4.?OJZQJ.,&!LkIqDE6/3B^\T=TXDn?QD>]XPAqrVbc8D^rbYBV>t8,^jt?;R64hWDeg[p7>&7Q1`m1H9S2:[crb?47)8%<3r1jD??EtgR3#KTL2V>_6<Ks82o#S?aHoR$q'2P*8^/OZR3F^]HbtCJ3KPST?-/L.I.FIkO%eeU@\(XMU$KQ%+>;gMmtHXEP%pI%(:bCLC.<&!QMEKNo4e#S+j33.9iSr54!&EWoi@TgT<OkTjE$'3s5q'D1#sLAh:p4-C2C>s>-=!iM7#63'LUQ6]9`/>.NgX8[nU4t%b/.)HP!%SUAC+VBW;P2un:4-SIBRO8W52XF=VD[GCr.Jm<_qLj&,"1HG>pZC/jR6)/7\:[]>,?oDnApo1,ro1c?`9g:2"leY2MR&%\_?S:&2@V$RbF/oT9GfM]R[p-BZ6L3DEd#uW`013OQdDr>ZQ*sp=^A,-X-O5@3W?Ri/Ms9c'-eV1SN9X#g[>Nl%V9<pK#Ue_jqtB%EUI<gS8Yp,iMO7*fZ3]_]S5Ef()E("1sHJR'4U"t`S>EF\F7uANk;h8CCSrmShCCl9?;/,XtebCUY+4gLKmr^R:CU3-oP,t*&;Ig%([goY:@i$\H:Y-.Gg7%>BAR;;[XthMIpsupj1<W0pVeJgj"8%%/u5?4)qPs<^AN0'6?FWuBA^pfpPWHI*4XoNa5#.2lnZF?Uo\6B%VgHJjRsjn&F^FJPG-j7fV7Q%M`@]=OoAI6-bS]%B`]WX"F@]kMnM*]n]QG"6di!lGP(b+(;2+7U>k>5aQslAC=TPrk[E2@-l\!gT%*_Dnrd`>>SrnHt="u"RkRdIA-Ck>mPq.M6kb*nX]E1_iN*7oS^p2%HGCm_L+)`'&uBQjj0TAtfqj>j0OZ)hS6M4%:IpS^POD:F3`%^I#U*(:EI(9f$SGqu&Z4^f'g-pJMNUa3qkJiN_%mcQ4@8O7Kj6#PaS[>l5GJEF/<;eIuVa_;iohb<9Z#^"/Bq52>k[P9h<2S^a[q%_mXi.,UHAQ>^5SpbUEiOn\#Oe?KsQtiSFA4DJ=@g\7;F'krO%IctRNSZG_\YB(#BKV:0HAA*DEg&)1]@TQP!D9`qQ2s/p/ujSg_9%*E1G`UNb*G#qrs)eMc2BLKnO3X39mVb/9Ftj_o#!F@2."V=+#a_cW*QCR)n`h5SkX>8#f3]h)C2e*p,)b)Q`c?!_43oO;W3JMjER%Ia<g>l'm\jc1SM-ePi%ik57j7R\=fR,$0tnUlEd$12^gUZDpZY&j,"LZu:/_KA3iVnG)6gkA+Alqo@K6o2EJR.u[be`&[k\p[iem%mFM"4W2[5B3+lHTDlfDtAsT@3Uj[*WE%]Cn;^CUTh9-Qj%o_X!9XhFP,qI5Oa7ba#Bp0/DXC6&(Pg*>6d+BW'oK5=O9?ZYh6'q+e%+AL<*gb(iP?NBNu,],C>oBna/e!^QjfIebnMUanCBACrjMlTs(9O'_KHLA5Cf/lo;Mt8K,Wd1dCkJg606b[6srn<o^keR:K/M:Fr%#DVq7Dg^oZW5l=.Ll]BBHX3q#ff-X,aE!E`a6#mNkBsOk?4/Z'4tCN>6[j"J/Xo4E;V.?p>@"DA++<NV_UPC/@XM^u@'K$4^`HOi%9<NX(XFUB/KN2qQKZs7r.k`&-Pq07XAa!Y1dftEpjAQl-fH]H%f?5ehEOnQDo[(l)1#JDY3>M&6rLAM>Ei^VTM`4(7SO%!A47=-_%@#Z*kZH.B6,,!oo8h[/oApNi*Q.*`NqT2F@LhDV@]8]SZ/A*o"+m6m)<Fa<ilgA_OhoZ(]9t^DU4'^bh0fJ!RXm%MtiKBht0W$ff%2O5u^C`OF8!&a^1;\n:N9A/J.3h/RsfYhSblKM@,/6RMsJpBH`E9;E9<&a)&ggfG#$d`Z!i1sT$*,m[pNI(</U0b/+^#f;iaKh4q%"m@fKcpmS%OTjs[7UX:<o]dY_XhM@/!-2c&I=7,k;N&)McgaK5KjMpb3=7^sV0p"-V_!Q_0BG"IaS*(qjdWK;\=cLj&7[=Oi%=.j%^@?UfJ)aEjgY9"LIOUoFrKVG/b%CaSU-+oH7?,miNMk96e%L3F#+#4iIaaktj`I]`e<sPL3ZH4dX5BF[6YZ;kc*c<Wo=]V@=a(65%)iF(VRhS`lQB&J*Z_8.RYFk]oIQldccZ-.\qj'[gNk;jiolE(E/N\c#^=U[b>ansr`pS/EnQnHSrCedBAc@&TgkN6NRQGE/n+C`D%e\iCl4PoDe4s4+8>/\+'XuehEaKM-(ndkVf`-Kdl*,kL+AIQh'YFfP/c.K.IZY$%.]SaYn#ujjZlfW.UTb^kN]mfCYqFu)ShZ@iT%kI]?leB40$S+/\V.IYfobo)r.?9^B1C'--;d`]=Q@Fn`^>VdJ"\C]%i4iQU?_K3EBcY4g`loZpWh!=-PX.S5$*OFPekEIH-NEXYP%YFk^/0O*S,s'@qaKeB.]TBBNF"1E(5pY"upo9T-D\)M?KhZE?iN48Z.HQSk=,MkSQ_u%,r??Y)KJ$5K4%BW-XZ<l\.f2'S,ZX'W(%4tCK9r>?(_6W;n.kC0Jhgt"I"f5FE"guH(shX9E.!#rN)l8SBaHo(THQI?emn+E18.R%WHee<2g^":U/<^6K*a6E'cRn&Ka^Xpff%bi,Ih0'rFDqcj#r4LN<$?GC4G?>$n%c__G<V`.:jYFg.l'COnMhgM5'rHun+&Q@gS\_ZQ6mHepF)iihAkC0J(D$5<BHi<;OSnt0@%F5?0FI]MA%F0<1=4Ls;5B0$jS9?ra=]mcR5Q?1mJk;&62-Vr$Lo>L+jF/K;I]*B_>lfW.&1-%8m]mfC(TkTL)NdL`kd`:uS)E')j%1YqB[^1(TsY+>5l5PP,lf'M*nn+F$)R%>bb\s>1l]m_$/CZi@^cQ+8u(?\rsqMcqZMA"C'K@W[aE<2KlKh7&eY03l6T=Euf.9aW2%aV]'UG]->]["bs30s!7U4n$4q1#tcT=h>5udKJ&6W3e;3D>$@P+)ED$'H/Plj6J'I\WU+GXmsQ,hj4Q#V2_\X76DL@>a+VO'%oZ.%4SV+!G=U3VK17o.Z1kX%\@coC$nZ$`Qgs0mfAu)Ze_Nh@nC+qJX>dk?dH"<hpKQp\?MW=TGsD6kDHpa.^;0")_=-,/Z$6+komP5(%h3?qIUYE7u./<M%%u5Ts,^u;lcbitZ^$t(]YTL@^Y4qhalI'^^d>\BaeaKWeA*)`/S-bejGCQg).mcDG.J3LaS**E`0BJBD.<btS%IsC9Hfb[8thQB\d^+0NOQ0tVJ5!/`2pR?NWroe]QIBXbQXl7WnGc'Tjmp^MhIJSUqZ:&DF6Lcu,efT8[XU+I'L/f4]G=,5Vl0_q]%GV!DVV4HtuLOKCP]16g'p\WA[=Y3L]qS$,2h;@ZH:RCKEO2LfbTbkmS8+3_5NO?S#q.b5VPma*hQ&jMRY7>c@bh>WDX<iY=1d)YM%WQNpJ+H(2QYZs5J0(k\eED5<'"P%PD2u-pA96BLb4jYt'<mdGqn^a3o1gTtqnZ\?`hd#J>9(=P.qfY1fgaIh3$JPEgU3*UMV'ee1%T/YB"fn8A_BfM=/fdgW70C/G#UQkp"WK_`8(E#rr?$O!C]-+8\"N,pa?rRIS*$1!Vf?N]1ZPjX"E]V1#TALM0IfC&bao?N\NsP:@%mjRJr<SS/u`OA-AmW<s>]pn+#/_?r,I:\t>+X*FR6M(pF[ble2Rpl."b^B4*IdT_Zc^-pBiaXXaX4uCtV74h#Z1.S#s0]UA=m?+E%a$r<=6K_X$Y[Mp@&(Irk&`\K_Ytbgc`f=QK7pe?Mg,joF6$2eh>CCH/U61>pb&UK4$QCR^?Xk23"2+0Qn>NfF?tl-HL;^'A#to.*%+BairVo7;l]`tjP0>ae_XXE*g*>_RIi2d!Z"S$Z&$T\Y6.t&]7fZo19a2X#Z#A<[m2uE.?,a+W@`#hV1prV'I$r=&OoMc/D2sY4V%f.kj7&6_d9;X5f/N+>8Y^;0`6E4]j18J%:`UlpKnm_*Y_%kYfg>-r(+XX8:+;)#@*``EB!iL?ruEq`$`c)+h46,lWma/^L]^CO+<%[b\%oZH%05n%O<I?;bH9s&"Q#B-7thE3Ot\i#SS1WUP-\19rQ\S0ds>er@V_NLjI5eYQ`RqDPd+Pj'tkY3\n:?sn>@/%r9;6J7*3%gIEqNnNh)SGeYr4StF]A^#dgM:4YoPk":/3%acsqH6!TqL=Ic_^O_(`6t9e9^>6a!!2%<L`S:7l7-6;_ad`op,Z<hI9_b%0?lWNZ%^/CnHoP&dGf`7&1"Db@h*^Q:Qp:2O\Io>#pA:EBO51tZY5TW%/!ms4$JJ_PiN[+:QN,5%&@\i`XX9&5c-QX6/N4X@u4$iA5Dt^]Z%gHCK'M;%J@P6/@qgOoG$:UU`k@kYm'PW(rh3@Aq-0jlBRa?hH8"Of':?YAN/UiF;i@&b>5Fi.oUU=OdV$5`*2S4iUM=XbTsK(:3J%HWNl`8_n(2`QlBO(t6jXa<%jK5BS9$EZI]n\P24I2@\DCa*KT@#j/.u/%n+>p9@Pa]N6C4B8[Y%jI8`3d^PM/@(]Y.SI7s^[9G^G%_6CO]:#<&2If>.jQJPD`]AU*Qmn/;IY?a&o)qjC*&M,sF(Im;5ih,\5#gU8ld&8BbqcK2B<45Te)8tlE#1,ClV\)OTk\F&@T'e&!%``IWB^p>&U1d3?&"X8,r@Ftj>"+>Q+UsdEe$obfR)r^PN.V&[OA+:7#O(f]&p0NoeX,Z,8Z)a>p)!l230m=!fG;W(8\TkJiJ)7]?%^SQoV]_V'_9WWYr($nQ+DJW3PbJ;?:%Z%^\N/6l"j*H9U^\(L;=aiM"mZthJGeYIm"++)j8-Q,R[sgTfDJYrgg#cu]fL"83MZ0&)%idM8^3Q2.m(o19e"h6dWm5d+sd`a*r&gE:/*_qOMT2\EB/o7?NS/>-1@rXi#I_g]kh(\5O+fAhXpmM1;F#cW1_gJTio/i[CQ6*<R%CEMeNK+1Fa9>f[QCZ&H9JE"]'KX+I8.0nNaG78Z+)b0NF4gc;AM`Gn*]+iIOaSPh^&KFGpghK,li+($u]i#NS\=j56FC,f+2$l7!%[?7Ca&"Rh%c.s>gRcds!p<DDISh6_'h>UHu*r>Eh=XQlMh\RE#%kMpNXBX_4e4SrXi3hJD-E=sMQb@$4\3&0N3AoOZFQ`mL+*JnR%!FL?t,-ud.;'d$0SX"eWNaI1:)WERYEpE"H+1rbV7-o"u5HP-lnR[C9_0U8p8B9B];E%om#IO,E%o7j+l82UI]mL$tVj+;2[iE&=%4UhRu7MJC#8BE=o*fW^pS=]>9m\rb0Qc#\AFP^"3-ug72#gJEMKicFQ5=?kA@;kb8UEX-aEX#<=6NQY?T2@sS_GT5!\059nW)EY/%8OpX\13d!o63lEr%g`ER!+8!4X<HQ\-+<a;7R]Wpl:;/iL:OHrEDn]%d7?g@!D[-7:&J`/]f'<V!$+k;2W+tecicF6f>J9hr87sA%2*pP[Et!]'BUB^Bj%@oMkTIAaL-Z7c2)5]5bqk<JbrD&U-Bdp'4;/GHbCX"5*ZErp%%>__H+4gloT3PbF?@D$-8NJuq'6@Q"i@]B%Gao3sftn>F(kD?.%-'g9:7@1-p8Qo!r6uA.`WfaJ1#1G>4&KFZ,OV6+RXM(\H?ipC.c"'1FS/JkdW2Qs50/Gc6b51IqXSPlc#W52%URf5Al'J@#$Rhp,G@S>/nqN$)dX)t?U_%YeF$iXs2)\ll-dl,m98UqO3T],["Hbu,k17Jel@++5G!1YI"I6u=;e6fo&j=$<UbOA6%[F`3!*02h\LoQSMCuSq^j`roS26uuhh20CqnK5l#Ho?sXJVSmqP]@9Y>L^!?0(&Z7/\Kt)aC4IT7_[#TnN?Gf#"pW8L"Ts.DaOlN%q#W*rKNh\07*OX\`TKSs-fnj<s2NilFhZ:i.)jG(Id4$P]0"tL;*%:(.HX8X:QUkON*C&5>;R/<PsBU,Pll.P_#nZN:MSBcW[.B1%XbZD9*`YJLs!AH>=<mYl(L`p57@GA7`nTB5)Z-j7%em!9RV<99+W--DE#ILqJl'M/a.Oh8c2NDOdL?o%a_gOgM.r^rXb!IpZ]f!a%_XQ+5Bf0+VGr9A-EO<mm/Tb%Ti=Bn-3:OgnN$^B1\e<bKD[/Q4XW$OAD.;3r_`f@f`]!\jLjiNUe(d,@N"u;)+)rP*oS@tOUDaP!%Y!&4To6Qp6e9QBGbU:^Y%+D#,A@M&S2k8r]FZ+P='J?ceWurCI;^$F'6dC=RH!b!L(g*l#(.`+>9jQSP&Zp8skkBG5%/@OYN'5fQ%cD'8:&fS[d*AR+:j)Xkp:icA@9fUGmMQ3#=DR<M(eg/P@]gUuKl1H>17->WQ"%%d59?ZS%QhK0rcEh=YEt$tp</\Q`(u@<424p5A%\+S!j1N?QP(Jc77a4'`"hoL!@EsiK9%qR@UfgH?>3UkEK!3B0<E49,5Is:VpW%0CAZLA`Zg4dAN$Tnh%;BUF/]pt0NWJsg`FVsup%DB9\5rg2#Ldkq$7K6fsO`m9F5T0WVPUgXZkI]4`C^25.7>30d+pq5ERM;b)M6^Zb^J0VS%j51"4?8-Leq<AI(FpLc=(;Z4tgR$d^%)ojqP,g8pNWsT#+aV9[f=hrZh#oWGrG_:ck&&*5JD"ILb_RO&X]ECKO?OGfR/Dc?HMeK/(J-7J`V;h3JRPL4cXkUs.>^ADG7*LPs%"`95[+k2.2%rD1QaE663<#Z$>d::QR`]2lK/<@.C%VGe1]Nq1-G2]`]BdYK,EL<eLVD:'8BhJ:1W@Hr@bI,Lk:RF^H6U6*Jl%(5f%k2g0]IE3ZKIULfFSWF#b/KPe<;13r62CS&F(16B'KJk[]OeYX/KOBcd=bn/1)dr3K)oo@^c29;[kQgS>Gtmpc9QC'dhi;]*GB$=9%LpB%RMdqbu5RagPCd<n;TMs%#+sM.3?l3K8m`l?<CA4J4F/2kPY&"oa:0DlkZFX;$E+nZn'lDmh7lm]O>ng1<,?IS*SM*4SXH(IJ%.72OF+KlZl>QDs`9]c]s^BO<C5THEJ:N??pJ\saReVb$[,Vm;/n1k3plpPr06"3a893SmY!2\:2KZ:/QaBl]]p'![R`R8pNFFYNl%N+oIeA^d`>9&*t;2bgsX,9S<+GNJ18%j^\_lS2!K"]lfr-qj#cS'Ybn<qff^%r>:.6kDKr&6A18'NWtdfP",glYl.MlJ(fK>C+&2%3FbXC@#R4.j#[SL/s.f[,FK<2/&1cX4&9!3)(RX+3W"9A_W#7H[+-HeOR/mWq`DTYU"I@>(IR@%!Z-afZ=[,\KY,_\MP7S7&=kjD%8IWiqKZ<a9fSH63Koi`5d7k%o/VMK^Qmd^O(.*bG7$AHcbt>FM2iSBcM%,o,:aA@(@G6(FYrEj\F9$VO^SS'8k3V1:$64t8QFjdm%Te.7M#FU4";4^ghZN@GsSo?M'L/E!027@/,Qn\Y/p>X:b"KO9/A93k#IB++M$pp.<W(X[)>[BL?3<ua!(cR=51'c")-(\.#7%"J)%,#lCkE+DBJj3<ig*XAKsOdf^)?t-h;iR(n%0tKCo!o+Rs"?.p`d/'tdFnk,@UeYJt"@.F!;Q(Y]$HIkn;mNNQ\@a1g5]!jg`+Toj%82gSfPA1`d<T$t$=S)<H3rhXG%qePYq<Tl2,@r/gRl>#YTOEHQ\W$IQ%UAI3!ibsbV9N0_W^$V5L3O-fF@12SciXAJ_N@<tOF;q,%pdPX>e&;($]"ZG+EiR.9#2`4=&+mC(hVF6OD3_?nK1JQ'k5B7WWA:@A2=<nO6Ta$<T0$qa1b;f[Kr3.\jul4#YhsAn`XQ\JVDP[V%S@59!c"Q4V(^VJME6$<!2mf,ADZFGq7i[*W;pr61XY)lEe/g1deT!3UbE*Ju&Ej>K]ra02@gjI]/k$eUE)YM1dgJs=(G@\:)A8H(%G_-hBREpZhM1DB0ekH)^m1B()h808QoAAjlh"2APfs[F7;U=Q'K7oZ4V4Q).B"O_(#7A?9Ba[=6oPE:b-/f224q?\m\Gpgc13Y5,%!aQdm0$(T2oqK00V*SnPpi*1KGg;J43$6f;S=^<`g/pBq[jn!B]o=eM^LW'MUPS7X0%"n3bL5//15"P:/6J.M+rE(E#/`#q.<N'L%idd%S=-Raba2Q<8k"n:[E*#>"]K\0F%jHM:9Xk$"!gd*I4$d_g-,"_k;G^EO(ScP@",ff8UI1#ane<_LN4(:?,>[8rcY1MuVK8_L%Zt9'I$a22UN4(;)](,2dcY1Lb-iQ'D0gUGsEHcCr)'H8BA*@LAPUd(r6o<W'`0uN^7Qf>8I%NnKX1d/qe>`O-k#0Oh:a>F)iDS"c%;"NLqJ>X?j`lk1ki_BO5Z]p[*RP1.\41PWs/@A4(Q@WaSh%gOp[ndjrgnD/a4*(K$'$eX8>>L_t7!qEbq5@OIj.VZN.C=D^J\suj%Q[2,V>-l9)?0^6Q^W!V<28ptKVH=htqt[-s*h$h`839C]g?#$-(5LCao$kiM;_8LLaOTq+6W5QH0ct[qje8Z,V_9aao$C?o6`N$3%I<eBZc'Vq.`??--/e?oY2tQSOLo-L`9cbS5DIO0P#ut,6ooOW4jq]W:"KLKc;F.%q)0L3MH:T#Aa4,b:f\DhM$bmC.AS,1:+hpk]%kuK/)iZ==0&t^F8"!G3K]@-T4j!I=(*_PsN=gK^G^47\#lh<ltca#dG;W!as9,BOsZW7j%K4d1U@@t/^^g%aofcoi7IW2Z*ESn9@%c2Kk1Q=k6#22aPbU*a)F-t<\^#^jnA9u+&2OG_e:BUM=85ga!M-R+*D3^Ht.bI5?)[]DZ)n19*+:8-*2$'CVWIIOTO3oJTj1Q75b%!q*smo3<5J9;CWrfX*KBSiU:U"dKi6Jss^b&f-QM?e;3<fm;R]Qb[(UA>T]j=99\DrQ2lh27+&X\M#L&Zgou&]J"s\KDS<BL%I[<%fgmrCDdMj=c%-E:_1@ijq]JEp.`L"A3ZHZs-QT@-c5IWQ;2:VS.reikU+?apo"r`[*Spl_A(nBa20R!q\p?3Y6/7XkNe&aW:h-)R%RUoBSC&71]aUMiZQ$5.)8?Z=]5HDODL@l@A2+XtUXrq/"d<JT8%UqhG[Je=TT5s[E'\S>CdTaubfj-U?-hhl*W/5XJTij2]Ro9g+%*Rqg=U>\!r^!g&,&[4:D4\+3_^%9Sp;p:o*`^r+d\Wf$b=aHCHBWUXm8C=2[^a&=_>"G2bpNH>7AFFdLjA0=Q6HL'S4uHj[B_obM%0p+1.k-DE(B%=.'NjAPS0k^YaD_s<eeDU#@=pZ'WEd_2X4_2Y'f+)&AC+NcB87Uu_ACVtaFP2YfR'"*7b$_MD7LHP0dj@=N)83bW%?sWn[\$UccFZ6rLP#g\P\%s]pN2>HF@&1hLaKmQD*N]9h1%MbZ+TW,)s$g$OLoj;?g@k4@"uQa&Ud<h^:u'-WkT#)mm0q@bfRU`:%g+Y;PB'K2!o*=Y:0*!%k"l*T;Jc:I:EBh:?3p)nONYH?R^!6/28U&:sHE9LckGrr=XZ&5V=F:H\Qh;R`gV:P#_mfboiP(6_itm@9%qL&7,'96i%3NOEu)$'70"$T.dB_r)-ibKT6U_7/4"r'4F8uF;QX*ee$LFH#T_sC!6mIg$WMo1&QP^b-)3]"?4*ZQ<b--bNQH#S:]%J[o&/%h=[]pMD5naFaSJZTk>qjM:lf"^DdWaAFZdV3]IHT2%,G6c"(IW?j.MUZK^E<(u=eBldZ^91S0#gL0W%>gQ(eR.6f<QTK4?%Z^.0="nLROi@]^B>p'Xf&G,YZEe3Qt+B&=d`l<Xd)<nhZE.gP=KtAbAjm;m/Z)V/oVdtdN4Ig5lT:'(EhdNG!W&Q2il`b@#o6Lg9%I>Gs[`To&<0+3MLjm._pH&h2(H_IQadgGQ4#V]4s[JFBU+JD:.hH$GZ0-'.RC#S:7EYk0-.oAhF<7KA<M!0IIisP8'"pWBHo=0W@%M-EUG:oE<hn!e#&8!PZf&Pkj6LeKnuSk<JQFu@BBGR[hT%Da06KoKmI1s#:]P0,Uj:mEnEr5qUR_g2<BNVGR`XONQJ(*t_ZNoHeB%=d'KW[kRiqD:\Q_)UkVs;^f\%*0!H'Ct2(OVJLQX,A`4eEIjDMjY-!sZ/3^!)F)-Qn;K)M<%S^2!p^bBoX[6i0liAkW5;$o6GHB0%J_QG=p'm2KI@F9<G9T$&LU7o_+BQYaNX(OfAW$G+#61N1,SB]S4IT8Mk8<8:C5D@C#5`W&Ro70M-3Z?%J0[1$I8f6LqiQL/6t:'5%g`nG[k!8lfBr*Nd*F/"=T-m8<OBKtY]NP,SK'0&)bdu[8l.%jPm@H+/"AZi`/rjd?mosqQfMV$J(DeZ!n46jU/G@#C=S0s(fO$7J%!G78QgsUV\gORH;Oh4:bcaU:8\t%-sXn<P,!0\bR(C]op(8q,ZgRDq%l?ich4S&0QX)f-'^147UqA(nVXUj&E3[eUXgt/?oRmEjm%K.-b&;0W3$EXW6b6t;"(-J2X`9Y-]#kmr^t!1@DC:gM?7W"8GrrIM\l"aeocN9cNiD1?-IGKrTT49sJ@b<*<*p1is)S<"L.(jZD`%:L-Q9h*9A.80Mp`IuQ8k'EZOg1pRsQ>`,/?aNE9TZP00-RR2L#jXcFD5!iBS^K7,eL']aq&Fq)^LB*I;^I$(qkL`!uFMthm]o\1t%N#(F'mBt3BcMC7L];YW_fTthQb?<+r=>QMO.oe>)@jga%U0W+0k8%&T8M,[WdMJ<n\[9-.\1ScPGF#bcHajklqRr1'-iJ^%D_(*5%5ukl?d"YjaP#q%0FqmFGXXUL4CH$79>&*d5(dEd!q">tR[9S'DFu+mdbZ1bpdl4-8[0`=O?&TlE1Y"cR`%SG:`A?%14B`G:g7rni%3f(fmR.2Sr`)?=/m.sWEFMaYFUf79fjf$_nTCn[\c&P$Jg[`=iLSB%BWHV#67cV)MmpVpe0krX.6iX#JT"W8g*i9U)`^dMpnC-3G%M>*6(UDo`3\2trt"g:L-jU.WJo$>.pj\E5Q.6QsWD&ecNG4=_294)'U]_f%K'KUZd/4I:BnEBg,[M0d"?L]GTE$DQ^0V$E\+bqZF%Qu#!)8)Htqe=A/?m:%"r[;;X_HF/0l)=442[dR\%m\=f,lp!]AKu_WZ24_9J1d?F[A0j%j/B!O7dKmi*q>PNO'Y/WD!q:F.\/;H/%j#b,=/R/]DLJb7g/qoarh5+fJid!!N&^0*AJA,fXmttoipX@&6\m-O"o*#trl+T-%0`7:jB<RhFeq(hqI";n49,h-XOsUg.Beq'[%4r*-gI#1+:dD1Q-$Je^6#%^dF"uk';Ri;R&A2nXKG<]Pu5VHMg=*E+aL8BP>E+32KeHZhA9!g8Xkn7LPjo)D,s74^mGIaN-rE%Ml%Y/Ika.\@"q=i+ErP]*Af]eB18BcSfN_/.]sQ&emF3NpB"&iVAf0*McDMXXK`TD,Eii0Op0-`#+(/>SkCG=XM-2CdC8Z^<Ij^=@H;%IHJ;.V6aDW]ok:8,R`@7G^p^=T#e"**Vs^m[qj;+R(^HX_8)<p4.H'4c.^`qr]>8Xb?egCG>*qVSi0pNDCI%,ESo9kjHDIlH8j,f%XV*?:/#KpoQSGA8MU-tfqc7":A\(N=rZ\u4;*I8>q15ts=cXa^-Od>P=<@2)C2?[>O1_[$4UAA:9"-%0A*:r1#>:3+hR*gIgMVah%g^:00KWJ)E2]@gc$UG*a>IZM&IiU3)rGAn)Vja=j?++*B>2N\5iFc!L@hCctpcLma_O\t,G)TEW!Zn8a*]X+cD[LII]B8lsn\P&2%f@VF^Q/ZGt4*HYX%3;HV4h!1Q383d-,R$#i.Cs?#KCL\^,K.m0ZFI4N#F9ZrS;Q]Tei[-'QbRl,'fCMFm&qI*V<Q.;H8lXHe+h+A%;t1NFrpo#I#+sg,*_o-PT\9@7LJq("?DZ_tFuU51J9$);k2B9]#_h4GM8+*kQ,BRr$U1(14O^9)diM7qF/m\r31S-O.i3[pQ17hO%^NVXPOd)aWGNLoU.]f6,oN)R$np%1`S;1%jd8]tA:4MMIWei+k/ECb"rPY8AGrSgVji!_/*DT$n;sDa$0-*gLm8U!/&#Z.sWTH<'%D"?Oa'2K*BaPg+iS[7PQE%3)lrOp+JVubAH:4M;C.XR/fkejBsdE'nVWK,]p]VQb4(83niWqsLY*BamMfYRCor`b;+]G&b<@dE0P%oH<n9$mAN-7j`C-aKSFEo-^t?WkMSmCQ>4\Q2o9!g+%q:lDa/f5;lg_!##1HE#1giprKZik;[@,d*(`V+]qu3g'V?Fqbk-7C:>=U%7a-&gHn!chs4[17eU<!/f>(lee*?B!K=sqUC"cWeq[+Q[0=YMlD6r2Fh6:!?O;H?`7@`72Y]kn:]AUq_>hi/^Z=38(pJ^RC:K0WS%\W.TGoR$I>'M:eIl$@TBCW4"GZKE=%Q,<(MdZoe2C,p>r?p7jW-\W%&gKJRIg7C$kb^56aPoW$CRi%a#2Td\6l*'I(BXLujXIj"Z%_mQFA0:c"9"nE^@ASm,f1#>@'QdY;e\;Tnc#qkcs*q&#;g#!+Gq$e@I4&Lu1hU2=m0%&=B9]*8TE>#VFS;n/o:mNuMLB>f-^+360%j9hF]MN3^pU@Vc->Ui.6_Sg++2arRDe1Cu>pY(csLi5+I[j6p7!n!1(Bc@/h'9g;:keG(fO]NI#bum8.]6!"_"8.!@<\ltB>\glK%ZJGsug@Gm9j"'SRq>(6K^btmO]0;lo>]+d:G3[)D#%&JQ-!-)bW.u*#Dn3khZW!k&C%QhJTD^.QJ,#GSpdHY!QP'W"OhfC;bnm1e%IPKoeFF8YKGd]gf1d?`>DPu4gj57eLqif1I@DT_CB6E+)mZp'Ccj4Pd)]j]PIH(bZI.I[D/Gt"t0Ad'7S,in&5(S=d`IHgd&UaBX%7K;p/rY,=\Mr:f!)j``C.E#,9+Shij(kcp5oXB6@-4ro7"YF&B&/2<B-4R_tQY_NfYEbc=9DDkE3g,k$&P*>3qlEQpTL?VG1>Z1R%MPO>u.>Y'])AA<,9T]I3'hN+rb*"J./]^nW<^`@udP4VXYGT5HeOp5@1Qc4_`)o(B>EVo/[@WOk.>bqb.L@SV(Xgfp&kf,;C-7c=%.13bg^r(8Katb\S+<Zo9PfQ\7Zl"F(@<6H?SY>2oEf:e_R3_Hn`ce=9Ga)1+-lGZ,<"0D#8J/JsF=\jP*)]JgAJlYg,b[VZ0i<]D%.4.[j"Cdk.T2B',RMliK1'8_aN+%K.-C.8]XJJlI,OdH3UTcM$N/\-XGS't?">Q4,&-sEo9-tsIb$ZW3-qV8e;cEbl<9V#+9GBlq%.2A%[EoE][^e<;n9s+Ip.^HJoCmnXC1dSNWZmhGJ!E"tk[?OdVjqbd1#V[uiUaZQL($e[!QuR9a(e%=G\0N4EiT)I+7&<RGJ4lD;%"id0rdV11p@i:!W9EM1>=ZmlYS6TS*.ALFP$rK:7!J4m:e]T)f$;<fV8Pj3.(mEFuRL#]X0?S</;WpQ:^,3"toS0]QUba_B+"L"(%1.`mFW=`hEE]TN+fi<PdJAS6T"bquB$OoD&1>tn-<'cR1C?]8tPlQ\]HBki?'U*-I!nS]s2%cd<<<K,7kuE8$[14t-H;MI#5tM+p%#No/[-%Qs?r<\n^Y*-YAYbD9\>m5J1;5]XL1#>o\oeIE%73]WO=%NEF7"s>jMMuZY:r#,]EbI^0VLXbb>U>I5`4JVSHBB*7+9dRF%Q)$T]BRuOP!D*?o7nmDf1quUM5F"cuF^`F%W<C+68n"g%!76<gYek@Y!"b]3L^#k)XK*V.SJc*k3oXEKd$,/FQ[iN(>m6=XcB,]#%@!7'E'gObfOk!&Xk#HA4(lb@jN-?#*5`)-;$Ge?/P%CWsF@=?R+>KZ/YX!fY]F#3E.\37CJ5D)L'cD:^AdN/kAli#@P"B7W^`:;+%$BV6KU2^6T)##L8:/*3*AJ/K[77)ls=IICc<rq0>;H/fem&L*kaWfsT).eRI^t=4ejJ9l>JDd(#R"](,$mL\9YF#?Z+b:ehHj'FC%5oJ$H6=aX6cG8oQBS_p"3<Q%<9bWCp&P5QEO[?rjn,faQ"(UKqWs8\L+bGeT!(`3*16j;]++RT2(^p[al9e0a*_&FAo(LMQ__<\S%9*m>tath&UE[J]BR1'?H(7%PM0WY;LJV@$!#45&T<gGudQ8?n!9F=L[;iHEA&0qRM-<-9eW+sb0)/(4V?l2s5`i(Z>:*N:+";h9=%=%GRo.^K9N!#,UH_0;T"+iERk)&paiYg<B8V3-ht>p/KE8uC96+L;,=A70p%W*1[7(amKL!`I-.P0+L"A/IPPJ2@O4.`7m/Kli3@%#PK?:QBR+R2@1K?J;O@N^qKjt2\6>7aYL(\a9cT&(nEWh#&tc::n]WYco<T7GUTIB;/kG]bK0449sHcG_I3Jk-Y51eO:5inBRg\n%Q;&LC#%D3b9.$@:1'Q>K`W9m/b%r%?*#'q)\g=m9K>8aMQ@\34$H%-m5^%m5.=emlPb9c<fbmX?J0@9+11Ose+t5t?#U_5n1Q?4C%85PX,_8OX7Y-E)#[g)1c1C^-'-E1/Q6,H]7,\\.sO;7:AP$'h3Fq,.W5k>Di!-B/1"&>S9Q6k`e@dg037jBI`L*>hfRV*aeOS;<r%"$iO[PSZ"]'e#$;O`u=5fo*X81t06M))4EGBu\Q+KX4>:"W<Oa>*`!)&-jC(VeDfUN>"nC<+L75BTP&)HBPT_(_S[Q+>m%7p1fI>%1eJ+_$[@:@)C:7hP4h.\6k#'<-S5oL.NfjqU!YPm8=[NnS>B(p#rFMI2K4rdK1<ofXBq>t)TJ*U7-[\d3(nn.8L[&oTYWW]")<um%Q(iA4/<'^%+Eg]E"D;GUSiDI5Jf.46:]a6sAJreA0HWQU=JUbCUBM@@+tJj;8&J;Xb+P/!&r`S3P[9;,'d-c@BN,X=pOc4n?SI#+%68_"d&4<4-aiM+g@LS6-U<EU1.#ajr%%?)';Bj6XR1pCrEE(&ucVatl1=d\S1%@&cJYHaf''!V(I-S=W#iIgT)8d^j#NB>%QpN)u%O:K4RUdk1,5rpEq6q%<9/7N6k^R5eh@qaO,4(DEFg'?;dnAB/sUX2ISAd79.=?aiAV&;(!)&N?1miWO)RB]FZ0`"%E%HeSQJ2ElH%n.phLYq2:gd(gQa<1cf('XU3^N+G9MXLSc"B!NmA,T=cSV)cON+\hV0X2N9D__G;8j[7E$8f,-"YVJN.Ta(g%R6e,Ih[Un>W`AWS%Sn('rQ4mObKm>7>T8qYU-D(c))fmV@5+Td-&*D=A\R\6a)k8tM)9LmfaXXk2?Cdm\9Eq[178(MWeH#`=rM"X]kW^NOM.:ED0R"_+%@/em[>MI^$g6*-$?Z?"^Go8%s@;'l>DKkY>"@OB.6lJnm(6(4r8>L<^BRg*_5$moeWkA)?gd;2t0PB4uG581DX/]ttXdb7G:b+GK%h1iq1Q.KFf?VMu=o")ABY@d^VM&k/`&Y_U$-PU4JoU!G]5\JA8/."'n:m\42c#mW"APl%FOkO59bTDWQWRMCkk8^5qaR-c8g:6dA%`pKcCY\L@'\\fCF;r>-V9_GO$-?:L#U=s6Lm]`#RTi=nA*L>I2:]8AfSJ^srE\F>7*LghGNop8B2jGc^4'2dC/esK*24B-5n"s:R%?%k(`2u!8ZP_o=@_$IdiF+Q?YV46!\GSM\pV)*^)+f$:,n?@>-4,,[Y04Ns%_)i,>:D1=NVj,(iT+ejX8m;T[);YkP9UU\k4R@7i%=;fu^kFs&\iQ\d.G&&eE!n6Vf?TQ/q'4BO"+pU-bgsYJe*DVX(_><N%7e,X/F.NcWK;![`7LY:8_,ctF65o8#n$lbD,^K\oB\7-C%Jd7KRf;\08m[3=i9O/lfYfNo<S_pF6CFmj-*GjX/JI(64%[Q'bdo#o]m)M;Y8ETg[G,DB`&j2Pm\ih"IK:T'/,j?>n>Vg(cmpP9Q%$X(VrH3Z78T40,a^OqYqWM@;o*=VCHD[X6?R^'7gmpPlbZVF1YVg#B<YC7s@Z_&4(GEm\=_#mJHLQr*r#?uF*-Rm7W*XIM.J.)t^%nbb>bN8_T>*[Z\!4CG"b^$Q6sW)2kRgl1.l.Rgmu'0I,`B3!5ir!q*'C\jIh4(-Oc?2.^6bDkDUYK632Bk2HcW=ccg)$sV+JG_%-%PPd'+#PhZj2tFT1^Z9TQ*6@Ts@$0?C5pa9=K26r_-40HQRRcF_Btf_eEEX]8a17]'*Tq[AGP)9Uo-G(:Nlron?*(a_GHjbmgr3H?%EYg5ifNi0F@!>Qm:@:Hh"M(9W$>pXu/%D.L[30Xdqh!LTN[2"?<D$j>\sC8eWFQXRUq0.aP)<=M(Y\q8?#1:PF_OVpY=gqfH!T-t%aQq8L7UDF)4S$)9(<PmjmR^`OG$4CIZkj[b905%W?/!uRl]MEZ]Im=njE8S5+KnF=#C0U\:<;aa'gl;oX<$lCA/16Z-.@^h/t#fe%G%$5if7gmB?C*3(o"&B-Ok1leOh<="OX,+lhB]@!Ft&8RZ<p2iP*J[LQ`OUn]4<d_g*PM-W*Q^E8aV\;:26+HH6[XUl6j,8m"".L%Ym?N)`&:0S&h>-99C.B!0!QD%]0q=nmLiqP]1^)"ln/l(YWI4kkP4t9^!2\+THQWBV$u=1k;Jf-K\aneI2BSdlf]L&-WB&chJLM(%H_blLL+VWF@:%p2mcJ8iaAoH+n-^P,A9Uj]in=f]#NOn#<cSEi7O(6Vgd1,qf>R'6LX2LE+cpfRA"e(%)U0:MTm#X@gs,[fC5:/s%7B/oGYcp[YSD"GKrLMXc>'"G6OkS("F]F>cmH4,MBkI[YKDsNRJ2D""a.]!A9klW-E)a`Fg0pn&U?L):*mo&*G#4H0m::7LMFCED%DE!jN-n:a-]1IDHV%u5)h,KI&gfJ@ueQVhg]:2FGN/un?o,m]oBaVBkp*Ua*TQXFMLQXQjG%L7[("<`J=]Kg>e.1n'CV<ZY6[W>]%=&E]kkMDHD8E"O657Cm.DE>2CG!AGlg^YYugCGaV\K/?R]CBk'Ftc>6!DdG8#CO(>r`#g:baW<gBirZZ*D@_+$-qqVP,d+H^4W,%%%OGsemU2,6EJot6_/;'D1q=XN]5t"o^Ol^"WIYrR%b2P/ATnRnBVdOrGOVtD@$(S1mQSTn5_:qaBAV!CGg.eS@!FAJ9@^59i_Ac!%`_,cO2.`\]GkeCeI\#J,dSJ0[ROK<=\>OSUTF^Q+3laUgeCPK^&$8(AQ/p1r1+Ek]Y9AXeK6ZVJ\I5Pk%m0'UQ7#fVG18m=J$Q^I%+PX'8,-j=fZtLS4/._H]7;g3;k(&ing/oCScV*Y9Z91O/g(MC=)u<HZPU$e)f7HjFH&,s;7L#FE\[p$:Dg#k[2!.)i#P2)@8C0JP%fa\J!OQOdto5NK__g!kX4TO\&%tR&)X2sk)6`PjGPic!!_M07(oBL.aV%SmQ_-/EjH)1$o=K@cW5b7)S2XN$>PE>+W*d4!-d-N_K%Ic`I_$rO(VBc]*J[lBl+4GaZ29DP%(4;aWY"[sAhAL2`Dn3j7b^-qH%[r1B;:crP"7BKKd4P6:N,CN&O&/q2$[88slTT?O#4L%R=%AXcHc&:AD*Ss/3N==r8onGl;\8n3?;nUO:WW8u;RSmXIIS`0Zc8t2()8a/qgjV/4lW)Z-@-aGY$#Ysp:-6HW.H"d*-](.UdH0?JQ%4@/NL2;C$s8<tX;#lUU+]XhmU6ZB]Ko1Y:5i#VOL8^N`i$-,DTE#91/OuFca*8QnA*Ldu[M<2ubTk7,1H.<QaK&t81IC?/<3bN_Z%Q.n&%Q6uuA(=@2l2[_?=/ngg^E(BM-rGO0Xd6+eh\0]%:ZaW\f5r*gHe]0WadcfLDl,KQ.(Imk$%X'_4)8-uVPKHK8]fWJM(%U;=%\W]Z@Gh7^dNsOUYgJKheaQQob:"7bX?,P)gNo2/n.s`uUj"(_p?u$Me<6(=q.@oTEW*G(s^7==+;^]X;82O+/_dup7B/C,KoMYDr%C#1ShY\J/RVg/p#D9C^oj[$dg31_Z3]>IT<)ON=HLB+DE%@uQgo;PcZE'+H#?7N+!4G6?dENYG`*Kij'd5m9E9d=taP(hm=`4=dG%mh!'0-WJ%QKO7l`cJs+i)O^72n[f2.)3%ok!"V0DFVhiG&_.\T#F"..F^F21T"4KZ!+)W;&H#/+59oLc01u$+%OB'gLnu2BqsqGX%>LquP9Q&Nis)==bR;*2t@R@n4cab?q@d0as]mT:8W2dN085`d'f3c9pG3f'Ua_M&o6Vfs?:IT!:N4K5u7(aKnnkS8.!83Ia"/OGt%?>hJ#HQ'!=\Z.K[",PUN0Glmc9#si#U;&MNe1?k5klb(X(/*-^1C;so?:(ZuW=0sGgq\[DcC3q39c3Y[)4j#YcJP.+WM!O,d7\UQ%pZd)@l2ZU>8ao!>H%C5gYU"B+lV$&*WM7jInedb+dCVt*nW/uE]uF#$l?P@n\IaB5"e#`g_k$irpa>>HLl1*.4&M*3#Y_*;r=s".%3;sPRg._uTmlFgNU_@I`PI*i.cn!26e,E7Ek4hKY84\3Ho%m<W*RNI^8[@m6S4-_ao7G\m`%+p@1f#?,C@I&J--7/uR^C#G&%j$.%'5L738XZ<r?1&Pq]<St2%d2Ti2n$#a-kT0UGMbpA,fCHm_UR_p,QTKcjLGW.i$kqm,JC)\F</<^8WjCL>KhB(DeEj6rreX:$[W83%6srifbn5m2!1Cj:NLGh=W1]s&+:A^G^goS!F8=Wg$4UMa"ZCGbk(oXT%a9SQQ()7dcdGj:_@-)@19E,sKV./?s"lYiJHc09!"`AN%1,!u]rgr8@rPXhLrD^qlL.iJ)1I;pMWWrTX?0,"5M0XfJRP`3#g,5`F-;E*gD2<@jR"4G%fkIi4;ORU<%RoJaLTINacFontFbD5T%/;?pl.dKHFn#jXrfSXT#$(G[GCS#q20#OQ3d%rpoU:V%KWP=m^_J>hl^lT/Fj@?p`C5=O299'n>A^+KL$(/0.YInq#25pVH<Il1)%Wgc]1IFqSuq>cANVOD]DdK.HbYP'K%FJQ`@G+B!g,,%9?1'Adr#ce>G?;A[uJioBU/-aT@K(OKToT\R4:7?@m3^9IQV.$u1oI9^"%)::+lRLV/A4(P@!>p@`Q*R\fR,$./kP_ZYoHa:@Sql!@HCUG$IqZ5R'Z"Nq7Li#;`Pl]8i*ZNsrJ6^@m!tauOEU-:(<H5ll)ig)/%X,d$c6P$/DgCME^1goplIXkpQX4_q%d^EsV!#]@U+6HU;.jBYHEmu>Um6GEV6gOh,-@3cabC/V!7?>(50e.B7kJfmg#;[F>)nonD%60)_4GQ8r5g9fbRB3q`W49.\0TPp=t4#P\&gO>n+hkHmCR&(sen+Ip2>6H[L1`J.0_Xl5HRsNde6(9n`QUNXL6Pks@%21Gu`9i:E%_JTY'm08jj?0(\?Nc_7p]3XtEP.P_G4V$T:%0q4FPMm'T2B7O-iK0^V;ii"&q6W.+]?WnQ2Y8_7Bb^5@o;a7#s7"9Gn6rlpZB%7f%I[%plnGX>pBG">re=6:C@VU>fjYMk89G74?(;J\'`g=Bs$%sm%!t5_-HB*E;qKtNGlanf")LfiBet`]a\3EJa(ujqghK?5H9Y7N$%?*8S5Q%<j.'N?3[U]Y[<a-*A1=^TUFP_topP#M7`I7Zq16tAgaW,Bm/]qAOM(aZCRe[>icMl(uWi.4;f!qT/p8aIkVQb&AYZ.!"J%(mk-IUR'4*ibBD%Z7Xfs,)FQkeJko05UU?6\f8D''f5qISR#"rP1iXSFgW#R<R'6\WhrJ>Y`tV\3(>cI2.E5YiqX>[^3_>C!lo_3%E7E&4Thn7'-K9%NOsVb8mfSloIU[`)1L2F&39B;$4H/+`a`tNe=*n%&lY9meY')Ydl@@`pX1KYJUR/-s9.>ZP'O)*"8PJ]\^-%IO%$DIbO@)Zk.ost(6RCX>(NBhH-&M'su*#]rM5YF3+<t=W"]V\SC&Z;WUZ1D="TVb#f,d]'-Dcl4bF8KuVh;dB8YW>6+kM0=G7;Z[W%DX&uOABI_8ljSjJR:4tO.*0"KWae8J9]"GG2[<k61hmS4Md3+u`2EMfA!:i>6aM/uocGU?,o0KXWf("5lgC"Tl\:orV1?r7]UGdU%/QRc`:_ED)Gq-b?8aTmXiEfBO&MBskZO%a%2/I.=gREN@q9t>1O,c7JT_oJAIZ#)?-GPZs'O?+>$Zk,Mi1O$klWIkb*5!#8LFa8J%?*8UTm0`M0a>-ru'aAs5&u>\-e*#-j`(a:4'gC+J!^rR3in=BT9h:^O`1$Gp*iA9VJtkB9S&Is.;g?o^?Uerpo1Lj/3Mf&&A!&2j%jYs)*ZpQitnD1[chiQ@78%,1DXFA'?KQ7RH]If9fiUg!q%8^Ef9O7N2Nt[^o2]kF@9h&3YDkW^V.<0AfCM->s@p_IcLF`$IG0B$f%d>jFibu_:[AI]/P9[2)"GTe,piU+b8]JJh,a@EiXUCQ!h\%:(6OHZQpD\#6K7'].t,g*",fodX+Imh&pT5G&4053&Dpgd?$#b#'6%1c26l-gT[=HpR9;]TT^c>=h2'I@'eb*]Qnmc2IC\Ien_nQ4[WU]qjj0Y:k*l9,4"FL)8#;idSC(#H*&k.h5l*d4R0,#*(A*aejT3%(oq^\<6/WG'fAcTc"'Uu6;l!`q2/ZR>a;BDX^+Q<'i)lM"Cbn/<M7^(F/.*_0.$GYa';ujr?!UaFjM0`_&Z(KF,4,[`C)Y1A[sU&%V!.@b"O`%dIdh5N#5%M!S7VpN)pWtM^aTuKS,`G)dga-"mXF0mr[?Dg=!B=Y5s*;:OF@EiD&r5B,9V>[6',2kk%Q1mJQV,Q[\Cr*%?6\32j9rC2M(Q'0=YW80WBTCRaKI"Uh85972VjHu7h(%Q/9B82.p)d_jH=J-L_?!U5#M5oR!T]RinN>N8@!N(.!@r03+D4UQGdZ%%Oih^ISVd.>d;kRX2GY6Wqn[=WK$LW)blI[?_kW*0kj`d<D)9(>];g%eq2?sij*fD#[_nV6k9\0Ee_Zf'E%gP7B/qUAc#@I#@XUfP%J_>9=Fd9Od4-clJ*E#J6P?e_0Elk!/ZVs*B*30H1;g\KJ.FGGe=jC",eL3+e]Bi@;aFq4h]k==$Up_RCg4,Mp_7F9,H1eQILSh8Q%DB9QhLnQeV%G63qmuD_J<om9J]_!Gj\s,+OqtSZf(0&$5ZUp2PMcR>]'5tIPLnpG2CsHu:Ggb$X4Il0PopZ25NZMA5$Y,R<P\V:M%4ggji__b5imkM0f@c^,1SH:@`:+IpH+Za1hK*c\=[UaCl8Za5W4ugb!AN*VMjepCo,)idK3Dp+V4=Kr>%BH_S.R^;GR0jt$<./"+%aVr1fb@XU=R6]$0-!(B0g`ArEE%e6WL'9lcWp1;FA[,NA;DCTf\%&5C3:3lMZ*r+0MG<:TajNc?KLi^k)CRN<-^`7X:95eGc(g$%%Ft^0bYG*O5V08nQ=n6/P7Jl*qmirUtke:M;hUPa\fl0dSqa%hW)9CIEO&A>ZRF.")h7=]M@u&"'9*h'BK0]:(-WSU$l7p/a"JSI_%DLX!dekEs)QAq'_hMqBK.LrH5Fq2X)40j9K&![e7b8uO/6f"nI;DWK`WbZqL9bM2E:Zl&ii'^K7Lp7W+V!'5-0))6d'Ra:t)mF=m%+$FM8q-V>MQ\=\l*,2H&R\3B%&GarCC'q!RR%2?oD2DIs1f)B`c\/*;'/N9>8oeE#l3ifC6FknlE`:Z2W.md]9mX;Z.=Hm]Ge\8j%SiE(;K9PR[ZVYUVQST"E,W1W"42FRINae_hl;!Zq3o)*CEOd1)gQN4tLCrrGiRn\g[[?'7->P`:cR6pZ_gQdffb.nYi@ar?.EEQt%cYC^bV^ouP$O=[V$i00,9=,'EX&HM#k?+`#=nGpaDo!:29'pkXV04t19H]E1fge+?V)kk=4GEc?_c&hoeuhFNe92Y"!b1!NqBV/i%Sq4Fi@S,'VX=n9J8ju`Naf-oG^8+`o=Mn&;f'j@`TZ_IZ96JilGY4!qTDP#[-^'ogN1FqDKr:ZZgn!IX4@R(r>jb+C8i?X,/(H]K%_G_WaDWZf[NWT]1-W*bD3+di>nk^*=]8KH2,T7_k.jpWN"igD%R\Nh]L6S281WD<%lC8B#J-tm]BRMG2Bla2N?bM@o!EgXH#tY5'%mik_.&poN/V>d8idHg``7.iNg[jP[sH6mP>bGJ:@j]6dBq4,8%Y+"aQ#23e/lZ6uRRSE#['K8RC/U8ZVP"(t/0*j4eCPK6nQ/s30%q,(lZ;78'Yj49aFo;c$;30o`=Vj!qA\m@RiKK;8CKlWfJWlWa'@ioqed8+(UmS&rs]%eTm;7Rc1Y2oL6^62^p1c_0]Ed0=N."O5"%cqc0;Gj7(do!!NA=NNs/bDC3bHV%HuX=p\,9#^HnagjlNA7HppC4)BjiIl5Y$9HsQ9@_^dUIhE?P!UV,"0$9%'1]/0]U7n/Y:TFE%M\J<\f-&&md+t9%k<!K)5I$Jj,@ZRJjCkiY!d]W=K[03AeSV)Q>g/&r>V%)/nhtPK\O@37=@B&7=!m5<LP*o2Sn"`lnDPrl[:!GA%K_3Tpe:^?Y)sO;2YH(qWVcNMsek@W0_7]8sjq18$h0gGL/iA`KR7t\uL)fAb3n&,Kjgat6'<1N"`d?sD*6ck&6u'D/eWMd9-k'W7%=1(G2+I>Sdh(:@#8?:rU1+GQ_d`aGNpD)%[l33>]C*7OY.^Q,9R,MB%b0b$?5h2cnA5c.UL93=iRKB`n4%?3#0`Y]jiHVC</oHMc%k_Z7&:6"*OSdI!^$6\IsY^G_'ioT=%Y^G_h`JbkM*rBD1[?Rh`]k(0$%-.GX;([BG/tlfTVoH7/5a-VKE6[@.SYWIA_\UH!dY8p2%;iUTVFrL\:MBbQ%GEn?tZ`4g88,Y9HCg#;78!#g;]?Rq9f9Skt+k,)g#:jN=5\`N+Mm9X(?p*No]e6GQAkYa![ERjPd_RK:)VDJ=%(@'W7/'6IE19[25_of\V=m_Ul+]Z8K-*R0,qdO<_i!!S@7c2fF;Ue$kh>c1k+5:XcCX_=5@7LG5gJVEsPHZ=d/Z^U.2jB1X&1+6F%`:bKm$AUZQR`&9_Shu7TNmMI@Y.EVd:t<g7$;Mj(Nu0sp98\c#qJpd$4T8`:mW-@XglELnWVeDe91aS\5,\HIoZ.knp5.F]W3QB_%U+9:uC*d+ZZSL<rn@qns%<60:A^Fgn9kgV**Z@8-R0HQJBNS,P'6h_.3TO"L?V9&E7.@K=0$iF!WGq90pD]G]OD%p-h?,;XqT/!G%4m>j5J%Obr-MJa/HSV%^2l1c_3hIoKQ;&g&@7hj0o;7aW8_-CPmE>Y$p;XNm8gghsWpj5VP"&Hg\-:"Q0K93+%&bZ%L%M9>Y#XnQ%q@lCD-FMhNQ@A^e;4Z]GqruBM9/4JDpeu\#M;IdU'BhX#*</q&RU_?cqrKa)gid/+ct<"r5D,='SppJDMs^kUT4.7o\K#/P:LMC%%Ir*eZ/5q&RUiD]d>XKS:/"6]T"iDVek*<ET#37aE2]aYos-Xpob7`<=@_+TD>lG$c]cSQrh@TA!%MD\84qj+V<YXqZ%1<slfE#O_%lJM\R0+!u\?[^TMJXI1oV)j\P<g!P?+jn$>]GFZ_H]%KmrhNN[F\3]"F$G+4cL^Z][UmR7(;B,=6bV#_^8OjN(6^O3Mp!4-fi+>"%&3FW@$9KE1h8E"_7nLE\G\s^BKLEQ)K[d^VV,??OL"Tl#LL6V?,PR@E9g_IZmG/f&/eRNm\G!;_-7$i=@bq2<M7mH-V4OJNltoA>%&U>5&gQSmia+hP@k0o&"Qd4b'bL*\*"n[fa$[uiub%&?+4]0tB0]g*uL,FImH`Y.EXMA;__YY"aG`D#I\6IaNnpohJO[O8N:LKlC%UE.[bq!A_G[]FY_T:!1_kfr'uXC+;0P$:BW&@kL]El@K7O6Lm^,R;cRh'gD-$"<]"Jg#%q'kGH<e]%ae,a5(H-b3M[7dEC3[OX[<%qGk8g5tgKd(Jh2P@[F\t<%;.WVQLdM49OHO^q:2P+Rc5,Nh%%CZ,\:P8*,3dW(^j#>c*g-T.m.t"#G(7.JG$h3(5sm*g0'?8u15E%P1tMSEXtS++JP>l`:]kLR8I0`OOC>n3Zf^(b<UFIQ>quM@,;UB\-HChKe9uD&9YE;j^+fa[hKW56\&:Z>KV@BQq4dnf)<h+,i(h(%oBroub?\UO\kaR5?d6;AZbT0<dWWrte#[o,ElX@g`Dm+Q^W\m+XS[[HM+,Xomc3[DcaoJ5^!&-H=na]MqOq[kddC]9>#(Y`1FkAb%\;GlFV)1]uYi#c\e61\7>+]Z7M>I<.0'6A=+L,J]B'qZ.BrJ]lRJ3XtY;pW:>3Ku7!Vn\FR[?SBIEuZ<^$Jkq/@hIXUkDosQgF>a%J1<4EV(6=4oj.jU@ZBCBWh%.m3NF3&j6aqq]eabWf7_O^kMf\4m7>&-gqko5kfMhIGM(KbHXOIhTB<muY*W=:J]%Nkk11_LU.*3#%P2/^/BUr&l:q>/iUmLuCCP*_f''O`$]ukVj40r+N?!2?c#rS**B6$(q)WqZY^l+%Uo#bu[\k(6//p<2rh9^jVNdl!U=&'E?s!MRK%WWCr<_O7%1T$si_CM4[/HL$o134jk\88:%;?[=8[bEMUq780\je1!E.!QR$=`gdB*,Pb4.YQkQqodQlOCAG:]e7$N]"=KA$7uX"s%,t1=LICVFD"DFmc>>T,TR(LbX4V$[;bhVl/04+@[(q@cdXrmK64&"C[bKj85<\H[DSJ];.AIFRq@b)G/2XM@?F*IKrN\>Tj4^b6Y%>`Z=Qk>59a'`SK(Ujmp3SAc5ED@"nZ"*>Uu!!NH[-^D9:V$J3``0i<?pI$Shc-kmX>l(ItS7LI]^pN#.8Ig5"`f;+9b3\=X'$(Ok%,b\K_7aj\:`_A)`l3o^g-(XIuiRn<<R*B,!P&h%";\LR&!,S)kD#T52_KtDSD\r<@1nRP8p6c0GI`SH@iAIb_9]1sm-L.nE4Ehp'%mP^@=%tppDQ8+H$ps.@$n1^g#C-G5"?iIL@r.J3j0+]H>8V4_,mZrMH!rt7'0e)(VW])A<2[8$,PR4MWE>iOuEO0(F,CK9fDPT7d%$?`mdT7R_JbtFFG!KLKW=*2iGS2PO8NiH6>QZ`#kBF5"*Zj"8+FnnQk+sWtSm3e2'YBRM2;,bZ'(D2'R8ObiSRk0kIT9(m,M-0mE%&@Lpga^6=_CYS2(5\c5u(dMTTLZTOX9\7qZY^Fusk#^)>g5D-PrjGcJep"X%Lf,6(OrmKRG<GN7iMJS]lEK)(FXPJofJ$F*=$K6m%J[o!+Ie5m;[HI,6d=VUd7/eYPXcGUld4F_L9AEg=K@;#)1n[W?R,><Q]$AVCLoPOnVO45:(FtF6R@!3U\Z7]),T9<NP(^a[Z0_CA%=UoqG'2.WO4a_Di+=+86I)o"90J@f0%\r^eQ1kgtnnu[ZGuobl2/[(_Z0qqbp1,;`C2%\R'5<4a!PTRG]I%hb=eK'E#JB_L*c!YN%0M=AZK,TPWQCH9m&DD(01\3b%EXP+s$Q]jW3Eld2I<UYD`?#BQe5a>g&1"5<Qdkr'9<,2[]-9hHk5GNVhSRg\p9jBVF>$omMOnR&%L5#Tj;FRe$j=rFaj6(dRnh3Hr:u^UASR=_&O]&m^FM-HX(WNbn0RkGDHJA?P;Ra4NP1iXS/9hrk7Xii&<.H/Q?O3W:fqqWC9#fLf%EY#q=/NCh'MP!C6[1tpf6CADL-mOXE,W1T!]>.'sDY!XE?g\>3>)0`F0dcW>GC)*6n$o@gl(,T^iQbio*t(Rfl\39,k*F:[T=`hI%0E<l3AgOs,8\HI*]k+;@UBU2:-W'[$"8'i2_6$4r[st>"3ieOu`o/SUb+I:_WsO8nT"9-FB.RO`5g^C$Md5p>oU;9*^T2VKiY,Fs%ZMWUbB,G)NVoh?jT4-unNu6S74H":+F<i6-m?bGt%"$0"Wb',:fgdUlp(8P4.X6FIQH!KS_L*']^p@:a9(PuI4pF9r<Fl\^j5/M-%n!4gUEW]c"A&I_p%&EL#jhR>B!6p\,?#(GQe[S9+V4-eW];/_QA@1UiXEb<6B?bigr2@0*c@U"0X),,A3hAF/:u+ln;/QV:iuDM=%YSd'H.nb<T,"7R)fJ+k"6cY+Uq%&9k'q%u0=2^+^0\!+HPMjh&\`pNtM/oE,PZ-uPKcaW&`hfju"#7,qg7d9O1Qn2$X=;am,uqQ%%Q1as1d-fnQ.<8pF8.O4(pVUK7%FD)ILXP4X_j<1fnr(S0Fh:pp6CE(r$KWUt>"=O"i!$BT]XHU`/lQl&b8nK@2g2[NiVX(l$bip7%[YseKVJd:81Yj[LDa(j?'YPY_T0=+Jp'\-SM7mJ:Fo[?@>Q4"G/H,8S$fs6q/(^KRd#$t6ff:m,6O^SWSA51M0>@UOCBP/n<ia=V%Reg/RlG3$=E*Q$`mig5YDR>'r?=Fo,XB8,.8P"T)$Tlm?<.`jtP%mo5P2p60VtQ5R@'9XP9-;hAPZ1K.CBU!h/>GE9eau2F,WLq9%4C[X[QGeemIAo:W'g(4TkIB<.*YhfTb><!6UD,,SX,)TTYf21WAc"Hn,k"R'dSn[ZUm0JB]8#>Gn3L9(q'7,_h8H2iOB]M':f4Zl%C.")jGqZ3hRsNaSCg>dTE:5S%kD2k;M5$oO,VM@uA.P[$g,;+8Psj?uYZI!V889(up&I`p0<r+<PqEaIgVo1-\KAB:PL22j#/`hQ%Efg=Jm'tJ%H!IH!Q0lY4Bo)1/rU(PhIea-D7W^i5&[VG2CfgJYMdpZC44X$$-5ue5rDQfs=.<Z>c^[*b]^9I&Cu*qo`WJW*=h^s[%rm$$Y;?olJ5N`D/(b.X[$0804!&YPadC8nLX/f)mp;p-FE*!SMq)\\V5-."\0>$r50L[9E7(<o9X,UV9]4.(M+=6EXb@"aNFo$;N%MLk3^&p;6fknWS[YPa2:O2gn+<jYLFh`?1.BS*c7?cL@u7%_[`/Eh"AA[>C62sk,1:TMfJA(^Gi+^&?%Dgjsjhp7K.l>kja%?jkl%;V^b,V[=_G"9:ILRWqMb>rD;cg!H#?oXg'=?$bO]%csjWahP[NI06_?d>t,l1mVYq2W`m)+5%fHG#hOKg\dZYl!`!Y7T5[#*VLI>%e5u<?.%>0*<-;E0E[-1aF5%DUTsP^+h]/(!"$fnNR/'fBU^S?e>ura2gZ-!:EP84a?)('\=8CTLm$i3e;1->8R8N3[4#`q_B50mf%hgFjW*K\gG%rKE%X<.TY5!r"C0K9T)DYo(q(kB.#>c+EQ52iX/l9E`6`UG2l^.JZQA)HZtL=m4D?I/^[rXL1,X4(]BHh2*J%`L=X%guQJEg8FpF)b30&"X,_eUI.UK.]=gS>,nV]7ma.(*%Su$^JiT$@f*9le43QkdZZ"TFLMRI7c\I>_MI`3BUVeo[]+3`@U^C/mo6jE%^8lOUYOnM\BNI&AKKDJ%33%j@4Wpr.mU++Sc+d2@%7<@>"tJZPa:!1g^.2c*pj#e5j<=WB&u=$%ghglu1ET<nb^9VY8KS[Y4&M$Q%0psQHKK"TQ:tO<*P15NQ[KU:1f4(J(XK&*19qKkb-?C)c].po\%V%8#2Og,BdW)#mW&jX<Z&WJNge"8*I0-6P5!Y%X#$:M2?/aOI%bY7@pII&\6I8A'C*7*'`79;`IDMtY',Xrn1>BF1J/5'lsC%8c.Z,F2D;[ljhZE@k8+/VRN21<+](">&sZ;fH+eXD0VnlA59m=2%2%3Q1Vq.B/B0Y,*L?U?HJ.3fV5:Y[rlTr^5n,B(q,#jRf!&-?/9sHZG_?n>]_r=#A#-pQa`fV</*tlcffn2<iZPKhJbf=1??l$@q.R%=ot!n>I9'r$_"IkZeL8%b)0e`-BX0LOcdR?A8)r:CV5oGI:JNo*G?(^DDnKC:u%&^m;WF3!\]NY3O[I26S+WAnX5d]q4#^!(Pb2U%-E3o!\>js#7N+!()m7RVMW5s)W[&l685^Z;%0_$#:3.o00!KP+Oe(2"N!oj,m:QVH#M9C8Jg<G-lk6Eq4J:M1YR6)"$++Xf*,A5t%kKS'9GAk#l3.4fO15_6pfh].Bh!*E,WU)$[P+5'"NtD3($]9E(l>ggS:snGYG`9iEk[e+Xr<o.X]DG4C/u**I8:ldGH'a!K](PA&%b"+X4_jrrrf1ePq&0g$e/4I50L#tWu]*Y%L7:@VSQh'7,jAlS2@];=R'<HshA<<V$k9`9b1SK?:V6A%.RNBb+2Ld\GC;Z>-ogf_?%ef:!%/qrf`BTtm3E\A_ba/d?gB_"PU]>u]BpEOj.15a2t:^V_)#EKb'S^D0pDh1SO<)31Cf^GD?l'IHuqFE$[f(I-\]Tp3J$%'i4%hT(moRY@pcr=^"X(@:-<9MY!`2N!q)D<P_s2suAc2k>Ad4`&a:@<KE3@B<W`&WDtGls5s=+\&Q6cfE>u,k=j1/6<]=92Pqu?fUY3%ZtFM4gEeU6J=&9GLn<,'4]S29VrKA];,)gG&,XE]I2J[D0IKFj`r`J+kE9Y^@bGe=_iZeH6FhdX.Xa2AXD5X[e469p2Tm[AAlRIR%-(,r]f5K^Z!C8?m<Q0Y=lYH5heKEYYBY<&b:K+h4UoGn\E[CtjZ3Ba,X<$?oFU1s$afKgiRb[-_o=oF/4V(K^`EYsGmhT$li_r_Y%JcDBe7*T'9L\jF3^8XG4AOU&:'6LhQBEe4,H;P\(+efuj16"!b:7qJrb:V2XD$8Ub^4<%?'Tba/_4tJ),I:/NE9Q"e:%CcaS>@^5%>4/7T7s)fMg4"C+^!AKt?P]dpoK4)(UqcqGE!aMcY).'#2ji*(r)jdiZ+#[+f4h0hT"8`,ebK9'Mib\AP/t@ojf*M*:u5!0>TkkW%Z="&p1KhV12#3b/l'IH58dbVkB98qi&:;T&<5P7kJ^Q1nZ%o+TFB75KU]=j4^O+!W7ZVG*>N[2cD:8hu5fbqd5dibm[\/iucu;LU%'lF0q*m\D?7p8@!LSepsoM"W-Q`RZ5B0=+"lffW%^ScZ78=s\(8:D1CKDct#s.((j&6mIYfL)_iocjY2cDJf*O1R]i:C"\:T%`YS%klAX=GfS,^/]"kZWU_=F'FtgE4"fQWiam`:qjIIZD'fIJD,(:#fBp-gZSl"m.2`+a)/fBa)`PYEj-\P6"&^a:qT.[a;2thCQc_.:%T-U]bJ!-6kC)\mC^DFct@U5rP.F8ft1+IASaPEfN*XC,06s%h6ld%bY1A8i1l!5Aqkk4+7dsq&]bEqPfn,E=Z5Q:WCpFec+iD3,B%`J6\Wme%Z7eN`iNG99$Ho%ROMk4KhgYHL0>q!#9&qXDQ$p\FZ<YC?58n,DBts3o0hjCb4Z\(<)%Y?nf*qYi7jZSIlQrdV4kT.Tg9%AX1#mN5o:&`r0g$A,@e!=T8F?hd:-uCoKZ!kEdiNps\r/5Q:@X5QCRU+27XOpKtZ0inqKLonQn%p[s$NIJE6lf>%:\Im:SprU%)/%q;'Z;qsZiA?XA6\h1sn5;Eqhnp:l(J#9`UcrqR@;r:jWKo(%9"RP*(~>%AI9_PrivateDataEnd