%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: waves.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 11/11/08
%%BoundingBox: 0 0 557 273
%%HiResBoundingBox: 0 0 556.7192 272.2441
%%CropBox: 0 0 556.7192 272.2441
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 8486 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FF7DA87D7EA97ECBCFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFCFFFA9A97EFD04FF527D52535277292A2978A8A8A7A8A8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A1A87DA8A8A87DA8A8A87DA8A8%A87DFD05A87DA87DA8A8A87D83FD057DA87DA87DA87DA8A8A87DA8A8A87D%A8A8A87DA87DFD05A87DA8A1A884A8A8A87DA8A8A87DA8A8A87DA8A8A87D%A8A8A8A7A8542A29535252FD05FFA8FFA8FFCFAE84A955557FFD17FFCAFD%18FFAEA8FFFFFFCAFD1DFFCAFD14FF7F2B7FA9A8CFFFA8FD07FFA8A8FFFF%FFCFFFA9552BA9FD12FFCAFD1AFFAEFFFFCAFD04FFAE83FD17FFCAFFFFFF%CAFD09FFA87DA8FD05FF7F4F55CBFFFFA8FFFFA8FD07FFA8FD04FFAEA8FF%FFA92B7FFD2CFFA8FD2BFFA852277D52A8FD04FF4F55A9FFFFAEFD04FFA8%FD07FFA8A8FFCAFD07FF554FA9FD0DFFCAFD05FFCAFD15FFA8FFCAFD05FF%CAFFFFA8A8FD13FFCAFD05FFCAFD06FFA827277D527DFFFFA92B7FFD04FF%83FFCAFFFFA8FD07FFA8FFFFFFCAFFFFAEFD04FF7F4FA9FD13FFCAFD13FF%83FD09FFCAFFAEFD1BFFCAFD09FFA8FFFFA325A9FD04FFAEFD05FF7DFD07%FFA8A8FD05FFA8FD05FF7F2B7FFD0BFFCAFD19FFA8FFFFFFCAFD09FFA8FD%13FFCAFD05FFCAFD0CFF7F2BCBFD04FFA8A8FFFFCAFFFFA8FD07FFA8FFFF%FFCAFFFFFFA8FD05FFA94F7FFD24FFAEFD0EFF83FD24FF7F2BFD0DFFA8FD%07FFA8A8FFFFFFCAFFFFA8A8FD05FFA92B7FFD23FFA8FFFFFFCAFD06FFCA%CAFD0FFFA8FF52A8FFFFCAFD10FF792BFD06FFAEA8FFFFFFCAFFFFA8FD07%FFA8FD0FFFA92B7FFD07FFCAFD19FFAEFFFFFFCAFD0CFFA8FD09FFA82752%7D5252FFCAFD07FFCAFD08FF7F2BFD07FFA8FFFFFFCAFFFFFFA8FD07FFA8%A8FD07FF83AEFD06FFA92BA3FD07FFCAFD07FFCAFD0FFFA8A8FD0CFFCAFF%FFFFA8FD09FF5227277D277DFFFFCAFD07FFCAFD06FF7F25FD07FFA8FD08%FFA8FD07FFA8FD09FFAEFD07FFA94FA9FD31FFA8FD1EFFA92BFD08FFAEFD%08FFA8FD04FF527D5252FD04FFCAFD04FFAEA8FD07FF7F4FFD04FFCAFD09%FFCAFD0EFFAEA8FFFFFFCAFD09FFCAFD04FFA8AEFD0DFFCAFD09FFCAFD05%FF25A9FD08FFA8FFFFFFCAFD04FFA8FD04FF52525227FD09FFA8AEFD08FF%7955FD0EFFCAFD0DFFA8FD2DFFCAFFFFFF2BA9FD08FFA8FD09FF7DFD04FF%A8FFA8A8A8FD09FFAEFD09FF4F79FFFFCAFD17FFA8FD05FFCAFD09FFCAFD%05FF83FD0DFFCAFD0DFF2B7FFD09FFAEFD09FFA8FD07FFA8FD0AFFAEA8FD%09FF2BA3FD16FFA8FFFFAEA8FD14FFAEFD1AFF5555FD14FFA8FFFFA8FD04%FFA8A8FD09FFAEAEFD0AFF25A9CAFD0AFFCACAFFFFFFA8A87DA85252FFFF%A8FD05FFCAFD1DFFCAFD0BFF7E4FFD0AFF83FD05FFCAFD04FFA8FF27A8FD%04FFA8FD05FFCAFD05FFAEFD0AFFA92BFD0BFFCAFD04FFA8F827527D7DFF%AEAEFD04FFCAFD0BFFCAFD05FF83FD17FFA82BA9FD0FFFCAFD05FFA8A827%7DFD04FFA8A8FD0AFFAEA8FD0AFF794EFD0FFFA87D7DA8527DFFAEA8FD05%FFCAFD0BFFCAFD1CFF4F7EFD0AFFAEAEFD05FFCAFD04FFA8A827A8FD04FF%A8FD18FF557FFD2EFFAEFD15FF7955FD0BFFA8FD0BFFA87D52A8FD04FFA8%A8FD05FFCAFD05FFA8FD0BFFA92BA9FD09FFCAFD09FFA8AEFD12FFCAFD05%FFA8FD14FF7F2BFFCAFD09FFA8FD06FFCAFD05FFA8A852A8FD04FFA8FD0D%FFAEFD09FFCAFFA94FFD1AFFCAFD1DFFCAFD09FF2BFD0CFFAEAEFD05FFCA%FD05FF7DA8527DFD04FFA8A8FD15FFCACAFFFF5555FD08FFCAFD09FFA8FD%05FFCAFD0DFFCAFD05FFA8A8FD12FF2BA3FFFFCAFD09FFA8FD0CFFA8FF27%A8FD04FFA8FD0DFFA8FD0DFF2BA3FD10FFA8AEFD1AFFAEFD11FF557FFD0C%FFAEFD0DFFA8A8527DFD04FFA8A8FD05FFCACAFD06FFA8FFA8FD05FFCAFD%05FF25CBFD06FFCAFD0FFFCAFD0DFFCAFD07FFA8FD07FFCAFD07FF7F4FFD%04FFCAFD08FFAEAEFD05FFCAFD06FFA8FF52A8FFA8A8FF7DFD07FFCAFD05%FFA88383A87DA8FD09FFA92BFD07FFCAFD07FFA8FD15FFCAFD06FFAEFD0E%FFA94FA9FD05FFCAFD15FF7D5252A8FF27525252A8FD05FFCAFD07FFA8FF%FFFFA8A8A8FFCAFD06FF5555FD0DFFA8AEFD06FFCAFD0DFFCAFD07FFA8FD%07FFCAFD06FF4F79FD05FFCAFD07FF83AEFD06FFCAFD06FF7DA8A8FFFFA8%7DA87DFD0BFFA8FFA8FD06FFA8A8FD08FF4FA3FD2BFFA8FD0CFF7F4FFD1D%FFA8FF7DA8FD04FFA8A8FD06FFCAA1A87DA87CFD047DFD04FFA1A8FD07FF%A92BA9FD04FFCACAFD05FF83FD07FFCAFD16FFAEFD06FFCAFD04FFA92BFD%09FFCAFD0DFFCAFD06FFA8FFF87DFD04FFA8FD06FFA87DCAFFFFFFA8FD04%FF7DA8A8FFCA7D7DFD07FF7F55FD04FFCAFD0DFFCAFD0FFFCAFD0DFFCAFD%05FF2BA9FD08FFCAFD05FF83FD07FFCAFD07FF7DA8527DFD04FFA8A8FFFF%FFA87DA8FD05FF7DFD05FFA87DA8FF2727FD08FF4F7FFD04FFCAFFFFFFA8%A8FD07FFCACAFD0FFFCAFD07FF83FD05FFCAFFFFFF4F79FD0AFFCAFD05FF%AEFD07FFCAFD06FFA8FF277DFD04FFA8FFFFFFA87DFD07FFA8CAFFA8FD04%FFA8A8FF7DFD09FF2BA9FD08FFA8FD29FF7F55FD0FFFAEA8FD0FFFA87D7D%A8FD04FFA8A8FFA87DFD08FF7DFF7D527DFD04FF7CA8FD0AFFA92BFFFFFF%CAFFFFFFAEFD19FFCAFD07FFA8AEFFFFCAFFFFFFA92BA9FD0BFFCAFFFFFF%A8FD08FFCAFD07FFA87D27A8FD04FFA8FFFFA8FD09FFA8CF52277DFFFFFF%7DA8A8FD0BFF7F4FFD05FFAEAEFD08FFCAFD19FFA8FFFFFFCAFFFF4F7FFD%19FFCAFD07FFA852277DFD04FFA8FFA87DFD09FF7DFF7D277DFFA87DA8FF%A8A8FD0BFF5555FFCAFFFFFFA8FD07FFCAFD11FFCAFD09FFA8FFCAFFFF55%55FD0DFFCAFFFFA8A8FD07FFCAFD08FFA8A8A8FD05FFA8FF7DFD0AFFA8A8%FFFFFFA87DFD04FF7DFD0CFF4FA3FFFFFFA8FD23FFAEAEFFFFFF7F4FFD11%FFAEFD11FFA8FD07FFA8A8A8FD0AFF7DFFFFFF7D7DFD05FFA8A8FD0BFFA9%2BA8FFAEA8FD08FFCAFD1BFFA8FFCFA925FD0FFFCAFFA8FD09FFCAFD08FF%A8FD07FFA8A8A8FD0AFFA8FFFF7DA8FD06FFA8A8FD0CFF7F4FCAFD1DFFCA%FD09FFA8CB2BA9FD10FFCAAEAEFD11FF7DFD04FF7DA87DA87DFD0AFFA14A%7C7CA8FD08FF7DFD0DFF554EA7FD09FFCAFD13FFCAFD07FFAEA7247FFD11%FFCAA8FD09FFCAFD08FFA8FFFFFF7D5252277DA8FD0AFF6EBA26A8FD08FF%A8A8FD0EFF4F7FFD26FF557FFD12FFA7FD13FF7DFFFFFFA852A87DA87DFD%0AFF7C6E76FD0AFF7DFD0EFFA824A3FD1CFFCAFD07FF554E83FD12FFAEA8%FD12FFA8FD07FFA8A8A8FD15FFA8A8FD0EFFA7CB2BA9FD06FFCAFD1BFF7F%4FCAFD13FFCFFD09FFCAFD09FFA8FD07FFA8A8A8FD15FFA8A8FD0DFFA8FF%CFA925A9FD04FFCACAFD14FFCAFD05FF7F2BA8FFAFAEFD10FF83FFCAFD07%FFCAFD0AFFA8FD07FFA8FF7DFD15FF7DFD0DFFA8AEFFFFFFA92BFD1FFF7F%4FA9FFFFFF83FD25FFA8FD07FFA8FFA8A8FD13FFA8A8FD0EFFA8FFCAFFFF%A925CBFFFFCAFD15FFCAFFFFFF7F2BA9FFCAFFFFFFA8FD0EFFA8A8FD09FF%CAFD0AFFA8FD07FFA8FFFF7DFD13FF7DA8FD0DFFAEFFFFFFCAFFFFA92BA9%FD18FFCAFF7F2BA9FD06FFAEAEFD0DFFAEFFFFFFCAFD11FF7DFD07FFA8A8%FFA87DFD11FFA87DAEFD0CFF83FFFFFFCAFD04FFA925A3CAFD17FF782BA9%FFFFFFCAFFFFFFA8FD0DFFA8FD0BFFCAFD0AFFA8FD07FFA8FFFFFFA8A8FD%0FFFA87DFFAEFD16FFCB2B7FFD16FF5555FD0AFFA8FD0BFFA8AEFD16FFA8%FD07FFA8A8FFFFFF7D7DA8FD0CFF7D7DFFFFFF83FD09FFAE83FD06FFCAFD%04FFCB2B55FD14FF2B55CAFD0BFFA8FD09FFAEFD07FFCAFD05FFCAFD0AFF%A8FD07FFA8FD05FFA8A8A8FD09FFA8A8A8FD04FFAEA8FD15FFCAFF794F7F%FD10FF7F2BA9FD06FFCAFD07FFA8FD08FFAEAEFD0BFFCAFD0BFFA8FD07FF%A8A8FD06FFA87DA87DA8A8A87DA87DA8FD08FF83FD06FFA8A8FD07FFCAFF%FFFFCAFFFFFFA9552BA9FD0CFF7F4F4FFFFFFFCAFFFFFFCAFD08FFA8A8FD%07FFA8FD07FFCAFFFFFFCAFD0CFFA8FD05FFA8FFA8FD0BFFA8FFA8FD0CFF%AEFD06FFA8FD12FFA94F557FCBFD06FFA97F4F55A9FD13FFAEFD04FFAEAE%FD19FFA8FFFFA87D525252A8A8A87DA8A8A87DFD07A87DFD07A87DFD05A8%58A87D8383FD05A87DA8A8A884A8A1A87DFD07A87754294E29545354292A%4EA8A7CFA8A87DA8A8A87DA8A1A87DFD07A8A2837DA87DA87DA87DFD09A8%A1A17DA8A8A87DFD08A87DFFFFFFA87D7DA8A8A8FFFFA8FFFFFFA8FFFFFF%A8FFFFFF7D7D7DFFA8FFFFFFA8FFFFFFA8FFA8FFA8A87DA8A8FFFFFFA8FF%FFFFA8FFFFFFA8A87D7D7DFFFFFFCFFFCFFFA2A9A8FFCFFF7DA87DA8FFFF%A8FFFFFFA8FFFFFFA8FFA87D7DA8A8FFCBFFA8FFA8FFFFFFA8FFA8A87DA8%7DFFA8FFFFFFA8FFFFFFA8FFFFFF7D7D7DA8FD08FF5227FD0EFF7DF852A8%FD0CFF7D272727A8FD0CFF2727F852A8FD0BFFA8FD0427FD0CFF7D272727%7DFD0CFF27522727A8FD0BFFA827F82752FD08FFA8A8FD0EFFA87D7DFD0D%FFFD047DA8FD0CFFFD047DFD0DFF527D7DA8FD0CFFFD047DA8FD0CFFFD04%7DFD0DFF7DA87DA8FDC6FFA87DFD7EFF7D277DFD7DFF52277DFD7DFFA87D%FDFCFFFD3CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2006-12-29T23:32:10Z</xap:CreateDate>
         <xap:ModifyDate>2008-11-11T17:45:51-08:00</xap:ModifyDate>
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>128</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8m1r8tPMdpYHUj5j&#xA;aP8ARC6xeQGBJRMjXk1xdx+lJJNIqlPVWMl0bkqgZKMqIPcqY3vkP8wLIk6H541ZiXUMb6PT7xRG&#xA;2xYI0EJJRh8QDL8PQk/DmXDWQ5ZcYkP6NQP2CvsWewBj8fx+OvlYR9U/NDy9+88zPc6vpA3bWfL6&#xA;WjvGv801jLbtLTuzRu1B2zYR0Ok1H9xkMJ/zclb+6Y2+YDGyy3Qbi18wadHqWjearm+spNlmiWxN&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
         <xap:MetadataDate>2008-11-11T17:45:51-08:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1190.551025</stDim:w>
            <stDim:h>841.889771</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ComicSansMS</stFnt:fontName>
                  <stFnt:fontFamily>Comic Sans MS</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Comic Sans MS.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.008</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:InstanceID>uuid:E682F779A4B1DD118683865CECBFB1D0</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -272.244 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 272.244 li
556.719 272.244 li
556.719 0 li
cp
clp
[1 0 0 1 0 0 ]ct
3 lw
2 lc
0 lj
4 ml
[] 0 dsh
true sadj
34.4897 4.69678 mo
35.939 4.71387 li
37.3882 4.7666 li
38.8374 4.85352 li
40.2866 4.97559 li
41.7363 5.13232 li
43.1855 5.32373 li
44.6348 5.5498 li
46.084 5.81055 li
47.5332 6.10596 li
48.9824 6.43604 li
50.4316 6.7998 li
51.8809 7.19824 li
53.3301 7.63086 li
54.7793 8.09717 li
56.2285 8.59766 li
57.6777 9.13135 li
59.127 9.69873 li
60.5762 10.2998 li
62.0254 10.9336 li
63.4746 11.6006 li
64.9243 12.3003 li
66.3735 13.0327 li
67.8228 13.7974 li
69.272 14.5938 li
70.7212 15.4224 li
72.1704 16.2827 li
73.6196 17.1743 li
75.0688 18.0967 li
76.5181 19.0503 li
77.9673 20.0342 li
79.4165 21.0483 li
80.8657 22.0923 li
82.3149 23.1655 li
83.7642 24.2686 li
85.2134 25.4004 li
86.6631 26.5605 li
88.1123 27.749 li
89.5615 28.9653 li
91.0107 30.209 li
92.46 31.48 li
93.9092 32.7773 li
95.3584 34.1016 li
96.8076 35.4512 li
98.2568 36.8267 li
99.7061 38.2271 li
101.155 39.6523 li
102.604 41.1016 li
104.054 42.5747 li
105.503 44.0713 li
106.952 45.5903 li
108.401 47.1318 li
109.851 48.6958 li
111.3 50.2808 li
112.75 51.8872 li
114.199 53.5137 li
115.648 55.1602 li
117.097 56.8262 li
118.546 58.5117 li
119.996 60.2148 li
121.445 61.9365 li
122.894 63.6758 li
124.343 65.4316 li
125.792 67.2041 li
127.242 68.9922 li
128.691 70.7954 li
130.14 72.6133 li
131.59 74.4458 li
133.039 76.2915 li
134.488 78.1509 li
135.938 80.0225 li
137.387 81.9058 li
138.836 83.8003 li
140.285 85.7061 li
141.734 87.6216 li
143.184 89.5469 li
144.633 91.4814 li
146.082 93.4243 li
147.531 95.375 li
148.98 97.333 li
150.43 99.2974 li
151.879 101.268 li
153.328 103.244 li
154.777 105.225 li
156.227 107.21 li
157.676 109.199 li
159.125 111.191 li
160.575 113.185 li
162.024 115.182 li
163.473 117.179 li
164.922 119.177 li
166.372 121.175 li
167.821 123.172 li
169.27 125.168 li
170.719 127.162 li
172.168 129.154 li
173.618 131.144 li
175.067 133.128 li
176.517 135.109 li
177.966 137.085 li
179.415 139.056 li
180.864 141.021 li
182.313 142.979 li
183.763 144.929 li
185.212 146.872 li
186.661 148.806 li
188.11 150.731 li
189.56 152.647 li
191.009 154.553 li
192.458 156.448 li
193.907 158.331 li
195.356 160.202 li
196.806 162.062 li
198.255 163.907 li
199.704 165.739 li
201.154 167.558 li
202.603 169.361 li
204.052 171.149 li
205.501 172.922 li
206.951 174.678 li
208.4 176.417 li
209.849 178.138 li
211.298 179.842 li
212.748 181.526 li
214.197 183.192 li
215.646 184.84 li
217.095 186.466 li
218.544 188.072 li
219.994 189.657 li
221.443 191.222 li
222.893 192.763 li
224.342 194.282 li
225.791 195.778 li
227.24 197.252 li
228.689 198.701 li
230.139 200.126 li
231.588 201.526 li
233.037 202.901 li
234.486 204.252 li
235.936 205.575 li
237.385 206.874 li
238.834 208.145 li
240.283 209.388 li
241.732 210.604 li
243.182 211.793 li
244.631 212.953 li
246.081 214.085 li
247.53 215.188 li
248.979 216.261 li
250.428 217.306 li
251.877 218.319 li
253.327 219.304 li
254.776 220.257 li
256.225 221.179 li
257.674 222.071 li
259.124 222.931 li
260.573 223.759 li
262.022 224.556 li
263.471 225.321 li
264.92 226.053 li
266.37 226.753 li
267.819 227.419 li
269.269 228.054 li
270.718 228.654 li
272.167 229.222 li
273.616 229.756 li
275.065 230.256 li
276.515 230.723 li
277.964 231.155 li
279.413 231.554 li
280.862 231.917 li
282.312 232.247 li
283.761 232.542 li
285.21 232.804 li
286.659 233.029 li
288.108 233.222 li
289.557 233.378 li
291.006 233.5 li
292.456 233.587 li
293.906 233.64 li
295.355 233.657 li
296.804 233.64 li
298.253 233.587 li
299.703 233.5 li
301.152 233.378 li
302.601 233.222 li
304.05 233.029 li
305.5 232.804 li
306.949 232.542 li
308.398 232.247 li
309.847 231.917 li
311.297 231.554 li
312.747 231.155 li
314.196 230.723 li
315.645 230.256 li
317.094 229.756 li
318.543 229.222 li
319.993 228.654 li
321.442 228.054 li
322.891 227.419 li
324.34 226.753 li
325.79 226.053 li
327.239 225.321 li
328.688 224.556 li
330.137 223.759 li
331.586 222.931 li
333.036 222.071 li
334.485 221.179 li
335.934 220.257 li
337.383 219.304 li
338.833 218.319 li
340.282 217.306 li
341.731 216.261 li
343.18 215.188 li
344.629 214.085 li
346.079 212.953 li
347.528 211.793 li
348.977 210.604 li
350.426 209.388 li
351.875 208.145 li
353.325 206.874 li
354.774 205.575 li
356.223 204.252 li
357.672 202.901 li
359.122 201.526 li
360.571 200.126 li
362.02 198.701 li
363.469 197.252 li
364.918 195.778 li
366.368 194.282 li
367.817 192.763 li
369.266 191.222 li
370.715 189.657 li
372.165 188.072 li
373.614 186.466 li
375.063 184.84 li
376.512 183.192 li
377.961 181.526 li
379.411 179.842 li
380.86 178.138 li
382.309 176.417 li
383.758 174.678 li
385.208 172.922 li
386.657 171.149 li
388.106 169.361 li
389.555 167.558 li
391.006 165.739 li
392.456 163.907 li
393.905 162.062 li
395.354 160.202 li
396.803 158.331 li
398.252 156.448 li
399.702 154.553 li
401.151 152.647 li
402.6 150.731 li
404.049 148.806 li
405.499 146.872 li
406.948 144.929 li
408.397 142.979 li
409.846 141.021 li
411.295 139.056 li
412.745 137.085 li
414.194 135.109 li
415.643 133.128 li
417.092 131.144 li
418.542 129.154 li
419.991 127.162 li
421.44 125.168 li
422.889 123.172 li
424.338 121.175 li
425.788 119.177 li
427.237 117.179 li
428.686 115.182 li
430.135 113.185 li
431.584 111.191 li
433.034 109.199 li
434.483 107.21 li
435.932 105.225 li
437.381 103.244 li
438.831 101.268 li
440.28 99.2974 li
441.729 97.333 li
443.178 95.375 li
444.627 93.4243 li
446.077 91.4814 li
447.526 89.5469 li
448.975 87.6216 li
450.424 85.7061 li
451.874 83.8003 li
453.323 81.9058 li
454.772 80.0225 li
456.221 78.1509 li
457.67 76.2915 li
459.12 74.4458 li
460.569 72.6133 li
462.018 70.7954 li
463.467 68.9922 li
464.917 67.2041 li
466.366 65.4316 li
467.815 63.6758 li
469.264 61.9365 li
470.713 60.2148 li
472.163 58.5117 li
473.612 56.8262 li
475.061 55.1602 li
476.51 53.5137 li
477.959 51.8872 li
479.409 50.2808 li
480.858 48.6958 li
482.309 47.1318 li
483.758 45.5903 li
485.208 44.0713 li
486.657 42.5747 li
488.106 41.1016 li
489.555 39.6523 li
491.004 38.2271 li
492.454 36.8267 li
493.903 35.4512 li
495.352 34.1016 li
496.801 32.7773 li
498.25 31.48 li
499.7 30.209 li
501.149 28.9653 li
502.598 27.749 li
504.047 26.5605 li
505.497 25.4004 li
506.946 24.2686 li
508.395 23.1655 li
509.844 22.0923 li
511.293 21.0483 li
512.743 20.0342 li
514.192 19.0503 li
515.641 18.0967 li
517.09 17.1743 li
518.54 16.2827 li
519.989 15.4224 li
521.438 14.5938 li
522.887 13.7974 li
524.336 13.0327 li
525.786 12.3003 li
527.235 11.6006 li
528.684 10.9336 li
530.133 10.2998 li
531.583 9.69873 li
533.032 9.13135 li
534.481 8.59766 li
535.93 8.09717 li
537.379 7.63086 li
538.829 7.19824 li
540.278 6.7998 li
541.727 6.43604 li
543.176 6.10596 li
544.625 5.81055 li
546.075 5.5498 li
547.524 5.32373 li
548.973 5.13232 li
550.422 4.97559 li
551.872 4.85352 li
553.321 4.7666 li
554.77 4.71387 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.882353 0.768627 0 0 cmyk
@
1 lw
[6 6 ] 0 dsh
34.4897 4.69678 mo
35.939 4.7666 li
37.3882 4.97559 li
38.8374 5.32373 li
40.2866 5.81055 li
41.7363 6.43604 li
43.1855 7.19824 li
44.6348 8.09717 li
46.084 9.13135 li
47.5332 10.2998 li
48.9824 11.6006 li
50.4316 13.0327 li
51.8809 14.5938 li
53.3301 16.2827 li
54.7793 18.0967 li
56.2285 20.0342 li
57.6777 22.0923 li
59.127 24.2686 li
60.5762 26.5605 li
62.0254 28.9653 li
63.4746 31.48 li
64.9243 34.1016 li
66.3735 36.8267 li
67.8228 39.6523 li
69.272 42.5747 li
70.7212 45.5903 li
72.1704 48.6958 li
73.6196 51.8872 li
75.0688 55.1602 li
76.5181 58.5117 li
77.9673 61.9365 li
79.4165 65.4316 li
80.8657 68.9922 li
82.3149 72.6133 li
83.7642 76.2915 li
85.2134 80.0225 li
86.6631 83.8003 li
88.1123 87.6216 li
89.5615 91.4814 li
91.0107 95.375 li
92.46 99.2974 li
93.9092 103.244 li
95.3584 107.21 li
96.8076 111.191 li
98.2568 115.182 li
99.7061 119.177 li
101.155 123.172 li
102.604 127.162 li
104.054 131.144 li
105.503 135.109 li
106.952 139.056 li
108.401 142.979 li
109.851 146.872 li
111.3 150.731 li
112.75 154.553 li
114.199 158.331 li
115.648 162.062 li
117.097 165.739 li
118.546 169.361 li
119.996 172.922 li
121.445 176.417 li
122.894 179.842 li
124.343 183.192 li
125.792 186.466 li
127.242 189.657 li
128.691 192.763 li
130.14 195.778 li
131.59 198.701 li
133.039 201.526 li
134.488 204.252 li
135.938 206.874 li
137.387 209.388 li
138.836 211.793 li
140.285 214.085 li
141.734 216.261 li
143.184 218.319 li
144.633 220.257 li
146.082 222.071 li
147.531 223.759 li
148.98 225.321 li
150.43 226.753 li
151.879 228.054 li
153.328 229.222 li
154.777 230.256 li
156.227 231.155 li
157.676 231.917 li
159.125 232.542 li
160.575 233.029 li
162.024 233.378 li
163.473 233.587 li
164.922 233.657 li
166.372 233.587 li
167.821 233.378 li
169.27 233.029 li
170.719 232.542 li
172.168 231.917 li
173.618 231.155 li
175.067 230.256 li
176.517 229.222 li
177.966 228.054 li
179.415 226.753 li
180.864 225.321 li
182.313 223.759 li
183.763 222.071 li
185.212 220.257 li
186.661 218.319 li
188.11 216.261 li
189.56 214.085 li
191.009 211.793 li
192.458 209.388 li
193.907 206.874 li
195.356 204.252 li
196.806 201.526 li
198.255 198.701 li
199.704 195.778 li
201.154 192.763 li
202.603 189.657 li
204.052 186.466 li
205.501 183.192 li
206.951 179.842 li
208.4 176.417 li
209.849 172.922 li
211.298 169.361 li
212.748 165.739 li
214.197 162.062 li
215.646 158.331 li
217.095 154.553 li
218.544 150.731 li
219.994 146.872 li
221.443 142.979 li
222.893 139.056 li
224.342 135.109 li
225.791 131.144 li
227.24 127.162 li
228.689 123.172 li
230.139 119.177 li
231.588 115.182 li
233.037 111.191 li
234.486 107.21 li
235.936 103.244 li
237.385 99.2974 li
238.834 95.375 li
240.283 91.4814 li
241.732 87.6216 li
243.182 83.8003 li
244.631 80.0225 li
246.081 76.2915 li
247.53 72.6133 li
248.979 68.9922 li
250.428 65.4316 li
251.877 61.9365 li
253.327 58.5117 li
254.776 55.1602 li
256.225 51.8872 li
257.674 48.6958 li
259.124 45.5903 li
260.573 42.5747 li
262.022 39.6523 li
263.471 36.8267 li
264.92 34.1016 li
266.37 31.48 li
267.819 28.9653 li
269.269 26.5605 li
270.718 24.2686 li
272.167 22.0923 li
273.616 20.0342 li
275.065 18.0967 li
276.515 16.2827 li
277.964 14.5938 li
279.413 13.0327 li
280.862 11.6006 li
282.312 10.2998 li
283.761 9.13135 li
285.21 8.09717 li
286.659 7.19824 li
288.108 6.43604 li
289.557 5.81055 li
291.006 5.32373 li
292.456 4.97559 li
293.906 4.7666 li
295.355 4.69678 li
296.804 4.7666 li
298.253 4.97559 li
299.703 5.32373 li
301.152 5.81055 li
302.601 6.43604 li
304.05 7.19824 li
305.5 8.09717 li
306.949 9.13135 li
308.398 10.2998 li
309.847 11.6006 li
311.297 13.0327 li
312.747 14.5938 li
314.196 16.2827 li
315.645 18.0967 li
317.094 20.0342 li
318.543 22.0923 li
319.993 24.2686 li
321.442 26.5605 li
322.891 28.9653 li
324.34 31.48 li
325.79 34.1016 li
327.239 36.8267 li
328.688 39.6523 li
330.137 42.5747 li
331.586 45.5903 li
333.036 48.6958 li
334.485 51.8872 li
335.934 55.1602 li
337.383 58.5117 li
338.833 61.9365 li
340.282 65.4316 li
341.731 68.9922 li
343.18 72.6133 li
344.629 76.2915 li
346.079 80.0225 li
347.528 83.8003 li
348.977 87.6216 li
350.426 91.4814 li
351.875 95.375 li
353.325 99.2974 li
354.774 103.244 li
356.223 107.21 li
357.672 111.191 li
359.122 115.182 li
360.571 119.177 li
362.02 123.172 li
363.469 127.162 li
364.918 131.144 li
366.368 135.109 li
367.817 139.056 li
369.266 142.979 li
370.715 146.872 li
372.165 150.731 li
373.614 154.553 li
375.063 158.331 li
376.512 162.062 li
377.961 165.739 li
379.411 169.361 li
380.86 172.922 li
382.309 176.417 li
383.758 179.842 li
385.208 183.192 li
386.657 186.466 li
388.106 189.657 li
389.555 192.763 li
391.006 195.778 li
392.456 198.701 li
393.905 201.526 li
395.354 204.252 li
396.803 206.874 li
398.252 209.388 li
399.702 211.793 li
401.151 214.085 li
402.6 216.261 li
404.049 218.319 li
405.499 220.257 li
406.948 222.071 li
408.397 223.759 li
409.846 225.321 li
411.295 226.753 li
412.745 228.054 li
414.194 229.222 li
415.643 230.256 li
417.092 231.155 li
418.542 231.917 li
419.991 232.542 li
421.44 233.029 li
422.889 233.378 li
424.338 233.587 li
425.788 233.657 li
427.237 233.587 li
428.686 233.378 li
430.135 233.029 li
431.584 232.542 li
433.034 231.917 li
434.483 231.155 li
435.932 230.256 li
437.381 229.222 li
438.831 228.054 li
440.28 226.753 li
441.729 225.321 li
443.178 223.759 li
444.627 222.071 li
446.077 220.257 li
447.526 218.319 li
448.975 216.261 li
450.424 214.085 li
451.874 211.793 li
453.323 209.388 li
454.772 206.874 li
456.221 204.252 li
457.67 201.526 li
459.12 198.701 li
460.569 195.778 li
462.018 192.763 li
463.467 189.657 li
464.917 186.466 li
466.366 183.192 li
467.815 179.842 li
469.264 176.417 li
470.713 172.922 li
472.163 169.361 li
473.612 165.739 li
475.061 162.062 li
476.51 158.331 li
477.959 154.553 li
479.409 150.731 li
480.858 146.872 li
482.309 142.979 li
483.758 139.056 li
485.208 135.109 li
486.657 131.144 li
488.106 127.162 li
489.555 123.172 li
491.004 119.177 li
492.454 115.182 li
493.903 111.191 li
495.352 107.21 li
496.801 103.244 li
498.25 99.2974 li
499.7 95.375 li
501.149 91.4814 li
502.598 87.6216 li
504.047 83.8003 li
505.497 80.0225 li
506.946 76.2915 li
508.395 72.6133 li
509.844 68.9922 li
511.293 65.4316 li
512.743 61.9365 li
514.192 58.5117 li
515.641 55.1602 li
517.09 51.8872 li
518.54 48.6958 li
519.989 45.5903 li
521.438 42.5747 li
522.887 39.6523 li
524.336 36.8267 li
525.786 34.1016 li
527.235 31.48 li
528.684 28.9653 li
530.133 26.5605 li
531.583 24.2686 li
533.032 22.0923 li
534.481 20.0342 li
535.93 18.0967 li
537.379 16.2827 li
538.829 14.5938 li
540.278 13.0327 li
541.727 11.6006 li
543.176 10.2998 li
544.625 9.13135 li
546.075 8.09717 li
547.524 7.19824 li
548.973 6.43604 li
550.422 5.81055 li
551.872 5.32373 li
553.321 4.97559 li
554.77 4.7666 li
0.87451 0.243137 1 0.129412 cmyk
@
0.75 lw
[12 6 ] 0 dsh
34.4897 4.69678 mo
35.939 4.97559 li
37.3882 5.81055 li
38.8374 7.19824 li
40.2866 9.13135 li
41.7363 11.6006 li
43.1855 14.5938 li
44.6348 18.0967 li
46.084 22.0923 li
47.5332 26.5605 li
48.9824 31.48 li
50.4316 36.8267 li
51.8809 42.5747 li
53.3301 48.6958 li
54.7793 55.1602 li
56.2285 61.9365 li
57.6777 68.9922 li
59.127 76.2915 li
60.5762 83.8003 li
62.0254 91.4814 li
63.4746 99.2974 li
64.9243 107.21 li
66.3735 115.182 li
67.8228 123.172 li
69.272 131.144 li
70.7212 139.056 li
72.1704 146.872 li
73.6196 154.553 li
75.0688 162.062 li
76.5181 169.361 li
77.9673 176.417 li
79.4165 183.192 li
80.8657 189.657 li
82.3149 195.778 li
83.7642 201.526 li
85.2134 206.874 li
86.6631 211.793 li
88.1123 216.261 li
89.5615 220.257 li
91.0107 223.759 li
92.46 226.753 li
93.9092 229.222 li
95.3584 231.155 li
96.8076 232.542 li
98.2568 233.378 li
99.7061 233.657 li
101.155 233.378 li
102.604 232.542 li
104.054 231.155 li
105.503 229.222 li
106.952 226.753 li
108.401 223.759 li
109.851 220.257 li
111.3 216.261 li
112.75 211.793 li
114.199 206.874 li
115.648 201.526 li
117.097 195.778 li
118.546 189.657 li
119.996 183.192 li
121.445 176.417 li
122.894 169.361 li
124.343 162.062 li
125.792 154.553 li
127.242 146.872 li
128.691 139.056 li
130.14 131.144 li
131.59 123.172 li
133.039 115.182 li
134.488 107.21 li
135.938 99.2974 li
137.387 91.4814 li
138.836 83.8003 li
140.285 76.2915 li
141.734 68.9922 li
143.184 61.9365 li
144.633 55.1602 li
146.082 48.6958 li
147.531 42.5747 li
148.98 36.8267 li
150.43 31.48 li
151.879 26.5605 li
153.328 22.0923 li
154.777 18.0967 li
156.227 14.5938 li
157.676 11.6006 li
159.125 9.13135 li
160.575 7.19824 li
162.024 5.81055 li
163.473 4.97559 li
164.922 4.69678 li
166.372 4.97559 li
167.821 5.81055 li
169.27 7.19824 li
170.719 9.13135 li
172.168 11.6006 li
173.618 14.5938 li
175.067 18.0967 li
176.517 22.0923 li
177.966 26.5605 li
179.415 31.48 li
180.864 36.8267 li
182.313 42.5747 li
183.763 48.6958 li
185.212 55.1602 li
186.661 61.9365 li
188.11 68.9922 li
189.56 76.2915 li
191.009 83.8003 li
192.458 91.4814 li
193.907 99.2974 li
195.356 107.21 li
196.806 115.182 li
198.255 123.172 li
199.704 131.144 li
201.154 139.056 li
202.603 146.872 li
204.052 154.553 li
205.501 162.062 li
206.951 169.361 li
208.4 176.417 li
209.849 183.192 li
211.298 189.657 li
212.748 195.778 li
214.197 201.526 li
215.646 206.874 li
217.095 211.793 li
218.544 216.261 li
219.994 220.257 li
221.443 223.759 li
222.893 226.753 li
224.342 229.222 li
225.791 231.155 li
227.24 232.542 li
228.689 233.378 li
230.139 233.657 li
231.588 233.378 li
233.037 232.542 li
234.486 231.155 li
235.936 229.222 li
237.385 226.753 li
238.834 223.759 li
240.283 220.257 li
241.732 216.261 li
243.182 211.793 li
244.631 206.874 li
246.081 201.526 li
247.53 195.778 li
248.979 189.657 li
250.428 183.192 li
251.877 176.417 li
253.327 169.361 li
254.776 162.062 li
256.225 154.553 li
257.674 146.872 li
259.124 139.056 li
260.573 131.144 li
262.022 123.172 li
263.471 115.182 li
264.92 107.21 li
266.37 99.2974 li
267.819 91.4814 li
269.269 83.8003 li
270.718 76.2915 li
272.167 68.9922 li
273.616 61.9365 li
275.065 55.1602 li
276.515 48.6958 li
277.964 42.5747 li
279.413 36.8267 li
280.862 31.48 li
282.312 26.5605 li
283.761 22.0923 li
285.21 18.0967 li
286.659 14.5938 li
288.108 11.6006 li
289.557 9.13135 li
291.006 7.19824 li
292.456 5.81055 li
293.906 4.97559 li
295.355 4.69678 li
296.804 4.97559 li
298.253 5.81055 li
299.703 7.19824 li
301.152 9.13135 li
302.601 11.6006 li
304.05 14.5938 li
305.5 18.0967 li
306.949 22.0923 li
308.398 26.5605 li
309.847 31.48 li
311.297 36.8267 li
312.747 42.5747 li
314.196 48.6958 li
315.645 55.1602 li
317.094 61.9365 li
318.543 68.9922 li
319.993 76.2915 li
321.442 83.8003 li
322.891 91.4814 li
324.34 99.2974 li
325.79 107.21 li
327.239 115.182 li
328.688 123.172 li
330.137 131.144 li
331.586 139.056 li
333.036 146.872 li
334.485 154.553 li
335.934 162.062 li
337.383 169.361 li
338.833 176.417 li
340.282 183.192 li
341.731 189.657 li
343.18 195.778 li
344.629 201.526 li
346.079 206.874 li
347.528 211.793 li
348.977 216.261 li
350.426 220.257 li
351.875 223.759 li
353.325 226.753 li
354.774 229.222 li
356.223 231.155 li
357.672 232.542 li
359.122 233.378 li
360.571 233.657 li
362.02 233.378 li
363.469 232.542 li
364.918 231.155 li
366.368 229.222 li
367.817 226.753 li
369.266 223.759 li
370.715 220.257 li
372.165 216.261 li
373.614 211.793 li
375.063 206.874 li
376.512 201.526 li
377.961 195.778 li
379.411 189.657 li
380.86 183.192 li
382.309 176.417 li
383.758 169.361 li
385.208 162.062 li
386.657 154.553 li
388.106 146.872 li
389.555 139.056 li
391.006 131.144 li
392.456 123.172 li
393.905 115.182 li
395.354 107.21 li
396.803 99.2974 li
398.252 91.4814 li
399.702 83.8003 li
401.151 76.2915 li
402.6 68.9922 li
404.049 61.9365 li
405.499 55.1602 li
406.948 48.6958 li
408.397 42.5747 li
409.846 36.8267 li
411.295 31.48 li
412.745 26.5605 li
414.194 22.0923 li
415.643 18.0967 li
417.092 14.5938 li
418.542 11.6006 li
419.991 9.13135 li
421.44 7.19824 li
422.889 5.81055 li
424.338 4.97559 li
425.788 4.69678 li
427.237 4.97559 li
428.686 5.81055 li
430.135 7.19824 li
431.584 9.13135 li
433.034 11.6006 li
434.483 14.5938 li
435.932 18.0967 li
437.381 22.0923 li
438.831 26.5605 li
440.28 31.48 li
441.729 36.8267 li
443.178 42.5747 li
444.627 48.6958 li
446.077 55.1602 li
447.526 61.9365 li
448.975 68.9922 li
450.424 76.2915 li
451.874 83.8003 li
453.323 91.4814 li
454.772 99.2974 li
456.221 107.21 li
457.67 115.182 li
459.12 123.172 li
460.569 131.144 li
462.018 139.056 li
463.467 146.872 li
464.917 154.553 li
466.366 162.062 li
467.815 169.361 li
469.264 176.417 li
470.713 183.192 li
472.163 189.657 li
473.612 195.778 li
475.061 201.526 li
476.51 206.874 li
477.959 211.793 li
479.409 216.261 li
480.858 220.257 li
482.309 223.759 li
483.758 226.753 li
485.208 229.222 li
486.657 231.155 li
488.106 232.542 li
489.555 233.378 li
491.004 233.657 li
492.454 233.378 li
493.903 232.542 li
495.352 231.155 li
496.801 229.222 li
498.25 226.753 li
499.7 223.759 li
501.149 220.257 li
502.598 216.261 li
504.047 211.793 li
505.497 206.874 li
506.946 201.526 li
508.395 195.778 li
509.844 189.657 li
511.293 183.192 li
512.743 176.417 li
514.192 169.361 li
515.641 162.062 li
517.09 154.553 li
518.54 146.872 li
519.989 139.056 li
521.438 131.144 li
522.887 123.172 li
524.336 115.182 li
525.786 107.21 li
527.235 99.2974 li
528.684 91.4814 li
530.133 83.8003 li
531.583 76.2915 li
533.032 68.9922 li
534.481 61.9365 li
535.93 55.1602 li
537.379 48.6958 li
538.829 42.5747 li
540.278 36.8267 li
541.727 31.48 li
543.176 26.5605 li
544.625 22.0923 li
546.075 18.0967 li
547.524 14.5938 li
548.973 11.6006 li
550.422 9.13135 li
551.872 7.19824 li
553.321 5.81055 li
554.77 4.97559 li
0 0.992157 1 0 cmyk
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ComicSansMS def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/FontBBox {-93 -312 1187 1102} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB70854A4518CFB8D731A1977C1C08A> |-/space <1C60D8A8C9B84186EC> |-/zero <1C60D8A8C9B7D98F6DA0BC0D56993DFD731859E73082C2D7636333544D763DC27197575AA0521EF215B0E83E609598D159BBB4BC56CDE2CDE3149C3DB2DB921DD2B021218A530AC8F4FD6B7D0FBB9FC522AE09EAE356903AFB4F0709B48EB18E9FA0317579E49D7B062061DF3902491F8FAAFB0B6154A16F4A168AFC4E808A4715BB30BACE27> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CNPNBJ+ComicSansMS /ComicSansMS findfont ct_VMDictPut/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf32.4897 244.656 mo(0 )[6.10107 0 ]xsh0.5 lw
0 lc
[] 0 dsh
106.952 233.657 mo
106.952 228.657 li
@
106.952 9.69678 mo
106.952 4.69678 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7D98F6D54D48ED68EA6CF969F0E5B50A1A83CDD96ED54CE7E034617721CFF9E66FC1EED4AF925D2EABE5F3887295B9694FAE87E5068EF00B2E19BB68346DFF7F2616719067C9E31024F97634B80D817FACCB1FF4B22DB7BC4AE86BF0B2C1A9A0C794826FE65E1181EB10541F6D1BC25C237A065541FED0BE699DBCA3EC8C9BDA955EC7075994950DCC22C238275A937278BA07424607EEB10C1AE2226536CB6BDB9CC86C61FE2B4A63BB08CE3F5FF5E415AB86FFD87E55E1E4FB7393915DC53D001D3942F0A19EBE33E976F335D27A4E9FA42922038F9E9924E840CA20833DB114F82CEFD215963C9F09A5A31BEE9615AEB04B263C62CEE55CBD81DC2A323B20160F4BB153DCC4119196063B9B3AFABF0E64C37924ADEBA5A73CF27B225CFA4A00591BD57F0> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 4{/.notdef}rp /five 202{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf101.952 244.656 mo(50 )[6.10107 6.10107 0 ]xsh179.415 233.657 mo
179.415 228.657 li
@
179.415 9.69678 mo
179.415 4.69678 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B77914873F98803C60EEF5E4A6DBE96AE9B81EFF493D2F1AA3FEEAA37FD443D04034D23BA9D609D2C8CD762F92B8820610EEE88821C53021C3E08017ADDCC0C56E5E2D7504080ABC696FC4B2BC78B7B384642545B6D2D0F5C638D5E5DAF1603C704B0CBDC68673A92C16CF8AB7E549BF3031EC2B504C05A0AE024AB48F99F68753D2CFADD79C925954659602A92A0F92089F7F8763F72499600C23C55121FDAC89B86D3B6C51F53AFAF0B4EDB2432FF0B89CC30A4C8DD2B8E7547AC479FCA4589851D61C952B27> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf171.415 244.656 mo(100 )[4.5 6.10107 6.10107 0 ]xsh251.877 233.657 mo
251.877 228.657 li
@
251.877 9.69678 mo
251.877 4.69678 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf243.877 244.656 mo(150 )[4.5 6.10107 6.10107 0 ]xsh324.34 233.657 mo
324.34 228.657 li
@
324.34 9.69678 mo
324.34 4.69678 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7D98F6D8F3D7AA695A6A6775D351A3C5B32DF9BF22260E9F8506C6C0AFACE341E1E92FBC3EF784C227B64F08462D61DD043B72D0EF946A3AE72A4250C97F9534EA1ECB8D1F844DABC2780EA5497B3400E0115082BCD52CA33A42EB31BAFC00E89283E1398238FF501EF46348166C5D0796F4F302EEFDEF2C569616B35F3A295FC3051C30E10E4927C117B901A9DA57C3B1677644528E481FA057A75ABBC2AFB35C7AE1B05FE0BDF0A1E3241A7236A535A6C63ACD853B32B2C1D37907B8E7DB8A4A38921C6A2C9DE2A43FF89B38C12B866B35B39B6383EDE8BC72433248A45DEF8A4F70A87D3942EB09EC1FED7DD26A9A13A5550450B987E697E0B> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf316.34 244.656 mo(200 )[6.10107 6.10107 6.10107 0 ]xsh396.803 233.657 mo
396.803 228.657 li
@
396.803 9.69678 mo
396.803 4.69678 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf388.802 244.656 mo(250 )[6.10107 6.10107 6.10107 0 ]xsh469.264 233.657 mo
469.264 228.657 li
@
469.264 9.69678 mo
469.264 4.69678 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7D98F6D4FB14BAE603D1D6590C382ECB216DBFEA05FD170C2FA627835C2BD2D966C4BBBC5D1C9DAB8F42A10D785196B325C66F5EDB7577122F6BE5734AA8078E8259D258866B0D1CC3F87D26DC47B5B233B398C78E29EC5A0D7BC5E21D44AFEF53F0B98F674195B01538429C08074D29DB84F0A6429366C6CB02FEB0C0C8EA9E32C08F04DD1409416FDB44D15BFEDE0E92C7DC71904655EAD8ABAF0C9913206CC1F0EC0B3F568F925BFB8C8C9726A4D41418DE9C62DE485AD8C3563A32C246DC49BA157820C0926A16B416822B6A5A4973C7FC590D71365A1C2D32D080303BF33A9ECFF4425A3324A940804108D640AA1B151> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /.notdef /five 202{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf461.265 244.656 mo(300 )[6.10107 6.10107 6.10107 0 ]xsh541.727 233.657 mo
541.727 228.657 li
@
541.727 9.69678 mo
541.727 4.69678 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf533.728 244.656 mo(350 )[6.10107 6.10107 6.10107 0 ]xsh%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B71A7335DED7128A2BEC26C4F799019A87FCF9EF4AFAADE4B5E99E37751436BCE6B1DBD30F2BB03235CD0D7C430BFB986809660F0F2A> |-/period <1C60D8A8C9B873D04176F39500737A58796A799ADAB2F011EB6B5082CCAD878260DE39AC958F27A9CCD72274D2585DDB51967C7CE61906AC0AD40C9D3B0A49FEC45F14EBB22E> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 45 /hyphen putdup 46 /period putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf12.4897 237.656 mo(-1.0 )[4.16357 4.5 2.48926 6.10107 0 ]xsh34.4897 176.417 mo
39.4897 176.417 li
@
551.219 176.417 mo
556.219 176.417 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf12.4897 180.417 mo(-0.5 )[4.16357 6.10107 2.48926 6.10107 0 ]xsh34.4897 119.177 mo
39.4897 119.177 li
@
551.219 119.177 mo
556.219 119.177 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf18.4897 123.177 mo(0.0 )[6.10107 2.48926 6.10107 0 ]xsh34.4897 61.9365 mo
39.4897 61.9365 li
@
551.219 61.9365 mo
556.219 61.9365 li
@
CNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf18.4897 65.9365 mo(0.5 )[6.10107 2.48926 6.10107 0 ]xshCNPNBJ+ComicSansMS*1 [9.996 0 0 -9.996 0 0 ]msf18.4897 8.69629 mo(1.0 )[4.5 2.48926 6.10107 0 ]xsh1 lw
2 lc
34.4897 233.657 mo
556.219 233.657 li
556.219 4.69678 li
34.4897 4.69678 li
34.4897 233.657 li
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B536D0CDA67495C778630A8DC2511919E43231A0C18D2973EB9398FC65133D4B1C1FD822BED43906F0A8844D802931B27D6EE8DCF0AACBAFE3E82F733FD0FB0D8DEAC05767241E9F7448C42B466ABE313818470686D6E92C5C38ED2E26C957C5B36EDD0C1B76E6CA0F5715836993E6CBAC445E502DBD9478491087D2DB34E4215C09904450602533067D974FCB69C1C42C5E354524CDE7F7138BDA3512AE512BA7640757F235266D7F29FDC793E25C618EE71BEAA0CDF47A9F3F7A3485D7D912ED62068BA272F19CE6DBDCED6935ACB2E53FF460220BC39BAF396EF09A34A4EFD78027C51155554CD7937332C5836E80AE011DA26759CDDC785C15E6> |-/a <1C60D8A8C9B7BB5CA503F41BCABD6C718309D7FD3EAFD4723590A6DB54A64A3783FF0E8915C8665146025473AABA73A7307808FC49DF54120176FFCE6E5630D745DEC9D7FE687B22D69E14177C1006B659795051D4F564854E1C732886E0B2617B0D55057161A197AD04FDD89E349DC800C8FAE6C2E2E7218942027A386140843CEC6D038F4E517DF6E091EE1EC97061608AA6DD07992C53BB029F315A3C165875CF85B20BCD136667E2BE57C24163FB07309C0F29C421C91BBF197F69B4468BD92D4E0F963A574D94F4959F6C142EC285F75B0A57DCD73FA9D71DA6249A4005429B> |-/c <1C60D8A8C9B7B9B9DE292882013E19E33F82B7ED3A5C89FE0A41E2745CE52BF345EF21317B06CEB633B4C461C86DB59ACA948BD5303B9C1ECB87024259662E6DE6401329C576CA7C717795A8221E64812E10D7279DA0C4ECEFC761695BC43E126B44B9576721BB314891B8E9D440D85A903F31586B4587EAE794E85616ED3F2F41CC7C8432421936554CA0D609EB4EA211DE1B1E7934AF872FDEE11CAF3B598B06E47B41> |-/e <1C60D8A8C9B797474FA4303150FF95D22C1576367C7C82BE107A33DB836FE273C47A9F1C294729003E4BC6906C807AE64492E567EB699590C33760698497B7D8BD4606E6533DD313B7408096D0253255EE30E5A5E3E06503BE924638C5951A143C8FB027E022BA2CC9736D9A6F100D38EB1D4C686421142EAA9CB9B186F914996503E87D112FD301022C9ED0ABE9EC3841A2AAB1D0ECFBD04DD27FAC9222691EA422325A2608DE3AA47EDFE24D5B> |-/f <1C60D8A8C9B7BF865DF0D20FCA4404E9859CDE906439E1B6481B2FEB75413186C365A9DBC3A750FC8CD5B7F7B8622936B45EA60095B3D37F9B468C68E03657C1298567EDFC2A59EB6AD01922F49B485CDC5C730EBEA4B7AC828B861131433F470ED067D8654035DAAD4DA6650191581F595073FA084732A337B92D51D4D5D1490EB14D559CFDA4011DD74E951F328BCA12BF2268B70EA48A2C4C52B1A0109B3EACFA7B6EF61D5055DE5A6ED1F24E05DB4ACEB6> |-/i <1C60D8A8C9B8524CA9FFF1D59707FAB92D69C69B7C857EED4D13A4787BF89B18996B1BFB164CA796A0EF07F1407DF3454BCAB96192B46A6EDEDC573AD74AE5EBB6C7E282C40345BC6C9BD822E381040AF84910E37D38B52009BFBA09050BADAEBC8553B469DC8708DC8B7D087E48B2E8AA99CA401E54F66DDB7E9923B974D88CDA4785FD295B41FC4A68D170B03EDBFBD3758274FE3E0C921CDB5782B906DFB9938B6191061DE008B5105239C6B4135C4008792AFAA4EA6826684C0C> |-/n <1C60D8A8C9B7B07F0BB93457D6C8288A70E0DB940B4E04FCB07C44C762FF75D1D950F6658944215ABDB8E09DA0C33F6809AFCF2421406F8688ABED2DEC4D49A55251B25C4373E5276DE26457B8215FA156A3918E62986142B216E3D126083708C5AB3D018A7C93A0546D1AE450568C33979D5D1886CAEE4F45CEF158C9F75F841729756DC86B9981305315BE025F34658A8B30DA9E4FC92E74778770409CEEBC81A51BD2DBFB108DC9287AA20C6C0FDC2D19D58643D88EB36209DAC3D913F6852F2F8B06C4883A03EE882CC27439C56A729CC60E3CAC44D3416B7B9356E70E374DD5228445902D99BC6E06C8C6558C> |-/o <1C60D8A8C9B78D34A55956A51486C357D04D448C2012FC2F5B0A5FE1B320E5CD61418E269420C85D10935D5D9B29D4FDDFDD85C698EDEF649FCF7B4152030DE7FB7B0AD250869A491A4776C5C05E1436F84934B318F30DD94DF542C1FA3FC71DCD30BC8EC67320F785CD0C113E143028BDC1093B4CB998C3891C7A3F7C> |-/t <1C60D8A8C9B7445140689D163BE9CD19CB6263AAD663E751BFF4FC3EFD289F54C938D7522CDBDC78B86C3A6B352FEC6C942B3A84D1DF37948F119DD042933AE483D22B2D630A0536911763BEC72090C0E7972085EC665EF1618CB3A1E365C68118F7319C489021F7E5BB1237C8B28D9185CA450113B4347A96F5A190A1E41185CC68C22E0D8B3619F65EBBC7C09A7899C42BB7EC5C668E84BEB96E5966CE04926328B6CA13AB435E16BBB7670DDC776BE2EE98FDA0050964E0FA7809BCE05F1D859FB5837E> |-/u <1C60D8A8C9B7B3D0EB94C27794C8FF7A66F97FA6CF9FABEE835E1A1626320F2E2E58AACC9742E2863A234D717CCEC554B38E6670782546BE1280DB3D026E3D97D899C4DBB14646E84E5FA9BF09835296C032D42FE102EFEF2CF2250B419A68387C6038BB86A74FB974D87A0B2F0A7872D9B0CF5DA9A83619FEC0CA43F47D29F1B253EC46F0FA880E9D913D7D1074998F6C45D6194D53073B871AAF04BD179A8644CD091C1AF599D8C323C678F3C145D207E61A3CA7E44F7257600C6DCC4283614DCCA35CB9A41B86A4FF> |-/v <1C60D8A8C9B7551CC4B76227E48910FB37916D7C56B65D2F41528CD8DC3D2EE0385DA3DBEFE36C76CA28A2306F805FAD71FD93D66AC0D5D6063DFE9F94F7ECF232ED6CD6AE4A2A47419E742660F4B5C0ECA9FB578F4D5AFFAA60D0BA98239728D0EC75F6F1E79AE8393E88B210DA67C60C> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 87 /W putdup 97 /a putdup 99 /c putdup 101 /e putdup 102 /f putdup 105 /i putdup 110 /n putdup 111 /o putdup 116 /t putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 33{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 4{/.notdef}rp /t /u /v 137{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [0 -12 -12 0 0 0 ]msf10.4399 158.677 mo(Wave function )[-12.4746 -6.14063 -5.83594 -6.57422 -3.58594 -6.09961 -6.24023 -6.28125 -6.16406 -5.6543 -3.36328 -6.31055 -6.28125 0 ]ysh0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /theta putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/theta <1C60D8A8C9B7B202EB8FDA93F636BC810CE8DD1D07FEA545978EB1838D3B614B81479C395CA88F7627B9CF3DB3BA04295E8C4C4ACA6486D548ACA634F76CEB14E9729B753C0A7D1B36069AF7CDCBA91510EDC639C978184FDA94CFD8AB60E9076EEBD43CE20016A55C7302D72B1B5009DD2E0113D8013B51229D3985F5AD7943BAC0412A6149E79C911795A5EA98A414419F8C4E0364F4E710F8195523AAA650DE0EB1843D10FFCFA16118FE6FF38CB9310CD17B978F37> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CNPNBK+Symbol /Symbol findfont ct_VMDictPut/CNPNBK+Symbol*1 [113{/.notdef}rp /theta 142{/.notdef}rp]CNPNBK+Symbol nfCNPNBK+Symbol*1 [19 0 0 -19 0 0 ]msf300.44 266.677 mo(q)sh0 0 0 1 cmyk
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCNPNBJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B7BDE38931BBD04A1F1E63D492705533370D5C0D2D0CF20659152C1BA6FED65BD91B34F9CF906EF38449BA7BD5B5F84C54070F4B79BEB91907EBCD64BE6DF5EF21CA0A19BD15F70C852E58681E3F699CF9FF707531968969BCE6CD4042802F16C62A0CDA95AFAC40F46D1DC2D5D949D101DEC04ABCD7B6A9C42F97825775AA3EF07BD84B94742B22E3DAAA95EDDA11> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBJ+ComicSansMS /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/CNPNBJ+ComicSansMS*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 7{/.notdef}rp /equal 25{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o 4{/.notdef}rp /t /u /v 137{/.notdef}rp]CNPNBJ+ComicSansMS nfCNPNBJ+ComicSansMS*1 [14 0 0 -14 0 0 ]msf468.44 26.6768 mo(n=1)[7.32813 7.14355 0 ]xsh375.44 51.6768 mo(n=3)[7.32813 7.14355 0 ]xsh211.44 84.6768 mo(n=2)[7.32813 7.14355 0 ]xsh140.94 176.678 mo
140.94 149.34 117.882 127.178 89.4399 127.178 cv
60.9976 127.178 37.9399 149.34 37.9399 176.678 cv
37.9399 204.016 60.9976 226.178 89.4399 226.178 cv
117.882 226.178 140.94 204.016 140.94 176.678 cv
cp
0 0 0 0 cmyk
f
0 lc
140.94 176.678 mo
140.94 149.34 117.882 127.178 89.4399 127.178 cv
60.9976 127.178 37.9399 149.34 37.9399 176.678 cv
37.9399 204.016 60.9976 226.178 89.4399 226.178 cv
117.882 226.178 140.94 204.016 140.94 176.678 cv
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
95.4399 176.678 mo
95.4399 173.641 92.7534 171.178 89.4399 171.178 cv
86.1265 171.178 83.4399 173.641 83.4399 176.678 cv
83.4399 179.715 86.1265 182.178 89.4399 182.178 cv
92.7534 182.178 95.4399 179.715 95.4399 176.678 cv
cp
0.0823529 0.490196 1 0 cmyk
f
95.4399 176.678 mo
95.4399 173.641 92.7534 171.178 89.4399 171.178 cv
86.1265 171.178 83.4399 173.641 83.4399 176.678 cv
83.4399 179.715 86.1265 182.178 89.4399 182.178 cv
92.7534 182.178 95.4399 179.715 95.4399 176.678 cv
cp
0.74902 0.678431 0.670588 0.901961 cmyk
@
89.4399 176.678 mo
89.4399 127.178 li
0.0823529 0.490196 1 0 cmyk
f
89.4399 176.678 mo
89.4399 127.178 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
90.48 178.837 mo
128.4 147.019 li
0.0823529 0.490196 1 0 cmyk
f
90.48 178.837 mo
128.4 147.019 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
92.9399 114.178 mo
92.9399 114.178 120.94 109.178 134.94 136.178 cv
@
137.718 141.535 mo
135.475 139.5 132.257 137.199 129.563 136.137 cv
134.576 135.475 li
138.005 131.76 li
137.321 134.574 137.346 138.529 137.718 141.535 cv
cp
f
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)systemdict beginCNPNBK+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-systemdict /gcheck known {setglobal} if end {end} ifendCNPNBK+Symbol /Encoding getdup 32 /space putpop%ADOEndSubsetFont
/CNPNBK+Symbol*1 [32{/.notdef}rp /space 80{/.notdef}rp /theta 142{/.notdef}rp]CNPNBK+Symbol nfCNPNBK+Symbol*1 [19 0 0 -19 0 0 ]msf96.9395 157.178 mo(q )[9.89844 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CNPNBJ+ComicSansMS*1 uf/CNPNBJ+ComicSansMS uf/ComicSansMS uf/CNPNBK+Symbol*1 uf/CNPNBK+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (waves.eps)%%CreationDate: 11/11/08 5:45 PM%AI9_DataStream%Gb"-6$%JttdP(NI!PX1(ba\s;3+NX)1++E;H#t0cM,Q\63W"4#>LgtD!hsZtq`OVe/&.>toMAgl=#]ejic1qZkVSa!&#oHpHn<BO%A%[n[AHa6C:9dJTIb;<]$u_Q9[(p]aE%B'%8LU.di\S,U/=k#$/Kk;jjDKCmeiNbmhQ:RJ;=(a&\ri$gs/pNSB@RO&;iTUKX]G1'%0r\0TJ%M_Zh+f&MG2(8f\_8d`b&DDb<rT^:laC'[b(F$(e^PLIb)8dS=1-`0e?7Z2p1'LB(9]#k#t`_Qd"6E!1VJ1cWOE'@XTV%+%NMADe2Xj2uQ$b3"rB;n:]&THIin=9eH[to/]9PtL=<@GKR;=@pOUl7hRtVA5QHKS>Cut1Zqe-mr^"RCJ43st7gPXSM[AnY7YW/1H%Dl$qmT&!"NZPh(jZTO2&PiXn8R%I-m3*t7[V37f[/sG&Ldck9n_kjfII+#+T84<?UWVn=X@]24IrN>Z^=]&qb.C2FU?Z,iJ\AE5G%Ft9-G@bDI)Q-JHso`!C6V<QU&-8M.490(_A=gt*4#\2(Ze5d;E`KD=gr!P`r5c(K1BRS71DJOcmaN(TfH0]k)5-=gdl%[kpme*<P%FXl2d6MDhIJVL%(+:4FQ`OI1l?7*pL6B_$G@$TCk8%LQ,_D\V%X(gKb]EC"'d$l-%:>ROgGs0ND%7e\]5*i%[a9]5[Y5^NJ5:$r^%g[AnuPA#u+/Y4uiYj<,T-?`5]*40LPC(m#SB4F7X#+UZGTG8KXg91Q&;HY/dW;Se)rS:!:A)UcMM8'2pJ*1kI]3)GC-Bn3`RDc_Z%,i26Bl!7<.g9d.g?n"CWDh<M9"9D.%JuW!kk&OQNQbtR=pkQ7u3@pH=@4D,-^TgbCLo#ttXB@+6SRN2SW%-Y(<C+FSWf$ONQ.DWC%;gKlUZq#EYCKgIr8LBJ4YnW3)Iq'oIP;Q6a%nD;fYmcWuJ)e$j:=-R3-N&k\E('I?>G?M>/`VZV2i\jWi`-s3p.;edqo;So0)U]?%<#)T>nj1DIO!tkoQgcr98OlOTVmKCVB^\L&,pTGnrJ.4gI/"XbU(X8sVY@%-n1U*EnQ?L%>bQ:[I/"YqiTR6<nMd9aYMa=ML#^).%</OXJ-sp]gfV>8F8@bQ]QHUb*Pj;G/o$-/%*BBr;.Aq:8IVHuk]P%W;+-saj=dk2B_qK4^oIc.7Iq'q-h`*gB'3Z3%@i67,'=TgQ%Z5q(Jg&olC98>*)Z*XrhVj]qp_6OGAVNgP63m)U!0BF-NDFqbb)l4QJ=hW;8Bmk<"rhG]VbG<icAPRM<>>WF+WkXS%dlL1XZ<##O%/3Z)*:USs*HUn+?[\H3UV)qS`\Eq9;.C(pi[2j-eZs***rR,k'9o``*5Q"0f,%po8H$[O,9E1hdoXj^]raXsP1qhoHV>i:gqVCs?%s(/P/HT#[4SMgG(,/*%7V>hftIWte>InX+5knWA7rMM(9]CVBgA*ncqT;1cB2jGolDLJ:0@=3I&QqFD7Ro7dq/7p\Y7M0\ZV'q`?%<lJn%?^+6/M6O`sHb,ZPm2O(pk&AP/$Y_dLVtkEIratpF0ClYI<lCU=q$e<ql.PtKns9`qO0pc!oTc:TS@dH"?F?pFht-0gh$WkB%9oYpkWf:L[Vf6H3c8:UL:laK6U+.Y><fZCSWlc=Z.Z,_*k-0MJEt5?mZM>=08*-QUnhOFFS<hh:rcNH\H(@_%P*gk_]NJ=S<im-7%#1.kJmaorfE\E48iHQci))\7fdm_B@XOF6#&mcsVc67>1bSTML?GaHk*lJKX[`W*,,4QnPW=MDK>U(D6^peDHV;`n*P64>d)3)a0%lPcI%2/CB?Ek!qVi#P!KW;qdT%].f>'@/!W0"Ao5n_Zb_nq(i2m"%fu[0bHBPfGO,RJl8aN[=KX)+Vhc$i,[KQ(_5fn_2s48Y+NI%QQ)[?C)OFu44YUX%Iu879C)D5NbF>agFT0DQVrYC/P8<AE.#<tHW1cfDn"jh4ZG$]\rcR2NjF[XlC+\N6oQZ6LPqQ?kt1AHJis1a%\'Xu;,Vq&Z.B`YD?)0T8obf<FM"fjK4X5H_p'=1Ln)bVD2uT7@&e554"u5@WbPLODUe'7751QA4/H`Bns4d0X*'OBdBpYr5m;ZcD%@oCP>3NAQ?No&e18f&KcQ3)nS*NM&G0MfGD?GU@uFkq0nB5.h%Lgg<olFs*5MT]>.4)(d5g-F5a%k0G3pqp_qBp#i[DomN"UOA=e%V@N1&,9c@@lk/AR$R>@>]ridjMe>'B7%'RIG8=!'_mBNtdaSKf;9>hLT<>VWj<@ctK\AFQ)u<aSp'9Y"BA+4!At0+M.uoZb\\&%/%M=`)l:(g/eUr^q\lF3a1S)\[>VF<ZCP`.q>/"5Kj%nT+L1FD34%nG(1BLQ.3UnO6q\feSH8`,Ee26C2e2QV0/XHCY!Fg[i1)at-W%q(EOKnP^d$;CpS>hJgEcVcb3\CT?JZMaZ!Nh2^J81\PPI+QXNe_K9DP'iR`gQ`1`m-=8#jJMXXchSIGkX(9KqD9gN^Wo;MK9e!P.%KD;/aDbiNo_^BZCW0O0eigPdG-tQ0GaIh[kkndX<+>[u*7];!40)fp+8'e-2ZIr[?W0LK9iMMcuO'$pFp+ee;MXhf0M=]?+*7j8;%290a'I+Y/VDV=$-7scfPbt)5EX"!.X\gY*KXEqlqfsT#<;u]Cj`0rnQ\g=k!2`amc=asQ1fd+ce<lC90D(@Et2s5(Dbfhp'1*\&G%A46AWjXg)'6TSr,DUqMBMRWdn]!C^O"b0:og#&eur9-rfcJ3*ZA[3%$TU"07[H*L,?qW&/D5-*:ajCjGEDErC(+.'A3Kr=$<C*L<%pM<R^/GXk"=dGG\otp:h<X`F,fV1TA8VR$4+c]Z24mQdPFYtBS`=KnZ>C7iV`)E,9PYSi<V<kC>VP`)=S0-jg[8@<4XnA&3Y*U^Z%-.c+T6nHVrS=*`l,j+=j&8di/3J@;d[6\oTk>mi,jqrr$lrch9rOJb7`.JNFJs>DfGHU+M2@&W[eX7H5^4g;?Bna!mRO\FXh&#Ih%#%ao7Y1Yp6BPcp8J\@YLpFWM1gaajIS"3_"mCBm#.iQ>`*F10u[7sr#F#K#ud^GLaqQ:9,97F*'(o#Stg$[JQ6dFZnmFTbj\r*=I%';$rk$'W*6iK]E\6f=PrXg_%6m#&1;BIn#RZH;pDHf)Z*N(cA7nHh)gA7_H:Z+fHC3,:G13-S'Y`"<c/:$],u.69sTEKFY\efp$m%VO&d,Pgd)7gQJm4j]IAO7k,P.nf/`aH8K8P-8R@+"3Ff]Zc&Ufep&0`\997(#;-1f1IY5p/UkiQ"g*RuLIup,Qm#t`n>VAk2<`.<%*_W^#N.MsWNCcqlOVb+UCi*$#mGe@cI`C%_.DVN,hUC,r)?KUjPY4kM14h)&]$ACf.5Lo>*NF*I,_G*VP`T\AZ\S.B,?\h3A+A(>%ko?rW-D#8QU8jgK/?hRrRR=&D%*p8*b40ir`=[Nm3lr"QBo^/m;akn;FS&hlOeLlNX>u)8/^!<1MRc&L&%CQbKt+X#gF/Hnc!;>?%DQkZS6iH>T`@H*n3I@[F6aoX4daiORPIiskooVXO-7'P[Oc&DTL2/eqT5hLGeJi8^d$I)$.@YEoR59"i9Nl5D9\/Rb7?8hQPl0Y%%GVIKDb:c_<U+T#Z/]]s"PN]Ad7]c`_6_.(6503F$Z=P'-IM1J1Zh2e,1ncjDV21bFFcNdtFSXUs1EO#<EkIu"o9c0;*<8_S11WV*%8;nRTekfW<`4cut-&78aG7^kO`P$&%EZf.Xg[U?ec6S[B1Wrr`S!O(JWP]?kcS3WsQ.)=1VWd/r>@L@GBuV_]?D1[PQQgn'=tPQ@%N4#9LD,%:GW"?*lH[o8a7FC]9mhd9dT"f!hQF+24:#db%#2+Xk>W";$'G"tg5*o$@PPCQ$f`:r!(;-7(^M?S[ML7<B]GHV)5b^D:%jG#(YJ*hO7\nB`YlMaHN>:f`uaJ1%T*kQ*,Y1l$K[bY)g&BU@?73;3=l"=4YLADtZbG#h*aQ_Tm:Knt=%_gFRUTq2Vgo"&+G9ZVr%Z0rlrV=;OR+qe$_X*)T<;P^b%[(5?sUoQDc4t2QcnZ#g"WCJkA(pYJdaa2"m<OGjl1>V9fhJn$$qj(O#P`(.TB/>Dc*tgS9Oe`^F%ijagfjCFCq+Kff)Qp3l$'t\>,Ftp)BMNZh5F[,(Qq_Pc]f(t"?o>i1uM4[)CY8PU17n\d%KZ&XPrCb$JNJ,qtC-(-)&u#lF'?.Q6%BXV*pKMno_qHDmkheY0W`._3M8R1"-WjG<^[$IZARsKM0IW&s#:/mc>[!n8s?FLj)851G)dAiY9Wb,=LdcR%+9[d"=Bp\(Gk*\W(%QL3,+?!#^^?+*Bt):5)[>'/[:AJ,*WCnpjsU$7C<&?'<"3q,4>oJO=9UG0&9VY)3LK2tY2-[Jc53RIXs5`Krpe#9[)90,XuK%:is%HFNXXhYd08-i/.sTs^rtGCn7NGIQ,ep)D_46<"R67]U9O1A7PNCLFN=SUj_\qYRbQ8[J`ZbKNL;lYfjC]PGknZ_QLBG1EN%>56&d%:ke4Imlpp!^d0lis6:l:J(IoT2YdX4eZ;hV:r0=-hWf]38'1NCJ>fl!\)5Wjqp%.C$*D`mp2K(^Y?KNj+r,iG.\$6(8T[g"3Xm2\%Ts_uaU<(,Zd\uhm[Rn1nfBL7Do<0JjLs7cGkP+\JGJ-TpWXSMPTp/Z:9fMl;RU[!!9c1+6*meu&#Q8``W$"LZNh+_#L1V)i^-L*F%B6Ra6MD,@aV4rk5ZUcr@Z&)C-CQ@WO,Ib6*fnGH"TaP&f_UY58mL*4XR[1I,2fh]32,I2*d7h&b;aIdkFWL-\f4_F(SJVJeBkl$h%icEKBW9T"YX#fHs*HjNuGG8DtH;$aNBklnmf8;:rC\cUCgn^or`(_\OH5Dc!o<D@uWoHq0j(#rS/)`*M;su1HZpF24<cbO'50td/%pU&#Te&4j/^[cB_UAk0'_]O^%18]Bun(DFSV<LIW`?[KsFq$Vn5<=$.*?dCW]E'p@]#,enm2hQ^;_SFKci.Pl/qPV(3bW^!8(6V#%kX_2_GIuQ6f7XWr!N4XhK@UX\aI$!69i:BP+&24@S,dS)o`#)eqOc]b_03Em*A.%>phVcQo*nN0Ul]bPNY*4JJ^2+a:bheYXTAk.%$uc2#+&me0a$X<qc3L9dN_4-\5(P1TK?6/Or+n+p=_lu/"e6TIXFqB#We>U#mi6K?GQ/>VE(o8eg?ZT,dqZMGJA5_!-?0Oq07Xn1%</91m:X]0k-]G.^r4nUJ<@Ds+ojQcI%Voc#E:XS)PRR?[5jHn8gO3jcb%Bj=fA=-NAm[KB%NOkekAA'M;:SOP%1lU3'SK$dk5]TE%<BAtTBt00jCXDTd(+h\^pd)qn8i=_8iA(u>9h3qn8)#)Xk()BkdIs"UB:r0CX[,J3a3bBu*kF='cMYj2rXF!r384DbUXeR1CH)mr%h&N3;CcBK"r_)VB^]+C2OLCm'eGM"\6PD0``0s@cd[bRf2YqnZAr$F*dMgV#7@MbM(CgCCX6P,m7W=*bl?`23[4[n-q+-3/5!frV%5?JBr5@ZgmQk:7sKLojgFjdp:W[;$=6*&o0[=F^;hX,H.UlfmITE/:rU\PD[UELXf7h%.iZTA"urWPpO6&u7cX*=S\h(_87P:U[(%I:=,ijV,Z4+8c=!U#)k;bQ&fshEf',H8*\ji7<)o^!`2El!G@QlBk#$?3fY&#b,Yal$)Co[<AbR[t3Tu1&<TA;W<Ign\?j;l2Z<B%+g?$l=m%l*bo"sO8#p<?W$)$C`mZ9KX[Ag5qRMIk$03cEqOP>6mM]J;mu.qNRc!MJfDH+!2?rigm7S9)/#[f=,#%kiR3g)'?/6,X%6rf8QQk?%`buP]44ES;8`G'JpUNJaWF"F](4UMHHgk-_VSM?50&59I3Pi;>CeaL&_T\/Wb[Jl9J`Ib7r=Od#o.]g1=OtZ37_tD8,%L\5L'-0$_8N/@X&C,qoj3U8J%ZTcuqk$36UjI8:Fo$'$+]<(nACG8-;[@u%@Rkl+tW'(VH*(uYr=`BlY2S(aakWNqfB6o4JQV#on%$XX%k*P#3M[bD_o'jR'BKpBh;37>67(Zm'6G;1_>UQ]PRiGrX*WFK0cj)u1,4\Ogd(sf$P+(OPDN)-]\(sU2Cq5`E"dkkffKdaA4%4r#dhb]s`fA7&!3!Sf`_]7\s;kIo'?&C/3d?ro&h>Z\gFNLAD^f,1Uj=&0tfU=ZiRc/*2KHPIRk2'9)]g)%7=W,,dZ5*ZAt^,E^!%EZJR7H;)`l`b2C$mC$j-L2YaUR[;,r/H=VT7u:4/>]_Bl7sd!!G^C(rrdS3,:cc)k\G>%;HEdfU1"hFuf)7Z!\Sq41mnM/s$B_+G%e0eV*^CetY=E`/,45/o0;F8\3o6g@PR#Th[>E^dpDnFXkXt$!WZkc@%c?9!kbc%f$Wnn,!)T;h#'B9!.Z"JiOh0'<KPHj[k[AOUW%qk#>e=cT/p0V);<(qFNCM=(W@(];sj9;:&)7apSqh6([;PMotKa5n-Kb`F(l>Ij0DWbnjMZ_E[$\'"JO"Q.ABU^$G3lnBb)JR`s`%aem]Ir!7+nc*BA)&QsrBZ8/J$#g_G>,a[N=0]chQ_T6aX:?3\'#X:)Bngr,W4J-0Z'VFLkT'#-m]Yr"+_Q-6daX<:o<&1!YOr6qq%8kR37;GJ]528uHf<&0_2V,K]1PKKc@Pa!YpjHPg*di:^frDVs&>(E5]3gZ/\`O).9"]jOa?:YDP5nGe<<lbTA+:1J&()0%Le-qi*%141F:8S-<f!HB3L>Xlq.9W!UOMN"!$ZRh&fa!W.c<&U9^Z;;m+n458aAW,WaS5nK;7;h1r*1omd;Xfmq6#X;-%Z9Ch9Fe<6;Q^9i%1AiQiUZPMffS>MRO:*7k=%naK2#I?I@`AO$?tC!_!^Ga!6U"+OdJT-O+,0XNZX?dBaU^mjJB?$,,>0L\PUB'[73lWi<4$3dZO2h1%Lh%A7XNW-%E'_,Z?'K2l86=f/7(Q@3S4CHLABlE2Nj6PSJ=(Dn%SP#^RWHS26fa3-U9[gSUn%QU0I>#3,52H#8*lW!5iiJR&!T.c%MV]&Z9CS^Na+%(Zrj!nlB5Gu-"n.9(/UULVd:FbpZ;bWJ[3TJ.P"O/e-'b9?W4&6,bApRF)*^]iG\5$-a3,)Al'<XoTb9fC()YMV%W>SopXI(cN9\GRYQ)dE\VF?u[AVb;&]E/\KA_9tr?3sgk[\R`]fed`62<,=X,An]EQap<I:Q0a)Q8AC35M.+AqVgh6Ue;f/7\WYh%4:G`!V=2o"Q.#1R<#;M\U)lAe"kCCn;IVoe'V]hDU2tF>OE#jP>t^<J5m7-QmG^C/d\'8o:a-e,#8Te%1`9,T@R^A%iB\hH$qOC@%.Nj$Y`16r!8i`:VD$k)9$aqI9QfY$=Pa4'IF@hXP/6,\MaQ#l!]PnA1-Nd[&XesUDb,_&T.]T3kZ;OXInC9NqYmfi8=olN;P2IcL%Kp>Y@O_)'O9An9?$ts*>(?DimP*7X3%[ScI7AVCKMa[rB6*?RYobP>d;T31/LY7uY<(W3_W<b>;5Znld'7e4>d)o!$,I*Ue"QZ=6%_&4Oh^gmMVT+n4L&*h8g_CD4m72WB;6dGf9"OQoXBKm#n^k,i??m.K5MTDbJ(m"`697^C=?sbJ;RK>BK"R?`;7^Bg9i&Ir$"jH+[%jXbXd"k[/b+c%7u/DM"+/1DaaJCS]BRoVgY1<<,jalPd:)3A<rU`f.L<ApZTdq%qt'$**='$l*`e)5;1&2%oN2Q;9a;SXRn)=U?E%BLrt]70&lMJ`cI[`E6FM?'7LK,fJ+#LuAt3do(SaGI$k+Umu"..nPS/Ce;o;N[R@DOrP]<OU@5=M%i71Q3`oB15&ehj&o.UImfT/%Beg:&19ra));1f;9kG#rUs]BKVIK's8Vb7kmK'0;(rrq,V9Hkb>ur;(iTN5tY5KC/8[?$WZ5-!iRn8&ZXj@D8H3]L5l2TSf$mouB%l2I_N^;TTHq!3$1;3s7t`E-jXT3J^MYeE!`ZEXeW3Cr9"Dtn>]+26[]^LF1p=mY[HNA]YZh%_0b(uBIRB-512\W16`5+n2eOk/t>%9S0E%\!^>"f$*X8LWW^SlQT<0pL,(W'hDGB?a\S(XWscBr.HD,ZiId3.7omq2Z,%iqpkQ;Um3.r,ZTh9h;+(IrRO<9nDnZV69!(S%,BAu18>tg'a7@$%DZ<>0GP)/Z)[/`hRJ_k0'cJOK?msK69Ph\ubUPH]*@&61_;OI2cWJ9VAGG@U#q,D$l/p%7m1AV`&"kk7oO>;Y%(c;*jA@jA;6KfiCl1kGcV/EaG(1q7&?WuWedD,br-2Fsum7.*DPPP7F.)tk-U/<TNjkj74***g@)^"$RFjTD<O)a3?)[;X5KaXOZ%isuYVa!=-G#Ijbp:?Eaf]UYC'luZ:.[^:Kj,IEePdAcd[GXdF9pE+#.+LG%;.7lE<<d0bOVl.n3>6H1g,R('5\2fl3UAN9hbl;<^%L5%f,!ua+4[E`3UWN*-.lT8baIWMJJHs_.]di-Is46E&sL5H0+!^9dk!<Tcuh#L#WNL?]+J]3jqc-Z;Ae3_[LdFOLJ/9.Ld_2\,f%e:D&8A9t\-ebJiCWj\?#]p+'SnHc^2C%RiuoMWiE;X_&9H=\$%N/<192g.WRPQ%>&=p2"HHIX&JCGadu(=<7gKJT+8&n$6tDH1Vn%0\+6\4E5RgHJWLP^2/Fns4qR8i:\KO6Z:N[IEeQM+mOB=QMT')bb0AcWVU86e^-1;4Vn("]D/H,GL,@=b#69)rMuq;gFd&W(]CDg%)H^S@\e.cAA*].HM)"YiIjoRaI+9DpVU_euCQ0a4YtE;40rH$nX\"Q;j<BNlPQT\EFUdBOk:SnBnc+ac>UUsDNPAVu[Bq?>5?=fa%Rg_I[=(G7MUAqGej7)=9UYfqgZ_$O0l!`GI@W7.N!16kfFo:9C!OVb@On+!SPoB,kqCeG"s'[];>0ZpDG$iI+pan[piiJM.BWRgO%OZnYYXci^c'2GHZXULQVa,TClbsq^hb-9*As6Q]NA'DuPlJI_?nXgk^I2;^IdJP"r1k5PSUZ&<9@F-]Ch*-JpVqQKi*o7oK<24U8%$`8F5pWD<C?J!7Aq_N5Cs19([a!KhtT%+ok[X>Opp5bpLmaD-:L9j'fh;dda_sskXj,`7LUDp?,^OE$)NcP>,];@HGMT(b87H$^E%dn#aRG_ralEW-Q7]o<tX7CiX\I[oiSs1#@i9<lr/RqQKQjo<NeWc##tCcDA-D'R/&p`Gi*GU-.%%<SiaF&jR4lRr-s%kLsl4h^`d%,Js>]8FC#epcghs@GIr9n=!rR;@I4Tr@\G>`^U+2@p9S`;sZ_CNTi"86^.NcRZ-ujrR3%![=5M\m8nd18+)^c/2YQUF&D;K<HuSX%M+;.M2Q$BkTt%@"2c_Jr9uHQ,BqFdb((Mj-V_Lh9@L$1lNF3Y.-r8(pJh6BM=+e0alE&]$mFGPRl+ER-_jqRT]t\&T[Jp,uj5S(&%B]f3#@WuH2c\+?,^M(GWrHfT_]j1LDfo<36,*+r;(oMus8J(t@j3=`I'@f^DDK_aH.?h6?M/!>qeOiV;.q@.>-`Y.R[3fC2G1a1A%<AJ#pqjB/t;+I^)=_%>bUrmkOC-QmtC&Zjg=5ASUWqEW.DOYlkOPqA5<MEW33j\<JPIulmkj^mB&A/u5%r1Rh(;eFga)moUY78`\%fRN6/%ECVhZ-p`_X$``T`3Po:-B,(H&$MTM<V*\WZ!AZRX;>:7A*]u).N?HQ5D,%&4Xa\)]5'sk-`DGppG>PNQj2Nf%9Okj1'<d2%(`V9j`3UAnSUS!.-OJZ[$D,%0e64G2_M>0kjBLC[5'61>LX'G'e+T"C7Z''Q<CRdB^;]?<@iZa0@AkH.b.Y>"JX8;6!a%$LDYo_/%n4ndOijn\p+3nsIF01N%Gj)X>d28:J]hZT%2Q_dsej,XL.01JiqjQDE>pY8]D&79V34\I(L/i%IHPe#bB"lV_+c_I`EE9/TFRb'S%Yo4tg&R7L;8(q;F@cl(+Api=S9-j"HAR^?Os4uqj^Uo,Im"7WLZ"T:@CA_Pfmm2Nok(Rn<l%n#^$Ph]PrkV/'QAbG/C<%Hp;:PUM%&t4fI@Jf>p:#a8+B(q[(T+*Er]=K(gFHU6YCC=Z(Z$&]V8.['B:&dkE<O@8M@nNNLYIZ)[a-K4OkYA1LNr`,HDU/rd]5]b&DWf[F%XDYV!BmL<]rJ^4QFk"fb(SCO'4,,,^F??8?4B)EI#gXTO)'g(^@c9M0g*D>oNR_<6-[N8tQWEPW,AVOS9\hVQKIaI]j*nY/[pB_E%8nCt=6:Sp;_p*-u,_TTR9K]W8.(dM_SeBIE_V(hXI!'4/TI_\Lq)H+5>HETm%tX@9+fDf:n_NQ^J6h'5Tq11/J@_EtFm^]G-mrWe%*d;B*q2aKr7\r/a"(+7?'#AD.`B%9p04W6:dCZR/ZktM]]9ICLP#47a1ua+FVKuU[eN8ug:epsqieH`jjOV'h02,#CJ/iSX"*Md.%:DkH[()8K53("1Ep3V\`a"oZY?fF_krGj.:+3]DcZG'N1jqTH`R9?olG]!s$Q.?j<eg\hHf@.3B$<OH/@@7<og,?W.B;Z\nbIOn`%1:b1umaMPmHcK%0((BN\:u0T-E1tV:G]dPIU_&rXa17idP"+2?l!*Om,EulTZ.7Ah[R+[dbP^Ij,5b(OG_Dd@f%>"mKhtMOoih%'%K@PL<WHX:T:-t@tZXjAX^+/m)rn]C]/4W5KM#F^#QniftgC#A(^!kkR["_!.>6`E1lOSbb6Tl;k/XS+n+g`(j[3jU5BT\>K;=3,!%+p&,%@JNAJTL6l/\2r;o(i^=_ElMb"JZ%hf*:b\85t=F$]\^n=lJK:WTb,/'fh_mjVdRB85dsh`N[\@h%%S)G$mNqESpK@]X#G.Y%_k9p=Er`"4[F=ApH7i+<m8A^)7t*<Lr1W9p%Sbb(6lQ#ijbHFO@)X_sX^Z"NQo"GtU:gcb8ZNMmK\jdZe6A)V_(HQeCQQ69/NaLs%>04Kio]]Uu/"6u$m+RfOAB#F`R7LiNSaQBeU%QG@qt(ToNC4^(*\pt@>.",A,iYnnR7Lfq\e6DXb>jO*Zeqp?(bQT#Ab=C3[I5XP%:(5G[20rQsp5HJV*<AOK?8k5p4qfc^FENP3`iodX^4Rg0m-=U*eKge%$+E:V,*Ru:_+a#gFf1E8d<CB5+[psYrFXrQcPE/HeOhA"%p4b<cE2;Mi.'AZ#Y\4nQ9QqZW`m(]sNiuH*,=L"OaVqPBA]55ggP-]AX?I?:N@XBS@j/'93=9nrl3N)\W[!aN;&u@;a8#i@1d1fN%40n<8&k96T,kE0Y`"4,+rSdQ:aTfu%]%?`!d`/KO7hdn5i<&ZbrK63JIlY*Z11h.@Z;oe<LX,ST1=L42A_LpLd44NerGR`LW#VJu%0PhG-U2X"8VHNY\"C?:Z_*sep/fl$Edk\;b5WEe3I8AL#//YF3oCC"CrEW^BjMeusoWjY6^NeMVga:^o[[)tuaOff(:`K)pFKhjl%XZs+_C[:jV[04[^qJ#K"U/hWshK)G:&D@XgHtW%Fm?5J^^MQ=h&$B!P:@5qQlg4SW`KOM;6.bjir^#l4n[WV%h`35g5E6gWh=\J;%?9DdE(GFD75Pn$eSsd)qh\5WeCrd.P9j)d(].InbS>Op"rUndSgfo'+!-Oq.PkEM-6f8doOIdu*?D\.f3.kGE.jj$ElY:1t14QDU%SA$Ci<.AfDmb38ol-_h"5<HQD:QFS[frIF/9U4*(Mdf-A>[rak@CpP?fLd"F_q\JX@$c^#[uto78/NF1M*pglKMY]?o\$BAb/(7f%@H-7AUg#_<#C9,eMMLGD*8'fW.(u2Cjig;)IfmF92uT^ID-Z$I.G%J`:J<ku*3@^W)Q/?P)u#j!KcT.56`a8H\(G%VXIM.G8l^A"%Y=i0]I-B;%16H[MbKcZ^mp6<m>KP@LN`c9u^FT!3rAk]pMBAJ0Fm.p[T6lf+RB'>c*E#CWW]m;a,/:j90XkRIlR!!lbT?8+qmRJk%?!V"\9D>`k(2r#\Y&>8'qX^_7`c@PUGqqQ1:,PhY.V_e(r?4&EkLYA[D/C9uI,XA_q-&j^4&''/^\+6phjCqQr6rE(\fL(C=;.j;%S%N[;7eW,UlLZcqMi6IfVl7^4[la1S`q!TJkLZ[sGhZD,W@_F>q/s9__k.-m<*3Pf$TAUZC&bH8mN5P2&h\Q%3j4!D(H]b+P$b,g%qHcC.3X*&&GItekmZjG?)skClIdbThp#hbs<bcX<FE>@K.EZ54SN"/4/MDIHRac6gT;5D'9roe];LR&ejdQm+\ihOle8qY)FhL@-%A`=r7e2oc&lr5rW[hjWWXm7WCm`r"7->mA?Q*l;f@;t?f<b%gNWBm'rmdhIe_8"IKlM^R&lh[,nC3n&H<SC_a/)7:-rAnN?S?`sX%WN`U/^<sFg3X*'E<1d=dq=)On_=O\3*WJmiP^PVVfGL+`G.Oc''J;qS9RLBP4*(_ak`lpge"%)M?E.f<RDKrLQeh:WHCBuabtd^d%=.E$R39aHlT75\EYprQ,l4ARi$LI#PP4n9brp[tLHnS_3^7CjtktTSTcMKubP"lDBY=11=e&PIsSC\2L:/<d?:)_hUhpX%H6Fnb`%mVhu^Q#q?OFEf>?F]r<oQLD-YSXqGBare"qE6NO-2lBn>Yg_oj`'GoPdhDGPQRmABA`?b"ql;Y/[r8!ZVmlQ2[D5OE?cE"]5c7C,%pA(Ea3p&ZXo8A[54*bJ`\'sO>en&6emF(jZSYoDFPg"#Fp@[uha1p)]_Q*S`)F`OYQ*3n*T[W8dh!I+K8n(HW[Q<;1(cIh2I;o(N%_G5;FN94SXHhCssIYCONKX]F>[Aua&e*l'1l'1g,\kRZ,Z"N2m__:J\*"I2(V&LMs$eX_CW-^M[RX83L<9Q0ZNm+Iuh&KNCl#qPF%g$g\?:/im4BrB;Ur:.!A]O'JZgc`YP`DK-Mc#%&fQbK-AI@bNfZ^B4DhV;Hq43_,M%<\+']U%PM4/C?drq5O?cq"roNHFQMbV[`R%Hd?ae=3f^r09:'Qof>]N(MfT-oltMts/qSl^:uj[3qg6KW6Xe77o/H!EnAA'=-rZkW_lshWspg\2s0,JU5X;Egfgg)ACO$Xn*^$S%jl'iJkU[*5c[G+s8'bF&+/T/.pA8!1mig_@pLn9$M&.d^Q-4^TrU#fDis!@#mKrc<]"XaW"Pa_ucO5)PATE!J@rVJ/]p-juD#2`.%Sj.1p/,PCRG^")U4gL!S,kq98R':[<I8oo&pT;%h.lYG<gHr\]C$g(@Db:%S%ro!\'IloXpWl8#CNhYHl@8R+lLW2D<Rq9?hL2eq%7Y4%Cq`Yu]DuXo<^U:.mmJH(0*BT>=I9q9-[G-aPY<Ot35P1p\^#O>"2_qE5?1%&bmE]-Qrcd8QB.!Vgr,jjbHTut+fsk1Q45]eE%X6[C$Qc[,+apQuWN8EZmUPhdENH`?=X45,?[P@Nh9^Id#WP.0R:=!7lot\gg)!^D"^2hSMm<-o![D@.?hfO!Y/c/p-L'p5Om+YZU%Kp$\kQ?Y-T<*`alhg;Do=?5d[][opH<r:8$nNbsBptX8>^:uW4^:lS9H(;L=g\C]Hi3+`FVD@\P%Jd#[^Ma"9KsJ.agrn7=hPn)d%+6"9M\?*j1S+Go\s!^B+Yd:m[c\\L98kE/EP"X)tL9UPT4&Tg_"m@8[go[]AeZ1\PE,j^*,@n'ln\$?Bgg8k.bIaT6lnhI=>Hfm,%=`/Sc/U$6B`V$ouj>'kpMj]?$P,u6Fo_0AA/]KB??f^s=S4oGa43K1qhLEo.$!;aq3hg]:o+2.BZ&d'nig@5ET!5G<h.o06,7i@<%KY29`E2CRbm3RiV=LF]da79^@Dqsku4e+JMo/Bq8Ym0+&>mtYL\rg>YlqWIJpZHjF<"O,sISGemhcS/Tl/N\7,u=`Uep"RW=0?g5%W3Q4JNNqcj:+;\cF-RH=Z#6BnG*)IK8/u+M/f,SKZ[XJ4?-<!'_0D"-b\]a_9Y"4&FHP=.^eC-1:I/fr4Oej!oR`i6K=0N'GX_XI%aWg%P%G$f<'d;keMj*nET'u@flG2Z0(!@*pT>f.+.qqL*m-OCUV-^/-f"UOl5cNXVGP%?3Km"X^20OPalCaEq^:YlQ"tFQK]u!Q6%N5gotReULSC2lIF-Gm$?;Ib,n6eQGW.W2C(o5?k6=`_1dGBMluQ"BJI.q7XPD@;cbl.t?3k--5*SGYp)\\lB>\6BT5pg3CH;.^cj%<JBOTl*!FZn::,[dY^&k<S.M&S;tY30,4=9WG!o8baIk8*eB8#J!Gu.VVf'O"s_c!iiZYN#YKBo#\`2gq@>EkoL"KAr>!U_qf%H&%R7?qtT9T-#j>d-B@,h+T5'qqtO%)'M9*,t[=']&pr67d3]i\dPUudPXA>Gp))B.kU)6#cWq2^g=\t\95SJ3/3luOPPiP[I7#\&'C%WZXE5TY#/L6*OPcom.VH-j.f,HbG]!@4mUr*aId`FJB$kfNr4M&]o+c/m*r@DFgZIB\NnO;@nkb966($,IfA2LMoh*p@*4/2I;6P%SFUJ97+FBI9/q2m5CVZf6lc%XM``Jp)**5"Rc+fjmdj4DSt?BhT(_mU>SsjBU;0l#>hHpaF<aUYd11n2Zfp-1),eb4P9lDr+2(XF%0)?VDV0e&(aj#Um_(p[[B,e;,*;DZ51Pa(:&#>BpK-\3*UELS]UVsuRWBB"_O!B^Al"tR"4fmM^rn;e8\_o>.[eE\,p+;&YDi#B>%d.i!Y6IF[>%.W/e(:,tRD[$h3)+j;?5BieWEb&aC'+mcEU(NYtGmNBXL9tD>ea?SWZEWo.,<pNEV@q\Jn^9em3)HpoTAB0GCFZ[H%E@n`dN7;+t'$'k]Di*'R]4L!BfQjaWRaY7_H^/Po>2r+bp&GDE-PR(]8.8Es7pXc'D'YPXq$lo<*!(?+js-qlr2\F)?l&@C%K$C<%J`IgU#ct$q'c=qEDJ*o.dUI4^0qo#"gTtO'F.;.**M.^mHU6WT!HLkj)XoHNE?WYPed.hR$Q+\<fY8KLkfp#e54R9VO5lfq*rF5P%MT6LLa`A+S2HXL'[,XhW+cZ0hO$afn>9tundBVh'>kl6hE"Rkf-aEX'#U1')g:?@4#m>6EC6+:EL8JN#.J[M2&6irjYhGFeoBYAh%n^r%dkLQF^2*;q<lHEWQ2scJ\H#38t`;LmL?j;Y&a!_A'rRcqjlD*t(KFDtb1OP@!c=kfQo3$PrgmO.ic^_WU_NU%uM,k#cS:t!u%f=SsNVeINq!l<hC'-F!4dbW5YV"IC5ltW\d#^OP2m??"+1Fp"c;`XHV@co17d*@;[>>R.XbjQD&+Y^.UR:MlO)gMLo?`=-8i_bui%hl]5`,A8A:M+-mgr;B#7nh>lGIUpj,53Ytt*=7)4kOBL$m=d):l#V.I.?DaQCh7>Vm%Eq!HY5A'ksO==]&%CtN)8Iq)]sKC09_@Q%/E]*Hr=rlrb$=1N6U>_Xf?r[6ATht;LcQX&E4ZPGAOW#!b9rB2TC&qWI7n2Z'X5+0TDRrt;.]%2aam?TqpZ!KZp?K1;HKB9'Y(h6%Q-.3sa!i_4.ENMQ/kU4?!I7U[DBX#655E:+]eou^L,ZT/38*.\0'9m+!S^iGj'Q_B\YO]p\@jcIIR\?4^Z(g%IFcK%K>@2#eBKQl%b4ZU4a*B7UU<P8?)@*aU15h\K&>IM5<fi(CkBu]QT89;Y*CV*nhVS+"1?<m^UH@sDngS[aAE]FMct:c]A\uC_9ZP$jo@YJDc^4Jo%gE\.1gEaL,AYM<C8FBig0?chJo9U%7'Qk.8JeRX11J%*to%41q6%1kE)9'fDm#Ld77`5"O?#m'S[1jTbT(m.:9X-kn6^o$#cS$jH%Y:Ka3Z:MRq9ghmp)OV-o'&64&-]=d%I3aF;-Ye#;NcYHm7:Z>LZn_>K04aG[Ed"<^-\e&_#uV@i]B'L+4<1V9R.,k]5hU'6[RZpJ%i$9#u0grsa)+V8"\pg(00bTF%gi/[+7$U07<i;Lq4o6pWA\VVub43aA=V;']21kKV;4/0l=kSDaK*ac&NJ,B:q#d8P^G$Gj93V_H%S:Ps#f=MVKGr4gQ.G[ud'ATdg2r)JoigTDcGI89p=[?4"HNl;H.0[-C_eN4.^/kCS%B^iBZ3PFd)_9g=g^#U:d64>j1`7]?a6Hrt%$@"H(HF>;Bdj<b5\=`]23>Y1h*qSSZlMP\OSarJdq'=ATQ&P0S^HcG3nSPmcP-moNAj$/]o\!(1;cb:YZc5,,R./3ZBlV(I-YkHP%>JaXO(2Uq3;__Gq)(C1DK$joo*(B?\.5S`l<OfYtC;NY4,JNW+5&5s<;V+)@NqMX<$Tj+hNsUTE`BjY7:n!BB-HqF8V7cKe/HM$j%!Fh"$`)2o`A&@8MH3<jW#fe,OCc".1ab$?2[U=CW$/?1&>9sG)=Fcj@BHc,tFX9pD_b;'BA))HPL'nb6C!CF9J[mr&Wq>p>d7seH%P(HB(3e+RmMqt^$Ouk_""UjNrd-fhFR?/i8c,mF6I!=KTZafLH'isX--VPQP2`Olc9H77Vfhn<I76_G,3$o%gs+h9%lEeZ;/]*29%3+aIcETrh1'?D#(nR^Y1Ss'=@H&K)@W"HTkT0I:@^\`/,mYStjor->d"O2O,FJqHlq!Y]3Lq\P^l99RT!=f?uK#5!JJi2EB.^?r)%X,P]*T+*MpbDKWh_C!-gnJ`EfSIf6?6b7(.lMS"-0AV'%c.4A@]5QT7h_6r3HAHr5OU[:u>)aa%[10\,A6uj>?^fC91=6omL;r]"%K\DNY<thb,9K_T6KIqpCfo'C+4a-rHHt)opVZegH>gVQ,pAQ)(kd<RR%,MZ$>c1Y7hB1W2jP2<U@u7pAWou+JYIbPFRk%*fj'-dp%4"e_RlfC`^F)G[lT+4IiDRl_&4fOFr\&b/!'tKa+&'K`'Y=aB0(,G10CM?XOj7ddK\k(,kBB?6goh=%`5#4_d#![$$b<aM.m.pXG%j$!NqZc9l,IEA<q_6Dt5I.?`U/?X3i/f`Kd`%BV]Sr5iTX0QMR[TWgoH5AA=X3V8qcq=B*paI-J\<i.>*6@5LiScg!H-8^cXUg?&%Ksk045L,8r9IdY8[F(<d#CZsYIJ8#u4g)'5_NeJ<6VXCAnW\fpZd\6t(nRhIO)7Qm^_<?3_WbOh^tTAX6=]Q8\bn?tORoK7MSLrT%@HgbgClE/rJBa.O.si,JBV&5EE=C0A=cUiG*^]Q=JR_2Crn7Wqc](92YASb,1nn$g4]nWA`I^!:J+FJgF5bZb.X`f3K@fS%b=1k+%cV&t]pWA#pK:ZFPpmEWS^g*4Z]+:mXcDJ0\?<c1sL=[8\30o*]_QaV?0!9Re,(9b.RblHoM3O=[6$nN11m!M4jq&Mnq8/!/`qSN/%`+/@G(P]A%K,`:WdgqlA,`P5`*qrCRn;YG!T9*qQgO]L<ddgWWFD\sYL>[mDBT@mblUFF(6q(="Epa%9Tb*G.!QYjIgX'.KmPbK7%@u.d*i^Pk:r:V]E/8N2,,!^r=T#UKjI/XZWp;guh@KdXd,=d<'"L?8_eongU+W_#=nu0l4,%YRZi[dM/HdPX<!Ck,'LF5FA9T:**%]Vbp;jNSB%4QM^(K^+SIONBoOr9r"M:)8C"5<N`R0M$[s8FluJ@:j="_CX'Op>.e!*#<u_AD\aIHJ%P&Jt?,ppd'SQ+sodZ'Upe_%ZiM#ChZFU;p>?L7*U#nQ^p(e6!b:6+/c%SQ`c/[(ON$'9#Wu\<rPWFP=Q<\#*r\]D3tB4I!SS6=3$rO*2mRWK%PeJ@cD(I?\>8(4%0r2)$g!u)BM^F6UmfTt:6%in,1_(^[q'OH$T,m^a#U18CB?r6Y;<C'gJAr%b4Q?f=qaLn2+uh@sN?@ql*<1nI_oP&`(N)hb(rc?3%a7h9OB["`BoB+0H@QmQigKH9<:qCuk$S%#PNVblU#])&*G8oGb!)rMujE8,M\AnW*D6.F8N[)=<#]MbB`>8h?m!)N[%IEO:9t%)6%Lsd<cQLS[CSe)Okc9uG&hc?Bd^S`#LN@O^+^$g83Yat82oYIZ>EtkmM.+TE/D!)SH)_N+^HlS`DLQ6KH6PcfFHI1O&&bZ&8m]H^<%/H_#+):%Z+g=R\-ir9%TE(%/%k:b/UZHYEH/d+3Sj^aR_ohYdt'u<'QTAaKB5,Jr!,TJgr%E>573^/)<Q-g/`j3J8BA)!*#!OehS%`AX?2'gW'\n_`8WU[9hFO7?Jb).`:Zqj=TpVFnc\%npkTng)"Y%s.)I`7':1;_,1>5OEO4K@-7VWR+G]^WHKpb(`6WAu,o']?R%:%Og0:kOBsspgNJsihdMf6rn*%CmT97*J@YAK-9'Pl#e"q4'+(3@Eui#2*S"EdQcjsBl90nJ_OPs.\[hS*=ss'JG?8DZkr#f?B7ZZq%B<KXd49X+0$Y=;=>b0(eh4C9bI<Mcjc)<a]C9Gcki'Q5K=Up0%*kncOikW5FG=)s/_!2oO>+a((%>_A"Rq*n+P6oldFskMn8A-Op%.A'bY84V_$?jC*:j8eC[pe2VAX$lJeCGSQ:0*_RUI86;mJ287'Ni2H6KNV0MgIRb+8:4B1O>#8=s5>S>@I:`c-LT-1dCusnSOS%C%K2CT;AB]CRj'hC+IOgLFl+:+-3ZaTo(br0J]qo(o^9#'5#,`C`!]8'4+"b)L)DjDlB&pGJ?k9,V`m=E2B^kId#`/TlNf)oo*AlED%(:Y.W"45s\Z/pq;_&f67F+UPZ1jH;n\NT='p?`AUK0@"X-LQ_6,!gi+`]DJsenhWR&-4gMemY;V:iO":Bg)rc2(D@@gdj0NR6_#h%_5>Lk=/#DYU_rR2$9+.j@h^=Z-eA+TR48?\4$M5(,"F`9Ym;;I^9LGs$1/#B%%Mn]Bc/caL)HI8$XN^WIt;n_KPfS",-*&[Jo>:K%rYRrmN^kZi4,9UmYBca<:3C"bOn<Ie?in+aSq'1/ia^#Q(A/*8,pj[n=.[Z3"'N;]??qi80X`ns!W1q-9K<:>=#L,h)or]LlNh,@%7@So#/&!,`lOCC2:mmLi&U<;$IO-brF#\e#Ur<TE=pD1V7T#[>3D$tfTAB=Wd3&iQ3,Z7B7oBP`dN#dL]8M,7Tlj+T:^iOpfa88=%,NNmVZNt6&Ttp]mhCV[cV7V):m'&;9d6738qq5P&;bZ\^0ta-m3;Da#og,Na^Y(IOZ@4Q.E!0_M$rFe.iEDW,fc]V:W8M#,lQ`-U%-U?8_!Yt(D7s"-\pn34_8!P51.bG7F$s%);Jp4hFlb]i&_1%d0EGt`F*#2.ZpqXB;c3b<QLC"H=g[A+?i8D*Cc4UlYLC#<+kF&&r%r@l(5\oLiM@)&QY"S\uo_1%bZo*r5d6j<HrK#_nJ@T7:Pa(C,7p;7"8a(C8;p;7#;n#r6%.bLpC=QPK=_1"HKAnKX';8M[;#n%F5%Mm3'n.X62)UmU*1mh_H-'g*^/l53Li,e0Z7;8I]to6k6@.o`_pENXHGN)7?>9q`o[()?0P#?u,eSfK<5%hfp/'65j-nCUFUR@o01%2BLYAOL%4VqdG($k?<YGm54JMcF0FU0okdP(:na2CbZTq`:k]Z^:_GR%Css#RlGqj-FPm;2UqNGO`5+kZ-!rsRs:Z?(/qu;G][Wi%N(u9kN\+k?5Sm4A;X4bJ9fs]9&T%!YY4\%J-=.5%(.WY:9f0m*L+T"VmA9+/gG3<BS.JsG^toW=Z2MmU!d*tnf]'[dp^hQ;1oJVo%N\6nC><J))0`aZs3jq#b?Jc%"Gl5Jur8*+jki0^h`R\5Z(P7HnpR;F=g)9eQ`dgY1Nqk%f(JbO#"fn/a=Ti2l7q2H(hBX']>9$4u%UB-!6(c]0D*=Z::3OX/P<]$%lOg2k@P%t\Pn`8>3(sBk]ilSIEIeFEE[DW_dM^,rm29Jk8&8^n+Go+lT`P9I,7R7hdN\/8<J!tO-%_\W,6Y7*o;:Q@%+4b>a&[b-;lT'U%,j/;"s[kcn]QcH7R,Hl<.N3_nYhpJM[b2`6mAq<eh=Gb?@UE&ni^=ct[E>BK^.8S-q+H5l5%3:TQpb2ah]T_C"`%&6L>7n6Cuj%XDHN:QU#nOYFWbaA?ohd_o,.mEN]jcNNrBZFch@@`rh*ptNU.BKl5H`Le?F`q#@k;9</@\"Oa%nRb/5''hY1$u])JesLXir<hjQD#8\hlPtrHR2+:ukZ!O+L37[`Q&Of8@@[L1R$hESf0*9-Ig56*Qn.b5Z-N>'s/`KN^X!m[Jou6-%1/Vb:7*S1=bfo$1Jou6-MYuVr.Bq*X\WWN?5D40&3jl3BIfepUN#A$0f%E>Mcg$@P+4b^@<8(kbkE'>(1W2=98E\kT\Uq*3_`ILh%Yg37)En4?*#O*4^A(+nX7rs%V"P,SJeFu&+Z_-l&O*,X")a7>3[TM_.h4C$DSK37j]iT<q=D-fRj$`@<Se15SN-#+pil"s^_!L]]%@\'%mT3n]Na'bIOZ/qUo3r>W!B(-^L0Cs%RPtT/0NcfMS*=J)+-a:n25OB^'f%Gn&*#.T&Z-EAkjc$Iij4@bH^cG!B<VR<[g$d2)%Zc>*gC(^+#i[M+Wr\#iE3dL9l@%EhpfX5cXF0,!.Cti*#SK4Ntq"%pka#Z:?iq"5JR:2YWObUW]pifhQLEs7L5D=4i=c(H9lg2+_%^SfVg_E'bLkKrC$^Vi214QZA@=D%m'*/`eR-.^b8<<77/:LTfbp?:2oIg56*kbf<9r"6#O`#8B;=D)OTqe*.Y5r$T"Z-Ej-3FkqM%f2uZuLY^(^Rm#=_I(_`pXL$@s'E<,UB4lAs5"G/;=QcAj8Uh07m*<0<F'.Va]^\4?FnX_)Qo3H_Hm2*o-9dB2hA]IL&?N4q]8lhd%btNLC\7X1j"<_cRphXooiM^@Qr[`$5iM^?ibl91uF#^1Fk^BYL^bpnBR`"!D3si'8ll0tXJnkid235CKGY24^33#":S\icoc/[\1%4:>D833%8b^"$'@R`"+$(:O(K\E<9qAe+aBER!I@B(O-cYAqhGW+OYL._ihXLSL;jp+7Z222A9sh!_HE-*B6J`8l!Rj]&bP+M*Nh%kJ0T:fCA@P/^raKVqY.='\==bJ@3\eS^$JRK2BhOHV2\*c/HUgV[:,Y22Bp$>pK@jfBg!b5?.6A*;IUbk&@c>n1W8NRSAeG-XsYC%]7?Z'HNBO?0?O\Z]3^_im(=gSc0PKH(i]_oam;o;Q.Z=]H&B,n'98+0kfkN^9:8pp(D8SEAXHV4(I94*am>I0YK6HP8a%YUp\B^X%%d]r3(`u'"dkT(&T%We+_d*06`iJA5?T`mdp=pJfpLIoC@Z.tT&egk2l*Ip%=Ut_2IqSFW7S3pE!Tqbng!T;crQ1+u5t#H1Gu6hX%Ol'dASXVU#$QNm+2iMfNher`UGbegZiY`BHpuhP3\]%pJ'BIl$4,ET._?o(<Celg[-auJKd>ic5RSOSD5Tu34>nLK"Jc!QF6B2\k%7b?_&5'htKY8HJGB)WD/":Q8A_"2%Yc%V)LP3=W/XOg5W77oa]p,^.:p@k:$ZP@K!fA@N-mpd7]WVOVGbZi92U9(+T'It.js,=;F%rdFu/'-3E]3#P-3?WB9"PP[;(Zfn<$"\Ht+BPAJ<I3[0k$Y-.ZCMD+Y`2VH.O(VuI[1gOZKXHDP5tLUC-]J6l#t@2OBYqVgHtC)\%2DCBuc$LM_n2V`F6grtCh_P[hLN?F:FMrCT#/%i6.`Bgomn`H`kG[TXT9Jjo_H95o7n6mBqnBs.l:AU;CpJ7EO(4ZEh%8!*O+[7g%8]nC2/uErMo6BRa$s`<kItr)EFS,@74/0&5(`aWA,%q8:_U6aXa+aWs-6BO#]F>?]&26.B3b6klRU@6_CS#6<I.<3E&R[InK@f0n%I`n2h&`l`462=:Ciu)Dp*`%XH)AuoMLQ-?N>SPI.(u[B7Uu<[Gj+s-^hqPKd$UjppYVf+;b=K[DUGtHB%-\Z:-iDgS(7+^WA$1#!%k*j'Wh-Q]<"C5\WZBHn.hC(NSF(O@QrTh\ubgI/O-Sp'EilU9D)YcedGkbT_7!%ad&9FDYHf'p\<&dIP880&@1W!3;;,K)7UR<X\%jb"D=/5=YJeIiP&[f%7m;)CdgL8gKceWtF6.4DB</.?\GS$gRt$*[UW%uctL*ZT%/oD2ht]46m@N]'eMp&;=[k*;m"46A,,jdDZ,%66XV$NqFEJ7'+,*qRq2hR^^E`h,+b]$a/[iJU-&4fc3K@6l5R]#%-(VnEC/;hL%"kk&=n_RD\.3\FYo4>7=4!`V+]9@5hVQ^;ib]%hl@phYQJO"+);HcO-)-1I?i+t.7Jm*:3qj%=X=5<.rW#*H#dWZpPnVIplJ#kondXb645!5H(ndo_XM#MiqCB.`^fB,2UG&!+:!Q[%51rbBR2*HXl'Ek2L);*dL7bFb&QWAU/^'#p_@h5%EcmgQ-f>I#b1"a?f,G/'CX"Lg=eXba)f0KMP?T6t/Jc7]?Jmcj5XamccP,\>%)=(\Ianfgs'o6%H`&a*pSUj%pVi#UdcalD5F81Y?-Xdc0-1<$-B'grCq<0NQ`ZDhURY&@gXTqV;Sp[0'P?XbJ/%PI(.tT/s;;D0I%,U^pk*D\mU9HM'5VIjqud;=P2"t%d"Jro-PSE)MK5"p+u/A_ubd3L_/!De1l,R#;\gM%N!2A<s/aerOmKK4u+`>3)A"a_S(MA[iG%9u2%[fktbj_N1CKn4Ab5_sa:d"]f_j[hai9[;ltVSt'aYjn^NI7Xim#M!QD8+*iLWoZ5<Zh%/0V'_@)(48iLY0R8DQVo?bu?@CPn%\`\AkkOisMG`SDg>pmor%mp\bH2j3-N.d2[d"(O4hYTEWT=.1p]p\#u!s9dlY07%?CN4.DI:1r22=@7.j@94?(Uk$+.%;n(%i3+9%38*[?,DgS;55Rlt5.bdJ#Mj+mOAg<t;e&VRTT?$@?&DF8qWgJ8\UG"ic.0tDpN^$3RU;V$Hbs>l]]p94;Cch:hH=LQQf0e@[_6+J%X7uJ563"@E;0ULoBC1^#);TN0m;r?`g$RJ)N%Tq][PKaa@A<H?Km-f:mKlc2hcVVG-.QZ-X(.1)/hY97]i@h/*;9]pCF=>,IAhBQ%OLHi+GBBB75/HQ5++pN;(PeB#ZF0Yf3quNqP^+>-ot8I@He6U<.s(5U-8i9&B@XQ#DY\=5c^2u/[p++a`hsX(Y>7?K=lm;_AC[2J%@+FH'6hXntE5eD\Udt.NnY+7"XVk>ZH$_QrQ='A4pA1i@?uM>mT:f[QVq_f0dlUlHDte$&qg@p^_ER_'mb$-dbmsWZFqnZIG$\3l%rHrZh2oK>p2nDXPqB4[F1_tDcqc<8E[jtOf;OJZ2kLMi.V*/74md+,7o9km/Z3Kq"_TbGZDm?&be0R<OHG9;Xc=c;ja7[^MMHX3?%]A1d:jR&I>8_!GGX'Srd9l/ZqgR5qPo1M_??<P)`pQqt%PBk]<O5gDi>L8ctSdhneC4RO@")L2l^?3B1A^Bu/XsDWjeV6tO;bBU*%rVFgbAtJK/39K0Tne(])`4heE>Xi,KqK>"*%C#_VXBN/7fn4ur8N3ra%:a[ggLL&5mrp+]/8gc_oYK;;@&'&LIfo8I?28a4EDbH6%hSp.S]K)lKT+d$,^</BA2X\NS`a)ZYlI8S%LgD!+It@dd]f[)q4tEg79+uN?F%BQkanqP2fmPS\O0nlBhHgmLf<SIejne9HFS0@k%h2:j1@`?1G23<_,kP'XSE?IKEg7>n'(b!AdK<%)m]\&T),l0UCKnRk+<c\Z+-0;RsHiYsEp't7bG>I4l0NWn8q4GOLr`oj?mKQlZ%"KQo_n+XUjV"aB-O4:nr91)fZaC=\J>2;l%(I-Ln((/foF1QM]AA59rEqd:#Do;nGb2La1YaEPGk=Y9V,.O5fF]IDHYQ8=LOM>"6%13)CB#>T5rfkg9Xol.,)<%Mi-J&BW.:ASN"`[:NY<E2el42psMcVj9hodZ.D3u\:t[Wkht"T.*DILEdQcXHA8Ys-gk.]lo_AYt=1%0Hl%5/kWfh!AnJ(qdf62%ZNX@k!UUK0!"QpqjUJjRk)D.jH=n2/<lFE\]npUC[t)'3FUt=dFXFg?$cQ'.E\8p;p[]&jS*i1><Mkp%?<$4,C0EZF]D7OlS`NRK3k`(9PH15XYp*O.b"&SG=*:A:`l[\=Nu-1&>70`"d7<YQ-[$!OIVe!il21*G=5V;h1@**-h''VIhfbhs%UTl:LDXLQeUSB>'=$#2#<gC"\X?*hqZ<V3H'-&4BJ(3KTo<.r\]_^i,`t?T`riW?P2g.*udf0-SV#l9lcnSJ!k8RmA;>pTn^F`X@%P,j<77Blr0EO.1(];GjpF;J"n95RRDe%W8::tWBbGP^(I=?Q@&H9dA7Z!]YK.j,gS=]W]ln<o3,8ZSnIm,>esT0qk8(Rnbu!eu%`%E".sp]NGIi\E`#MRC@<Y+:4dH:5k,'no0KCD,],de9@`iU"(f2:WKY2Xg5J%OI&UW^Do:AZ]up&<r-,sDV,%p;.&1N1#KDI42RMJ%;EFt$CH^6qVE1Z.f$<Cr5DMBdTGW_hjl]4f5'as<Gs#EWPN[VVl#RY"*uF4c;n#E,.,,e**eF?.0=Z[VnKR<3l(Wra6CI6;"gfL:%hC,e4G$2M\j]<lmP2#(El/Uan"uJZX(*55H2,L.*B?uR]cf.-^l`@=s\U5l44plV0>WfP000&ZWM5tQqH'pXph3H6E2rXc.\tHcN%Mt`mUeJhtd(jfe%8iV7+RZP8%D#N<f:>B,e4ItW\Mt24'qaio9hn/_+))r;=gWla92tspnVcJ5@%)et#SRk1c:fc^s5%HPMIZ-]`%YrntHK4Bpqg\,A`m.P`_.5d2>`N50S;W[eu#$T:sbA[<+Wr'fb%6:t1B*%<<9&F:IMo#P9hBpOjhg!#Trh;*V>'hMgc1>jDHfA%:%hlu5>,IQNr93F(E;e?`llDL>3>/@0m\#m?F^4R9P$^?*`+c@]!Q/=6S=7i1FLC71qgMCA6isbR#\PIfKlI!8VE6du9d"/8U],,pe%dM^`gm>O*fQB*!U;>%PS%:"PX'i&,#2l])uM-iEk?KSNuC118G@#-pXeiC9Z'cVJq<8--acE".LO!j/j#0#&/rrU=/3OW&f**cL.%qSTIN\UT'YD_E-<^Vib7qOJ&4E>hYe4"HU<O.VZg?K4[B3LW`JN@@MnJXd.Tq<'?QDm&`OdUoOHr@@\iH!\3^jjh?SR3D&.,4-9%%3TVCUrB;]pX40'(.pHZ^Zh<CS=K0574?&cd2dhW=bp-.__<S2,`9]ssS*.(ukCg28Z_Xfbg-:J',(TS]8%Oq<\2l:609r^C_Z8le%59U&p?PnlS^?D^J\'is7[+`suKI5YS;V8+/?Pn=(f'Yf]e8(Mks4gkfX/`[4Cl"q,qAH\5U04.i0_n^Q?SJ,.03D.(]-sO_*_r8H%\/&k.$jo4Q_2`em&M<g?.cepj1Lg+AHI]U8\LbLRb9`[@DlicG=XES?6kA*dN)=+>OS(R.GdZ.'ek`ab83,%-q<Joqm,l=iN,!Xk%;SO2i?i/\c]j5Q.8X2IOPjsC"h[YJ>?ji4a$$>O>]VQBM*d-^VYe5QnD8UaD]3-gggRAFf2$kuGBaiQ*>7YQ@2P1*uY%okia`S9c%@_(A8L_irnQ!3Rp4N(+oMe";-%qEthNfNNCjnFGXJtV_B$[eE?,V)DD\[.HN$2EEsUV?J`%U!:N_WM]f7HP(d[N7t!V(2%NB)DN\%;'GP3D_`J;Bs%H<lmGKao:OHC?='G!_>Zm/TsQgnibBN.8c'-!*s2q<p(n*"j/@V#b-a<Sc>,R(nZ^$fP$F>S2i*(H;Ql-_3u\_$%P:CJVXp@;F^Y64%\Z@>F2jISBA7.u%109$&NPuDj4U8H5,Ru0bmCl[_]9pdLeG@Y&G.lUol9FmO3Vb>RK<:E-q=VGFc!g/0>?[5u%\&!^ngAbu_[oDBfqpt[2r8;kHS/6m?-i*`:KQG*Zl`?1FjjqEmn[cXqL&OYn=++p3jpHBF]-QOI:Gt5;_*,0r/pOH.n7/KNc>R)e%MVACY(S:R/=HK-Q-lZ<!$[TO'g(1&10WIT7WTk#;+JD]\HDkt4-XJHC2jEU^]=tE/iuMpKDn?Nm:Vu3kkZ7P#>*lt4G;e]G7C0L'%2g6!;'0Ek>q7*#$\ii&E2"*ZSH+A'gj4EEGO.^h.m(`/h9K]k]\&qR+e%umVLX&*-cK:TgUD^pcR/@Uno#]!K![FloH)&3m%N/^C%9AcgCm<ic950*.Tj4q7b-5)s>lOmmD[ZqQap.q@Ei\"Ab5pTe>n+?IF<ur:M%he-EXEg5"eYc3+$2K%?V-XHT.pZFbI_.JTpt#9Z%_udOY`$#_U1H2Gb!tr)ZKQ6obWjt%hIF`BR<qM_PO2,eQZ/79!!m@]Y8UIl>NC7ikYfgmfSRl[pcH8^U&W.:l_Ui-n)'dQ-+\#):%**?/"9hq4,22DpOgbqC4.K@j,OcN)l$gUCtqGN#1WAW%V?a.2I24t[ik2U9mH8g>>g4t$E\p7m1\EHBQJ^M<c92a88#kj8($K0B4%'e[.9o5Dan'iMZcbD3dejAN=2K;Z\#8b#?*9e`1rKG72,V/k_hJcm<ZHV^S>"4pe'He'^*V8Gn/S6;tES!TIZa%W'.^@?SK>h_:%%=#X&n*gYhkq+IST@(FT^Sk5=kJW"&_oQNui^iCbCNTk/;>Q6>DnSe=541Us;:TLC+H3BNinR"(8!m<k^^L_]oQ4lKK9lRMhl>]_E%-A>Sa(W(2SZg1CI(W&W3hLn,X>R8O?]o-5XQ`S!;*juf$UDRA2@l`2bT62bEqWX&%(W(3K@K*?L+Y3l/N+;^-$9WY&OK0I?-51%<%]>[1EG#tng]PdOth9/:F*M^D"?@<j<2k5uLN0L-h;_INTD@-dIbcuQnAh7)c`8h!UWS\@!QZ4HZV\/%CNI+g@c7[#I&"O_Zi%lPm%<oT#=JWW\KV1]XS"LhP3e_EH04fN_`Zdo.fJU^sZLl,DfoiWb>fCmuks,3BT$qn+\II\)#3"^/PoOD..pB^><HeXsOkn.#mpA'3Y%oE["?.N/gG*6`FYQ<u@pL"kOC=g%aK%P3*:ani8i3#\EHkn.%CpcY+:N9O80itF43!m>R"/i(m39&d1Hg?&n>YMLVSF548&UX"Rt%SESUtF=s@C`\;nj\H'f;5%#[S1;1lu-^l!P+tl/#4jVKc&=-PH?N6C6+^DrVl&RkA_K%"&CSk;e01q)`_<G9Hl)%bXYh[C4q.%^h%3>(mZ3Yt[2A'7+%>R8Nt9ZSq^5@<(!JPI-kHW&']U$#,I%m(TEEq9-^1B!S'rk@#S4sme!?@*b<_5/EYo.nM2V7AGrhenH-Eok>J%h!(BVOcT^KH.OZ!ad"n;pN)#B]R5u,KF+td@ZTtm2h\k<I"mY,OM.7`Z,etSbT2)6.2^rSP#C:?"l:O.Lihggpp]#/*FZ-M"CdaK%6G<l"dSG3%grlq=4Bc=(>$a`l\^`3V)"W7Qc;j`Z%$$U/:Ym]Lj7W+XEbS#fc`oB9(eY[DYWO?K;T-d/+1%hqoue$Wa]EnM#SE8!%G9_&B3&]eSU`X5hN?!qe^Yu9[SDK\&M]c[&;9muUfn4]GHT]0Hr;i>*Ae\?t5PSBGd+AMhY:@K?1]5D9eJcA9Ds-dtdj"u0ZAVEB%&'ufH"VL@]6-gtKbI^PA?sm^YdmaT5a80k$82]!7MG9l*eR\6P';G$6Z@"0glcTD#K%iDPdPmM@q;c5WNFYZs5<b#dI-<1UX`U(4%9KGrZll8sU6QZY_gAO4H`NH@<CkAbEXmtHQ:NC/D3&Q!5lg:I%Z<[?C9dIA--`aL@X=R"G.c(UJV^VZm\Hik/5VL`Te=r13ZdOu!%X-ce+#->O@3N0S9e(t3/r5u3$2FU<B=90?:BlN^6g-;k%1S:FLP34!o2V6\K$`k.^.S!K=a^/^AC=U&g+]`Is\)cTBKf%&nc19Jd%=ROM%JLtVhAA(k!f_IJa@4j_r?^160QNra8VW5FD$+,&Kb5.Rr0&3(@:,"!Z96mZ3T9XOD\R[qg]9c.\e\&J>?g<Oc`Q^QBqK=]V%1)DZf[=GfH/BM_F3;Mc]i+hVPY-GRP>BdaqATsuYh#o>+Qn/)j$\cIC7\`6d9qM@Eb@E6]Gs`hTJb35$#"ic_/jerHo$BP_,g"HX%e%,I8_6SfsM\Z'(:lC<o92C'(dF6+$jYGU2JZ-mNN'XT<j,>j'UtrGW,FtIagHU3p_T$mBFel+EF.i_sP_mkoC@g\ChcNC'+XP3&%DP3Qp'+T'lNkLrg3a=^f;SlRcs'QlGfTu"le&8W9gQe2I"Lmm?/^j4sj6J;,n$_CX5k7tr9_]lC-8B>,o8$sA<T!B'Pe*"k<gCr&%DNEit@TM[Siu-&u+"YuL1@K-4Zk'u7?LY"4.HA-N<HM;X^$*G]_9nCNH@:Ga4-_:-0]p<s[0)LZNEsJ/hCk'nP/H**N8SAZS)&Rd%K0kD2k6\REq(7*A[U+[(<V!Tn.3*mj^6d:/m7hBdS[g]<^A%CH?CW'#'Q2d20/6+Z(Xk2EG\=X:`U\d#"8SU^dA4.^H/lKJ?,&?$%-WKB2/'#3#I(WK=-oL.&T=?ICn(]1fK,,+2-L+H(eiZ@28Wo'R#YD/aF,)%!=Ce-u9C2_Bkf^ff"%g@7l]W@P*GFVimH7R?Yf:8k%2<I_<5OVY6p[7jG=DF0ee7/BVLcOH*BXiGp\LXfZG'_^$?S'B^%33Rfg4GR#jX!SCA]:t&.B>,jM8@R6$CH@Q3fr6kO7,P"?$3ot%N8MucP#/[eJ\'*!_Go_f($3"[dj\L^Wct5/\mNJ>Ah%Elpb7uer`Db`+.%FMje%OdB`M)Rpe7Q:+7iF7_X1Nl&-[g%n`%*k;Hpe[%U*O$ID*RiqQ\QjA;Z`\VMn/;_+JN2Z,]3)qO<f4mg,"'S$&G<$m8s/I'9P[F9Q[!U-]&i-&n_#)%V\OZ1l:V[.066tM05GI>:,+0%fiOen41,LfK4]WC$0".a+J5]pQ%Mm+1V#2$In'8%U%IY7S_cBTGGOPjrm6#jAA`RRqZnN4NaR6cVIrMN2TA7PlFj^8ku"Dl9qKU_%ifPjUI\9Se%]32TcPmOcps;.r1p*p8q!$3W^)MJIe.+@:)4j=Rd06RC_F7k=Si8eB2;=Z0Vj4oQ1Q:%UQn*4$A[$(pJ^^nZIrHfi%RHo8K^^JY!af[s,Zg(Vj(V"slc!k!d7W5RYK'KVHEqe2Q`5jj\@ckPQ7S=)m5UaAf'5P4r6@1Os=11cC^rq!/S$*V9gYMRoqR3b0%,qF!.D>C!1<3,8RSQ25GeO$b)S>>>JGV<@pX+ge-4N0ZW[[*`,b0m+JN,SB5^nsmb=ZTbj0j@o:IOjbA#P6NDeIOU'5A&KW\/3<r%`]?g;`8ks5,3Yir+n4q<1u.7hcCRalcWYU8SH=q6k%pF5q_n`L&%Ht>hXEN-X-+2,kEhI!iF;n?7^2B!a9UVS4VtND0:tW8MeXU[%SiKM"EGo@ToosHWMsF\Kp7'QJr:D6Xo?L74WdVnCl)cGEGh#t&Oc=sHJL[Q5Dl'YgnetT#5I^]WqKTGV8osSA4aG\EcAt']Wk@l5%6PI9fN^u7>LQ,)FqiU:q?.F4mFSi_-?!V.Q@+:*/V3\'P3]WQ1hkS[o'uA#`KooE=mG4+Mgi5>#+;hE9LJYbtI7d/i5P[a[Z0NQD%`oXi_Y?.aCcck)CN9:%2=mg)Jfk]M5KZDUsf=J96bKHE9D[8PiV=1b8r\1e9g3[&,bf`M9GCCf_grU[OAZba<=a64>\\^J1$njUs%j%d*Kjj(g"C1])K>.UV2`f3$N?u&:k.]H,J%3kBli455?!imM$[j]I3(u\pKnDC(*SEo7*0?7(tEn9!\`@PJm<tX>B=hslnV=D?A%-LO4qS1N5$APM(N_?tX&_;*o$bh"BKpZ!dI&,H\)M54r:[6a7!#CZu5f`bM>hcfd6D>&YEH1c%9NV>S1b<Ag^:ptG?eC01olKVbK%OJUG')jC5)Q[R:?<OqjIr4B1=m['`om+7^(Z$rYehtL(j1afbCk)SG=I*0C:O5osKC-cGd+2rbql<(G:>J&DrMnMbX#AIm=E\-FQ%rIe7RXGc1m`g;[Ib\&a)dpqXJ<&c7J[^BB=`WQu.m9Pi*n&5$.To]u]B,(9].PVjcN4oITfPdN(]tqXP,4oo]'&WI)MdH(97.]?u%R&_<8nDoE?[Oiel?B%"./j?J/7_USGo[c$">L%Z]F,tu/FLT]OKmL;.]orJb\0NU'^&DbbC/p*GA1R2F*@ZE&m$la$^X_E@AA#0j%b0,eC/9aoQc'./BqY-8r*G0J86+0l&Zpi"JRCMLuQfgFu[AThOO&fTDI+_r9g?BC5U%YP^,n8;P\\,Zk;J(H2KUcqcZ@tl_2P3"W%V\`ge0IKB/J)DT@.kRlgai$PQ9Zl!UeQI$SlY[&V5BBgZQh]tZ4mkNs8i/K:4T@IP!ZDGf"nlJRnMn(HkB7.CRt&&PA;;P-A&fPJ%o+re?ESoCRO^-k%DDrI,\:9`=/iB9)8=h(j.bICOo%hJM*iO5n?Uuf,RG:dYK_#lg,AH]J[.g.rbqqGmn.GF88-TL2l/3$u3ZCc<%3>rQ*L->#'fuO(`Widi)fZ%p&=l4\[XI6UJRdQ']-!cZ`NAC<A5PMcgQ/TsL<oL<npp`NjVsU:]PeY!E;S1'QDTE'Eo,VP0;X45(%]MX':W];Vj@3#_4&\/F.R5K1M]lSDt.6!NT-IqG2b]@Y^ck$>$Q7$$0d<])bBmYV!kl"uMhukaSI9bQmX".k>Ig')pql_1_289.8%^GV4#T%pm:N(23bUoYkcB?DQ-OT#i.pRh*q<N>il>^/Eq"h`9UKu/=kf>p]?i0F9CZT&0s?4"3oeKATbK'pH*]h5A!s1p3#+d6RC%F5I00?4"2$bS?]7,BtNu)JZsXH3^XLJDjH;(;(8L!S#^)Gf;fF2Sj0'9^fd4CJCDq^qaaa]a9;lY<d'CJAEc/$g$#+_5ke+*\;O^%kSad=(qe;^JpnRcGWcJ0e-6=ffhNS2GU3A#R"#\*'gWZ.of+f>HPRhLNP!<e&d,/g`AuS@>;r1&6a.C&mL\aUqgrg3@'!QG$dZ03%n"cNE+4iq>n&j84!GL8b(]C@1/*tsSAK]pV:U:S0q0N^/<@<Vrce3T2Z(3GYhJrnn0>J8c*uPo*]0,]SQ<H2Aa_sj\3/OMEO6/o#%RAR[*l`.ln,,FA-[YX0[%B_^ZTLpXIneGVF?a4:hG[6[RMh:bR5M[(V5b'?YDmuYBKCmo&Hqam5`)Z.daSM/JV9%Nn[9C/k7oRL_%i"qg7%5[a75^\^5k[D1fqNR:IN[3qr*(tYA4!PpWH$Xu.1C/"lXMfk6V_],%$-N#H^_nA6+HE*iDkk)Ql<Z0caR)_s5rkq^'RoDi%djtF[8`4-!IMY4TK^3sZHm4=l3qdPnnV6UAV6Z?9ZChS:@5dS?PrUn^K!$cAU:lUkTI+uafa'@Nq=8Y']3QP^?\R.<radVhAV5rp%G,J[]1VhEO\^L+<,cDAJHRpRM<rMeBrff0^=?ko/8knGK=*K^6ZRcO&j4;u_Epb\OO=hrl1d5!_:I!-+d`K&-ko`+La;>Y<aL5u9%MTO(u8U(Un;!mXt26*"9gqd6/0Y?C!i4l4+,Jf>`k@`+EmjD$%XQi-3;F=+,3)B#"]\aH%q^L0Aan'Qo4@Fdm.NEU^lIuGD#Q)XO%f3AJDIYkWKU/'D-6!=DhXr^nd[+7ctAdW>D?WT^!eIiX*b#t.E8UY,%a/LNhPuAisR_LSOb2IdNQ8f^/-_FA:;L'r4-2]rq'M,Lg%YO>&^$hiT87I2CG[s'_X/CBIDbQUIGIb/ariGMcr:6B`^g:e&@Mk#oY,4A"UK"fZHA"4S=NQfDhYWGe7N@nu^#ok;>O"qG6dQ-bP%7s2>lrQ)]H?nF"qA>p>n!bY4)klTF`CLha2FF20Qc_##^AB^?!1oLH2n$RbG%RbOLZT'W+c$k8?#$;@GEgQ)r8a[UW>"4hLr$K9D%"Um)*kCEr/N?:t/2&H^dD3g=QO#e%QCkgukmA9s)H[XPggfQO"T/'$XBnr@T#)8,_+tBhM7V>Sj7$KAk$)+B+H+N6Wj1Z;P;=!dp%(sk8+c't)kcHiZtjd,/+:NKXhpCsL'=<6fIbG)-Rpuo<95*d56AjBt1]>i[n:)Zh%]C"JceAFj-PEt'NN>=7++P;j"!-HL-T:\n]%=7_gm=Bh\=B%bEQWr6*X<it?B2IW\3$[R-^1TN<m>AFV+h?1Q-D`r:dNJ.DqN&(SZ[&-g-X4kYg%UhS`HXj36iGPJnO0+O@=Jmn4%!W)^72m3+]M07H/f6V'UPt3of4Z98hK+Z[[U:_t$5;G6t!/FOW$$ag/U"`7UM`/$JBJCVq<"?Ud<B"L9reMfb>O&/HC12H:HhI:r%NdH)PG^_c(J2,!s_rF8=k3to"4^qOJP@/-Rm6AAeLfN2[B<'ZJqa9D$S>?8n2F(?V..$HnI2e8;<bZ0"A-4rklb\&U=7V=_1P5aH%Z&s0+$oDoC5(=4Y')tR*?Um?nr05$nqH4.Z9^6]kp(Of%Fb?OM1`HH5-_3V!MB2Zg1*5OOEVSoqIiUT$cq[fK-[tK$58n.LhtS[L%BC;+qf2D56<_3EPDdJs;$A3/+ASI?)oYT[M<C,)[5$nMH?Fcq/1=($B<Y,]dcrIt%eq`?]`B,Jn@Eg6&lea=D;$h4iW7;2elo<U3%5>bkCD534qL]&).c>8H+N_s/%@I77dOZBrmonZ=eMINR!+AE5<fSgJ`CF[T."KChITW!'sCorA$(?!T2<'fT8h>Y5%k4Md2CfVLT%8*&JC@#8X6IlKB6G&:^68EW0T&F4hW2?U`e4!t^h@mT,.iCh/BQ28!B6=&4MHkTHOc`+6`0tl:V,"qE;W'k/-%4+oaI!>RYMS_u.%']#a2cE8j[3]=FWJf&?o_+G2X^NL!Krp;C?^4"!N2#3u\F9(qe71:nPU@<,D63EupE>S#Dmn#qD:)tiBpMQ#L[#jLnCP8^)jQn18%:DEe%)40Y%k,(mn1E>P7hpWr=;<'k,AF>'STMm\\VN0l#gsB#=r:*uN6Bi5?5C^3Q@.>6KX;RSB2OfF6R*gbGBtSc7O]SKk@n8=\%Z7<jDEK-+BMS:<W'^3\CI"Z=o_09XsjKE`X4RXoY24;m^*laB(0;3@=rjE@!J6=`Va1PR0baQNL8Jq-C7,#f<k<%LFA*8pi$Tdqg%`j/?>2d`f-oFke-'uj<a57N_R+u?M^Y-G"+#@r)mQ`i]C_r0CQCkG?:^96d-=4OocNVPDo`HRPK$)`rNZ)CNFo"6.@;;m8Mqe^($%"DQ%*CT[!dA'qn[=BMIlV(4t=G9WuS9MVrq_6E(s(J*nQK*j<UVC&D&c_,mRDWa:h27La</0^BB,Wr0$8Ph_?#W`DE#dp%[rWO$-%YC[*3(e@JSY+uke'f61G=R8&HJ:-B>XJ"[(l8GR@c:`"V_*ESZO;Y#(/*J=Y!'TKsK*oENDcMY':I,0,H>Vd!m+Jd<Vm8tVh0r0$%8H(dtmmc%UoI'4t7o2K">SgEpOIu[9/8E$/"qjmcHG=e`f5=Cc=KaK]i+R'AYmknthh)8\FSao>@PNaJs#+_YD@5&Xhf2@e_=8I*%@P)q@IsP(H>^)u_\QtS[pa-_`q<_q0h[FCfD2OA_gT&3^hO8:5baO<nhQ:'7g$/>.j[S*/Z7H',Cbnc/_?$a]jenhMqEC>SJcY9P%q;<=&qsasKDKHs'TDmihl8jV4=F&asrU*Y:5m;kBAmkiF#q?47lbX!X#8Ke-Gn31ELrO5I$JGh:=P0uB$7ZTa"Eg*,mm.,/j/[=L%ofoAT]a?W*"To&\#kWSHQh;N#TWtE(ha%EJTtMeSTP75R26f-Oggs;Ji.8)BEiK()"aDgr9j#4sJdUf&qCoXtgRnVLeBk"\TmH5h%OIuZ6,&$6ols!:PW&_QEa.NL`PlhKYXfnPPL!RBeTE:P'V8<QD&laBfKpo5tJHQ_;B+/o'1t".XJG9p%<\TW.JegGYO$Nq8`#WK4%"qXa!Fl4^Mi%Y_7Ck'hR97G2D$S'ft1-dar5LperFVZ+3'$H`Kn5p8&jKYo%Vu\^&-q(N8QSip-ep%pE0er%jiO!S`HSNujJ?5]?%hCq@+O'#H(Z%aF-IDiEn+f%\cCg1#MYWpS@Q:6eg_LL,a/;k.<3SE1@/1YV'D&=JO7k>TI6+7=*kS_R,A^NJ*[Z=OVWgbmVO_p+i%1WSWM7p&eoiXJ7cqhSggMIr%`g&FGcA1q&n\l73T@95>qOmOBZ"a&-%p"^jY%>EQ`W]akFs44agh-aBm`L;J$p(>Ila4DS)[Z=N+%4]b?EAG_0o'pnPS7(/.Y[]Q+U1R;lh=8!0J#$+VrLho.Tp7S/\=kLiGV0hk9b@9fd!)R/_qnCc+/?<-SYq3oergE3I)p<u&b[l"c%Z<]#>;)a!%HhE>/iU$T8maX+Z%>EP-pM(Ab-CSCH)56mS(Yf[ieXkXKJWmcU=b0u\8GDBebG'IM+J?,8/;pd.J#7ScN+F`Mrm,\i%k#h?THa_E.Q48Q&8GDBebL5e1J#.MbN+GBDUjI6FA`%\2b"CtEQGn3O3st$7$Ho.ihLUH\9.]tt*tcmaQ50.PrK6Nu1R82\q00DO%cWKmBrr,0e/:&'19_[fibBCCZ]>UuhU\Ip%=3jtaF_1/dY;WZPT70pS=gV,=TPH(dQ?Y2uC*3D[Tl<Mu$bGuRinYRpPV2/4bL551%m?]Hh'$JF&Si04X["Dr-'m"+Lr9@#@ZnJGMhL=Hcqe9E`aXQXRmO7V+bHrojI2sS^rK[(V1BO-@eLp!f"e@M(CEr5ID4J7C#P0uK%qkBQ_g/%W]Q1jm]f/2lq?2Gp=r+_bq<AT2cd_9HPli0ZVl8!W2oEuDBFE;Vnp-gh_[X[d9K:On5^Ud,9l7''RmBj(s5b25mc(q,Q%Y:e;<GT?'8b!XOa#_b?4r9?')$YHK(`31fB^>LN4,^sm(p*H+#[M-F6Oht,]BjX$ij:9VP3j1d!:"i[Ih;6j&2OZLij2khi$F8?p%JRE5I4LA`"r2WA-([i)efIUV$KtTpD9UX/Bh2]'?Bl/u1SHNtrWE/Rgg"VMVb=:`"=B0u"Ce\Kbkh8H41e?"_'KTkZVt->E"'St;%+a^S0hV;HkOaO!MR+-_YR<b=CnQ0e4kKB"3Z[)14B=_(Q)$&^\`CmXJQYK/1#emU&+pK'Q0HaZS9bE"I,n-%<UqVLJ6Nl.=&VDu7%(p"7/:M7KV+!*YX.X,$RX%hdDDG[=?b?A0<3bLm!6FXA4=up:6:(4+umA:ZNDp[1i3SOe/gkKkcFCbuj\=,HkmA9ch2(^R;a/]#?%>Rd40or($PVpn?kY5a.kY'oK7W"MqmT)I>\[h`&WcImME[/1j?<mFiMr>o]n[Hj@%4k>$5Y'-AB./EaHU@";\TI[Kn;i@\^kA7)p%>$UGUB1"i4ibI(*.rNSq[MG3cnc.?(X7]-cWa#FFcF0Zqd7<@NB%M3'MsE*8O)JiN6:[Qf-I1;>iul]V/R_O@o$1>".:Bn'^n-`?%9bY<Gh.Uc:G*+_%hX=GO(rN!UY=E:&.a3<VnZon1mEW?^I2KDtR)/XCj7.9.N4rqg<6W-/?B/l!Ym/q(]p1BeUR6V2W7+[*K,2E7%jBD)rq-B:BBVUpql5+lXfDNTecZ^Wk.V@$WJ%rTW&fMK@J@".r3t`GH1S?h?H7NXT7PP!U'7.>:iU:4[(u*Ns3t`IfO?ht4%"l8.%QYdXX_!@'S>[4_:=q68`L0Rm^>4fZ1&T;W;reDi^Y(bCMLs5`*.p(QAm'Y,=45'?-<HYIudJIbb8Dq&f$A7Z-&_]2#!e\sYd+^nQ%*/S(p,H9@ka[[VEc>^5TOq7Pe;1i7NIjn=VZ=O1Ip8%RCriZ0=-EhZU*^:&e04?MT-du_jSK;Z%J2F2cgL>T3L%iBXl5%/+dIW?c%9Ir1g9G=PRrb51]Kqbq*5l]B@jD7Q0K1e"LP27:m]k.hdpRTNeL0#$79[RtYj.)^,<Nn[:`h&p=K&5r`D]`fN)gSdb5&8aEPNej]%GnE!,[?pU)I[tho#Noosc8c7FVO;e>(-!p6Di[NAA\$aL!CpFaX(bupo(9BbZBd?WIUR&6/S/RXUYCbj]m[T_9AfFHk@J&qIHe-P%X"RPT^\<0@gV,q2288PFEdO[2H9Dp:Cui%P_mu=X_hF5sqWITO]<F[&);[/)^:TH?^stYg(>9e"\:F=m?Q_,!WdocI8jBl]k/7,[%B-R(@0b6n-b_$BbRfH;Ek68f6FNDqG`:^i;F5n<Xh-gQQQp\IZ2lJ21b91^WCbgT:"JE4eK2.!no@_/3G:'f)EqglpA-^T@![iUQ%[.:]4]3grM+cQJGFRAc=2bOXVam=^i:JF:i0!14L#%g_P*C\p_k1NoT/dt6o$AH[El%oh_-l_Ea2t)D^h?:DHJ..,4\%^Z5Y1A%K%5`Y6Gp8?,N?*lo(l4#nBRB=q4FOPI6bKSO+)sFo^g+"mo<1YS'*F8M1e[^"0'(Er<?iPg[!kQ,<MZP.lh4=XRqF)5)Ab&)>rM&R^%GkMAgkuU*;pZ@fkdH\SM#'K/HX3LlU)=42,jHU4/#CPbP<Tc[We)sB=#`8ZD?MW\Yk4Q9\Ha[;,fc,9@C?3\*F%mF9XK.>]NHUl!%/Npd!?Ik6[Fp6qDm.p=o.(aEC=h<dE5db43F1+Lh[6?Wa<Ao0(>-l6!iVdjOc<9]f%&haYp>lT5BeZr,[<"7)2a3=,Z`Q@'ID!A(%%OVdaeuX&?_Mg?nci3CX?[]]blhn%ok:G3LCuV&RUN74BP56,Wg;msCSA^H4L5qh2-nY=>=]n[M+k2^pd&qGU.d&a6ch>aHMqi(]%pM:qBZSDm!MtQJQ3K%(BM0l[lcIppB>iVFCUN;_XEb"i[?_"H1EnnnlU>POtS8%&U`D5M5`QiYpS;!NhbWX_'3NL"rl"VgAI2*IP%9sSKoCe[<Ae(@guCYu_G+)Z7UAN)=o/Vor<?8>Q&;]@3cXEj/KkE3)!a#]3Nm6#Di`JtH#qCd`nBfC5/Hi?6Ko@MR3`'8bC(ZASh%!-WgHLr4,iK9[jd%mF+gWdahQa1)(aI'=,GKD!(3DkR+8I'@hlZSO1]JgJ2E:Drf@>#rSTSS*:cJF6J?Vs$ttW;F!Y)A0Zn?V)30%hB/]n[J&116+L@Eq+;E0#O^4:]m.u:I$mOY97,PXN<3XmantD:FZ#[bl8?Q%iNA\tQq*>tUQaA)E."8#1KJsLHb[rG_Pk`\5h82d%8AL*BGlWr6S*9L9,@Ua\fpNSk[_VloB9.Ok*Ws43MHQ(jV/:SD?uN_*,51,_cHCQP]"8op(uW7-Y+"20<?`qBOD\\#rH?:(+.g>O%eVI^@Y"Yoa8'?/#=+4ZAEH/<5X'>+PC%]Z<^+'h7os4D8@X-BD97+dO2\;$_Gc>-t@>E#Z0mIrBKHPK\N8?5_Yd%Q`<[9l;@ZSd&%ZW?-F<j;-nH$'?[\*t+2eS\h4fe8?D.HWe;p6+()f.%L.k/p2Lrnc;NCQMD7GSFk6KciVHNObTiSF(p!na5=c2IGft"@U0!7OUA]%?&ib4:KJ2k_pQZ^jl'=qhA_J=4RI9JM&RVt!0@)q`5T'D5/uF$ZepaXfD<TQr2^lM*u>]*)n=GTSaW\c9(Di?jp>V)5O'3Mbii-V%3BO5&MVlJ7cjOnue<QDGh]Ja&`6VYub1BNXo[Y'Y,V`MKc*4=Xn%rZ.?re'"@)A*ia!LXUG],6^J,_B2lUS)M/<AY2H2U*\qJ%%G%S$d5PI=g_E[BAh/s)6tp#bj4L1RqhFEg<&khQYDm.^NJ,rI<`8#aj,V1/jL?E>ri:R6]</dYBjg2(2?jFq(=oJaQ'J?Fi"Kg@Qou%*p_"/'s0XBTfs>]XZak$Fom0JoIN5D_ra)Fb.!)9_@1*\Lkel.Z[B?hAkagmD>*2&S.Eq.3iTc_^3iQ2G+D#Bg"@elV6B@J*c/)G%67&i?&J(2[s,Z%<Z+g*DS)nU*$bj7mQgWt'a^A_IN0SSBb<fC@'E-\/155?ebp,&eXiS]NXB@C3nfV`76sY3F.oO'J7?!\(?AaF+%54J_Od+0BHVT>Wi&D>%&>@[B:[@`+.lb1aT6K-dQ.KJeAW(A=i,I27*',\j'P-`UB[rY%#qe4BG)U;_1`40N:Ds\8JPq\[3<PStN%ZB8WdBkqe;b3diNkV'Bhkf%\a:?P]BoG%qSO#IkDU\+2)e-,#OM-\`0;_T>kQ8Yl:mn),i^:u4gb@C"O3]D/Z>=Wd*DWjp+Np*?2%+&&Mnj1:>05LF]d)/hR3!lhM[\K<Q/%Z]p/K.>R\WG%AHf!gSsNOoM7F;@i\A)=;h6ng6pR_:kC*p2n!^Fk"/O@[LN:AVprH96I'%Ed2farIrqX>j:Qh<d;`q7[".I;5\_]4.\M_SD^?C7Q%mjb0m!8lh^%P,/BpDZIGlf?,/MmEA0*fqGkrG5DY[:*RR0=pjcg7F@:no%.?DMkaKG.ki=><I*E5^&M`W$cP&M5mQ.?9*^A]X[_jYT4o[Ij8\iQo6aXUqU#j8.=gnF4&_Dqh^;>fm_GL=`UN]P5jP.tMR%1$?b%#s`]W^.C2hm#/Co##M%oU%OSj2*When2=K9S71H4NQaLSZNVnZFo)-qpuHlng:&J["qmf6OR]R3!bQOp@F;ZT=os?;judD?mJL-n%3&4)CC[q]4(@[j7hte"J>SiFECC]+Zo9i;m6.F3(<*/I,gHbbFBNt<.bc9kY@+cEV]1;s?STe:GkF,Hq:2]B/%>$QGcG<gB113_u%_0k$&jm\StC&#L/#41T>ALek5Sd4;uo0VEo!1bB.K<#c=8?%T!A/+Mr</V=8:r-n7R@AsuGg2_KbNr#ZO]Gh+6G\X@`ngL@2OGqO%CCP(/goTmRBXTp!)DEEIKaC'Y,W@O9ZSN.`NkY%7(82jA%V+`QcFG`%%aktUq1'W6YkeHVjLj3gi#k&2],54K2*l7'GJPGJ06\Qu%K&lT@_I+L3\'023O;r0jn&>ledh*jD=a.5kOBgFIK8Hh`i9b_?kWqIS=I4S-=DLGK$4ec+>!m>7?G#f]G6H%P:>qcaXR/:DcKk+G%"3E8"!^QR3+aH3h*t0F`.>tM:P%Q^d@5ZmZ8CES]W1o-OD%(tt"@[e[/+t$o+sV5!i!NMYW<libM[ra3fNE9e4h`XX!jc<P!G*?R%:%irbpN&Acd$FjlL@m/YM@P>UEV/P?_qiBrD";Mb-lmZ@g)=[E]12BE=dLYVH"2!jbH]*Ca3r$UYl3D:]uST=hQB/CYDrE:YaAtq%[qhYnB6U$dA*Kf"E9\K6_lL_I2lRY9:;#+:LI9aD*VdX$]X/o^V1q8c,K&OL)cm-@ESSF+fZ+oNTl<NR.I.nmQk2C7DR`:e9E?XG%%T`sj[@b*ugRML*Iof]k]'J+@>MjpcFaEq)Rrdm.b:H\F'j4"W1G99D'SQkRW?h5ehZb4[OKb.t*0^<rUSc2-!*1X?V?Y;\em(BF%cMi%I4EpN`EiYU@NP*UK1W\!SS"t3V)QHdI5/D/\3<U3`Rh(!UdD5BI$EF;o?Xisds''\2.Dr=e$U_K.$))>8#"1O1],I.L'E^Rm%qK^eB!+"8H%I6cm$OMMK\hJd@H/dXdB[6!'$h?DXLa!TApD.:H"8tV&M]1*sfRE)Y2WrZchiV3tf;OoLpETE[06s=M*P,QI:Dqq4%Hjaar9c9e0Q!>O=3LkM<BPRj`$8:Y=K,cRpD8hOt%e@f0iC1$m#l<*Pho9*c)F^E>]M3(sT__pb/m[S*<m5%HG+%.PUACC#[/\V*%kI.;c<di7s>JYr?RO`W(H/Z[,h;1@S=&`^3IuE%2Q*d;;)_>`j)I)E$4hF26lmRXu4qk3!H?P:JfjX;Q)tiQ.S<Bg`[of`W1qR%(%WtFhiI_Qic]@@M_76aJXd'kX$YQNf6nriik]*O]T>%e%dn]q!6TPr"Aep?9Ol`Pe^Tl3H$/F^Q!%XgD?^>pB"d.dJ(B"Kqm[3@]M%9)sD=7<2!"mnJ*-HW+6`2s&0ZVNpshcr]Bhq&KKC\lJG?oX/_EpDfia20"^G@V1)'][S5I`)u>cTeB!$:4R8$27dS/';o[bNpTO1%m)4FZl<?"**d7,<r:J4nf&i^3Re;h"O2k$8kXY9q5.I)bWV00jA/9ZoK>8=Hdl@]jROC!E>)/N*CBAF7?_+CQj.@\LFIUC3Mh)lp%Zb/*/.Ri;1m-093VcAu&YEq+p'mrHaXC7?L'#G%?h-L9>+WD0QmDm1F#(tIhnF!1`YSSq_,5T#>N(Ck@Yo?)f+>_I&SKa&&7$+P=%c^c8#XVr?^oI0DEc6:40-d5fkR'ggD*oZ)@C\5W<CM4Mp$O5O,C]("5g`9-&&kpP'hjoCus,7.(3'@,S[bF,,1H^hH)GO9>-QC(W%eTgLoo5[4Rfd*mj!@]I#]4,%uhaS(H@PjU#ff]!:g%<Uu0M02L\E.D<>TTHQhJNpH+Ca8EY@hak#7/=aN:CL]Z28HNcBN<"?K(0i%o,SXf;GQ?>eD,E!<*%E^]7`eb^!&uECV-#"lU39<fL@8Q6++pg0q05*1PtSb;\1oiV?AJP$,gf?pn$O$h>*bBp(N/X&(@DD?(\Q$%$18&_r2!MP_GLjn"[tCOh=()r/Qf-O-jDk/(;DN[Dkr`tB3HRl@LNS0g1:foH8Me^")jTtOGfm.2_))]9Yu(7?k`WX!kG=$-p1RK%EJo'fV59CM`DlcRb3VU[k;9ZROrDqhF8+8UF(T^tog=,QqDjSP+E(]]og=7LSk]C:D.`,i?QOW%;P0$.8Y-*Z(S,0i@Ild&=Ra_^%.u?[M6T>'-J7)7/J)Zm9m+Q;<GF(>^AU0L"23dK,Cc\ZFbNBS,h,!$#oA4hHhI]:2J6#I'Dli8Le5=!Y^AZllLIZa1RlO>S6.NC%%ems6g*7/r,RW28]++dBEhi=b:\aq%2m:L09L=X"UA(CX_YBVI:;b8"bm2r4f@hWXGmGjoaVrKCm^Y*nc/Y"Dr<>=peq"9PlUI9oY%@58V3!aW=..U5rmN[\UOH:&rs$F4/ZG<BqrZ@+ENpTp-]`0&tk7b?NgdA^4.1=&u@Q79Fkq<Ofb@p]3ADY(E,UMZ'.A/Mn(\,RMW%^,"$FM$J;_T?dr3HS.Ir4Lp\0VU*R!FbqW"KI=J`([9c.fEK)ImN3)*!pdb"hqf/m1Zd5\$aBo49_kosoQ>>-b'4WH>q0o&Y+B7J%DilWh=t4>3>^Y/hlQ'f6mNDd!ae.@SU;'s4e_MpLQY8-pOd\'9`YsVLJP'Sm[T/B-6s1Q*5hW]*e:"^teoLP%Im5uS2ZD?2U\jh.%L:;Xc<;t#,Q6D[)SO:2L(D4cWIQP*_j4b%iB="q#$/8EUK>]uS"Ve*%`GkA6.=\[jGM!dcci7P-hIga,>OLA\9;gje#UL=ck$AfP%?QO!V'TNb[Y/h\lY/'1+"dp@o#^9l#hQq6mRi.'-,%sah`N*@Bbke$><L@#C-3I>7qScY)j@!,#W&89eNJGpMa'<1jB-^tieLd4m%Q7]Ts*2>#79*YH1cR6#B,?neHVZ4QQ<\9*;<k(1M?:_if>[M3B>MM!)Nb*.X>@Zc;J\0GAL>QM:noaU31rurEg+p[rM2RQTr?OLL%s-*:MrQHK_e^6./eEk2]Q[\haO3"c^7.)ZjZ'C@Za7,mb9d#19HG#QK3,dtn<9405*I3.Pgoqtc$.#/ljJO*g8($-J+anH(9=6o9%6k6+:"3g8Jp]8B)F<7,mS9-(0_q+O!]TB]arQK*W9MCWJ#-.#DQMQKO`/<N*rCARl$r=i<%/Y"pL=IqYkT'KA\!al#me?TSH8G.j%aAcMa7fYM"NCe53pk9T/n1e%)UG:+FR;.%,](Q@"2#KUjbHU.W'5?X<\=`W-]736LS[-;!+*!0-0T-b;'9XMmHnOF'h(?t>;%QKn%)'+kuFAR5D!?fD'6RF^\)q.B)1/kA3%'S;$8T/NHT$iJmT/%tqdMU'RPukm/(`))Fj[rILA+5)m]1,RMA*$BPLqR?YnoSM.HBL??%jJ)'!dmQhjo7r%AnT06A];n/:XYT+R^Tp`9hP^+rYBWYp-LB6mD_M>RLQg7Tq/!4>+$gEbq.&JA:kW='?\QSPj6ZE4GHdUNHHo4G%.T\h^L!/q?C210g^/hucJKoOp"!6:q1VblK$l+<2EkOfB)I;EH(#89.mtJViF_3TjS"JH0")EM1^5*Qu)]\SKT0iBc2N!rM;]%Co%';tm!@`WVRmZ?n+B&*-/DeNbGVcroOr-Z/,Hl\*!k!Clg(":rf]mVDY<[rH]s7ssRQ%**iYMV^R6Smu_m)k1r@]K?L>CjiZ,`KR:%3uZ5CQHFD;&8:38;M3o<b&$iQ84HV1N(%OI;J-I::bX7M-_W4#O8r.iF'l-`pF"qlhq,n5I"!\[Df[:[KAFc%qI+R8A.8\%de)Wu%nnN@uKgt[.:=5;G^(_?'3/Mo&5m1u^[lFguYk"35NNp3@8>0Voc;/VSp)n73rS"8sbK6fui^3Vu;qXaeI,3,p/>l9EWF(0CB"j6`%eWjU=Y4UK]oF/gD37XMr#CP9/:+n]8@@3(1e'-?s[Hjrl!<4ZGQXc#%;ccnZl3$H=>t@aMRk\%5#'%G4\iEo8_q?-q8ED6YHM`oP%SelU2gl:[f#gCA;$0LJqY)jWOhT?q;ljHq,f>V4li91UAh6K+idrluEf#5L^?OGC>k;iDnI53:g*OW#0+D#Z8cMj2t]YjLa=nkVs%A0"eJGqUG@s1!'Z]QedhXZ*(mlSp)'k1hONCuMo<\@(HsR^_HV\=%K/eGc&MeZn.TT[ne!+dI%kPqPoBn&d>1G8F8?MQ4.0F<*.u%Q.1,c1]*Qa4_PibbPU[f@I66+Z[R%9:H"TE_!K/.-t)390`V8FQd(JmU\*mCe-E%0QH;7m4ai3fOA^kHAZE5KOn@MH;$>CiNn)L,%11A]?ft6hZoW"Fe\#@8s):NcPf$`BoD_l5T$CYZ&""*t]9X`Ud):j8@TP^t3c1jpK+,O\6WL-lET'#arHuuIb7/K580RV4;A.YiN%]60;n`ZAsl.14,$P.:?-\ulK$Mj=mNOed6@g=6,IXP/Xu))pqXMrR6LM7%aIb=D<L$NUWU<k8E>1D\B/9.&dRQM$=<hHAtpo,P$#%)rV&uji*c327in#rdo[rfT\7pS@:#+rlVPA3HSXS2\5=8$Q!Go,)O0dq)M_H9BYDJPV(2CKtBnA/&9eBGn]&pSfS.Fk3ut@,,R_1%/N$E)gmk'FGTUEg-fY-YotX6_F[&g:g!q)sm>Od1R?@cRZb__f4eSQ1o=/c",IT_"0??8LHg?Kh./d#ih>#[VNGS#820Y?=a^TGR%0C%A"4lT_8b^H3#Fe>9G3OmBM_KR;R,crTO\VDi#2mB"4D_MeC/5R)q.i`0KO,$ncC0=YKUS`#jZbH<q\b\s/ma'2..8B*/Fg\L\%b&Q[HeiMI7d<,n9\A!dS_*ShoK6TQ>pe<'h*(Y9WF<,Pd`4,4GP=2J7P0d,S'8RWecZsomA3kWrph5J5esn/Ek#SXW\!lLIV^<m?%j9SXtQIY?hVmD\Gc-=Lj/2:QP]mXg.2rEjF#14c2NU<G&]cb9Y[Cn[[YbE?2aIJmZ3\?oa0Ag]?=Eu`+D)IY%M`i$eMeFVAh,?Ki%i_VOV&#_%FE)Ac"cJ^p%k&mQt]Ws'D<cBt2-faO-rE6ri2#iR!GQ]C:N@N$:muX`7EjTLtodn8LJLJ=_j%o5m]b]`<[q7c;'3Siq%ZF6&ma.2--+ODnQQp'>SRfp7.?HP[9T3D:$>d/9*GpC&$JNu".d$ZUjB*t[*P5ZAPFf&Op4:l#,c4kpL)h]qJB*r+$q#HAi3`D-?%(%pH$X>:#7C2O$k@%Aa&3-bMD@%Aa&1Y.[C-pbRU-J(KQ;?%#pgtRl!6Rh)uej0c+,KsZ2'tJ'"=a0"]o9jlqRu[linhE447SGYf%0Rk[o;CaLYLP5qT-[n3&h+>dN'M,-Od`cGe8libs8qP'GI/8e-B3o1g,/7B3o],.5`%7@V8`O^^4_n\nOW>q.8YH@Ff?DtSD$rXt%S@H%0\XE,g>=<nDnYN/qo^7>5AL.PhK&k(D>8/!FL?6F-,VQT6'G=bSHgiHS/Lm"!/2,",/QjNDGDs32Fj\:9`i9B099*qJqQ560%_WoY8!#Zg$03$cli`TOgM?kN]>2J"dUN2RXU&O&$0R`'RF,C_KXLJ.^:q5>lm:Bn+jSsREH^S#'Y\hX%0/JOcmA=rO'oc'mU/:t@%AnV&4C-\>Mh14e']U[6=gkP:>#R*K&mGnUe&'lF[<[835bd]1I.1QCnVq3dn.NCSVe[6S='nBmgGP$Z<;AIk7OBM/F*lQr]XH6a`%SY^Pu*i+%2?bfa]YH$2-0\4,jR7Ehg8UGg@K8?g=4*`ncH-Q#eCRTTUR&nRrJfMBE:48p.;_#8[Jf^)!Es2<f:W_*KN5;\U8A-g#%>\(1"jY*-mD!h+:SO>$3/ZXgi1X_&"B7M=WO28D$:Ut\^7"2[UI"'AE*nL%s<<'Z%ZG3Dk,`a`c\Xa=_Cg.a8(0_1k8(+U*cVNjW%,'*/^D1)?ZhSN8p([c,u-T$d;`ViF@W!u3'l_;C69dYqg]!4.2Bl*aOOe,Z$4]8lK]\-C#a'4%RZom3b8:q6X7n6eJ+u`q[c0[-2%mquHGQ(<Go==fKsM?nHIEkaSlRd.h!>[Pai,moi-2j04j7piJ'_PS&na`rR51'1Q9pOl%]e`6XtkjgPFXoNf407Fjj_!$NLIh?Gp%LUhZbrGmt%58*#qRsEe:S]5'\FnipJFO""")b*Uq;Y!U"TDA&;!ANt[lQNrcn=qbcEaNom`7/HIEG-N"fJ(ac?a%)gJXIVM*cf$p%>g6_SB&j2Y9Bc`+k`)S6f$!K0+^<gF_YQ^HEW$[Edi34:J`(9lHR*d?Q$loY9Z'u-(GO#_\(DdX2J6Q@l*Mr7?1(@.BrP+!;Kc?4%?sRM2HdT,ta5(ke72i^VVnPV-[kk/Kl1e6E4/$O/_d*K&[Cl=!/#75tA?[e_l,lU[FHh_N`n^c%Hg@df\T3,jqkNli/)SUA3]GXE%m"SBNFFSK#_n,A4SUT9O(sVi)HBI&h><\b,lAn]d>PHn;r,/=mc7_]H#fPT(<,)^eFg&VF\BpG>5DhI.lEfIFiO9$?Rd4X`CHm,7%PH+'%@FP(]>;r[,j(g]TnBhCikgF\6$qu]P(]BY%>5EY0VE/kWA:$1;l-I$Y?-7T_;O:3)2s_7'`32qXhjX(q\qJK%U/O;RD02f$%/rAfLNou6O+DbC)eXue)"B(TG#jcu$^WRYbrjj=E#I<#QcfmDeI*UMM`lZ10fL!e^pGX!281Ztdh>Ee\J\,Z=b(KWUl1qlV*O5I[%Dm/`tUZKbn@.d17l\8WHU$*q3IaUmJm.]u<2*H9YX5A"tQ$X&u(IF&Q>G3V$A'*nV]qlW^YnifYFZB'N85GqkW7Z3iEfJjjgGG)B%WK%Gg`dkJKgK%M>pnUnsh9f&DD!/dKB_:#i\a=WRYOuo62&:UJ4$'NVCi%(,Ea3T8o\$*VfiVQF/iS/p1%PukqV&2UHYuKk'We+A%f+uYuGGH&.SH=1coUIF#?7lf9*X2b`cT4#OUcYP>djrN2>'ceMKbJe`cJ7@+]dR*?U9\PJebbj(7EJl1r^J:"?KY8ZE#k!<*s]'c%0UkM/gFEH0$!g^)\)omkMs6.r0aobLEaP^#%R3/o(N+7de%9t;m./hT9d#rOq%qlXAG5P/hGcLn/42anm=/[CpNCUbh6#'&]=G,Z%g>+u;F._MiqGVUsGP:#=l7V:2P#-CBFVf/ZN'cQAeQp6Rl=fM#`6GT:qHK>S1:aX3a$:"Gf@3/,=CG[=2ae9jOG/O*8"dg[d)*_#%"&3D(&$.H>Xf:$rK.9PgfoX,s&$dlDeNdX=":_4^E?FYBCf-Renc=FdAh[63F:C'9GSd+WWIh!_TSZAB_,N_L2:/Q/_k=$&l.o)"%dVT^U9MoJ#"\fXV_%!1BWIh!_TS7stJjE@%CGUIBa!tc6#$NE;4C6[P*_7$QVKKBE=p7XP5SLVO[&AR'ZdH@_Ju3=V+hANGV1#aq%KaagcRXQ"=j8i7He"n0@JnRt\cud%dmK4?CTMn>WG>/?;+Qe(\oU6?>Y/Kl>nsU,9F2JE`VDX4^>Jkug,^1Y!O>6u^ckbXo#("Z;%^[81jZ;K%LBQ<2o7Wf4+[`1@EfhSZ/1!4!je&rqo,=16moV3u.Plm[BF/3`uQ8uo+fp<"GU:=iAfpDT)omHjT9[pKp]\:kRo+7a0%42hb++qct!QARaH?(';6\.gRK90+@CJh^hAY#D0..M\(,7;MH*Pg&b+9BPTap$/6beFWR<liZ\:XplW]UT]i:DnR&>WNPT?+2`6S%3dWgWk?l1NVXS$#UiTpT8-qeSN@J_of$uh'<%IdDm-Vgf,u#L^_/4WA7rn[T<"QgE:\uacpLYJ-pQs+`g'CjtbOLFrW;Y<-%3\q3%O2\LqHi2f5U!>or\FD1i#\h'IK8A\4bRG`,=<6D+6/<)MK9QReBcl.A!b3,7V1$,IU_q%HI<7]0a;AZ<6ce,+YF"sF[fb!r?n^nG%eVONWBqO2&K>"XQln_h36!i8(?'enYhoeaIXmaALGR#Np'cCe]Z*m.0\`peCncX92NuLmjM:]9Q'aD,%8@r>:a*ng66SHF9\(h<8%B3/NF%g(o>4Bo[Q;R8XQ!l+9*'2O'=?<[kUaaRq4DYj]V6bPMogF=H"CTZFdFp)6@2TQ-G2nH_ie#TL)5(2LEN$4V@)L0*IHdfP3%S']6_)P2jb+2-s^hJ^!,WI7E1Ybpc(,P)JddLQ"K/\D>@fe%[9UZWRPR94KYQo9pZ_G:9m64OD3jp(-ieD-gIBuWrsqd[+eXNK:I%(X"%eBrZ2loZH^SCk6&;k&K^]B\qN?)f;8<K@bSeNA#4NhBmRBNOO4:B/PN_4(jU=hX/hoHd$m(TdDJu*&jukX=Fp=#$@'kYE_@F%K;hGD&NE:b4k(a+f:j6]qq5Dl4R*-iV_Gk'I7f"HCkl)]!s2*0'T\OqDUQO6kp8lEa0t$-iA-c[RBXimX^VIA%p@41iaT#qU(=UM%AZJGh]*LoN)]/<\WkQiqNB?l,6ORcm5<M/qib8-fM#SCBl\m%ToaU%Wp-%O*mdc)D1UPr3#[QEa,#G"Ip8*_r^.9Xd5>L8L<ADiX%d?ZCK-P0SQ8o6(ER)6]=1^KH>l+6]oo>U"SEW5*;3L8O5S\&`:RUCV0rV!HUV5R`hI9:lV@Vt3"MLK!D]dPG!RZAIi)O2,Sib@"P%Em68SEZ],_\*1fYJLO\GU-T@nCH;85,k2uF^<2`?IM2KuFm1-ECTZQ95%Yli/hL'e?k/K5.\^sAV_BXgeX44E0ZbflQ(CH0BIr#6%4b(^@:WD#N=!I5u;(P8YrFD:^QHLnP#Ei-eRCMeP*i:/e-$ruEQik2-UqcZg'&68HVt62-ncH_.\b"?I2*9]i?K('W3?n?HkbjH"%86k=YCDi:;#OQW8("d80b$%bE/eeOIZ$NRTAP/J(6*+12%#il7(BC3*<E^BD7=]AF#I0D6*)MgnIqTdM8oJXlSPaRFSdq%7TB'#U%:\L\nCrn/05nQ"7qr`.:.X1qrV!X&&<pJuaCemK#n7\]<9o-B@g\G:K%KPYVFb>b#kKAeHG[E^E4F/8'_E+1&]2.9*Z&2m.O8(5"%+OsnD%q"mIpLbjVq-Cl)m!Rc.,J-cCQg`+cmHr.-X`4GD'VOF`;,+HL_^O%baK@2/Ajs_Aq=_'%4(?AHBeJ#6dXGqKl/u8PZ"V:F%M&T$`1Y):!<-kTm[jLP3r#Lp.gajX$>R.*:4W6rPJ)6u^2W?:as&%i.p(JBZA,bZW(XAHer?;kS49A&_;L3:XpI&V`XP4Ul%bSEr%c*PXTTMe)J"RFNsD_;Ff:T]nk7/;%dJY:0Am)K"Z,Fhp::2@*WC+SsScmc0t>:G')Igh#I-@`*((s8Ti\>i]Uhho:SQB"MNMNTUU%SjUmNWkGW?0Cfo*AYQ5G7b9<(Q.*DW<&_isK1O@/Dc6H>,RgHJ]KT_Dd\191jlls5/3F4,l$.&GpZAj,nK\:H",LFcP?";Z!Eisf%A671k&1+:<b""14;ElNaeJ=`o<q82Se4NPFEd;7M]kP-_ZTQ^/(]+EcVtQpY+"ILLH`FB:R+,;C4-A_eQ<CtK'(O'KakCoET?m'e%j&;9gEYci6L;N3"O%<D"n\_oL(jT_]r_tL_ZLfs['D#f=0DjEL`OZ3c4$"T"^KLA_&kL3,EIak*PNeY'qijJbk!_=cT6_cbJjfi<%5ej0ccp?]%Qo-5&V(4N.:EiMR0m`=<e*oLmMT[?U`olg=HeF=(QEJPY1$(]G$A*A%p:lL=d%ME/h/Nja5/T%Gr@7.&^%gQ59A*<N%S4D'q7/XDLjrQ^)P_f]Bn!X'<9]F"cJ[KlpP)!XY14O^8q@,Lbrgi/(4#>!J>ihsW%'+@ga@3T%5@iBsDEfm\=VFPAef*:-,q5c-%@A`<#S(Wf"lg7qkrlm,J2a*=Lf[qcg*_Yhb./l$^(M5T'Oh[GmI)3B:41UdF]N<RcoC:=:4C*M\M%.M.-&&L"pO>r!jDg/ALj^0%%r5X;?k*G_(#T!3MMkN.uQPIu^beN$*!cF]N(g;)5h`pT)J9.-XgcrNU?2qP-))?ucIgl)_ri_Y.1+e!sEZFkj_:H#`d,a$CrQf,q%N!ui%L;K95l-JhRA,6#lmIg>Iha=a&FL8cj^QKP)*R`9Z%8B0-N(\C6IMK]!EL5h79]k`EMSIgr*"M*1kPaf>H\f6g[.cJCh;/&,%\V%r+a.$h?k'7g>A]P]\_gdaH"bXt65B]@_h"NDTZ%n:JkPD@Cd4iO9O769lYm(.jqKL"!.`"?@L?tU`%4-b[LJH0TTj)p#:<62_%E?gV<LE&AfpYDW,oE&ldGTrOi9oe<DX[/-a:F:IIg:S[nO)84Y:3qq61T_q1q/JXXHIV(&%=6;Si`=K%:g:e3R+,`f]nGEDS!AN\%A"+Jti?QiaR'')!M7B%j5IKOCj3T.n2f9mXS(\LXOe=TcmNa?=g.XSAoAdrgM-[AoMT"gc,G%FC8SYS;(_='CE?@RR[$gH[mEffX%4)Wfp"LTO@nk^9adeC#i7Qfr31c3gD>IN]n>65!tD-l#jiNlPt-IefQ\Ol"MCJgQ9FN$&qNpjb2/3iRV(;8#"iW`(,[!D-I8$p)\%I@L@PK>46YGR<T5%:-6o3"24hiONs_LY'=n_/O+c4>6-Wpf2Ro'6EM+#CP!t2D[YjjMMJ5%@B6#L>RiSq,Z;CP1UA6Vkca'p$K8)%q(R".c&$\jM&W#sF(`=&9[PjBqIFm@#r;mYZY8cS(_<\K[/'3]0:khV@EG1[VAE$Q@Tt*d>N:`!h0?djBFmc!!ULA2F'or4U()9u%B>^7,0FBP*8bfE!6VgD.d"^1%8N6'`(-VpqCjIqlU`VNI'743,?,I@`KoUJ`<uiM'LTQ6U,n)SI^dehuDYUAJZ,B[^$l:fgd\Jc_%ShtlZYi3AN'0`faYdIlp*<S?83Yo-6ciI5_#@?EC1j97N26EbYT;'SbD+Q]YE2_aj_2E#&'$tpQ9t8R4X)FA+gbipjg0Co)YmjHf%Mgl(>8NPj,*LL\GJHSX`beIhD^MqF#ZrqVl?##!NRg+<CkMHhf\:*<]-%+K'%^j-qgBP`T"K\NedBQ6X%e1Mu%1--\_kCA%JB_XC%fE;F#qh.[=giYaC$>_:)k*"H23.)H*!L)mr`1OmNE?&mFiSdt-oN=.Y"pcYkK?m`C,dkH8FC9\5SqG'b4D2Ws#"SsN9lSt-9S"b"%;2-AZ4Rj3[`J-T39^!Ri5qbNPZ/Kf@Ua97f[MDT%%K?JE#Yd!_+:,2'@DJjn%O>9a[ZU?"_?<Gs`'8tIj!CXJ,ZT9V#m_>L"c(f.%Wd6@E%W&V-/Y5>7l9\93J@TRe4qt'm(nP6BAgCAb-RD#GqEj6h8?0N5:4OaHs/3\r<.u!E^I3sKg/+f$E5n4]^1]j,$AU[)E+(_J%\e?>h5ql\*:"XdAL/Ja36R#riR'T4#86$`i0M[<j@O?Xm'o%>SAgMko@@&IK6AKE>8sYieP,WE1BLri6BLA0pdu@!*Jt9V@1)2`'%/3=gs=rid*0TES*Cer8&#uqgd_Eu?lhFBmI4olVLp;NP`9Ecl$)\qEFD).9R(-Vtqn<5]r,ZA-diF/sS@cNSE"Yk[c##6RpQ@p`d%$Tr>M9rQ5`<P9Z")9ug185NAaXMVN!2OGOa9JVH)kQ7?(kRYoZM,e?nO_9UF+fXa9)f-CIH;$X?U`)fJ?Ru]o<SXnb$=?._LI)_:%J9&q,O;J[eg3/3I*]h"_g/+f$[X_5+p(=Vt;Ul[PM<cM-+@rN$fS2(II"J.Dlp9B]?"m5m;5fp;N@=Zi*f;Vd/k7Kb3l3/MJs+DE%l&WEo1eIX,,Z[3:^_4Mq3sfXhZ0FZ:;$a\]'o0^W9Eo5ha.Qr)OB@3d_Nk2dOqd@PYmP+^'rPut;0GL3g@uY(#(oma6Xgd*2(E(Y%+F345=G>Q<ciDXU\kH#PKW`,!"=2u'Rj7&7+TW;t`\nO36O4[)6So&_WWr)%!=%mpnIu7/gn6RH!74ELaW(qn+;YTnd*[#-Uk2Q2%W+11K#ph&,!sD#`jbc:@6%cHci+*\!%7Mc=&cid?K189R'c+S[J5S,?/<NJW%>]NDn/c_47&gD2!O:Q%@`:m6ReRlh"@"(/(.B]d%:;i0CM!,d';@VgtL^MlNdtAn[FqD$s#':mU[fCT70GgDO&;efe8>sD6"@G,8!"u9@'g[5W0"m2h.L6;!^*Gp.&f!6e%B'd_0R\Hs%.\(lGo'dqu]FH5;r[BIQ8NV\Q.]<[n-GoDnifHP3<<6J9<?s^t&f#SA%22Br"5?YHJlJs?n:2:Oh+8e*QGA5D$-oH$,1QpsCniiX%I.9DQ]HCLQ%A]]VM!q'/"h=pE'"0D515BD?LOF_POV#-lKW9rY6.'J)k>8+o0t1S(O_Vlo'WNkC2G,_JnJi1ATIjs_>65g),ZFe5%K%'l?+SnDk($1%($gQ.:8>o_AA-apMOAH+C$S)86'<`XS$JGR8iHU1G6UK>=^U<!qP-An%W-Yrncj&egg-DT?5'Fn5`$50rKrTo6%!PBueW'`ldAcpfK[O%USq>uB^h_=8B,ZI'(@%/b&:o_C)fESH@#lt[>-l>c'S#5rbMH(?!M#Dq>OB@4]":#[m=e'CCX.UiE%Aoc+%!JsfA51jIL$1T!m<G2E_(b?Rt<>-[2Jacqr/kT,+o$AWe7T.bMO-r22#)B!(*Wp(3>Z-qA8Q@kW+<gh/44K!_eaZ(tjndJ];Ul@R%64C@L<)Hrja'>lK26ZVjNiVt,$<7cL\pH%9<>5mg(bQ+p,Jcn9U/]+#m;,g.Pc?.$g"a+d<?7]-YtJPkAjn;*94HFEn0N-IXL^#k%>*fAmPN5r`-->G>I&jb&=VEYsasG/ee"X=C99L$f7;l%)863Hg>nX69`HSsfK%3E]PMm-._HG86#gOaKgGg_[Uq%aQI=<;EP,kNM%oso3:Y+c]^kM%<)MHX!&!LH2)C/HQ9>S=.FPKO]-6n='Y-@]85Xf+%_S8q30RQd'N0$2Z_Z0.9``L506d7)IJUWUqme4%c"UWUsC%eg8_$.RT,*QUE@H"tdPp'!6&2R!2-/U283A^a7B3X#4,pXU2.8>`u1s`KcNXOqgE<dT%n+<g4"jTt)FL;.XFKkE8q)9WfFBPcIij%7ZFu-=$`F!FmGc,[8<l:[Hs&]osj^=8Z]K=fCCPN<Ie3\%CdZa'.uca/r<T_kNKc/Z"e=kif[9;2MkF=&um?n,bT-KU`s3pYfB1p%C4[nRi/rpAe\uC"@?cZoeO7KS_3U!'eO@QT6((A4'd]fqDD'%1QQnVZA1Hk6N<EN5;`/%VPYBWKdNb0;Rm\JtO(9`3'9,sS&up*a%U@h'U,.>k>f-?uHfKpfnO+]!#'TJnO&up1Q']A[]VAcC#2(nVoVP4RNpt[0_lIE[tO(>92XT=JnW`rsjGU-58jO2V57kus\E@\sP%R>U.!10-LMWOBoc)NR99lk="-GU-2/jAI=f7j8[r#MPF5CkGqr*hHRi@(95!_7B7/f?AR48=ZE^V6)k@`$q(UbSp+ES-$-2<hi1U%'HJp^\F`=`->JK9O5q`N@^NE*OZ^%^:$[p$77W<FI6A4@k_RVEZ:Emg*AQ96p/%9rd$_l?Teo1K'Jmrr'W8BHA&*F::-F@OqAtJl%1bP%X^a!QN`hdhtGU-#*je1B:*_B:N3@Hh>8(,niEE@B19s#>;L.B\Aim&'qUo@MW,k4EoU<>ha;`pD:9ceMiGUQD9)9JC)*dMgS%m_eQcSpE<hoQVWW5qF^NO@Slkn[[i(,C/Qn#Eq[K']-\H;'*hX=9@Whnjo@H;6M!E*m%@-2Tu3aOZWe\_Am,.#un.)Qp8h_M2LW9%r,*Ru<1!N#b!5'O9_Gq8c]]Q<\beK<;OLb9P9Q:&%m;@>R?u;/A1DXiH;^UqVklm=2;rN;VGAttp:(dc-^e]q\[0d5R;//FWTo[@%7DH6R^A9*Rd;c:ZZp)W3-X#KPohhT\cX2$HI2&YodkK+P:GUHnE"B6M16qdgda@EF89L*N+757_F\M54p.;,.D!p0R8Z(2OGD#c<%;dl)^]A+d%C2pGg:GUJ-\G+f,R;+"WQQGd#gdibtm`kK'VC$\_3W4@6Q7D-?C;;4%MLKn@+S[3^?&/"[5"RHKj*ZMU;DjTt]S0-Z%2.:NS_^DF@IXB=lp`rikQh)Le8QE*O<q/b]R[efr8ZJMO?F)IP8l[t;E&Pa,WJ\cJYs(?C<A2JI+eQ]QB6"d0-aDsfYY@<<<QF("%PYYbrQFuc[XsQ-Kjc`fS/^B(G,Z_#MkKJ;dX/=(N24qgeOlRLP:L]U1/&g'+L(*&Ic%$<eqD\=KJfk$COR;X:%&<Dl[B8[OAh0mr%D:HT)p6AR@*a1*KX"Y=A4nqei$`J78(`Xb6E'!]s!FL-;%_4sF;uT3_.QW_iP`g@R'W%TC2+>VH77C'/r_QIVROcl%V<.pr7B%_$%78YhS:Jm@8gJ\e4j7*gPa]LVn;)4#(;3[$";\UOQh@rE#BJrFZ1.k8<P`.h*'IDe^'Lf!TY,3VT^t'3r(A<W[A;W]oPYB%ENfp@h%78bnkVFX=V'bs<^1o_`KR5S(k-.Cq4UgtT5Od$8>8<T-%%n0AOfV1o/#'gnUaj?2[.2gQ3/>WPbMPT;9N?BYf'dG_2cFZW-P&i1;%UZ?f[j=!$6+ur7jPUMQTOWo[XA-@_J-lL\]3D*"^.#O1M(m:WSKS?3M3BJB59#a7iL6C4hMP4SSQt.V5.An"TAd0`>P*qDhTk)0@%@ORZ'WYe??oI>Sn>K_nsA9PC*.%-&I#tegd.u'44"r'GH]F'Oi<;m0B:GPFpi[:-)7.HJbIj4\[k'Bo&,]h]gIZh6h'L0^P7>d^J%SgHm&1,"n:.%,i`&X:L"V?ffV=Ha.>o>rG9P.C/u6ciSaMP4Qu7)_tX(SkLgRJ0T6Pg&_J)+s$J<=C0p\135r.9jbfeiXa&PVqn;%(s8;n"q2gHSn'8F0I0$-LDqq3Hr_L[a_+CIP^JcC7EH?5;3YnE'Lg+Z=&G2u'1e"Dm1i&eZ9>$49"+I.8'1J'i[>\VUGtlc$n74"%O\1M+A;$3,-l%rB(eVf!.>F#UB8WBngm_b$)/lDi9#gZUMGhoWMP4QC@k3:sELW,bA@/:E-lJk]3(cZ\.[#rl\Vd1n1pA/QQ/'q1%V&&NgUXX$DEKj.&.#q2@'h(tTh4lAjVP=hoa`NrF.%/@Z'ID4fMPOcD<3_Z]f.*)Ll"%b2C=On-8uCG[8Z>R;i[>[H:`Lb`'oJbs%i'VLK%&>;3P(=Li;)6@j3(epb'M$8!Pi=)/el!J6_dnY"ACsUrPRQS$Nfmg:`DJD7-ojnS//:[s&?+S:),aHS,t#%sUL_GIEKgkT%.uoc9BuNq)^o]Rg#0[fPaT0!5-lLB5*$mBH'M$7R#K9Oq"%.'mbRdVk,r8X)NfmO&MPF_5O5q^WOeas/AkXY6Or7P_UL_B4i[C3,%-TOe2:F_C1k-9H3XEe*e;:^+Qi$_b&'M$9"Tf>Y&>/a@E=]$.bRle_hZ7/fo-!L_q;6hKH*$nfm`DNomTK#QP<>7sF[Zoc"g"'(A%-/5/WULZGhEKk:[.uod`%)l)L';RT[G1%X+aUY-+.+u.2*$m](MPF^&5]N#^?7:hsaVDcl1AR\)8g^GM8'0h[j=$GK;]I(sO,B]C%@T7?39\_+XP)3bh;)7[D3(bda'h-6/JYFR#b)d#X;_3g"A-tj^PY=q'MNTDF78bn[VasFW+;IJi'WE9*RDMrLV:NhQUL`(_F-KkO%CQ;;f!R4Ikd%Dg[N@bi5W?I(p-oFuO*2SBHR\aPBTk5_ke(BPSA.5AF.5`u_84l@O8sYY1Z&5Ag>cqNb2/:VlV+-f?V3DfrF-ITB%C5u1:>0ToZjJt:5NK?"fWKFRM-oL#8,c*umR\\F=?B^TlkUVfogB3n?e96Hg.@GUX84mKL.$BbH.uL06G)]r[RJEU[8nKD!QBIY7%aAOdO9<j`*1/f_MZeuNjaXfTo;V!rHY`q$6$Wp%#?--"8Y"=qB%j>=0q+)f)a_+#IP^MU=9?CgKZBT__,YcB^9[]/QAL1'm2h7\Q%q*pK/-/VO^VrSdmns"NS8tM2aAB@d@%3P)(r*2daP+Ni<;sI:.=\=,Y,tlA+XCNd5fiBpUP6$Q<A>2E<PZjePQBK?1`DSJeUf^59%`tV1gjIKa/Gq=VZ.='^$A1;e_K4HEV4G./n=mSI?;XuLF,uIf=Jg)XHr.-%@Ff^/R-s9f+j=".:J`8(\b^eb&RD)T>-.@d0ULa4"%EKj/C.ZT\VA&V;[XfX!DVVEIdW?He$-lGoZ$me7TMP4S%6W''VTdYe]+W3^G1;oq98d:4g7EGOoUaR,+;A:Fp@u@!k\4ohb%,WLk%P2S[J;)5Y[3(aB*2+bo'AOTKP$<`LUN%S-V-0'^p8]c3b78bnh=-8`+i0>Q6j)Pl+abX.i;DOD9Od(ff<?rmN?PQ/S\5l$r11!tE%PaXti,c)h]'hPC8;,'qD*`S8dRe,ScV'J#\8ZBd)7T'F+>SE:kZmk#o5al`7JGfXZO9j"%7h&BF@GjNQ)ENR(hBk+ZBLkQdC<BCP%PF>h-e0O&e,rNei6V1!-N_iT:N";0&,bt>Q29C),785O4:Jm=7^Q[.m-gN$8ab`#L9l^kA;NmViPLLj*f)f]M'5<VujJ83>-5f)r%R7SuF'f!h+Zm$ibK\+/<eddS)e9XOsP?K7]@Zm]H78,I*W/+$B6kqGu'X/c.RIXCsUfRAMQXkn<nraDt-sfff'ZE["J>64<L5clt%a`*MS,oJ%.Zm>D$$X/_jr$=#<q#\Z2EiMFrP+8D2]HjC7,VR:(&]m]:k9M_&h^<\@rnW*kjP?$<,Thab-J;cA1!)B]78,K95r"R^%2cIpGUYI+NWOP".9/;f/nWJhR<4jL:(0f1LN7(\4,bm^A0?KS\`Chs!<[LQsr`3T*1?MYL:,:C&APP##=_1>`[T[6;C8+oY:?nq#%<dBl[2,iU2ZK+fH2ou\+<Seuo@TA8K/5K:m:9mi(a\22H?cbt3Pi@4[A?o>-P"]I<?BU.g`Chs$TQj&*.MOPX</TZ]RHfpI,h#SI%QXlOYnWHS0.UKFC\U^$JH!e?[epKC6-$f510?JtmGtC3TJ=#?','caDH]j`VZRgAn^)3$"jGP@18\V]tQfOVYi$J2*Oh;ss;j*L.%HVa3qI#gm+Ou#.^QXjWgUa6n:,[!]65Y5">P?3p6jM[DG,roZdGtH;j.:/0WFc)Mr1nWbR)+CK[8Y1(XS=!iGVW9$@)6.pQ7\hM?%;GjZUQ"8sX@O2o^X&qrZR\sgjQ<pJ&8X:Qu;C>V=RnB5^\S<U:P3&14e4Gr^VG\dElBb,6e2gC':9s%^ng&RSb+</$<S<S;Ik#f.%NC.;RZJhhM8N&.]H]hqu[`Y1PbFu3heY9%u8[buUGEQeDPrkshMFsFM)bQr%Z>HL;-e\2mWKV-;X40_Lh%_N`NeO2Rg$t33,WfS#%QK4r@dZXOX8m7AuDTPL+&KjY:/h&%paa%2a8od[.P*2?MQ)#\gC*b=NH!*^2EXl-4P)O?[Ua.0d'e.7\<(0D7dPN'm)*Ouj8OeD+%;NeAXMNhW[V]mEE_l$'tbmnbl;DF*38P/TB+skq.'Ih-fX%5fO,"bar1PV'WAF,s5,oIAp84ght8Q(^+I#=/!Cn;gs)07/s8P[`+%;Nat!P*G&"Rj9:?eL!jZcDsN7P&k:;.EUg08P1aQ9QH;T#*Y8skI`&dan[M[8MVbg;3HmH;NrFOWDqRs,G\;m,\*HGg*EG^<8&Um%PuQH_UQAI/Uo'&\eg.#F<7W><##n`h.c4(a9X9&ceiApF02q",ZID[81We'<<R)l5@$Na9/4Wb&9X6ccPr$N[I9"]@9.*bSP:U9J%V+n8Y<8&UET1YS`hc4BSXFE!BP)Ve*P&.L_P%:nn-qQ=DMN_SW/3-;1(lFMV9;WOt[]kXOjLL_BO^tP&.mfCH5>"8*m7tVkZ<]"!%8[d<;s-t):.8m_B?&DVLB:"Q&c``P&,YsSeS0UaLPE[=c<g/If:H4Ps,gRBmN$M3tP)L[4hi`pDcbYd',Yt3C(eL;,,oK9$4V]3`%Uo\#NR5@s',SSmhO^u=70p53:-q9@K$cPXlV1OXOdlWGLAGSkPP"^oc7[!!t`CSQB(GM"0mgBt(ra!W:nubPROq/^D,l'tW,KXRd%16R%I,U:ED=>H%e,pX_W=%jo8ZB\FHPAC?"`(@C7<9>I\:b$OLD*4(DajV/4APVOh/e]W*Thp#um-L[`8Tr*QhBY1@.W:K@=d:qf%Qo;oS16tZiP)S9sN$REf,pgZH`Klaa-8QA]a`pY$82:ZT0p7EB<I?(PD&"/7-ssq`1:gR#P)O*U&s]`O8tn(q>=hf6N[ot/QusiT%)(2Us4;a\D)+g^o'I1_k;iDuKT40)!B,)Z5\u-B:2@N#GZJeDJP0JmD,h_6-:6J>Wi[!2d-r*YlR:7Gp_CA$<D#hOGl@#B48[b08%+j"nu+sbk(<.lOO`/9XeRp?\jqG8S,;P+t(8Er".#YE;b91"g5`KH<ngp#ia)%eFa85B"R3g(/hP)eU6DEp^4hH&'eS>;El,U[+K%*Qcu977T,1<RHqf<E4,d@o*m\ak0K[7l"gYdZKIl<HKL!4;Am9fhG12C+<02Oc6_ZFC_&fRcdBD7k)Ot/9-U0D22`^q_NrP8nJ%q%p2)3-I_(!-XM!Cjr^Zn!qu-6aDu'!0LjF")hS]BLL>8KEaO&=COH/SQar?ug?tYl!%g2&$K,dmo)LNS"$2\H#?]5PYUNk`CM'5Bt%X'8"b0?oc"e)T9O@(bVDj2LB9!K:1CYHTbIS/+;#j\]W"<c-ZPg%n4YXSldXbdrdp=gbOilaH6$D#Y_if%$/[Qs#+i2J*sCXiINt%\f5_M*uVBp!S(]2D1'R-Q&SqUFZ3pqT,FuPTkqrQX_,e_Q&f(UFZ3q,*uVE5ctpq;NK9K](9'$pRL!2Yg$=%0mD%Fpo^[IWT@Vj3%Cq``=:2QJf^LX#7oog:)n0cs4@e(Vo1MY,`1m3idKhJ^+ZR=:jCS'lXfDc"l#!HW+Qhd:3K][p<:[17;-T`/e(C6pk[l;5<2)!EY%41^qNCT,__lFo*.`/UF2,=pSq3d3E]%<QC'9-,ES$tB?#4bA1Qq=o8#1muI]bN5@_S[\''I'i#oL0?s<LP9FJG\URY;tE&V;ok=7%?F+#=?CV9!hXG)n7t[Ge]>KtI^"*[j_]5+=^V7C5:#0fE)smEMG.:l?p>4a4ZDjH:Y1K#"4)>D'hZJdZ1SjL<_#GB[GC58]M.@Uj%E_Fn`I$"k0;#OMX&Sp;N&stpr>/D^Rjlkb9AW"iV*7&1,,[C>'i(*SHp^>JW4$adEHi[83<F8QePXDGYW\*G0Hpc^,b+TcA!^kh+%P+WtV6]:q]_bO\>U#=dl\7p<2H,J-?Bhgi(oV3)LL;Qo$<#F6[=XW;A0ISKXkdr\_=ShL*%seR2^'/ph8:%7"FZfA8q*R0<5;(]h%Dt<@4qFuU_*?t?X7T6X.ePM!P2sCk#m@&-9^p]'<8Qp*=j%Ag?`ptm>Xs-tPV_*Jq6N]T?Qm4d*T<`FTW,A>3:E+d?K&uqqjHA3_%?m!;G_5=M#?^.gk(lK2f*Am,5\>%-bk\[)XD]"^2,o\RFdA53TFrYfse"+:qG=U^H)X(5&dd%ni@u_#&"-=\0;B-nVQghO2<HpoE%R](49_O!E*b<g'Tb+Um0(,F\C\%edB"k!qbf;PT.TL;"j_2i@LEG\VQop0J<MT%p@nCI8\Aaf6eZ!-r3h1&`1T?>ORlROT&jW/e+%FT5M>JhL/Z^)l/1Ke;dAo'pZY^KCj@Ir>RBec~>%AI9_PrivateDataEnd