%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 522geochem.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 4/26/08
%%BoundingBox: 0 0 545 681
%%HiResBoundingBox: 0 0 544.9483 680.3873
%%CropBox: 0 0 544.9483 680.3873
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">522geochem</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-04-26T15:49:53-07:00</xap:CreateDate>
         <xap:ModifyDate>2008-04-26T15:49:53-07:00</xap:ModifyDate>
         <xap:MetadataDate>2008-04-26T15:49:53-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>208</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9TJPBJJJFHIryQkCZFYF&#xA;kLAMAwHSoNd8VW3d5aWVs9zeTx21tGKyTzMsaKCafEzEAbnFUq/xv5L/AOr/AKb/ANJcH/NeKu/x&#xA;v5L/AOr/AKb/ANJcH/NeKu/xv5L/AOr/AKb/ANJcH/NeKu/xv5L/AOr/AKb/ANJcH/NeKu/xv5L/&#xA;AOr/AKb/ANJcH/NeKu/xv5L/AOr/AKb/ANJcH/NeKu/xv5L/AOr/AKb/ANJcH/NeKu/xv5L/AOr/&#xA;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&#xA;I0i5VkZjusYriqa4q//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:A7B9A1112F15DD11BE4289F06E267D5D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A8B9A1112F15DD11BE4289F06E267D5D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c793243e-10c5-a346-abbf-077b4932c74d</stRef:instanceID>
            <stRef:documentID>uuid:A3B9A1112F15DD11BE4289F06E267D5D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ComicSansMS</stFnt:fontName>
                  <stFnt:fontFamily>Comic Sans MS</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 2.10</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Comic Sans MS</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -680.387 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 680.387 li
544.948 680.387 li
544.948 0 li
cp
clp
[1 0 0 1 0 0 ]ct
3 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
278 24.4399 mo
278 651.44 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0.882353 0.968627 0 cmyk
@
1 lw
1 lc
2 lj
10 ml
39.0801 21.0879 mo
543.08 21.0879 li
543.08 165.088 li
39.0801 165.088 li
39.0801 21.0879 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
39.0801 20.584 mo
543.656 20.584 li
543.656 164.512 li
39.6563 164.512 li
39.6563 20.584 li
@
39.0801 165.088 mo
39.0801 165.088 li
39.0801 160.336 li
@
30.8721 173.656 mo
31.5923 173.296 li
32.6001 172.288 li
32.6001 179.488 li
@
37.4238 172.288 mo
41.0962 172.288 li
39.0801 175.024 li
40.0879 175.024 li
40.7358 175.312 li
41.0962 175.672 li
41.4561 176.68 li
41.4561 177.4 li
41.0962 178.408 li
40.4482 179.128 li
39.3682 179.488 li
38.4321 179.488 li
37.4238 179.128 li
37.064 178.768 li
36.7041 178.048 li
@
45.5601 172.288 mo
44.5522 172.576 li
43.832 173.656 li
43.4722 175.312 li
43.4722 176.392 li
43.832 178.048 li
44.5522 179.128 li
45.5601 179.488 li
46.2803 179.488 li
47.2881 179.128 li
47.936 178.048 li
48.2959 176.392 li
48.2959 175.312 li
47.936 173.656 li
47.2881 172.576 li
46.2803 172.288 li
45.5601 172.288 li
@
39.0801 165.088 mo
106.256 165.088 li
106.256 160.336 li
@
98.0479 173.656 mo
98.6963 173.296 li
99.7041 172.288 li
99.7041 179.488 li
@
104.528 172.288 mo
108.272 172.288 li
106.256 175.024 li
107.264 175.024 li
107.984 175.312 li
108.272 175.672 li
108.632 176.68 li
108.632 177.4 li
108.272 178.408 li
107.624 179.128 li
106.616 179.488 li
105.536 179.488 li
104.528 179.128 li
104.168 178.768 li
103.88 178.048 li
@
111.08 173.944 mo
111.08 173.656 li
111.368 172.936 li
111.728 172.576 li
112.448 172.288 li
113.816 172.288 li
114.464 172.576 li
114.824 172.936 li
115.184 173.656 li
115.184 174.304 li
114.824 175.024 li
114.104 176.032 li
110.72 179.488 li
115.472 179.488 li
@
106.256 165.088 mo
173.432 165.088 li
173.432 160.336 li
@
165.224 173.656 mo
165.872 173.296 li
166.952 172.288 li
166.952 179.488 li
@
171.704 172.288 mo
175.52 172.288 li
173.432 175.024 li
174.44 175.024 li
175.16 175.312 li
175.52 175.672 li
175.88 176.68 li
175.88 177.4 li
175.52 178.408 li
174.8 179.128 li
173.792 179.488 li
172.784 179.488 li
171.704 179.128 li
171.416 178.768 li
171.056 178.048 li
@
181.352 172.288 mo
177.896 177.04 li
183.08 177.04 li
@
181.352 172.288 mo
181.352 179.488 li
@
173.432 165.088 mo
240.68 165.088 li
240.68 160.336 li
@
232.4 173.656 mo
233.12 173.296 li
234.128 172.288 li
234.128 179.488 li
@
238.952 172.288 mo
242.696 172.288 li
240.68 175.024 li
241.688 175.024 li
242.336 175.312 li
242.696 175.672 li
243.056 176.68 li
243.056 177.4 li
242.696 178.408 li
242.048 179.128 li
240.968 179.488 li
239.96 179.488 li
238.952 179.128 li
238.592 178.768 li
238.232 178.048 li
@
249.536 173.296 mo
249.248 172.576 li
248.168 172.288 li
247.52 172.288 li
246.44 172.576 li
245.792 173.656 li
245.432 175.312 li
245.432 177.04 li
245.792 178.408 li
246.44 179.128 li
247.52 179.488 li
247.88 179.488 li
248.888 179.128 li
249.536 178.408 li
249.896 177.4 li
249.896 177.04 li
249.536 176.032 li
248.888 175.312 li
247.88 175.024 li
247.52 175.024 li
246.44 175.312 li
245.792 176.032 li
245.432 177.04 li
@
240.68 165.088 mo
307.856 165.088 li
307.856 160.336 li
@
299.648 173.656 mo
300.296 173.296 li
301.304 172.288 li
301.304 179.488 li
@
306.128 172.288 mo
309.872 172.288 li
307.856 175.024 li
308.864 175.024 li
309.584 175.312 li
309.872 175.672 li
310.232 176.68 li
310.232 177.4 li
309.872 178.408 li
309.224 179.128 li
308.216 179.488 li
307.136 179.488 li
306.128 179.128 li
305.768 178.768 li
305.48 178.048 li
@
314.048 172.288 mo
312.968 172.576 li
312.68 173.296 li
312.68 173.944 li
312.968 174.664 li
313.688 175.024 li
315.056 175.312 li
316.064 175.672 li
316.784 176.392 li
317.072 177.04 li
317.072 178.048 li
316.784 178.768 li
316.424 179.128 li
315.416 179.488 li
314.048 179.488 li
312.968 179.128 li
312.68 178.768 li
312.32 178.048 li
312.32 177.04 li
312.68 176.392 li
313.328 175.672 li
314.336 175.312 li
315.704 175.024 li
316.424 174.664 li
316.784 173.944 li
316.784 173.296 li
316.424 172.576 li
315.416 172.288 li
314.048 172.288 li
@
307.856 165.088 mo
375.032 165.088 li
375.032 160.336 li
@
366.824 173.656 mo
367.472 173.296 li
368.552 172.288 li
368.552 179.488 li
@
376.04 172.288 mo
372.656 177.04 li
377.768 177.04 li
@
376.04 172.288 mo
376.04 179.488 li
@
381.584 172.288 mo
380.504 172.576 li
379.856 173.656 li
379.496 175.312 li
379.496 176.392 li
379.856 178.048 li
380.504 179.128 li
381.584 179.488 li
382.232 179.488 li
383.24 179.128 li
383.96 178.048 li
384.32 176.392 li
384.32 175.312 li
383.96 173.656 li
383.24 172.576 li
382.232 172.288 li
381.584 172.288 li
@
375.032 165.088 mo
442.28 165.088 li
442.28 160.336 li
@
434 173.656 mo
434.72 173.296 li
435.729 172.288 li
435.729 179.488 li
@
443.288 172.288 mo
439.832 177.04 li
445.016 177.04 li
@
443.288 172.288 mo
443.288 179.488 li
@
447.032 173.944 mo
447.032 173.656 li
447.393 172.936 li
447.752 172.576 li
448.4 172.288 li
449.768 172.288 li
450.488 172.576 li
450.848 172.936 li
451.136 173.656 li
451.136 174.304 li
450.848 175.024 li
450.128 176.032 li
446.672 179.488 li
451.496 179.488 li
@
442.28 165.088 mo
509.456 165.088 li
509.456 160.336 li
@
501.248 173.656 mo
501.896 173.296 li
502.904 172.288 li
502.904 179.488 li
@
510.464 172.288 mo
507.08 177.04 li
512.192 177.04 li
@
510.464 172.288 mo
510.464 179.488 li
@
517.304 172.288 mo
513.92 177.04 li
519.032 177.04 li
@
517.304 172.288 mo
517.304 179.488 li
@
509.456 165.088 mo
543.08 165.088 li
543.08 164.512 li
39.0801 164.512 li
@
39.0801 165.088 mo
39.0801 147.088 li
43.832 147.088 li
@
20.4321 144.928 mo
21.0801 144.568 li
22.1602 143.488 li
22.1602 150.688 li
@
26.9121 150.04 mo
26.624 150.4 li
26.9121 150.688 li
27.272 150.4 li
26.9121 150.04 li
@
31.7358 143.488 mo
30.728 143.848 li
30.0083 144.928 li
29.7202 146.584 li
29.7202 147.664 li
30.0083 149.32 li
30.728 150.4 li
31.7358 150.688 li
32.4561 150.688 li
33.4639 150.4 li
34.1123 149.32 li
34.4722 147.664 li
34.4722 146.584 li
34.1123 144.928 li
33.4639 143.848 li
32.4561 143.488 li
31.7358 143.488 li
@
39.0801 147.088 mo
39.0801 117.136 li
43.832 117.136 li
@
20.4321 114.904 mo
21.0801 114.544 li
22.1602 113.536 li
22.1602 120.736 li
@
26.9121 120.016 mo
26.624 120.376 li
26.9121 120.736 li
27.272 120.376 li
26.9121 120.016 li
@
33.8242 113.536 mo
30.3682 113.536 li
30.0083 116.632 li
30.3682 116.272 li
31.376 115.912 li
32.4561 115.912 li
33.4639 116.272 li
34.1123 116.92 li
34.4722 118 li
34.4722 118.648 li
34.1123 119.728 li
33.4639 120.376 li
32.4561 120.736 li
31.376 120.736 li
30.3682 120.376 li
30.0083 120.016 li
29.7202 119.368 li
@
39.0801 117.136 mo
39.0801 87.1118 li
43.832 87.1118 li
@
19.7119 85.2397 mo
19.7119 84.8799 li
20.0723 84.2319 li
20.4321 83.8721 li
21.0801 83.5117 li
22.52 83.5117 li
23.168 83.8721 li
23.5278 84.2319 li
23.8882 84.8799 li
23.8882 85.6001 li
23.5278 86.248 li
22.8081 87.3281 li
19.4238 90.7119 li
24.1763 90.7119 li
@
26.9121 90.064 mo
26.624 90.3521 li
26.9121 90.7119 li
27.272 90.3521 li
26.9121 90.064 li
@
31.7358 83.5117 mo
30.728 83.8721 li
30.0083 84.8799 li
29.7202 86.6079 li
29.7202 87.6157 li
30.0083 89.3438 li
30.728 90.3521 li
31.7358 90.7119 li
32.4561 90.7119 li
33.4639 90.3521 li
34.1123 89.3438 li
34.4722 87.6157 li
34.4722 86.6079 li
34.1123 84.8799 li
33.4639 83.8721 li
32.4561 83.5117 li
31.7358 83.5117 li
@
39.0801 87.1118 mo
39.0801 57.0879 li
43.832 57.0879 li
@
19.7119 55.2158 mo
19.7119 54.9277 li
20.0723 54.208 li
20.4321 53.8477 li
21.0801 53.4878 li
22.52 53.4878 li
23.168 53.8477 li
23.5278 54.208 li
23.8882 54.9277 li
23.8882 55.5762 li
23.5278 56.2959 li
22.8081 57.3037 li
19.4238 60.688 li
24.1763 60.688 li
@
26.9121 60.04 mo
26.624 60.3999 li
26.9121 60.688 li
27.272 60.3999 li
26.9121 60.04 li
@
33.8242 53.4878 mo
30.3682 53.4878 li
30.0083 56.584 li
30.3682 56.2959 li
31.376 55.936 li
32.4561 55.936 li
33.4639 56.2959 li
34.1123 56.9438 li
34.4722 57.9521 li
34.4722 58.6719 li
34.1123 59.6797 li
33.4639 60.3999 li
32.4561 60.688 li
31.376 60.688 li
30.3682 60.3999 li
30.0083 60.04 li
29.7202 59.3198 li
@
39.0801 57.0879 mo
39.0801 27.1357 li
43.832 27.1357 li
@
20.0723 23.5361 mo
23.8882 23.5361 li
21.8003 26.272 li
22.8081 26.272 li
23.5278 26.6318 li
23.8882 26.9199 li
24.1763 28 li
24.1763 28.6479 li
23.8882 29.728 li
23.168 30.376 li
22.1602 30.7358 li
21.0801 30.7358 li
20.0723 30.376 li
19.7119 30.0156 li
19.4238 29.3682 li
@
26.9121 30.0156 mo
26.624 30.376 li
26.9121 30.7358 li
27.272 30.376 li
26.9121 30.0156 li
@
31.7358 23.5361 mo
30.728 23.896 li
30.0083 24.9038 li
29.7202 26.6318 li
29.7202 27.6396 li
30.0083 29.3682 li
30.728 30.376 li
31.7358 30.7358 li
32.4561 30.7358 li
33.4639 30.376 li
34.1123 29.3682 li
34.4722 27.6396 li
34.4722 26.6318 li
34.1123 24.9038 li
33.4639 23.896 li
32.4561 23.5361 li
31.7358 23.5361 li
@
39.0801 27.1357 mo
39.0801 21.0879 li
38.5039 21.0879 li
38.5039 165.088 li
@
0.75 lw
42.3921 51.7598 mo
44.7681 32.5361 li
48.1519 44.4878 li
51.4639 28.2881 li
58.2319 29.5117 li
60.5361 42.1118 li
69.6079 58.312 li
74.6479 24.1118 li
86.7441 45.7119 li
91.1362 35.4878 li
103.88 27.1357 li
107.264 41.5361 li
112.952 49.96 li
118.64 36.7119 li
122.384 36.7119 li
125.048 44.4878 li
137.144 36.1357 li
145.856 31.8877 li
148.952 25.9121 li
175.808 63.1357 li
185.888 112.312 li
199.64 88.3359 li
207.344 77.5361 li
210.08 81.7119 li
212.744 74.5117 li
216.776 69.1118 li
220.16 63.7119 li
223.184 85.312 li
226.208 70.3359 li
232.904 76.312 li
242.336 83.5117 li
246.656 64.936 li
270.848 105.112 li
274.232 70.3359 li
277.256 90.1357 li
280.28 97.3359 li
284.672 81.7119 li
287.696 85.8877 li
292.376 91.2881 li
295.76 112.888 li
305.84 77.5361 li
309.152 54.1357 li
324.344 94.8877 li
327.368 91.936 li
332.336 94.8877 li
347.168 94.312 li
361.928 108.136 li
387.488 97.9121 li
395.192 106.912 li
398.576 112.888 li
402.248 102.736 li
407.648 111.088 li
411.68 108.136 li
415.064 111.736 li
427.809 103.312 li
438.248 115.912 li
452 100.288 li
461.72 101.512 li
465.464 106.912 li
485.552 118.936 li
503.768 100.936 li
509.744 90.7119 li
540.056 114.688 li
542.36 115.336 li
0.768627 0 1 0 cmyk
@
1 lw
42.3921 50.0317 mo
44.1201 50.0317 li
44.1201 53.416 li
40.6641 53.416 li
40.6641 50.0317 li
42.3921 50.0317 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
44.7681 30.8076 mo
46.4961 30.8076 li
46.4961 34.2637 li
43.04 34.2637 li
43.04 30.8076 li
44.7681 30.8076 li
@
48.1519 42.832 mo
49.8081 42.832 li
49.8081 46.2158 li
46.4238 46.2158 li
46.4238 42.832 li
48.1519 42.832 li
@
51.4639 26.6318 mo
53.1919 26.6318 li
53.1919 30.0156 li
49.7358 30.0156 li
49.7358 26.6318 li
51.4639 26.6318 li
@
58.2319 27.7842 mo
59.8882 27.7842 li
59.8882 31.2397 li
56.5039 31.2397 li
56.5039 27.7842 li
58.2319 27.7842 li
@
60.5361 40.3838 mo
62.2642 40.3838 li
62.2642 43.8398 li
58.8081 43.8398 li
58.8081 40.3838 li
60.5361 40.3838 li
@
69.6079 56.584 mo
71.3359 56.584 li
71.3359 60.04 li
67.8799 60.04 li
67.8799 56.584 li
69.6079 56.584 li
@
74.6479 22.3838 mo
76.376 22.3838 li
76.376 25.8398 li
72.9199 25.8398 li
72.9199 22.3838 li
74.6479 22.3838 li
@
86.7441 43.9839 mo
88.4722 43.9839 li
88.4722 47.4399 li
85.0161 47.4399 li
85.0161 43.9839 li
86.7441 43.9839 li
@
91.1362 33.832 mo
92.8643 33.832 li
92.8643 37.2158 li
89.4082 37.2158 li
89.4082 33.832 li
91.1362 33.832 li
@
103.88 25.4077 mo
105.608 25.4077 li
105.608 28.8638 li
102.152 28.8638 li
102.152 25.4077 li
103.88 25.4077 li
@
107.264 39.8076 mo
108.992 39.8076 li
108.992 43.2637 li
105.536 43.2637 li
105.536 39.8076 li
107.264 39.8076 li
@
112.952 48.2319 mo
114.68 48.2319 li
114.68 51.6162 li
111.224 51.6162 li
111.224 48.2319 li
112.952 48.2319 li
@
118.64 34.9839 mo
120.368 34.9839 li
120.368 38.4399 li
116.984 38.4399 li
116.984 34.9839 li
118.64 34.9839 li
@
122.384 34.9839 mo
124.112 34.9839 li
124.112 38.4399 li
120.656 38.4399 li
120.656 34.9839 li
122.384 34.9839 li
@
125.048 42.832 mo
126.776 42.832 li
126.776 46.2158 li
123.32 46.2158 li
123.32 42.832 li
125.048 42.832 li
@
137.144 34.4077 mo
138.872 34.4077 li
138.872 37.8638 li
135.416 37.8638 li
135.416 34.4077 li
137.144 34.4077 li
@
145.856 30.2319 mo
147.584 30.2319 li
147.584 33.6157 li
144.2 33.6157 li
144.2 30.2319 li
145.856 30.2319 li
@
148.952 24.1841 mo
150.608 24.1841 li
150.608 27.6396 li
147.224 27.6396 li
147.224 24.1841 li
148.952 24.1841 li
@
175.808 61.4077 mo
177.536 61.4077 li
177.536 64.8638 li
174.08 64.8638 li
174.08 61.4077 li
175.808 61.4077 li
@
185.888 110.584 mo
187.616 110.584 li
187.616 114.04 li
184.16 114.04 li
184.16 110.584 li
185.888 110.584 li
@
199.64 86.6079 mo
201.368 86.6079 li
201.368 90.064 li
197.912 90.064 li
197.912 86.6079 li
199.64 86.6079 li
@
207.344 75.8076 mo
209.072 75.8076 li
209.072 79.2637 li
205.688 79.2637 li
205.688 75.8076 li
207.344 75.8076 li
@
210.08 79.9839 mo
211.808 79.9839 li
211.808 83.4399 li
208.352 83.4399 li
208.352 79.9839 li
210.08 79.9839 li
@
212.744 72.7842 mo
214.472 72.7842 li
214.472 76.2397 li
211.016 76.2397 li
211.016 72.7842 li
212.744 72.7842 li
@
216.776 67.3838 mo
218.504 67.3838 li
218.504 70.8398 li
215.048 70.8398 li
215.048 67.3838 li
216.776 67.3838 li
@
220.16 61.9839 mo
221.888 61.9839 li
221.888 65.4399 li
218.432 65.4399 li
218.432 61.9839 li
220.16 61.9839 li
@
223.184 83.584 mo
224.912 83.584 li
224.912 87.04 li
221.456 87.04 li
221.456 83.584 li
223.184 83.584 li
@
226.208 68.6079 mo
227.936 68.6079 li
227.936 72.064 li
224.48 72.064 li
224.48 68.6079 li
226.208 68.6079 li
@
232.904 74.584 mo
234.632 74.584 li
234.632 78.04 li
231.176 78.04 li
231.176 74.584 li
232.904 74.584 li
@
242.336 81.7842 mo
244.064 81.7842 li
244.064 85.2397 li
240.608 85.2397 li
240.608 81.7842 li
242.336 81.7842 li
@
246.656 63.208 mo
248.384 63.208 li
248.384 66.6641 li
245 66.6641 li
245 63.208 li
246.656 63.208 li
@
270.848 103.384 mo
272.576 103.384 li
272.576 106.84 li
269.192 106.84 li
269.192 103.384 li
270.848 103.384 li
@
274.232 68.6079 mo
275.96 68.6079 li
275.96 72.064 li
272.504 72.064 li
272.504 68.6079 li
274.232 68.6079 li
@
277.256 88.4077 mo
278.984 88.4077 li
278.984 91.8638 li
275.528 91.8638 li
275.528 88.4077 li
277.256 88.4077 li
@
280.28 95.6079 mo
282.008 95.6079 li
282.008 99.064 li
278.552 99.064 li
278.552 95.6079 li
280.28 95.6079 li
@
284.672 79.9839 mo
286.4 79.9839 li
286.4 83.4399 li
282.944 83.4399 li
282.944 79.9839 li
284.672 79.9839 li
@
287.696 84.2319 mo
289.424 84.2319 li
289.424 87.6157 li
285.968 87.6157 li
285.968 84.2319 li
287.696 84.2319 li
@
292.376 89.6318 mo
294.104 89.6318 li
294.104 93.0156 li
290.648 93.0156 li
290.648 89.6318 li
292.376 89.6318 li
@
295.76 111.232 mo
297.488 111.232 li
297.488 114.616 li
294.032 114.616 li
294.032 111.232 li
295.76 111.232 li
@
305.84 75.8076 mo
307.568 75.8076 li
307.568 79.2637 li
304.112 79.2637 li
304.112 75.8076 li
305.84 75.8076 li
@
309.152 52.4077 mo
310.88 52.4077 li
310.88 55.8638 li
307.496 55.8638 li
307.496 52.4077 li
309.152 52.4077 li
@
324.344 93.2319 mo
326 93.2319 li
326 96.6157 li
322.616 96.6157 li
322.616 93.2319 li
324.344 93.2319 li
@
327.368 90.208 mo
329.024 90.208 li
329.024 93.6641 li
325.64 93.6641 li
325.64 90.208 li
327.368 90.208 li
@
332.336 93.2319 mo
334.064 93.2319 li
334.064 96.6157 li
330.68 96.6157 li
330.68 93.2319 li
332.336 93.2319 li
@
347.168 92.584 mo
348.896 92.584 li
348.896 96.04 li
345.44 96.04 li
345.44 92.584 li
347.168 92.584 li
@
361.928 106.408 mo
363.656 106.408 li
363.656 109.864 li
360.2 109.864 li
360.2 106.408 li
361.928 106.408 li
@
387.488 96.1841 mo
389.216 96.1841 li
389.216 99.6396 li
385.76 99.6396 li
385.76 96.1841 li
387.488 96.1841 li
@
395.192 105.184 mo
396.92 105.184 li
396.92 108.64 li
393.464 108.64 li
393.464 105.184 li
395.192 105.184 li
@
398.576 111.232 mo
400.304 111.232 li
400.304 114.616 li
396.848 114.616 li
396.848 111.232 li
398.576 111.232 li
@
402.248 101.008 mo
403.977 101.008 li
403.977 104.464 li
400.52 104.464 li
400.52 101.008 li
402.248 101.008 li
@
407.648 109.432 mo
409.376 109.432 li
409.376 112.816 li
405.92 112.816 li
405.92 109.432 li
407.648 109.432 li
@
411.68 106.408 mo
413.408 106.408 li
413.408 109.864 li
409.952 109.864 li
409.952 106.408 li
411.68 106.408 li
@
415.064 110.008 mo
416.72 110.008 li
416.72 113.464 li
413.336 113.464 li
413.336 110.008 li
415.064 110.008 li
@
427.809 101.584 mo
429.536 101.584 li
429.536 105.04 li
426.08 105.04 li
426.08 101.584 li
427.809 101.584 li
@
438.248 114.184 mo
439.904 114.184 li
439.904 117.64 li
436.52 117.64 li
436.52 114.184 li
438.248 114.184 li
@
452 98.6318 mo
453.729 98.6318 li
453.729 102.016 li
450.272 102.016 li
450.272 98.6318 li
452 98.6318 li
@
461.72 99.7842 mo
463.448 99.7842 li
463.448 103.24 li
459.992 103.24 li
459.992 99.7842 li
461.72 99.7842 li
@
465.464 105.184 mo
467.12 105.184 li
467.12 108.64 li
463.736 108.64 li
463.736 105.184 li
465.464 105.184 li
@
485.552 117.208 mo
487.28 117.208 li
487.28 120.664 li
483.896 120.664 li
483.896 117.208 li
485.552 117.208 li
@
503.768 99.208 mo
505.424 99.208 li
505.424 102.664 li
502.04 102.664 li
502.04 99.208 li
503.768 99.208 li
@
509.744 88.9839 mo
511.472 88.9839 li
511.472 92.4399 li
508.088 92.4399 li
508.088 88.9839 li
509.744 88.9839 li
@
540.056 113.032 mo
541.712 113.032 li
541.712 116.416 li
538.328 116.416 li
538.328 113.032 li
540.056 113.032 li
@
542.36 113.608 mo
544.088 113.608 li
544.088 117.064 li
540.632 117.064 li
540.632 113.608 li
542.36 113.608 li
@
44.7681 55.5762 mo
44.7681 51.4717 li
@
42.6802 53.4878 mo
46.7842 53.4878 li
@
48.1519 73 mo
48.1519 68.896 li
@
46.064 70.9121 mo
50.168 70.9121 li
@
51.4639 86.1758 mo
51.4639 82.0718 li
@
49.4482 84.0879 mo
53.5522 84.0879 li
@
60.5361 63.3521 mo
60.5361 59.248 li
@
58.52 61.3359 mo
62.624 61.3359 li
@
69.6079 77.752 mo
69.6079 73.6479 li
@
67.5923 75.7358 mo
71.6963 75.7358 li
@
77.0239 66.9521 mo
77.0239 62.8477 li
@
74.936 64.936 mo
79.04 64.936 li
@
91.1362 70.5518 mo
91.1362 66.4478 li
@
89.0479 68.5361 mo
93.1519 68.5361 li
@
97.5439 80.7759 mo
97.5439 76.6719 li
@
95.4561 78.688 mo
99.5601 78.688 li
@
100.856 57.9521 mo
100.856 53.8477 li
@
98.8398 55.936 mo
102.944 55.936 li
@
103.88 68.752 mo
103.88 64.6479 li
@
101.864 66.7358 mo
105.968 66.7358 li
@
107.264 83.1519 mo
107.264 79.0479 li
@
105.176 81.1357 mo
109.28 81.1357 li
@
112.952 85.6001 mo
112.952 81.4961 li
@
110.936 83.5117 mo
115.04 83.5117 li
@
118.64 62.2002 mo
118.64 58.0957 li
@
116.624 60.1118 mo
120.728 60.1118 li
@
122.384 65.7998 mo
122.384 61.6958 li
@
120.296 63.7119 mo
124.4 63.7119 li
@
128.432 83.1519 mo
128.432 79.0479 li
@
126.344 81.1357 mo
130.448 81.1357 li
@
137.144 72.3521 mo
137.144 68.248 li
@
135.128 70.3359 mo
139.232 70.3359 li
@
142.544 77.752 mo
142.544 73.6479 li
@
140.456 75.7358 mo
144.56 75.7358 li
@
145.856 63.3521 mo
145.856 59.248 li
@
143.84 61.3359 mo
147.944 61.3359 li
@
152.624 71.7759 mo
152.624 67.6719 li
@
150.536 69.688 mo
154.64 69.688 li
@
159.68 66.9521 mo
159.68 62.8477 li
@
157.592 64.936 mo
161.696 64.936 li
@
161.696 64 mo
161.696 59.896 li
@
159.608 61.9121 mo
163.712 61.9121 li
@
172.424 90.3521 mo
172.424 86.248 li
@
170.408 88.3359 mo
174.512 88.3359 li
@
178.832 105.4 mo
178.832 101.296 li
@
176.744 103.312 mo
180.848 103.312 li
@
183.152 96.3999 mo
183.152 92.2959 li
@
181.136 94.312 mo
185.24 94.312 li
@
185.888 112.6 mo
185.888 108.496 li
@
183.8 110.512 mo
187.904 110.512 li
@
189.56 104.752 mo
189.56 100.648 li
@
187.544 102.736 mo
191.648 102.736 li
@
192.584 104.752 mo
192.584 100.648 li
@
190.568 102.736 mo
194.672 102.736 li
@
196.616 111.376 mo
196.616 107.272 li
@
194.6 109.288 mo
198.704 109.288 li
@
203.312 111.376 mo
203.312 107.272 li
@
201.296 109.288 mo
205.4 109.288 li
@
207.344 114.4 mo
207.344 110.296 li
@
205.328 112.312 mo
209.432 112.312 li
@
212.744 125.2 mo
212.744 121.096 li
@
210.728 123.112 mo
214.832 123.112 li
@
216.776 104.176 mo
216.776 100.072 li
@
214.76 102.088 mo
218.864 102.088 li
@
220.16 114.976 mo
220.16 110.872 li
@
218.072 112.888 mo
222.176 112.888 li
@
223.184 120.376 mo
223.184 116.272 li
@
221.096 118.288 mo
225.2 118.288 li
@
226.208 113.752 mo
226.208 109.648 li
@
224.12 111.736 mo
228.224 111.736 li
@
229.52 113.752 mo
229.52 109.648 li
@
227.504 111.736 mo
231.608 111.736 li
@
236.936 118 mo
236.936 113.896 li
@
234.92 115.912 mo
239.024 115.912 li
@
242.336 113.176 mo
242.336 109.072 li
@
240.248 111.088 mo
244.352 111.088 li
@
246.656 93.9521 mo
246.656 89.8477 li
@
244.64 91.936 mo
248.744 91.936 li
@
260.84 119.8 mo
260.84 115.696 li
@
258.752 117.712 mo
262.856 117.712 li
@
263.504 130.6 mo
263.504 126.496 li
@
261.416 128.512 mo
265.52 128.512 li
@
267.536 119.8 mo
267.536 115.696 li
@
265.448 117.712 mo
269.552 117.712 li
@
270.848 121.6 mo
270.848 117.496 li
@
268.832 119.512 mo
272.936 119.512 li
@
274.232 113.176 mo
274.232 109.072 li
@
272.216 111.088 mo
276.32 111.088 li
@
277.256 128.152 mo
277.256 124.048 li
@
275.24 126.136 mo
279.344 126.136 li
@
280.28 129.376 mo
280.28 125.272 li
@
278.264 127.288 mo
282.368 127.288 li
@
281.937 122.176 mo
281.937 118.072 li
@
279.92 120.088 mo
284.024 120.088 li
@
289.352 131.752 mo
289.352 127.648 li
@
287.336 129.736 mo
291.44 129.736 li
@
292.376 123.4 mo
292.376 119.296 li
@
290.36 121.312 mo
294.464 121.312 li
@
295.76 130.6 mo
295.76 126.496 li
@
293.672 128.512 mo
297.776 128.512 li
@
302.168 124.552 mo
302.168 120.448 li
@
300.08 122.536 mo
304.184 122.536 li
@
305.84 128.8 mo
305.84 124.696 li
@
303.752 126.712 mo
307.856 126.712 li
@
314.264 139.6 mo
314.264 135.496 li
@
312.176 137.512 mo
316.28 137.512 li
@
318.224 113.752 mo
318.224 109.648 li
@
316.208 111.736 mo
320.313 111.736 li
@
321.248 120.952 mo
321.248 116.848 li
@
319.232 118.936 mo
323.336 118.936 li
@
324.344 131.752 mo
324.344 127.648 li
@
322.256 129.736 mo
326.36 129.736 li
@
327.368 130.6 mo
327.368 126.496 li
@
325.28 128.512 mo
329.384 128.512 li
@
329.313 129.952 mo
329.313 125.848 li
@
327.296 127.936 mo
331.4 127.936 li
@
332.336 136 mo
332.336 131.896 li
@
330.32 133.912 mo
334.424 133.912 li
@
335.432 127.576 mo
335.432 123.472 li
@
333.344 125.488 mo
337.448 125.488 li
@
338.096 146.152 mo
338.096 142.048 li
@
336.008 144.136 mo
340.112 144.136 li
@
341.12 140.752 mo
341.12 136.648 li
@
339.032 138.736 mo
343.136 138.736 li
@
347.168 125.776 mo
347.168 121.672 li
@
345.08 123.688 mo
349.184 123.688 li
@
349.832 129.376 mo
349.832 125.272 li
@
347.816 127.288 mo
351.92 127.288 li
@
359.264 149.752 mo
359.264 145.648 li
@
357.176 147.736 mo
361.28 147.736 li
@
361.928 145 mo
361.928 140.896 li
@
359.912 142.912 mo
364.016 142.912 li
@
383.456 144.352 mo
383.456 140.248 li
@
381.368 142.336 mo
385.472 142.336 li
@
421.4 129.952 mo
421.4 125.848 li
@
419.384 127.936 mo
423.488 127.936 li
@
427.809 119.8 mo
427.809 115.696 li
@
425.72 117.712 mo
429.824 117.712 li
@
431.48 149.176 mo
431.48 145.072 li
@
429.464 147.088 mo
433.568 147.088 li
@
438.248 147.376 mo
438.248 143.272 li
@
436.16 145.288 mo
440.264 145.288 li
@
445.592 129.952 mo
445.592 125.848 li
@
443.576 127.936 mo
447.68 127.936 li
@
448.616 145 mo
448.616 140.896 li
@
446.6 142.912 mo
450.704 142.912 li
@
461.72 131.752 mo
461.72 127.648 li
@
459.704 129.736 mo
463.809 129.736 li
@
470.145 150.4 mo
470.145 146.296 li
@
468.056 148.312 mo
472.16 148.312 li
@
476.84 144.352 mo
476.84 140.248 li
@
474.824 142.336 mo
478.928 142.336 li
@
482.24 142.552 mo
482.24 138.448 li
@
480.152 140.536 mo
484.256 140.536 li
@
485.552 138.376 mo
485.552 134.272 li
@
483.536 136.36 mo
487.64 136.36 li
@
491.672 147.952 mo
491.672 143.848 li
@
489.584 145.936 mo
493.688 145.936 li
@
503.768 141.4 mo
503.768 137.296 li
@
501.68 139.312 mo
505.784 139.312 li
@
507.08 141.4 mo
507.08 137.296 li
@
505.064 139.312 mo
509.168 139.312 li
@
509.744 141.4 mo
509.744 137.296 li
@
507.729 139.312 mo
511.832 139.312 li
@
514.856 138.376 mo
514.856 134.272 li
@
512.768 136.36 mo
516.872 136.36 li
@
521.84 136.576 mo
521.84 132.472 li
@
519.824 134.488 mo
523.928 134.488 li
@
525.584 145 mo
525.584 140.896 li
@
523.496 142.912 mo
527.6 142.912 li
@
528.968 137.8 mo
528.968 133.696 li
@
526.88 135.712 mo
530.984 135.712 li
@
540.056 145 mo
540.056 140.896 li
@
537.968 142.912 mo
542.072 142.912 li
@
542.36 159.4 mo
542.36 155.296 li
@
540.344 157.312 mo
544.448 157.312 li
@
0.75 lw
44.7681 53.4878 mo
48.1519 70.9121 li
51.4639 84.0879 li
60.5361 61.3359 li
69.6079 75.7358 li
77.0239 64.936 li
91.1362 68.5361 li
97.5439 78.688 li
100.856 55.936 li
103.88 66.7358 li
107.264 81.1357 li
112.952 83.5117 li
118.64 60.1118 li
122.384 63.7119 li
128.432 81.1357 li
137.144 70.3359 li
142.544 75.7358 li
145.856 61.3359 li
152.624 69.688 li
159.68 64.936 li
161.696 61.9121 li
172.424 88.3359 li
178.832 103.312 li
183.152 94.312 li
185.888 110.512 li
189.56 102.736 li
192.584 102.736 li
196.616 109.288 li
203.312 109.288 li
207.344 112.312 li
212.744 123.112 li
216.776 102.088 li
220.16 112.888 li
223.184 118.288 li
226.208 111.736 li
229.52 111.736 li
236.936 115.912 li
242.336 111.088 li
246.656 91.936 li
260.84 117.712 li
263.504 128.512 li
267.536 117.712 li
270.848 119.512 li
274.232 111.088 li
277.256 126.136 li
280.28 127.288 li
281.937 120.088 li
289.352 129.736 li
292.376 121.312 li
295.76 128.512 li
302.168 122.536 li
305.84 126.712 li
314.264 137.512 li
318.224 111.736 li
321.248 118.936 li
324.344 129.736 li
327.368 128.512 li
329.313 127.936 li
332.336 133.912 li
335.432 125.488 li
338.096 144.136 li
341.12 138.736 li
347.168 123.688 li
349.832 127.288 li
359.264 147.736 li
361.928 142.912 li
383.456 142.336 li
421.4 127.936 li
427.809 117.712 li
431.48 147.088 li
438.248 145.288 li
445.592 127.936 li
448.616 142.912 li
461.72 129.736 li
470.145 148.312 li
476.84 142.336 li
482.24 140.536 li
485.552 136.36 li
491.672 145.936 li
503.768 139.312 li
507.08 139.312 li
509.744 139.312 li
514.856 136.36 li
521.84 134.488 li
525.584 142.912 li
528.968 135.712 li
540.056 142.912 li
542.36 157.312 li
0.952941 0.882353 0 0 cmyk
@
1 lw
53.8398 107.704 mo
53.8398 109.792 li
51.8242 109.792 li
51.8242 107.704 li
53.8398 107.704 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
50.7441 106.696 mo
51.8242 107.704 li
@
50.7441 110.8 mo
51.8242 109.792 li
@
54.8481 110.8 mo
53.8398 109.792 li
@
52.832 108.784 mo
54.8481 106.696 li
@
56.792 94.96 mo
56.792 96.9761 li
54.7041 96.9761 li
54.7041 94.96 li
56.792 94.96 li
@
53.6963 93.9521 mo
54.7041 94.96 li
@
53.6963 98.0557 mo
54.7041 96.9761 li
@
57.8003 98.0557 mo
56.792 96.9761 li
@
55.7119 95.9678 mo
57.8003 93.9521 li
@
63.8481 93.0156 mo
63.8481 95.0317 li
61.832 95.0317 li
61.832 93.0156 li
63.8481 93.0156 li
@
60.752 91.936 mo
61.832 93.0156 li
@
60.752 96.04 mo
61.832 95.0317 li
@
64.856 96.04 mo
63.8481 95.0317 li
@
62.8398 94.0239 mo
64.856 91.936 li
@
79.688 96.9038 mo
79.688 98.9922 li
77.6719 98.9922 li
77.6719 96.9038 li
79.688 96.9038 li
@
76.6641 95.896 mo
77.6719 96.9038 li
@
76.6641 100 mo
77.6719 98.9922 li
@
80.7681 100 mo
79.688 98.9922 li
@
78.6802 97.9121 mo
80.7681 95.896 li
@
98.1201 104.752 mo
98.1201 106.84 li
96.0322 106.84 li
96.0322 104.752 li
98.1201 104.752 li
@
95.0239 103.744 mo
96.0322 104.752 li
@
95.0239 107.848 mo
96.0322 106.84 li
@
99.1279 107.848 mo
98.1201 106.84 li
@
97.04 105.832 mo
99.1279 103.744 li
@
123.104 81.208 mo
123.104 83.2236 li
121.088 83.2236 li
121.088 81.208 li
123.104 81.208 li
@
120.08 80.1279 mo
121.088 81.208 li
@
120.08 84.2319 mo
121.088 83.2236 li
@
124.184 84.2319 mo
123.104 83.2236 li
@
122.096 82.2158 mo
124.184 80.1279 li
@
138.152 108.712 mo
138.152 110.8 li
136.064 110.8 li
136.064 108.712 li
138.152 108.712 li
@
135.056 107.704 mo
136.064 108.712 li
@
135.056 111.808 mo
136.064 110.8 li
@
139.16 111.808 mo
138.152 110.8 li
@
137.144 109.72 mo
139.16 107.704 li
@
152.336 72.7119 mo
152.336 74.7998 li
150.32 74.7998 li
150.32 72.7119 li
152.336 72.7119 li
@
149.312 71.7041 mo
150.32 72.7119 li
@
149.312 75.8076 mo
150.32 74.7998 li
@
153.416 75.8076 mo
152.336 74.7998 li
@
151.328 73.7197 mo
153.416 71.7041 li
@
170.696 97.9121 mo
170.696 99.9277 li
168.68 99.9277 li
168.68 97.9121 li
170.696 97.9121 li
@
167.6 96.9038 mo
168.68 97.9121 li
@
167.6 101.008 mo
168.68 99.9277 li
@
171.704 101.008 mo
170.696 99.9277 li
@
169.688 98.9199 mo
171.704 96.9038 li
@
179.912 108.712 mo
179.912 110.8 li
177.824 110.8 li
177.824 108.712 li
179.912 108.712 li
@
176.816 107.704 mo
177.824 108.712 li
@
176.816 111.808 mo
177.824 110.8 li
@
180.92 111.808 mo
179.912 110.8 li
@
178.832 109.72 mo
180.92 107.704 li
@
190.352 152.56 mo
190.352 154.648 li
188.264 154.648 li
188.264 152.56 li
190.352 152.56 li
@
187.256 151.552 mo
188.264 152.56 li
@
187.256 155.656 mo
188.264 154.648 li
@
191.36 155.656 mo
190.352 154.648 li
@
189.272 153.64 mo
191.36 151.552 li
@
204.968 139.816 mo
204.968 141.832 li
202.88 141.832 li
202.88 139.816 li
204.968 139.816 li
@
201.872 138.736 mo
202.88 139.816 li
@
201.872 142.912 mo
202.88 141.832 li
@
205.976 142.912 mo
204.968 141.832 li
@
203.888 140.824 mo
205.976 138.736 li
@
217.496 132.328 mo
217.496 134.416 li
215.408 134.416 li
215.408 132.328 li
217.496 132.328 li
@
214.4 131.32 mo
215.408 132.328 li
@
214.4 135.424 mo
215.408 134.416 li
@
218.504 135.424 mo
217.496 134.416 li
@
216.416 133.336 mo
218.504 131.32 li
@
234.128 124.48 mo
234.128 126.496 li
232.112 126.496 li
232.112 124.48 li
234.128 124.48 li
@
231.032 123.4 mo
232.112 124.48 li
@
231.032 127.576 mo
232.112 126.496 li
@
235.208 127.576 mo
234.128 126.496 li
@
233.12 125.488 mo
235.208 123.4 li
@
250.832 132.544 mo
250.832 134.56 li
248.816 134.56 li
248.816 132.544 li
250.832 132.544 li
@
247.736 131.464 mo
248.816 132.544 li
@
247.736 135.64 mo
248.816 134.56 li
@
251.84 135.64 mo
250.832 134.56 li
@
249.824 133.552 mo
251.84 131.464 li
@
267.536 147.088 mo
267.536 149.104 li
265.52 149.104 li
265.52 147.088 li
267.536 147.088 li
@
264.44 146.08 mo
265.52 147.088 li
@
264.44 150.184 mo
265.52 149.104 li
@
268.544 150.184 mo
267.536 149.104 li
@
266.528 148.096 mo
268.544 146.08 li
@
279.272 155.512 mo
279.272 157.6 li
277.184 157.6 li
277.184 155.512 li
279.272 155.512 li
@
276.176 154.504 mo
277.184 155.512 li
@
276.176 158.608 mo
277.184 157.6 li
@
280.28 158.608 mo
279.272 157.6 li
@
278.192 156.592 mo
280.28 154.504 li
@
290.504 129.376 mo
290.504 131.464 li
288.416 131.464 li
288.416 129.376 li
290.504 129.376 li
@
287.408 128.368 mo
288.416 129.376 li
@
287.408 132.472 mo
288.416 131.464 li
@
291.512 132.472 mo
290.504 131.464 li
@
289.496 130.384 mo
291.512 128.368 li
@
309.296 144.136 mo
309.296 146.152 li
307.208 146.152 li
307.208 144.136 li
309.296 144.136 li
@
306.2 143.128 mo
307.208 144.136 li
@
306.2 147.232 mo
307.208 146.152 li
@
310.304 147.232 mo
309.296 146.152 li
@
308.216 145.144 mo
310.304 143.128 li
@
321.824 136.648 mo
321.824 138.736 li
319.736 138.736 li
319.736 136.648 li
321.824 136.648 li
@
318.729 135.64 mo
319.736 136.648 li
@
318.729 139.744 mo
319.736 138.736 li
@
322.832 139.744 mo
321.824 138.736 li
@
320.744 137.656 mo
322.832 135.64 li
@
339.32 152.56 mo
339.32 154.648 li
337.304 154.648 li
337.304 152.56 li
339.32 152.56 li
@
336.296 151.552 mo
337.304 152.56 li
@
336.296 155.656 mo
337.304 154.648 li
@
340.4 155.656 mo
339.32 154.648 li
@
338.313 153.64 mo
340.4 151.552 li
@
355.232 136.648 mo
355.232 138.736 li
353.145 138.736 li
353.145 136.648 li
355.232 136.648 li
@
352.136 135.64 mo
353.145 136.648 li
@
352.136 139.744 mo
353.145 138.736 li
@
356.24 139.744 mo
355.232 138.736 li
@
354.152 137.656 mo
356.24 135.64 li
@
363.512 153.208 mo
363.512 155.224 li
361.496 155.224 li
361.496 153.208 li
363.512 153.208 li
@
360.488 152.128 mo
361.496 153.208 li
@
360.488 156.232 mo
361.496 155.224 li
@
364.592 156.232 mo
363.512 155.224 li
@
362.504 154.216 mo
364.592 152.128 li
@
384.392 143.704 mo
384.392 145.792 li
382.376 145.792 li
382.376 143.704 li
384.392 143.704 li
@
381.296 142.696 mo
382.376 143.704 li
@
381.296 146.8 mo
382.376 145.792 li
@
385.4 146.8 mo
384.392 145.792 li
@
383.384 144.784 mo
385.4 142.696 li
@
396.92 143.704 mo
396.92 145.792 li
394.904 145.792 li
394.904 143.704 li
396.92 143.704 li
@
393.824 142.696 mo
394.904 143.704 li
@
393.824 146.8 mo
394.904 145.792 li
@
398 146.8 mo
396.92 145.792 li
@
395.912 144.784 mo
398 142.696 li
@
411.536 135.28 mo
411.536 137.368 li
409.52 137.368 li
409.52 135.28 li
411.536 135.28 li
@
408.44 134.272 mo
409.52 135.28 li
@
408.44 138.376 mo
409.52 137.368 li
@
412.616 138.376 mo
411.536 137.368 li
@
410.528 136.288 mo
412.616 134.272 li
@
416.576 139.24 mo
416.576 141.256 li
414.488 141.256 li
414.488 139.24 li
416.576 139.24 li
@
413.48 138.16 mo
414.488 139.24 li
@
413.48 142.264 mo
414.488 141.256 li
@
417.584 142.264 mo
416.576 141.256 li
@
415.568 140.248 mo
417.584 138.16 li
@
426.152 143.704 mo
426.152 145.792 li
424.136 145.792 li
424.136 143.704 li
426.152 143.704 li
@
423.056 142.696 mo
424.136 143.704 li
@
423.056 146.8 mo
424.136 145.792 li
@
427.232 146.8 mo
426.152 145.792 li
@
425.145 144.784 mo
427.232 142.696 li
@
439.977 140.176 mo
439.977 142.264 li
437.888 142.264 li
437.888 140.176 li
439.977 140.176 li
@
436.88 139.168 mo
437.888 140.176 li
@
436.88 143.272 mo
437.888 142.264 li
@
440.984 143.272 mo
439.977 142.264 li
@
438.896 141.256 mo
440.984 139.168 li
@
456.68 139.816 mo
456.68 141.832 li
454.592 141.832 li
454.592 139.816 li
456.68 139.816 li
@
453.584 138.736 mo
454.592 139.816 li
@
453.584 142.912 mo
454.592 141.832 li
@
457.688 142.912 mo
456.68 141.832 li
@
455.6 140.824 mo
457.688 138.736 li
@
484.616 150.04 mo
484.616 152.056 li
482.528 152.056 li
482.528 150.04 li
484.616 150.04 li
@
481.52 149.032 mo
482.528 150.04 li
@
481.52 153.136 mo
482.528 152.056 li
@
485.624 153.136 mo
484.616 152.056 li
@
483.536 151.048 mo
485.624 149.032 li
@
504.632 145.144 mo
504.632 147.16 li
502.544 147.16 li
502.544 145.144 li
504.632 145.144 li
@
501.536 144.064 mo
502.544 145.144 li
@
501.536 148.168 mo
502.544 147.16 li
@
505.64 148.168 mo
504.632 147.16 li
@
503.624 146.152 mo
505.64 144.064 li
@
518.024 149.248 mo
518.024 151.336 li
515.936 151.336 li
515.936 149.248 li
518.024 149.248 li
@
514.928 148.24 mo
515.936 149.248 li
@
514.928 152.344 mo
515.936 151.336 li
@
519.032 152.344 mo
518.024 151.336 li
@
516.944 150.256 mo
519.032 148.24 li
@
536.816 149.608 mo
536.816 151.696 li
534.729 151.696 li
534.729 149.608 li
536.816 149.608 li
@
533.72 148.6 mo
534.729 149.608 li
@
533.72 152.704 mo
534.729 151.696 li
@
537.824 152.704 mo
536.816 151.696 li
@
535.736 150.688 mo
537.824 148.6 li
@
0.75 lw
52.832 108.784 mo
55.7119 95.9678 li
62.8398 94.0239 li
78.6802 97.9121 li
97.04 105.832 li
122.096 82.2158 li
137.144 109.72 li
151.328 73.7197 li
169.688 98.9199 li
178.832 109.72 li
189.272 153.64 li
203.888 140.824 li
216.416 133.336 li
233.12 125.488 li
249.824 133.552 li
266.528 148.096 li
278.192 156.592 li
289.496 130.384 li
308.216 145.144 li
320.744 137.656 li
338.313 153.64 li
354.152 137.656 li
362.504 154.216 li
383.384 144.784 li
395.912 144.784 li
410.528 136.288 li
415.568 140.248 li
425.145 144.784 li
438.896 141.256 li
455.6 140.824 li
483.536 151.048 li
503.624 146.152 li
516.944 150.256 li
535.736 150.688 li
0 0.956863 0.780392 0 cmyk
@
1 lw
6.39209 101.368 mo
6.39209 102.376 li
6.68018 103.096 li
7.3999 103.744 li
8.4082 104.104 li
9.48828 104.104 li
10.4961 103.744 li
10.856 103.384 li
11.144 102.736 li
11.144 102.016 li
10.856 101.368 li
10.1362 100.648 li
9.12793 100.288 li
8.12012 100.288 li
7.04004 100.648 li
6.39209 101.368 li
5.67188 102.016 li
5.02393 102.376 li
4.3042 102.376 li
3.94385 102.016 li
3.94385 101.368 li
4.3042 100.648 li
5.02393 100 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
3.22412 97.4077 mo
2.93604 96.9038 li
2.14404 96.1118 li
7.54395 96.1118 li
@
2.14404 91.7197 mo
2.43213 92.5117 li
2.93604 92.7998 li
3.43994 92.7998 li
3.94385 92.5117 li
4.23193 92.0078 li
4.52002 91 li
4.73633 90.208 li
5.24023 89.7041 li
5.74414 89.416 li
6.53613 89.416 li
7.04004 89.7041 li
7.32813 89.9199 li
7.54395 90.7119 li
7.54395 91.7197 li
7.32813 92.5117 li
7.04004 92.7998 li
6.53613 93.0156 li
5.74414 93.0156 li
5.24023 92.7998 li
4.73633 92.2959 li
4.52002 91.5039 li
4.23193 90.4961 li
3.94385 89.9199 li
3.43994 89.7041 li
2.93604 89.7041 li
2.43213 89.9199 li
2.14404 90.7119 li
2.14404 91.7197 li
@
3.94385 85.6001 mo
4.3042 86.248 li
5.02393 86.9678 li
5.67188 87.3281 li
6.68018 87.6157 li
8.4082 87.6157 li
9.48828 87.3281 li
10.1362 86.9678 li
10.856 86.248 li
11.144 85.6001 li
11.144 84.2319 li
10.856 83.5117 li
10.1362 82.8638 li
9.48828 82.5039 li
8.4082 82.144 li
6.68018 82.144 li
5.67188 82.5039 li
5.02393 82.8638 li
4.3042 83.5117 li
3.94385 84.2319 li
3.94385 85.6001 li
@
508.448 50.4639 mo
508.088 50.752 li
508.448 51.1118 li
508.736 50.752 li
508.448 50.4639 li
@
39.0801 183.088 mo
543.08 183.088 li
543.08 327.088 li
39.0801 327.088 li
39.0801 183.088 li
@
39.0801 182.584 mo
543.656 182.584 li
543.656 326.512 li
39.6563 326.512 li
39.6563 182.584 li
@
39.0801 327.088 mo
39.0801 327.088 li
39.0801 322.336 li
@
30.8721 335.656 mo
31.5923 335.296 li
32.6001 334.288 li
32.6001 341.488 li
@
37.4238 334.288 mo
41.0962 334.288 li
39.0801 337.024 li
40.0879 337.024 li
40.7358 337.312 li
41.0962 337.672 li
41.4561 338.68 li
41.4561 339.4 li
41.0962 340.408 li
40.4482 341.128 li
39.3682 341.488 li
38.4321 341.488 li
37.4238 341.128 li
37.064 340.768 li
36.7041 340.048 li
@
45.5601 334.288 mo
44.5522 334.576 li
43.832 335.656 li
43.4722 337.312 li
43.4722 338.392 li
43.832 340.048 li
44.5522 341.128 li
45.5601 341.488 li
46.2803 341.488 li
47.2881 341.128 li
47.936 340.048 li
48.2959 338.392 li
48.2959 337.312 li
47.936 335.656 li
47.2881 334.576 li
46.2803 334.288 li
45.5601 334.288 li
@
39.0801 327.088 mo
106.256 327.088 li
106.256 322.336 li
@
98.0479 335.656 mo
98.6963 335.296 li
99.7041 334.288 li
99.7041 341.488 li
@
104.528 334.288 mo
108.272 334.288 li
106.256 337.024 li
107.264 337.024 li
107.984 337.312 li
108.272 337.672 li
108.632 338.68 li
108.632 339.4 li
108.272 340.408 li
107.624 341.128 li
106.616 341.488 li
105.536 341.488 li
104.528 341.128 li
104.168 340.768 li
103.88 340.048 li
@
111.08 335.944 mo
111.08 335.656 li
111.368 334.936 li
111.728 334.576 li
112.448 334.288 li
113.816 334.288 li
114.464 334.576 li
114.824 334.936 li
115.184 335.656 li
115.184 336.304 li
114.824 337.024 li
114.104 338.032 li
110.72 341.488 li
115.472 341.488 li
@
106.256 327.088 mo
173.432 327.088 li
173.432 322.336 li
@
165.224 335.656 mo
165.872 335.296 li
166.952 334.288 li
166.952 341.488 li
@
171.704 334.288 mo
175.52 334.288 li
173.432 337.024 li
174.44 337.024 li
175.16 337.312 li
175.52 337.672 li
175.88 338.68 li
175.88 339.4 li
175.52 340.408 li
174.8 341.128 li
173.792 341.488 li
172.784 341.488 li
171.704 341.128 li
171.416 340.768 li
171.056 340.048 li
@
181.352 334.288 mo
177.896 339.04 li
183.08 339.04 li
@
181.352 334.288 mo
181.352 341.488 li
@
173.432 327.088 mo
240.68 327.088 li
240.68 322.336 li
@
232.4 335.656 mo
233.12 335.296 li
234.128 334.288 li
234.128 341.488 li
@
238.952 334.288 mo
242.696 334.288 li
240.68 337.024 li
241.688 337.024 li
242.336 337.312 li
242.696 337.672 li
243.056 338.68 li
243.056 339.4 li
242.696 340.408 li
242.048 341.128 li
240.968 341.488 li
239.96 341.488 li
238.952 341.128 li
238.592 340.768 li
238.232 340.048 li
@
249.536 335.296 mo
249.248 334.576 li
248.168 334.288 li
247.52 334.288 li
246.44 334.576 li
245.792 335.656 li
245.432 337.312 li
245.432 339.04 li
245.792 340.408 li
246.44 341.128 li
247.52 341.488 li
247.88 341.488 li
248.888 341.128 li
249.536 340.408 li
249.896 339.4 li
249.896 339.04 li
249.536 338.032 li
248.888 337.312 li
247.88 337.024 li
247.52 337.024 li
246.44 337.312 li
245.792 338.032 li
245.432 339.04 li
@
240.68 327.088 mo
307.856 327.088 li
307.856 322.336 li
@
299.648 335.656 mo
300.296 335.296 li
301.304 334.288 li
301.304 341.488 li
@
306.128 334.288 mo
309.872 334.288 li
307.856 337.024 li
308.864 337.024 li
309.584 337.312 li
309.872 337.672 li
310.232 338.68 li
310.232 339.4 li
309.872 340.408 li
309.224 341.128 li
308.216 341.488 li
307.136 341.488 li
306.128 341.128 li
305.768 340.768 li
305.48 340.048 li
@
314.048 334.288 mo
312.968 334.576 li
312.68 335.296 li
312.68 335.944 li
312.968 336.664 li
313.688 337.024 li
315.056 337.312 li
316.064 337.672 li
316.784 338.392 li
317.072 339.04 li
317.072 340.048 li
316.784 340.768 li
316.424 341.128 li
315.416 341.488 li
314.048 341.488 li
312.968 341.128 li
312.68 340.768 li
312.32 340.048 li
312.32 339.04 li
312.68 338.392 li
313.328 337.672 li
314.336 337.312 li
315.704 337.024 li
316.424 336.664 li
316.784 335.944 li
316.784 335.296 li
316.424 334.576 li
315.416 334.288 li
314.048 334.288 li
@
307.856 327.088 mo
375.032 327.088 li
375.032 322.336 li
@
366.824 335.656 mo
367.472 335.296 li
368.552 334.288 li
368.552 341.488 li
@
376.04 334.288 mo
372.656 339.04 li
377.768 339.04 li
@
376.04 334.288 mo
376.04 341.488 li
@
381.584 334.288 mo
380.504 334.576 li
379.856 335.656 li
379.496 337.312 li
379.496 338.392 li
379.856 340.048 li
380.504 341.128 li
381.584 341.488 li
382.232 341.488 li
383.24 341.128 li
383.96 340.048 li
384.32 338.392 li
384.32 337.312 li
383.96 335.656 li
383.24 334.576 li
382.232 334.288 li
381.584 334.288 li
@
375.032 327.088 mo
442.28 327.088 li
442.28 322.336 li
@
434 335.656 mo
434.72 335.296 li
435.729 334.288 li
435.729 341.488 li
@
443.288 334.288 mo
439.832 339.04 li
445.016 339.04 li
@
443.288 334.288 mo
443.288 341.488 li
@
447.032 335.944 mo
447.032 335.656 li
447.393 334.936 li
447.752 334.576 li
448.4 334.288 li
449.768 334.288 li
450.488 334.576 li
450.848 334.936 li
451.136 335.656 li
451.136 336.304 li
450.848 337.024 li
450.128 338.032 li
446.672 341.488 li
451.496 341.488 li
@
442.28 327.088 mo
509.456 327.088 li
509.456 322.336 li
@
501.248 335.656 mo
501.896 335.296 li
502.904 334.288 li
502.904 341.488 li
@
510.464 334.288 mo
507.08 339.04 li
512.192 339.04 li
@
510.464 334.288 mo
510.464 341.488 li
@
517.304 334.288 mo
513.92 339.04 li
519.032 339.04 li
@
517.304 334.288 mo
517.304 341.488 li
@
509.456 327.088 mo
543.08 327.088 li
543.08 326.512 li
39.0801 326.512 li
@
39.0801 327.088 mo
39.0801 302.392 li
43.832 302.392 li
@
24.5361 298.792 mo
23.5278 299.08 li
23.168 299.8 li
23.168 300.52 li
23.5278 301.168 li
24.1763 301.528 li
25.5439 301.888 li
26.624 302.176 li
27.272 302.896 li
27.6318 303.544 li
27.6318 304.624 li
27.272 305.272 li
26.9121 305.632 li
25.9043 305.992 li
24.5361 305.992 li
23.5278 305.632 li
23.168 305.272 li
22.8081 304.624 li
22.8081 303.544 li
23.168 302.896 li
23.8882 302.176 li
24.896 301.888 li
26.2642 301.528 li
26.9121 301.168 li
27.272 300.52 li
27.272 299.8 li
26.9121 299.08 li
25.9043 298.792 li
24.5361 298.792 li
@
33.104 298.792 mo
29.7202 303.544 li
34.832 303.544 li
@
33.104 298.792 mo
33.104 305.992 li
@
39.0801 302.392 mo
39.0801 275.824 li
43.832 275.824 li
@
24.5361 272.224 mo
23.5278 272.512 li
23.168 273.232 li
23.168 273.88 li
23.5278 274.6 li
24.1763 274.96 li
25.5439 275.248 li
26.624 275.608 li
27.272 276.328 li
27.6318 276.976 li
27.6318 277.984 li
27.272 278.704 li
26.9121 279.064 li
25.9043 279.424 li
24.5361 279.424 li
23.5278 279.064 li
23.168 278.704 li
22.8081 277.984 li
22.8081 276.976 li
23.168 276.328 li
23.8882 275.608 li
24.896 275.248 li
26.2642 274.96 li
26.9121 274.6 li
27.272 273.88 li
27.272 273.232 li
26.9121 272.512 li
25.9043 272.224 li
24.5361 272.224 li
@
34.1123 273.232 mo
33.8242 272.512 li
32.7441 272.224 li
32.0962 272.224 li
31.0879 272.512 li
30.3682 273.592 li
30.0083 275.248 li
30.0083 276.976 li
30.3682 278.344 li
31.0879 279.064 li
32.0962 279.424 li
32.4561 279.424 li
33.4639 279.064 li
34.1123 278.344 li
34.4722 277.336 li
34.4722 276.976 li
34.1123 275.968 li
33.4639 275.248 li
32.4561 274.96 li
32.0962 274.96 li
31.0879 275.248 li
30.3682 275.968 li
30.0083 276.976 li
@
39.0801 275.824 mo
39.0801 249.184 li
43.832 249.184 li
@
24.5361 245.584 mo
23.5278 245.944 li
23.168 246.664 li
23.168 247.312 li
23.5278 248.032 li
24.1763 248.32 li
25.5439 248.68 li
26.624 249.04 li
27.272 249.76 li
27.6318 250.408 li
27.6318 251.416 li
27.272 252.136 li
26.9121 252.496 li
25.9043 252.784 li
24.5361 252.784 li
23.5278 252.496 li
23.168 252.136 li
22.8081 251.416 li
22.8081 250.408 li
23.168 249.76 li
23.8882 249.04 li
24.896 248.68 li
26.2642 248.32 li
26.9121 248.032 li
27.272 247.312 li
27.272 246.664 li
26.9121 245.944 li
25.9043 245.584 li
24.5361 245.584 li
@
31.376 245.584 mo
30.3682 245.944 li
30.0083 246.664 li
30.0083 247.312 li
30.3682 248.032 li
31.0879 248.32 li
32.4561 248.68 li
33.4639 249.04 li
34.1123 249.76 li
34.4722 250.408 li
34.4722 251.416 li
34.1123 252.136 li
33.8242 252.496 li
32.7441 252.784 li
31.376 252.784 li
30.3682 252.496 li
30.0083 252.136 li
29.7202 251.416 li
29.7202 250.408 li
30.0083 249.76 li
30.728 249.04 li
31.7358 248.68 li
33.104 248.32 li
33.8242 248.032 li
34.1123 247.312 li
34.1123 246.664 li
33.8242 245.944 li
32.7441 245.584 li
31.376 245.584 li
@
39.0801 249.184 mo
39.0801 222.616 li
43.832 222.616 li
@
27.272 221.464 mo
26.9121 222.472 li
26.2642 223.12 li
25.2559 223.48 li
24.896 223.48 li
23.8882 223.12 li
23.168 222.472 li
22.8081 221.464 li
22.8081 221.104 li
23.168 220.024 li
23.8882 219.376 li
24.896 219.016 li
25.2559 219.016 li
26.2642 219.376 li
26.9121 220.024 li
27.272 221.464 li
27.272 223.12 li
26.9121 224.848 li
26.2642 225.856 li
25.2559 226.216 li
24.5361 226.216 li
23.5278 225.856 li
23.168 225.208 li
@
31.7358 219.016 mo
30.728 219.376 li
30.0083 220.384 li
29.7202 222.112 li
29.7202 223.12 li
30.0083 224.848 li
30.728 225.856 li
31.7358 226.216 li
32.4561 226.216 li
33.4639 225.856 li
34.1123 224.848 li
34.4722 223.12 li
34.4722 222.112 li
34.1123 220.384 li
33.4639 219.376 li
32.4561 219.016 li
31.7358 219.016 li
@
39.0801 222.616 mo
39.0801 196.048 li
43.832 196.048 li
@
27.272 194.824 mo
26.9121 195.904 li
26.2642 196.552 li
25.2559 196.912 li
24.896 196.912 li
23.8882 196.552 li
23.168 195.904 li
22.8081 194.824 li
22.8081 194.536 li
23.168 193.456 li
23.8882 192.808 li
24.896 192.448 li
25.2559 192.448 li
26.2642 192.808 li
26.9121 193.456 li
27.272 194.824 li
27.272 196.552 li
26.9121 198.28 li
26.2642 199.288 li
25.2559 199.648 li
24.5361 199.648 li
23.5278 199.288 li
23.168 198.64 li
@
30.0083 194.176 mo
30.0083 193.816 li
30.3682 193.168 li
30.728 192.808 li
31.376 192.448 li
32.7441 192.448 li
33.4639 192.808 li
33.8242 193.168 li
34.1123 193.816 li
34.1123 194.536 li
33.8242 195.184 li
33.104 196.192 li
29.7202 199.648 li
34.4722 199.648 li
@
39.0801 196.048 mo
39.0801 183.088 li
38.5039 183.088 li
38.5039 327.088 li
@
83.3599 221.536 mo
84.0801 226.72 li
85.7363 262.504 li
87.104 240.184 li
88.1123 242.848 li
89.1201 204.688 li
90.416 210.304 li
91.7842 214.912 li
92.4321 224.632 li
93.1519 230.32 li
94.1602 232.84 li
95.168 231.112 li
96.4639 269.416 li
97.4722 238.024 li
98.8398 238.456 li
99.8481 239.392 li
100.856 218.368 li
102.224 218.224 li
103.52 227.656 li
106.544 260.776 li
107.552 275.248 li
108.56 237.664 li
109.568 269.272 li
110.576 222.328 li
111.656 216.496 li
112.664 218.656 li
113.672 198.712 li
114.68 190.576 li
115.616 214.408 li
116.624 205.48 li
117.632 237.088 li
118.64 214.264 li
119.648 220.528 li
120.656 233.416 li
121.664 222.76 li
122.672 206.704 li
123.752 225.136 li
124.76 252.568 li
125.768 272.44 li
127.064 254.008 li
128.072 249.616 li
129.44 261.136 li
131.744 244 li
132.752 240.472 li
133.76 266.104 li
134.768 295.624 li
135.776 238.168 li
137.144 271.792 li
138.152 199.792 li
139.16 206.848 li
140.528 238.816 li
141.536 234.352 li
142.544 235.36 li
143.192 219.736 li
144.56 214.264 li
145.568 205.12 li
146.864 191.944 li
147.584 204.544 li
148.592 211.096 li
150.608 228.88 li
151.616 232.84 li
152.624 198.064 li
153.632 195.76 li
155.648 199.936 li
157.952 203.248 li
159.968 189.64 li
161.696 220.384 li
175.16 243.208 li
176.168 236.08 li
177.824 236.584 li
179.12 231.904 li
180.128 229.816 li
181.136 224.056 li
182.144 220.888 li
183.512 232.624 li
184.52 249.472 li
185.528 239.248 li
186.536 245.512 li
187.904 251.488 li
189.272 239.896 li
189.92 242.848 li
190.928 245.224 li
192.224 250.84 li
193.232 223.264 li
194.24 233.632 li
195.248 223.696 li
196.616 230.176 li
197.984 240.184 li
198.992 275.248 li
200 283.384 li
201.008 231.544 li
202.376 243.208 li
203.312 213.976 li
204.68 205.336 li
206.048 240.184 li
207.056 250.12 li
208.064 241.624 li
209.072 259.048 li
210.08 271.432 li
211.088 258.76 li
212.096 272.44 li
213.104 250.912 li
215.48 228.232 li
216.776 240.472 li
218.144 225.568 li
218.792 228.592 li
219.8 224.92 li
221.456 217.072 li
222.464 214.552 li
223.472 219.592 li
224.192 207.496 li
225.56 225.136 li
226.568 204.688 li
227.576 206.92 li
228.512 217.288 li
229.88 211.312 li
230.888 201.664 li
231.896 214.12 li
232.904 213.616 li
233.912 196.984 li
234.92 198.424 li
235.928 212.824 li
236.936 212.896 li
238.304 220.6 li
239.672 219.952 li
240.68 229.024 li
241.616 219.016 li
242.624 239.752 li
243.632 218.944 li
244.64 217.216 li
245.648 210.16 li
247.016 226.648 li
248.024 198.856 li
254.72 253.216 li
255.728 253.432 li
256.736 240.184 li
257.744 223.552 li
258.752 233.92 li
260.12 243.064 li
261.128 279.496 li
262.136 232.696 li
263.144 238.168 li
264.152 232.984 li
265.16 234.208 li
266.168 227.656 li
266.816 271 li
268.184 235.936 li
269.192 267.256 li
270.2 280.072 li
271.568 291.88 li
272.576 241.624 li
273.584 224.776 li
274.592 237.232 li
275.6 249.328 li
276.608 251.704 li
278.624 232.336 li
279.632 229.384 li
280.928 215.488 li
281.937 229.168 li
282.944 240.688 li
283.952 198.856 li
284.96 228.88 li
285.968 209.872 li
286.976 235.504 li
288.056 227.296 li
289.064 231.688 li
290.072 218.656 li
291.368 228.736 li
292.376 252.424 li
293.384 251.056 li
294.392 292.384 li
295.4 286.192 li
296.408 261.28 li
297.416 271.432 li
300.44 263.008 li
301.16 268.048 li
302.168 236.08 li
303.176 239.608 li
304.472 260.272 li
305.48 246.664 li
306.128 234.856 li
307.136 262.36 li
308.145 250.264 li
309.152 272.08 li
310.521 269.776 li
311.528 246.16 li
313.256 247.744 li
314.264 282.592 li
315.561 273.808 li
316.568 274.312 li
317.937 273.16 li
318.944 265.816 li
320.24 274.6 li
321.248 275.896 li
322.256 267.184 li
323.264 274.888 li
324.272 251.992 li
325.352 240.544 li
326.648 253.216 li
327.368 243.784 li
328.664 269.416 li
329.672 284.968 li
331.04 251.056 li
332.336 295.336 li
333.344 262.648 li
334.352 254.944 li
335.36 260.272 li
336.368 249.976 li
337.376 298.36 li
338.456 256.672 li
339.464 277.264 li
340.472 294.688 li
341.48 283.096 li
342.416 278.2 li
343.424 282.16 li
344.432 301.816 li
345.44 301.312 li
346.448 320.608 li
347.456 301.816 li
348.464 309.304 li
349.472 305.56 li
351.2 291.088 li
352.208 295.048 li
353.576 280.432 li
355.232 281.368 li
356.24 308.512 li
357.248 290.656 li
358.544 277.12 li
359.552 307.792 li
360.92 280.144 li
361.928 255.592 li
363.656 294.544 li
382.448 275.392 li
383.456 271.432 li
384.464 279.136 li
385.76 276.832 li
386.768 290.152 li
387.488 254.152 li
388.856 245.512 li
390.152 251.488 li
391.16 245.368 li
392.168 246.016 li
393.176 281.224 li
394.544 249.328 li
395.552 233.128 li
397.208 246.016 li
398.216 270.64 li
399.584 243.928 li
400.592 251.488 li
401.6 263.296 li
402.608 256.24 li
403.616 245.224 li
404.624 267.976 li
405.272 262 li
406.64 272.728 li
408.656 257.464 li
409.664 272.872 li
410.672 263.584 li
411.968 275.896 li
412.977 245.656 li
414.056 249.76 li
415.064 291.592 li
421.4 275.824 li
422.768 275.824 li
423.776 275.824 li
424.784 275.824 li
426.152 275.824 li
427.16 275.824 li
428.168 275.824 li
429.176 275.824 li
429.824 275.824 li
430.472 275.824 li
431.48 275.824 li
432.488 252.928 li
434.145 255.448 li
435.152 247.888 li
436.88 263.584 li
437.888 277.624 li
438.896 252.64 li
439.904 258.112 li
440.912 251.632 li
442.28 254.296 li
443.216 273.952 li
443.936 262.792 li
445.232 288.28 li
446.6 278.056 li
447.608 284.032 li
448.616 278.056 li
449.984 270.496 li
450.992 275.824 li
452 277.12 li
453.008 288.424 li
454.016 269.416 li
455.313 273.952 li
456.32 266.104 li
457.328 273.664 li
458.336 259.336 li
460.064 265.456 li
460.712 277.912 li
461.72 260.272 li
463.088 259.696 li
463.736 265.312 li
@
7.3999 272.296 mo
14.6001 278.416 li
@
7.3999 276.688 mo
8.12012 276.04 li
8.76807 276.04 li
9.48828 276.4 li
9.77588 277.048 li
9.77588 277.768 li
9.12793 278.416 li
8.4082 278.416 li
7.76025 278.128 li
7.3999 277.408 li
7.3999 276.688 li
7.76025 276.04 li
8.12012 275.032 li
8.12012 273.952 li
7.76025 272.944 li
7.3999 272.296 li
@
12.2241 273.664 mo
12.5122 274.312 li
13.2319 274.672 li
13.8799 274.672 li
14.6001 273.952 li
14.6001 273.304 li
14.2402 272.584 li
13.5923 272.296 li
12.8721 272.296 li
12.2241 272.944 li
12.2241 273.664 li
@
9.12793 258.184 mo
8.4082 258.544 li
7.76025 259.264 li
7.3999 259.912 li
7.3999 261.28 li
7.76025 262 li
8.4082 262.648 li
9.12793 263.008 li
10.1362 263.368 li
11.8643 263.368 li
12.8721 263.008 li
13.5923 262.648 li
14.2402 262 li
14.6001 261.28 li
14.6001 259.912 li
14.2402 259.264 li
13.5923 258.544 li
12.8721 258.184 li
@
9.77588 252.064 mo
14.6001 252.064 li
@
10.856 252.064 mo
10.1362 252.712 li
9.77588 253.432 li
9.77588 254.44 li
10.1362 255.088 li
10.856 255.808 li
11.8643 256.168 li
12.5122 256.168 li
13.5923 255.808 li
14.2402 255.088 li
14.6001 254.44 li
14.6001 253.432 li
14.2402 252.712 li
13.5923 252.064 li
@
9.12793 244.504 mo
8.4082 244.864 li
7.76025 245.512 li
7.3999 246.232 li
7.3999 247.6 li
7.76025 248.248 li
8.4082 248.968 li
9.12793 249.328 li
10.1362 249.616 li
11.8643 249.616 li
12.8721 249.328 li
13.5923 248.968 li
14.2402 248.248 li
14.6001 247.6 li
14.6001 246.232 li
14.2402 245.512 li
13.5923 244.864 li
12.8721 244.504 li
@
7.3999 240.4 mo
7.76025 241.048 li
8.4082 241.768 li
9.12793 242.128 li
10.1362 242.416 li
11.8643 242.416 li
12.8721 242.128 li
13.5923 241.768 li
14.2402 241.048 li
14.6001 240.4 li
14.6001 239.032 li
14.2402 238.312 li
13.5923 237.664 li
12.8721 237.304 li
11.8643 236.944 li
10.1362 236.944 li
9.12793 237.304 li
8.4082 237.664 li
7.76025 238.312 li
7.3999 239.032 li
7.3999 240.4 li
@
12.8003 234.64 mo
12.8003 231.832 li
14.8882 233.344 li
14.8882 232.552 li
15.104 232.048 li
15.3921 231.832 li
16.1123 231.544 li
16.688 231.544 li
17.4082 231.832 li
17.9121 232.336 li
18.2002 233.128 li
18.2002 233.848 li
17.9121 234.64 li
17.6963 234.928 li
17.1919 235.144 li
@
39.0801 345.088 mo
543.08 345.088 li
543.08 489.088 li
39.0801 489.088 li
39.0801 345.088 li
@
39.0801 344.584 mo
543.656 344.584 li
543.656 488.512 li
39.6563 488.512 li
39.6563 344.584 li
@
39.0801 489.088 mo
39.0801 489.088 li
39.0801 484.336 li
@
30.8721 497.657 mo
31.5923 497.295 li
32.6001 496.288 li
32.6001 503.489 li
@
37.4238 496.288 mo
41.0962 496.288 li
39.0801 499.024 li
40.0879 499.024 li
40.7358 499.311 li
41.0962 499.672 li
41.4561 500.68 li
41.4561 501.401 li
41.0962 502.409 li
40.4482 503.127 li
39.3682 503.489 li
38.4321 503.489 li
37.4238 503.127 li
37.064 502.768 li
36.7041 502.047 li
@
45.5601 496.288 mo
44.5522 496.577 li
43.832 497.657 li
43.4722 499.311 li
43.4722 500.391 li
43.832 502.047 li
44.5522 503.127 li
45.5601 503.489 li
46.2803 503.489 li
47.2881 503.127 li
47.936 502.047 li
48.2959 500.391 li
48.2959 499.311 li
47.936 497.657 li
47.2881 496.577 li
46.2803 496.288 li
45.5601 496.288 li
@
39.0801 489.088 mo
106.256 489.088 li
106.256 484.336 li
@
98.0479 497.657 mo
98.6963 497.295 li
99.7041 496.288 li
99.7041 503.489 li
@
104.528 496.288 mo
108.272 496.288 li
106.256 499.024 li
107.264 499.024 li
107.984 499.311 li
108.272 499.672 li
108.632 500.68 li
108.632 501.401 li
108.272 502.409 li
107.624 503.127 li
106.616 503.489 li
105.536 503.489 li
104.528 503.127 li
104.168 502.768 li
103.88 502.047 li
@
111.08 497.944 mo
111.08 497.657 li
111.368 496.936 li
111.728 496.577 li
112.448 496.288 li
113.816 496.288 li
114.464 496.577 li
114.824 496.936 li
115.184 497.657 li
115.184 498.303 li
114.824 499.024 li
114.104 500.032 li
110.72 503.489 li
115.472 503.489 li
@
106.256 489.088 mo
173.432 489.088 li
173.432 484.336 li
@
165.224 497.657 mo
165.872 497.295 li
166.952 496.288 li
166.952 503.489 li
@
171.704 496.288 mo
175.52 496.288 li
173.432 499.024 li
174.44 499.024 li
175.16 499.311 li
175.52 499.672 li
175.88 500.68 li
175.88 501.401 li
175.52 502.409 li
174.8 503.127 li
173.792 503.489 li
172.784 503.489 li
171.704 503.127 li
171.416 502.768 li
171.056 502.047 li
@
181.352 496.288 mo
177.896 501.04 li
183.08 501.04 li
@
181.352 496.288 mo
181.352 503.489 li
@
173.432 489.088 mo
240.68 489.088 li
240.68 484.336 li
@
232.4 497.657 mo
233.12 497.295 li
234.128 496.288 li
234.128 503.489 li
@
238.952 496.288 mo
242.696 496.288 li
240.68 499.024 li
241.688 499.024 li
242.336 499.311 li
242.696 499.672 li
243.056 500.68 li
243.056 501.401 li
242.696 502.409 li
242.048 503.127 li
240.968 503.489 li
239.96 503.489 li
238.952 503.127 li
238.592 502.768 li
238.232 502.047 li
@
249.536 497.295 mo
249.248 496.577 li
248.168 496.288 li
247.52 496.288 li
246.44 496.577 li
245.792 497.657 li
245.432 499.311 li
245.432 501.04 li
245.792 502.409 li
246.44 503.127 li
247.52 503.489 li
247.88 503.489 li
248.888 503.127 li
249.536 502.409 li
249.896 501.401 li
249.896 501.04 li
249.536 500.032 li
248.888 499.311 li
247.88 499.024 li
247.52 499.024 li
246.44 499.311 li
245.792 500.032 li
245.432 501.04 li
@
240.68 489.088 mo
307.856 489.088 li
307.856 484.336 li
@
299.648 497.657 mo
300.296 497.295 li
301.304 496.288 li
301.304 503.489 li
@
306.128 496.288 mo
309.872 496.288 li
307.856 499.024 li
308.864 499.024 li
309.584 499.311 li
309.872 499.672 li
310.232 500.68 li
310.232 501.401 li
309.872 502.409 li
309.224 503.127 li
308.216 503.489 li
307.136 503.489 li
306.128 503.127 li
305.768 502.768 li
305.48 502.047 li
@
314.048 496.288 mo
312.968 496.577 li
312.68 497.295 li
312.68 497.944 li
312.968 498.665 li
313.688 499.024 li
315.056 499.311 li
316.064 499.672 li
316.784 500.391 li
317.072 501.04 li
317.072 502.047 li
316.784 502.768 li
316.424 503.127 li
315.416 503.489 li
314.048 503.489 li
312.968 503.127 li
312.68 502.768 li
312.32 502.047 li
312.32 501.04 li
312.68 500.391 li
313.328 499.672 li
314.336 499.311 li
315.704 499.024 li
316.424 498.665 li
316.784 497.944 li
316.784 497.295 li
316.424 496.577 li
315.416 496.288 li
314.048 496.288 li
@
307.856 489.088 mo
375.032 489.088 li
375.032 484.336 li
@
366.824 497.657 mo
367.472 497.295 li
368.552 496.288 li
368.552 503.489 li
@
376.04 496.288 mo
372.656 501.04 li
377.768 501.04 li
@
376.04 496.288 mo
376.04 503.489 li
@
381.584 496.288 mo
380.504 496.577 li
379.856 497.657 li
379.496 499.311 li
379.496 500.391 li
379.856 502.047 li
380.504 503.127 li
381.584 503.489 li
382.232 503.489 li
383.24 503.127 li
383.96 502.047 li
384.32 500.391 li
384.32 499.311 li
383.96 497.657 li
383.24 496.577 li
382.232 496.288 li
381.584 496.288 li
@
375.032 489.088 mo
442.28 489.088 li
442.28 484.336 li
@
434 497.657 mo
434.72 497.295 li
435.729 496.288 li
435.729 503.489 li
@
443.288 496.288 mo
439.832 501.04 li
445.016 501.04 li
@
443.288 496.288 mo
443.288 503.489 li
@
447.032 497.944 mo
447.032 497.657 li
447.393 496.936 li
447.752 496.577 li
448.4 496.288 li
449.768 496.288 li
450.488 496.577 li
450.848 496.936 li
451.136 497.657 li
451.136 498.303 li
450.848 499.024 li
450.128 500.032 li
446.672 503.489 li
451.496 503.489 li
@
442.28 489.088 mo
509.456 489.088 li
509.456 484.336 li
@
501.248 497.657 mo
501.896 497.295 li
502.904 496.288 li
502.904 503.489 li
@
510.464 496.288 mo
507.08 501.04 li
512.192 501.04 li
@
510.464 496.288 mo
510.464 503.489 li
@
517.304 496.288 mo
513.92 501.04 li
519.032 501.04 li
@
517.304 496.288 mo
517.304 503.489 li
@
509.456 489.088 mo
543.08 489.088 li
543.08 488.512 li
39.0801 488.512 li
@
39.0801 489.088 mo
39.0801 489.088 li
43.832 489.088 li
@
26.9121 491.967 mo
26.624 492.329 li
26.9121 492.688 li
27.272 492.329 li
26.9121 491.967 li
@
33.104 485.559 mo
29.7202 490.241 li
34.832 490.241 li
@
33.104 485.559 mo
33.104 492.688 li
@
39.0801 489.088 mo
39.0801 475.409 li
43.832 475.409 li
@
39.0801 475.409 mo
39.0801 461.657 li
43.832 461.657 li
@
26.9121 464.608 mo
26.624 464.895 li
26.9121 465.256 li
27.272 464.895 li
26.9121 464.608 li
@
31.376 458.055 mo
30.3682 458.417 li
30.0083 459.063 li
30.0083 459.784 li
30.3682 460.504 li
31.0879 460.792 li
32.4561 461.153 li
33.4639 461.512 li
34.1123 462.161 li
34.4722 462.879 li
34.4722 463.887 li
34.1123 464.608 li
33.8242 464.895 li
32.7441 465.256 li
31.376 465.256 li
30.3682 464.895 li
30.0083 464.608 li
29.7202 463.887 li
29.7202 462.879 li
30.0083 462.161 li
30.728 461.512 li
31.7358 461.153 li
33.104 460.792 li
33.8242 460.504 li
34.1123 459.784 li
34.1123 459.063 li
33.8242 458.417 li
32.7441 458.055 li
31.376 458.055 li
@
39.0801 461.657 mo
39.0801 447.905 li
43.832 447.905 li
@
39.0801 447.905 mo
39.0801 434.223 li
43.832 434.223 li
@
20.4321 431.993 mo
21.0801 431.631 li
22.1602 430.624 li
22.1602 437.825 li
@
26.9121 437.104 mo
26.624 437.463 li
26.9121 437.825 li
27.272 437.463 li
26.9121 437.104 li
@
30.0083 432.352 mo
30.0083 431.993 li
30.3682 431.272 li
30.728 430.913 li
31.376 430.624 li
32.7441 430.624 li
33.4639 430.913 li
33.8242 431.272 li
34.1123 431.993 li
34.1123 432.639 li
33.8242 433.36 li
33.104 434.368 li
29.7202 437.825 li
34.4722 437.825 li
@
39.0801 434.223 mo
39.0801 420.471 li
43.832 420.471 li
@
39.0801 420.471 mo
39.0801 406.719 li
43.832 406.719 li
@
20.4321 404.488 mo
21.0801 404.2 li
22.1602 403.12 li
22.1602 410.32 li
@
26.9121 409.672 mo
26.624 409.959 li
26.9121 410.32 li
27.272 409.959 li
26.9121 409.672 li
@
34.1123 404.2 mo
33.8242 403.48 li
32.7441 403.12 li
32.0962 403.12 li
31.0879 403.48 li
30.3682 404.488 li
30.0083 406.215 li
30.0083 407.944 li
30.3682 409.312 li
31.0879 409.959 li
32.0962 410.32 li
32.4561 410.32 li
33.4639 409.959 li
34.1123 409.312 li
34.4722 408.303 li
34.4722 407.944 li
34.1123 406.936 li
33.4639 406.215 li
32.4561 405.856 li
32.0962 405.856 li
31.0879 406.215 li
30.3682 406.936 li
30.0083 407.944 li
@
39.0801 406.719 mo
39.0801 393.04 li
43.832 393.04 li
@
39.0801 393.04 mo
39.0801 379.288 li
43.832 379.288 li
@
19.7119 377.417 mo
19.7119 377.055 li
20.0723 376.336 li
20.4321 376.047 li
21.0801 375.688 li
22.52 375.688 li
23.168 376.047 li
23.5278 376.336 li
23.8882 377.055 li
23.8882 377.704 li
23.5278 378.424 li
22.8081 379.432 li
19.4238 382.887 li
24.1763 382.887 li
@
26.9121 382.168 mo
26.624 382.528 li
26.9121 382.887 li
27.272 382.528 li
26.9121 382.168 li
@
31.7358 375.688 mo
30.728 376.047 li
30.0083 377.055 li
29.7202 378.784 li
29.7202 379.792 li
30.0083 381.52 li
30.728 382.528 li
31.7358 382.887 li
32.4561 382.887 li
33.4639 382.528 li
34.1123 381.52 li
34.4722 379.792 li
34.4722 378.784 li
34.1123 377.055 li
33.4639 376.047 li
32.4561 375.688 li
31.7358 375.688 li
@
39.0801 379.288 mo
39.0801 365.536 li
43.832 365.536 li
@
39.0801 365.536 mo
39.0801 351.784 li
43.832 351.784 li
@
19.7119 349.912 mo
19.7119 349.552 li
20.0723 348.904 li
20.4321 348.544 li
21.0801 348.184 li
22.52 348.184 li
23.168 348.544 li
23.5278 348.904 li
23.8882 349.552 li
23.8882 350.272 li
23.5278 350.92 li
22.8081 352 li
19.4238 355.383 li
24.1763 355.383 li
@
26.9121 354.736 mo
26.624 355.096 li
26.9121 355.383 li
27.272 355.096 li
26.9121 354.736 li
@
33.104 348.184 mo
29.7202 353.008 li
34.832 353.008 li
@
33.104 348.184 mo
33.104 355.383 li
@
39.0801 351.784 mo
39.0801 345.088 li
38.5039 345.088 li
38.5039 489.088 li
@
40.376 439.84 mo
41.3843 438.975 li
42.752 442.432 li
43.7603 441.928 li
45.416 360.928 li
46.4238 418.672 li
47.4321 442.719 li
48.8003 426.088 li
50.4561 438.905 li
51.8242 437.176 li
55.1362 447.833 li
56.5039 448.264 li
57.5122 447.905 li
58.52 429.04 li
59.5283 427.815 li
60.5361 414.424 li
62.9121 428.967 li
63.9199 455.249 li
64.9282 445.456 li
67.5923 453.665 li
68.6001 454.528 li
69.6079 451.36 li
70.9761 447.329 li
71.9839 447.905 li
72.9922 444.807 li
74.6479 446.321 li
75.6563 449.993 li
76.376 451.647 li
77.6719 456.975 li
78.6802 455.536 li
82.3521 444.231 li
83.3599 442.936 li
84.0801 437.825 li
85.7363 440.993 li
87.104 447.112 li
88.1123 450.639 li
89.1201 451.719 li
90.416 446.032 li
91.7842 449.776 li
92.4321 444.952 li
93.1519 449.489 li
94.1602 445.528 li
95.168 436.6 li
96.4639 428.536 li
97.4722 428.249 li
98.8398 423.711 li
99.8481 427.528 li
100.856 438.329 li
102.224 441.711 li
103.52 437.104 li
106.544 427.887 li
107.552 428.967 li
108.56 425.872 li
109.568 435.592 li
110.576 433.36 li
111.656 440.127 li
112.664 455.391 li
113.672 455.967 li
114.68 456.04 li
115.616 446.752 li
116.624 446.391 li
117.632 456.184 li
118.64 443.584 li
119.648 430.479 li
120.656 427.168 li
121.664 434.368 li
122.672 436.311 li
123.752 443.44 li
124.76 440.127 li
125.768 440.127 li
127.064 435.879 li
128.072 435.952 li
129.44 438.329 li
131.744 436.241 li
132.752 425.008 li
133.76 419.895 li
134.768 411.833 li
135.776 423.711 li
137.144 444.088 li
138.152 450.711 li
139.16 456.329 li
140.528 455.104 li
141.536 445.672 li
142.544 432.208 li
143.192 427.6 li
144.56 437.463 li
145.568 457.479 li
146.864 462.952 li
147.584 459.352 li
148.592 441.424 li
149.6 446.249 li
150.608 433.936 li
151.616 442.577 li
152.624 448.192 li
153.632 454.6 li
155.648 458.631 li
157.952 457.551 li
158.96 460.936 li
159.968 463.241 li
161.696 453.52 li
175.16 430.985 li
176.168 438.543 li
177.824 436.815 li
179.12 431.489 li
180.128 434.512 li
181.136 436.959 li
182.144 420.112 li
183.512 427.168 li
184.52 410.104 li
185.528 418.959 li
186.536 422.489 li
187.904 416.728 li
189.272 423.928 li
189.92 412.84 li
190.928 415.719 li
192.224 417.879 li
193.232 430.12 li
194.24 419.391 li
195.248 415.288 li
196.616 427.959 li
197.984 437.608 li
198.992 429.256 li
200 430.409 li
201.008 432.784 li
202.376 435.016 li
203.312 450.784 li
204.68 449.92 li
206.048 447.833 li
207.056 432.711 li
208.064 419.176 li
209.072 402.471 li
210.08 402.112 li
211.088 404.631 li
212.096 420.688 li
213.104 432.711 li
215.48 448.768 li
216.776 446.463 li
218.144 446.176 li
218.792 443.44 li
219.8 446.032 li
221.456 445.6 li
222.464 446.391 li
224.192 445.383 li
225.56 450.639 li
226.568 449.704 li
227.576 452.944 li
228.512 452.799 li
229.88 453.52 li
230.888 459.711 li
231.896 454.024 li
232.904 460.936 li
233.912 461.657 li
234.92 462.592 li
235.928 457.696 li
236.936 457.624 li
238.304 455.536 li
239.672 453.016 li
240.68 453.161 li
241.616 447.112 li
242.624 445.311 li
243.632 445.815 li
244.64 449.489 li
245.648 446.895 li
247.016 453.879 li
248.024 459.497 li
254.72 417.303 li
255.728 415.144 li
256.736 408.952 li
257.744 420.184 li
258.752 433.432 li
260.12 430.84 li
261.128 432.063 li
262.136 381.088 li
263.144 424.936 li
264.152 431.2 li
265.16 431.417 li
266.168 430.84 li
266.816 423.424 li
268.184 415.576 li
269.192 398.081 li
270.2 402.616 li
271.568 414.352 li
272.576 421.047 li
273.584 420.975 li
274.592 414.928 li
275.6 429.112 li
276.608 425.295 li
278.624 428.895 li
279.632 431.559 li
280.928 441.28 li
281.937 447.112 li
282.944 445.024 li
283.952 446.176 li
284.96 444.592 li
285.968 449.2 li
286.976 437.536 li
288.056 432.424 li
289.064 426.879 li
290.072 425.153 li
291.368 423.928 li
292.376 421.336 li
293.384 409.816 li
294.392 404.631 li
295.4 403.408 li
296.408 415.719 li
297.416 418.241 li
300.44 420.833 li
301.16 417.952 li
302.168 424.143 li
303.176 426.52 li
304.472 428.967 li
305.48 432.352 li
306.128 429.256 li
307.136 426.303 li
308.145 423.352 li
309.152 416.081 li
310.521 416.656 li
311.528 416.872 li
313.256 425.368 li
314.264 424.864 li
315.561 421.192 li
316.568 413.344 li
317.937 411.471 li
318.944 408.808 li
320.24 417.808 li
321.248 422.344 li
322.256 422.2 li
323.264 429.401 li
324.272 431.417 li
325.352 435.088 li
326.648 437.608 li
327.368 482.608 li
328.664 418.241 li
329.672 430.12 li
331.04 437.032 li
332.336 422.631 li
333.344 415.576 li
334.352 418.815 li
335.36 423.208 li
336.368 420.688 li
337.376 412.551 li
338.456 414.135 li
339.464 415.215 li
340.472 404.417 li
343.424 398.799 li
344.432 404.2 li
345.44 398.656 li
346.448 390.375 li
347.456 396.639 li
348.464 383.463 li
349.472 391.024 li
351.2 393.904 li
352.208 404.055 li
353.576 407.44 li
355.232 392.463 li
356.24 395.848 li
357.248 393.329 li
358.544 397.864 li
359.552 394.408 li
360.92 402.833 li
361.928 408.088 li
363.656 418.383 li
382.448 395.488 li
384.464 404.127 li
385.76 397.072 li
386.768 397.792 li
387.488 415.072 li
388.856 414.064 li
390.152 433.143 li
391.16 436.6 li
392.168 436.672 li
393.176 437.967 li
394.544 433 li
395.552 433.215 li
397.208 433.792 li
398.216 436.024 li
399.584 435.592 li
400.592 427.456 li
401.6 424.432 li
402.608 418.024 li
403.616 420.76 li
404.624 418.887 li
405.272 424 li
406.64 412.913 li
408.656 403.913 li
409.664 407.656 li
410.672 412.48 li
411.968 414.497 li
414.056 367.336 li
415.064 426.088 li
421.4 418.6 li
422.768 424.864 li
423.776 420.256 li
424.784 420.471 li
426.152 415.432 li
427.16 412.624 li
428.168 403.984 li
429.176 409.312 li
429.824 401.967 li
430.472 407.152 li
431.48 412.768 li
432.488 413.776 li
434.145 419.752 li
435.152 420.76 li
436.88 421.264 li
437.888 416.512 li
438.896 411.184 li
439.904 415.936 li
440.912 414.135 li
443.936 407.872 li
445.232 402.329 li
446.6 397.36 li
447.608 400.887 li
448.616 396.352 li
449.984 404.127 li
450.992 406.648 li
452 404.631 li
453.008 402.76 li
454.016 409.312 li
455.313 413.704 li
456.32 410.608 li
457.328 420.76 li
458.336 412.192 li
460.064 416.224 li
460.712 414.352 li
461.72 410.608 li
463.088 410.824 li
463.736 400.24 li
465.104 403.768 li
467.12 369.568 li
468.128 357.904 li
469.784 360.208 li
470.792 372.232 li
473.168 405.135 li
474.176 410.176 li
475.472 410.896 li
476.552 388.432 li
477.561 351.639 li
478.856 406.792 li
479.864 384.184 li
481.232 387.352 li
481.88 388.144 li
482.888 412.192 li
485.264 411.329 li
486.272 408.088 li
487.28 409.6 li
488.288 413.127 li
489.296 408.016 li
490.304 406.864 li
490.952 407.872 li
491.96 403.84 li
508.088 379.215 li
510.104 384.833 li
511.76 398.081 li
512.768 398.944 li
514.496 393.76 li
515.145 402.471 li
516.512 407.512 li
517.521 405.497 li
518.528 406.504 li
519.824 403.48 li
520.832 403.264 li
521.552 398.944 li
522.561 401.896 li
524.216 397.864 li
524.864 399.665 li
525.872 397.504 li
526.952 400.312 li
527.96 403.336 li
528.248 389.081 li
529.616 402.616 li
530.624 394.768 li
531.632 396.208 li
532.28 366.256 li
533.648 397.36 li
534.656 397.936 li
535.664 411.616 li
537.68 414.28 li
538.977 420.184 li
540.344 409.096 li
541.352 402.4 li
542.36 401.536 li
@
3.94385 462.952 mo
11.144 462.952 li
@
3.94385 460.215 mo
11.144 460.215 li
@
3.94385 460.215 mo
3.94385 457.12 li
4.3042 456.112 li
4.66406 455.752 li
5.31201 455.463 li
6.03223 455.463 li
6.68018 455.752 li
7.04004 456.112 li
7.3999 457.12 li
7.3999 460.215 li
@
7.3999 457.84 mo
11.144 455.463 li
@
3.94385 453.016 mo
11.144 453.016 li
@
3.94385 453.016 mo
11.144 450.28 li
@
3.94385 447.543 mo
11.144 450.28 li
@
3.94385 447.543 mo
11.144 447.543 li
@
2.57617 428.68 mo
3.2959 429.401 li
4.3042 430.047 li
5.67188 430.768 li
7.3999 431.127 li
8.76807 431.127 li
10.4961 430.768 li
11.8643 430.047 li
12.8721 429.401 li
13.5923 428.68 li
@
6.39209 425.295 mo
13.5923 427.311 li
@
7.76025 425.584 mo
9.48828 425.944 li
10.4961 425.944 li
11.144 425.295 li
11.144 424.577 li
10.856 423.928 li
10.1362 423.208 li
8.76807 422.489 li
@
6.39209 421.84 mo
8.76807 422.489 li
10.1362 422.848 li
10.856 422.848 li
11.144 422.489 li
11.144 421.84 li
10.4961 421.12 li
9.77588 420.833 li
@
3.94385 417.375 mo
11.144 420.112 li
@
3.94385 417.375 mo
11.144 414.639 li
@
8.76807 419.104 mo
8.76807 415.648 li
@
6.39209 412.913 mo
11.144 412.913 li
@
7.76025 412.913 mo
6.68018 411.904 li
6.39209 411.184 li
6.39209 410.176 li
6.68018 409.528 li
7.76025 409.168 li
11.144 409.168 li
@
7.76025 409.168 mo
6.68018 408.088 li
6.39209 407.44 li
6.39209 406.432 li
6.68018 405.711 li
7.76025 405.352 li
11.144 405.352 li
@
3.43994 402.976 mo
3.22412 402.976 li
2.72021 402.688 li
2.43213 402.471 li
2.14404 401.967 li
2.14404 400.887 li
2.43213 400.383 li
2.72021 400.168 li
3.22412 399.879 li
3.72803 399.879 li
4.23193 400.168 li
5.02393 400.672 li
7.54395 403.264 li
7.54395 399.665 li
@
3.94385 397.504 mo
11.144 397.504 li
@
6.39209 394.047 mo
9.77588 397.504 li
@
8.4082 396.135 mo
11.144 393.688 li
@
6.39209 387.928 mo
11.8643 387.928 li
12.8721 388.215 li
13.2319 388.576 li
13.5923 389.295 li
13.5923 390.303 li
13.2319 390.952 li
@
7.3999 387.928 mo
6.68018 388.576 li
6.39209 389.295 li
6.39209 390.303 li
6.68018 390.952 li
7.3999 391.672 li
8.4082 392.032 li
9.12793 392.032 li
10.1362 391.672 li
10.856 390.952 li
11.144 390.303 li
11.144 389.295 li
10.856 388.576 li
10.1362 387.928 li
@
5.24023 385.48 mo
5.24023 380.872 li
@
3.22412 378.28 mo
2.93604 377.776 li
2.14404 376.984 li
7.54395 376.984 li
@
2.57617 373.672 mo
3.2959 372.952 li
4.3042 372.303 li
5.67188 371.584 li
7.3999 371.295 li
8.76807 371.295 li
10.4961 371.584 li
11.8643 372.303 li
12.8721 372.952 li
13.5923 373.672 li
@
39.0801 507.088 mo
543.08 507.088 li
543.08 651.088 li
39.0801 651.088 li
39.0801 507.088 li
@
39.0801 506.584 mo
543.656 506.584 li
543.656 650.512 li
39.6563 650.512 li
39.6563 506.584 li
@
39.0801 651.088 mo
39.0801 651.088 li
39.0801 646.336 li
@
30.8721 659.657 mo
31.5923 659.295 li
32.6001 658.288 li
32.6001 665.489 li
@
37.4238 658.288 mo
41.0962 658.288 li
39.0801 661.024 li
40.0879 661.024 li
40.7358 661.311 li
41.0962 661.672 li
41.4561 662.68 li
41.4561 663.399 li
41.0962 664.409 li
40.4482 665.127 li
39.3682 665.489 li
38.4321 665.489 li
37.4238 665.127 li
37.064 664.768 li
36.7041 664.047 li
@
45.5601 658.288 mo
44.5522 658.577 li
43.832 659.657 li
43.4722 661.311 li
43.4722 662.391 li
43.832 664.047 li
44.5522 665.127 li
45.5601 665.489 li
46.2803 665.489 li
47.2881 665.127 li
47.936 664.047 li
48.2959 662.391 li
48.2959 661.311 li
47.936 659.657 li
47.2881 658.577 li
46.2803 658.288 li
45.5601 658.288 li
@
39.0801 651.088 mo
106.256 651.088 li
106.256 646.336 li
@
98.0479 659.657 mo
98.6963 659.295 li
99.7041 658.288 li
99.7041 665.489 li
@
104.528 658.288 mo
108.272 658.288 li
106.256 661.024 li
107.264 661.024 li
107.984 661.311 li
108.272 661.672 li
108.632 662.68 li
108.632 663.399 li
108.272 664.409 li
107.624 665.127 li
106.616 665.489 li
105.536 665.489 li
104.528 665.127 li
104.168 664.768 li
103.88 664.047 li
@
111.08 659.944 mo
111.08 659.657 li
111.368 658.936 li
111.728 658.577 li
112.448 658.288 li
113.816 658.288 li
114.464 658.577 li
114.824 658.936 li
115.184 659.657 li
115.184 660.303 li
114.824 661.024 li
114.104 662.032 li
110.72 665.489 li
115.472 665.489 li
@
106.256 651.088 mo
173.432 651.088 li
173.432 646.336 li
@
165.224 659.657 mo
165.872 659.295 li
166.952 658.288 li
166.952 665.489 li
@
171.704 658.288 mo
175.52 658.288 li
173.432 661.024 li
174.44 661.024 li
175.16 661.311 li
175.52 661.672 li
175.88 662.68 li
175.88 663.399 li
175.52 664.409 li
174.8 665.127 li
173.792 665.489 li
172.784 665.489 li
171.704 665.127 li
171.416 664.768 li
171.056 664.047 li
@
181.352 658.288 mo
177.896 663.04 li
183.08 663.04 li
@
181.352 658.288 mo
181.352 665.489 li
@
173.432 651.088 mo
240.68 651.088 li
240.68 646.336 li
@
232.4 659.657 mo
233.12 659.295 li
234.128 658.288 li
234.128 665.489 li
@
238.952 658.288 mo
242.696 658.288 li
240.68 661.024 li
241.688 661.024 li
242.336 661.311 li
242.696 661.672 li
243.056 662.68 li
243.056 663.399 li
242.696 664.409 li
242.048 665.127 li
240.968 665.489 li
239.96 665.489 li
238.952 665.127 li
238.592 664.768 li
238.232 664.047 li
@
249.536 659.295 mo
249.248 658.577 li
248.168 658.288 li
247.52 658.288 li
246.44 658.577 li
245.792 659.657 li
245.432 661.311 li
245.432 663.04 li
245.792 664.409 li
246.44 665.127 li
247.52 665.489 li
247.88 665.489 li
248.888 665.127 li
249.536 664.409 li
249.896 663.399 li
249.896 663.04 li
249.536 662.032 li
248.888 661.311 li
247.88 661.024 li
247.52 661.024 li
246.44 661.311 li
245.792 662.032 li
245.432 663.04 li
@
240.68 651.088 mo
307.856 651.088 li
307.856 646.336 li
@
299.648 659.657 mo
300.296 659.295 li
301.304 658.288 li
301.304 665.489 li
@
306.128 658.288 mo
309.872 658.288 li
307.856 661.024 li
308.864 661.024 li
309.584 661.311 li
309.872 661.672 li
310.232 662.68 li
310.232 663.399 li
309.872 664.409 li
309.224 665.127 li
308.216 665.489 li
307.136 665.489 li
306.128 665.127 li
305.768 664.768 li
305.48 664.047 li
@
314.048 658.288 mo
312.968 658.577 li
312.68 659.295 li
312.68 659.944 li
312.968 660.665 li
313.688 661.024 li
315.056 661.311 li
316.064 661.672 li
316.784 662.391 li
317.072 663.04 li
317.072 664.047 li
316.784 664.768 li
316.424 665.127 li
315.416 665.489 li
314.048 665.489 li
312.968 665.127 li
312.68 664.768 li
312.32 664.047 li
312.32 663.04 li
312.68 662.391 li
313.328 661.672 li
314.336 661.311 li
315.704 661.024 li
316.424 660.665 li
316.784 659.944 li
316.784 659.295 li
316.424 658.577 li
315.416 658.288 li
314.048 658.288 li
@
307.856 651.088 mo
375.032 651.088 li
375.032 646.336 li
@
366.824 659.657 mo
367.472 659.295 li
368.552 658.288 li
368.552 665.489 li
@
376.04 658.288 mo
372.656 663.04 li
377.768 663.04 li
@
376.04 658.288 mo
376.04 665.489 li
@
381.584 658.288 mo
380.504 658.577 li
379.856 659.657 li
379.496 661.311 li
379.496 662.391 li
379.856 664.047 li
380.504 665.127 li
381.584 665.489 li
382.232 665.489 li
383.24 665.127 li
383.96 664.047 li
384.32 662.391 li
384.32 661.311 li
383.96 659.657 li
383.24 658.577 li
382.232 658.288 li
381.584 658.288 li
@
375.032 651.088 mo
442.28 651.088 li
442.28 646.336 li
@
434 659.657 mo
434.72 659.295 li
435.729 658.288 li
435.729 665.489 li
@
443.288 658.288 mo
439.832 663.04 li
445.016 663.04 li
@
443.288 658.288 mo
443.288 665.489 li
@
447.032 659.944 mo
447.032 659.657 li
447.393 658.936 li
447.752 658.577 li
448.4 658.288 li
449.768 658.288 li
450.488 658.577 li
450.848 658.936 li
451.136 659.657 li
451.136 660.303 li
450.848 661.024 li
450.128 662.032 li
446.672 665.489 li
451.496 665.489 li
@
442.28 651.088 mo
509.456 651.088 li
509.456 646.336 li
@
501.248 659.657 mo
501.896 659.295 li
502.904 658.288 li
502.904 665.489 li
@
510.464 658.288 mo
507.08 663.04 li
512.192 663.04 li
@
510.464 658.288 mo
510.464 665.489 li
@
517.304 658.288 mo
513.92 663.04 li
519.032 663.04 li
@
517.304 658.288 mo
517.304 665.489 li
@
509.456 651.088 mo
543.08 651.088 li
543.08 650.512 li
39.0801 650.512 li
@
39.0801 651.088 mo
39.0801 642.52 li
43.832 642.52 li
@
26.9121 645.471 mo
26.624 645.833 li
26.9121 646.12 li
27.272 645.833 li
26.9121 645.471 li
@
33.104 638.92 mo
29.7202 643.745 li
34.832 643.745 li
@
33.104 638.92 mo
33.104 646.12 li
@
39.0801 642.52 mo
39.0801 625.887 li
43.832 625.887 li
@
26.9121 628.84 mo
26.624 629.2 li
26.9121 629.489 li
27.272 629.2 li
26.9121 628.84 li
@
34.1123 623.368 mo
33.8242 622.647 li
32.7441 622.288 li
32.0962 622.288 li
31.0879 622.647 li
30.3682 623.657 li
30.0083 625.383 li
30.0083 627.112 li
30.3682 628.479 li
31.0879 629.2 li
32.0962 629.489 li
32.4561 629.489 li
33.4639 629.2 li
34.1123 628.479 li
34.4722 627.471 li
34.4722 627.112 li
34.1123 626.104 li
33.4639 625.383 li
32.4561 625.024 li
32.0962 625.024 li
31.0879 625.383 li
30.3682 626.104 li
30.0083 627.112 li
@
39.0801 625.887 mo
39.0801 609.256 li
43.832 609.256 li
@
26.9121 612.208 mo
26.624 612.497 li
26.9121 612.856 li
27.272 612.497 li
26.9121 612.208 li
@
31.376 605.657 mo
30.3682 606.016 li
30.0083 606.665 li
30.0083 607.383 li
30.3682 608.032 li
31.0879 608.391 li
32.4561 608.752 li
33.4639 609.112 li
34.1123 609.76 li
34.4722 610.479 li
34.4722 611.489 li
34.1123 612.208 li
33.8242 612.497 li
32.7441 612.856 li
31.376 612.856 li
30.3682 612.497 li
30.0083 612.208 li
29.7202 611.489 li
29.7202 610.479 li
30.0083 609.76 li
30.728 609.112 li
31.7358 608.752 li
33.104 608.391 li
33.8242 608.032 li
34.1123 607.383 li
34.1123 606.665 li
33.8242 606.016 li
32.7441 605.657 li
31.376 605.657 li
@
39.0801 609.256 mo
39.0801 592.624 li
43.832 592.624 li
@
20.4321 590.391 mo
21.0801 590.032 li
22.1602 589.024 li
22.1602 596.223 li
@
26.9121 595.577 mo
26.624 595.864 li
26.9121 596.223 li
27.272 595.864 li
26.9121 595.577 li
@
31.7358 589.024 mo
30.728 589.383 li
30.0083 590.391 li
29.7202 592.12 li
29.7202 593.127 li
30.0083 594.856 li
30.728 595.864 li
31.7358 596.223 li
32.4561 596.223 li
33.4639 595.864 li
34.1123 594.856 li
34.4722 593.127 li
34.4722 592.12 li
34.1123 590.391 li
33.4639 589.383 li
32.4561 589.024 li
31.7358 589.024 li
@
39.0801 592.624 mo
39.0801 575.993 li
43.832 575.993 li
@
20.4321 573.76 mo
21.0801 573.399 li
22.1602 572.391 li
22.1602 579.592 li
@
26.9121 578.872 mo
26.624 579.231 li
26.9121 579.592 li
27.272 579.231 li
26.9121 578.872 li
@
30.0083 574.12 mo
30.0083 573.76 li
30.3682 573.04 li
30.728 572.752 li
31.376 572.391 li
32.7441 572.391 li
33.4639 572.752 li
33.8242 573.04 li
34.1123 573.76 li
34.1123 574.479 li
33.8242 575.127 li
33.104 576.135 li
29.7202 579.592 li
34.4722 579.592 li
@
39.0801 575.993 mo
39.0801 559.36 li
43.832 559.36 li
@
20.4321 557.127 mo
21.0801 556.768 li
22.1602 555.76 li
22.1602 562.959 li
@
26.9121 562.241 mo
26.624 562.6 li
26.9121 562.959 li
27.272 562.6 li
26.9121 562.241 li
@
33.104 555.76 mo
29.7202 560.512 li
34.832 560.512 li
@
33.104 555.76 mo
33.104 562.959 li
@
39.0801 559.36 mo
39.0801 542.727 li
43.832 542.727 li
@
20.4321 540.497 mo
21.0801 540.135 li
22.1602 539.127 li
22.1602 546.329 li
@
26.9121 545.608 mo
26.624 545.967 li
26.9121 546.329 li
27.272 545.967 li
26.9121 545.608 li
@
34.1123 540.135 mo
33.8242 539.417 li
32.7441 539.127 li
32.0962 539.127 li
31.0879 539.417 li
30.3682 540.497 li
30.0083 542.223 li
30.0083 543.879 li
30.3682 545.249 li
31.0879 545.967 li
32.0962 546.329 li
32.4561 546.329 li
33.4639 545.967 li
34.1123 545.249 li
34.4722 544.241 li
34.4722 543.879 li
34.1123 542.872 li
33.4639 542.223 li
32.4561 541.864 li
32.0962 541.864 li
31.0879 542.223 li
30.3682 542.872 li
30.0083 543.879 li
@
39.0801 542.727 mo
39.0801 526.096 li
43.832 526.096 li
@
20.4321 523.864 mo
21.0801 523.504 li
22.1602 522.497 li
22.1602 529.696 li
@
26.9121 528.975 mo
26.624 529.336 li
26.9121 529.696 li
27.272 529.336 li
26.9121 528.975 li
@
31.376 522.497 mo
30.3682 522.784 li
30.0083 523.504 li
30.0083 524.153 li
30.3682 524.872 li
31.0879 525.231 li
32.4561 525.52 li
33.4639 525.879 li
34.1123 526.6 li
34.4722 527.249 li
34.4722 528.329 li
34.1123 528.975 li
33.8242 529.336 li
32.7441 529.696 li
31.376 529.696 li
30.3682 529.336 li
30.0083 528.975 li
29.7202 528.329 li
29.7202 527.249 li
30.0083 526.6 li
30.728 525.879 li
31.7358 525.52 li
33.104 525.231 li
33.8242 524.872 li
34.1123 524.153 li
34.1123 523.504 li
33.8242 522.784 li
32.7441 522.497 li
31.376 522.497 li
@
39.0801 526.096 mo
39.0801 509.391 li
43.832 509.391 li
@
19.7119 507.52 mo
19.7119 507.231 li
20.0723 506.512 li
20.4321 506.153 li
21.0801 505.792 li
22.52 505.792 li
23.168 506.153 li
23.5278 506.512 li
23.8882 507.231 li
23.8882 507.879 li
23.5278 508.6 li
22.8081 509.608 li
19.4238 512.993 li
24.1763 512.993 li
@
26.9121 512.344 mo
26.624 512.704 li
26.9121 512.993 li
27.272 512.704 li
26.9121 512.344 li
@
31.7358 505.792 mo
30.728 506.153 li
30.0083 507.231 li
29.7202 508.887 li
29.7202 509.967 li
30.0083 511.624 li
30.728 512.704 li
31.7358 512.993 li
32.4561 512.993 li
33.4639 512.704 li
34.1123 511.624 li
34.4722 509.967 li
34.4722 508.887 li
34.1123 507.231 li
33.4639 506.153 li
32.4561 505.792 li
31.7358 505.792 li
@
39.0801 509.391 mo
39.0801 507.088 li
38.5039 507.088 li
38.5039 651.088 li
@
40.376 607.024 mo
41.3843 603.135 li
42.752 606.016 li
43.7603 608.536 li
45.416 524.657 li
46.4238 584.92 li
47.4321 609.76 li
48.8003 596.799 li
50.4561 600.975 li
51.8242 613.792 li
55.1362 617.68 li
56.5039 619.12 li
57.5122 618.471 li
58.52 600.688 li
59.5283 603.424 li
60.5361 588.016 li
62.9121 601.264 li
63.9199 619.047 li
64.9282 616.887 li
67.5923 621.856 li
68.6001 623.368 li
69.6079 619.624 li
70.9761 616.815 li
71.9839 613.504 li
72.9922 613.143 li
74.6479 615.807 li
75.6563 617.104 li
76.376 617.463 li
77.6719 623.295 li
78.6802 622.647 li
82.3521 602.559 li
83.3599 613.504 li
84.0801 608.608 li
85.7363 613.36 li
87.104 616.456 li
88.1123 622.577 li
89.1201 620.848 li
90.416 617.249 li
91.7842 618.399 li
92.4321 616.672 li
93.1519 615.231 li
94.1602 615.448 li
95.168 607.311 li
96.4639 602.631 li
97.4722 600.399 li
98.8398 597.592 li
99.8481 601.479 li
100.856 607.096 li
102.224 612.424 li
103.52 606.737 li
106.544 602.417 li
107.552 603.352 li
108.56 597.303 li
109.568 605.368 li
110.576 605.944 li
111.656 612.711 li
112.664 628.696 li
113.672 626.321 li
114.68 625.311 li
115.616 616.672 li
116.624 616.887 li
117.632 617.391 li
118.64 613.504 li
119.648 602.272 li
120.656 598.528 li
121.664 606.448 li
122.672 608.967 li
123.752 615.161 li
124.76 608.895 li
125.768 609.04 li
127.064 604.577 li
128.072 605.944 li
129.44 609.184 li
131.744 606.807 li
132.752 593.559 li
133.76 588.952 li
134.768 585.063 li
135.776 594.639 li
137.144 617.321 li
138.152 618.329 li
139.16 621.639 li
140.528 623.727 li
141.536 610.84 li
142.544 600.112 li
143.192 596.727 li
144.56 607.528 li
145.568 624.088 li
146.864 631.073 li
147.584 628.409 li
148.592 612.28 li
149.6 579.807 li
150.608 604.36 li
151.616 612.639 li
152.624 617.608 li
153.632 623.153 li
155.648 625.096 li
157.952 624.879 li
158.96 574.913 li
159.968 631.647 li
161.696 616.311 li
175.16 595.864 li
176.168 603.208 li
177.824 601.84 li
179.12 599.463 li
180.128 600.833 li
181.136 605.008 li
182.144 584.993 li
183.512 596.944 li
184.52 581.536 li
185.528 590.104 li
186.536 596.223 li
187.904 592.192 li
189.272 600.04 li
189.92 593.417 li
190.928 589.959 li
192.224 590.536 li
193.232 601.624 li
194.24 602.055 li
195.248 602.055 li
196.616 606.737 li
197.984 608.463 li
198.992 599.536 li
200 602.344 li
201.008 605.223 li
202.376 605.223 li
203.312 623.44 li
204.68 621.135 li
206.048 620.2 li
207.056 603.569 li
208.064 593.055 li
209.072 576.928 li
210.08 576.497 li
211.088 579.088 li
212.096 592.264 li
213.104 604.647 li
215.48 618.471 li
216.776 615.592 li
218.144 614.872 li
218.792 613.288 li
219.8 615.807 li
221.456 614.44 li
222.464 614.584 li
224.192 614.944 li
225.56 618.688 li
226.568 617.536 li
227.576 620.272 li
228.512 621.135 li
229.88 619.264 li
230.888 626.895 li
231.896 617.895 li
232.904 628.192 li
233.912 629.704 li
234.92 628.985 li
235.928 622.647 li
236.936 623.153 li
238.304 620.272 li
239.672 616.959 li
240.68 619.192 li
241.616 612.856 li
242.624 610.409 li
243.632 611.848 li
244.64 613.936 li
245.648 611.92 li
247.016 619.913 li
248.024 624.737 li
254.72 588.737 li
255.728 590.463 li
256.736 583.479 li
257.744 599.68 li
258.752 609.76 li
260.12 606.737 li
261.128 607.959 li
262.136 566.489 li
263.144 602.127 li
264.152 604.504 li
265.16 605.295 li
266.168 603.711 li
266.816 595.864 li
268.184 587.368 li
269.192 572.104 li
270.2 574.624 li
271.568 594.424 li
272.576 599.895 li
273.584 597.375 li
274.592 593.417 li
275.6 608.967 li
276.608 602.272 li
278.624 600.905 li
279.632 605.008 li
280.928 612.928 li
281.937 616.959 li
282.944 617.68 li
283.952 616.024 li
284.96 615.592 li
285.968 618.543 li
286.976 608.825 li
288.056 604.792 li
289.064 598.745 li
290.072 599.176 li
291.368 597.016 li
292.376 594.497 li
293.384 583.913 li
294.392 575.559 li
295.4 572.895 li
296.408 586.143 li
297.416 584.776 li
300.44 590.536 li
301.16 583.409 li
302.168 593.848 li
303.176 595.936 li
304.472 600.471 li
305.48 604.936 li
306.128 599.463 li
307.136 593.848 li
308.145 592.624 li
309.152 584.92 li
310.521 583.551 li
311.528 585.424 li
313.256 593.417 li
314.264 590.68 li
315.561 585.497 li
316.568 577.936 li
317.937 576.424 li
318.944 574.409 li
320.24 580.959 li
321.248 584.993 li
322.256 587.727 li
323.264 598.168 li
324.272 598.959 li
325.352 601.913 li
326.648 600.905 li
327.368 644.608 li
328.664 583.047 li
329.672 601.192 li
331.04 607.383 li
332.336 590.536 li
333.344 582.905 li
334.352 585.711 li
335.36 586 li
336.368 583.624 li
337.376 575.993 li
338.456 575.993 li
339.464 576.135 li
340.472 565.336 li
343.424 555.833 li
344.432 561.665 li
345.44 560.153 li
346.448 551.872 li
347.456 556.409 li
348.464 544.959 li
349.472 548.559 li
351.2 552.375 li
352.208 561.161 li
353.576 571.168 li
355.232 556.409 li
356.24 562.311 li
357.248 558.711 li
358.544 564.04 li
359.552 561.665 li
360.92 567.497 li
361.928 571.168 li
363.656 574.192 li
382.448 551.872 li
384.464 562.168 li
385.76 558.711 li
386.768 554.68 li
387.488 574.409 li
388.856 573.329 li
390.152 595.073 li
391.16 596.799 li
392.168 591.975 li
393.176 600.399 li
394.544 590.895 li
395.552 592.409 li
397.208 592.192 li
398.216 594.569 li
399.584 594.497 li
400.592 587.295 li
401.6 584.272 li
402.608 580.815 li
403.616 581.249 li
404.624 578.295 li
405.272 583.985 li
406.64 576.569 li
408.656 566.776 li
409.664 570.161 li
410.672 572.463 li
411.968 572.68 li
414.056 517.168 li
415.064 584.704 li
421.4 580.168 li
422.768 586.073 li
423.776 578.223 li
424.784 581.895 li
426.152 573.399 li
427.16 570.665 li
428.168 562.096 li
429.176 568.647 li
429.824 560.44 li
430.472 566.559 li
431.48 573.905 li
432.488 574.768 li
434.145 580.528 li
435.152 580.672 li
436.88 578.872 li
437.888 576.569 li
438.896 571.528 li
439.904 574.336 li
440.912 573.76 li
443.936 567.856 li
445.232 559.792 li
446.6 556.84 li
447.608 559.792 li
448.616 556.624 li
449.984 564.76 li
450.992 563.536 li
452 564.184 li
453.008 564.184 li
454.016 570.016 li
455.313 572.249 li
456.32 570.448 li
457.328 572.608 li
458.336 570.448 li
460.064 573.833 li
460.712 572.463 li
461.72 567.28 li
463.088 566.704 li
463.736 559.073 li
465.104 559.647 li
467.12 527.68 li
468.128 519.833 li
469.784 513.639 li
470.792 524.512 li
473.168 563.68 li
474.176 568.647 li
475.472 567.928 li
476.552 544.456 li
477.561 515.081 li
478.856 565.696 li
479.864 541.647 li
481.232 548.2 li
481.88 581.176 li
482.888 574.551 li
485.264 568 li
486.272 566.344 li
487.28 565.264 li
488.288 570.52 li
489.296 559.36 li
490.304 564.112 li
490.952 562.959 li
491.96 562.815 li
508.088 539.272 li
510.104 541.143 li
511.76 548.559 li
512.768 550.215 li
514.496 545.536 li
515.145 550.936 li
516.512 556.12 li
517.521 562.672 li
518.528 561.665 li
519.824 556.913 li
520.832 559.215 li
521.552 552.879 li
522.561 558.352 li
524.216 554.825 li
524.864 557.993 li
525.872 553.959 li
526.952 555.688 li
527.96 558.569 li
528.248 544.528 li
529.616 560.872 li
530.624 550 li
531.632 549.639 li
532.28 524.799 li
533.648 556.551 li
534.656 557.776 li
535.664 578.223 li
537.68 575.127 li
538.977 580.456 li
540.344 569.153 li
541.352 564.399 li
542.36 561.952 li
@
6.39209 612.784 mo
6.39209 612.135 li
7.04004 611.417 li
12.8721 609.399 li
13.5923 608.68 li
13.5923 608.032 li
@
6.39209 607.672 mo
7.04004 608.032 li
8.12012 608.68 li
11.8643 612.135 li
12.8721 612.784 li
13.5923 613.143 li
@
2.57617 596.727 mo
3.2959 597.375 li
4.3042 598.096 li
5.67188 598.745 li
7.3999 599.104 li
8.76807 599.104 li
10.4961 598.745 li
11.8643 598.096 li
12.8721 597.375 li
13.5923 596.727 li
@
6.39209 594.28 mo
11.144 594.28 li
@
7.76025 594.28 mo
6.68018 593.272 li
6.39209 592.551 li
6.39209 591.543 li
6.68018 590.895 li
7.76025 590.536 li
11.144 590.536 li
@
6.39209 587.799 mo
11.144 587.799 li
@
7.76025 587.799 mo
6.68018 586.719 li
6.39209 586.073 li
6.39209 585.063 li
6.68018 584.344 li
7.76025 583.985 li
11.144 583.985 li
@
7.76025 583.985 mo
6.68018 582.975 li
6.39209 582.329 li
6.39209 581.249 li
6.68018 580.6 li
7.76025 580.241 li
11.144 580.241 li
@
2.14404 577.577 mo
2.14404 574.768 li
4.23193 576.28 li
4.23193 575.489 li
4.52002 574.985 li
4.73633 574.768 li
5.52783 574.479 li
6.03223 574.479 li
6.82422 574.768 li
7.32813 575.272 li
7.54395 576.063 li
7.54395 576.784 li
7.32813 577.577 li
7.04004 577.864 li
6.53613 578.081 li
@
3.94385 572.321 mo
11.144 572.321 li
@
6.39209 568.936 mo
9.77588 572.321 li
@
8.4082 570.952 mo
11.144 568.577 li
@
6.39209 562.745 mo
11.8643 562.745 li
12.8721 563.104 li
13.2319 563.463 li
13.5923 564.112 li
13.5923 565.12 li
13.2319 565.84 li
@
7.3999 562.745 mo
6.68018 563.463 li
6.39209 564.112 li
6.39209 565.12 li
6.68018 565.84 li
7.3999 566.489 li
8.4082 566.848 li
9.12793 566.848 li
10.1362 566.489 li
10.856 565.84 li
11.144 565.12 li
11.144 564.112 li
10.856 563.463 li
10.1362 562.745 li
@
5.24023 560.368 mo
5.24023 555.76 li
@
3.22412 553.168 mo
2.93604 552.665 li
2.14404 551.872 li
7.54395 551.872 li
@
2.57617 548.559 mo
3.2959 547.84 li
4.3042 547.12 li
5.67188 546.471 li
7.3999 546.112 li
8.76807 546.112 li
10.4961 546.471 li
11.8643 547.12 li
12.8721 547.84 li
13.5923 548.559 li
@
227.936 672.688 mo
227.936 679.887 li
@
227.936 672.688 mo
230.672 679.887 li
@
233.48 672.688 mo
230.672 679.887 li
@
233.48 672.688 mo
233.48 679.887 li
@
235.856 677.081 mo
239.96 677.081 li
239.96 676.432 li
239.6 675.711 li
239.24 675.424 li
238.592 675.063 li
237.584 675.063 li
236.864 675.424 li
236.216 676.073 li
235.856 677.081 li
235.856 677.799 li
236.216 678.807 li
236.864 679.528 li
237.584 679.887 li
238.592 679.887 li
239.24 679.528 li
239.96 678.807 li
@
242.696 672.688 mo
242.696 678.448 li
243.056 679.528 li
243.704 679.887 li
244.424 679.887 li
@
241.688 675.063 mo
244.064 675.063 li
@
246.152 677.081 mo
250.256 677.081 li
250.256 676.432 li
249.896 675.711 li
249.536 675.424 li
248.888 675.063 li
247.88 675.063 li
247.16 675.424 li
246.44 676.073 li
246.152 677.081 li
246.152 677.799 li
246.44 678.807 li
247.16 679.528 li
247.88 679.887 li
248.888 679.887 li
249.536 679.528 li
250.256 678.807 li
@
252.632 675.063 mo
252.632 679.887 li
@
252.632 677.081 mo
252.992 676.073 li
253.64 675.424 li
254.36 675.063 li
255.368 675.063 li
@
260.552 676.073 mo
260.192 675.424 li
259.184 675.063 li
258.104 675.063 li
257.096 675.424 li
256.736 676.073 li
257.096 676.792 li
257.816 677.081 li
259.472 677.44 li
260.192 677.799 li
260.552 678.448 li
260.552 678.807 li
260.192 679.528 li
259.184 679.887 li
258.104 679.887 li
257.096 679.528 li
256.736 678.807 li
@
269.768 672.688 mo
269.768 679.887 li
@
269.768 676.073 mo
270.488 675.424 li
271.136 675.063 li
272.216 675.063 li
272.864 675.424 li
273.584 676.073 li
273.872 677.081 li
273.872 677.799 li
273.584 678.807 li
272.864 679.528 li
272.216 679.887 li
271.136 679.887 li
270.488 679.528 li
269.768 678.807 li
@
275.96 677.081 mo
280.064 677.081 li
280.064 676.432 li
279.704 675.711 li
279.416 675.424 li
278.696 675.063 li
277.688 675.063 li
276.968 675.424 li
276.32 676.073 li
275.96 677.081 li
275.96 677.799 li
276.32 678.807 li
276.968 679.528 li
277.688 679.887 li
278.696 679.887 li
279.416 679.528 li
280.064 678.807 li
@
282.44 672.688 mo
282.44 679.887 li
@
286.616 675.063 mo
285.896 675.424 li
285.248 676.073 li
284.888 677.081 li
284.888 677.799 li
285.248 678.807 li
285.896 679.528 li
286.616 679.887 li
287.624 679.887 li
288.272 679.528 li
288.992 678.807 li
289.352 677.799 li
289.352 677.081 li
288.992 676.073 li
288.272 675.424 li
287.624 675.063 li
286.616 675.063 li
@
291.368 675.063 mo
292.736 679.887 li
@
294.104 675.063 mo
292.736 679.887 li
@
294.104 675.063 mo
295.472 679.887 li
@
296.84 675.063 mo
295.472 679.887 li
@
310.592 673.696 mo
309.872 672.975 li
308.864 672.688 li
307.496 672.688 li
306.488 672.975 li
305.768 673.696 li
305.768 674.344 li
306.128 675.063 li
306.488 675.424 li
307.136 675.711 li
309.224 676.432 li
309.872 676.792 li
310.232 677.081 li
310.592 677.799 li
310.592 678.807 li
309.872 679.528 li
308.864 679.887 li
307.496 679.887 li
306.488 679.528 li
305.768 678.807 li
@
312.68 677.081 mo
316.784 677.081 li
316.784 676.432 li
316.424 675.711 li
316.064 675.424 li
315.416 675.063 li
314.336 675.063 li
313.688 675.424 li
312.968 676.073 li
312.68 677.081 li
312.68 677.799 li
312.968 678.807 li
313.688 679.528 li
314.336 679.887 li
315.416 679.887 li
316.064 679.528 li
316.784 678.807 li
@
322.904 675.063 mo
322.904 679.887 li
@
322.904 676.073 mo
322.256 675.424 li
321.536 675.063 li
320.528 675.063 li
319.88 675.424 li
319.16 676.073 li
318.8 677.081 li
318.8 677.799 li
319.16 678.807 li
319.88 679.528 li
320.528 679.887 li
321.536 679.887 li
322.256 679.528 li
322.904 678.807 li
@
334.568 672.688 mo
333.92 672.688 li
333.2 672.975 li
332.84 674.055 li
332.84 679.887 li
@
331.832 675.063 mo
334.28 675.063 li
@
336.656 672.688 mo
336.656 679.887 li
@
340.76 675.063 mo
340.04 675.424 li
339.392 676.073 li
339.032 677.081 li
339.032 677.799 li
339.392 678.807 li
340.04 679.528 li
340.76 679.887 li
341.768 679.887 li
342.488 679.528 li
343.136 678.807 li
343.496 677.799 li
343.496 677.081 li
343.136 676.073 li
342.488 675.424 li
341.768 675.063 li
340.76 675.063 li
@
347.24 675.063 mo
346.592 675.424 li
345.872 676.073 li
345.584 677.081 li
345.584 677.799 li
345.872 678.807 li
346.592 679.528 li
347.24 679.887 li
348.32 679.887 li
348.968 679.528 li
349.688 678.807 li
350.048 677.799 li
350.048 677.081 li
349.688 676.073 li
348.968 675.424 li
348.32 675.063 li
347.24 675.063 li
@
352.424 675.063 mo
352.424 679.887 li
@
352.424 677.081 mo
352.784 676.073 li
353.432 675.424 li
354.152 675.063 li
355.16 675.063 li
355.16 675.063 li
@
%ADOBeginSubsetFont: ComicSansMS Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ComicSansMS def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 50 /two putdup 53 /five putdup 68 /D putdup 72 /H putdup 80 /P putdup 83 /S putdup 101 /e putdup 108 /l putdup 111 /o putdef/FontBBox {-69 -292 1187 1102} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings11 dict dup begin/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB70854A4518CFB8D731A1977C1C08A> |-/space <1C60D8A8C9B84186EC> |-/two <1C60D8A8C9B7D98F6D8F3D7AA695A6A6775D351A3C5B32DF9BF22260E9F8506C6C0AFACE341E1E92FBC3EF784C227B64F08462D61DD043B72D0EF946A3AE72A4250C97F9534EA1ECB8D1F844DABC2780EA5497B3400E0115082BCD52CA33A42EB31BAFC00E89283E1398238FF501EF46348166C5D0796F4F302EEFDEF2C569616B35F3A295FC3051C30E10E4927C117B901A9DA57C3B1677644528E481FA057A75ABBC2AFB35C7AE1B05FE0BDF0A1E3241A7236A535A6C63ACD853B32B2C1D37907B8E7DB8A4A38921C6A2C9DE2A43FF89B38C12B866B35B39B6383EDE8BC72433248A45DEF8A4F70A87D3942EB09EC1FED7DD26A9A13A5550450B987E697E0B> |-/five <1C60D8A8C9B7D98F6D54D48ED68EA6CF969F0E5B50A1A83CDD96ED54CE7E034617721CFF9E66FC1EED4AF925D2EABE5F3887295B9694FAE87E5068EF00B2E19BB68346DFF7F2616719067C9E31024F97634B80D817FACCB1FF4B22DB7BC4AE86BF0B2C1A9A0C794826FE65E1181EB10541F6D1BC25C237A065541FED0BE699DBCA3EC8C9BDA955EC7075994950DCC22C238275A937278BA07424607EEB10C1AE2226536CB6BDB9CC86C61FE2B4A63BB08CE3F5FF5E415AB86FFD87E55E1E4FB7393915DC53D001D3942F0A19EBE33E976F335D27A4E9FA42922038F9E9924E840CA20833DB114F82CEFD215963C9F09A5A31BEE9615AEB04B263C62CEE55CBD81DC2A323B20160F4BB153DCC4119196063B9B3AFABF0E64C37924ADEBA5A73CF27B225CFA4A00591BD57F0> |-/D <1C60D8A8C9B6079F6CB7E532E9AD798E1A9E0E9D7042D09A7BE48F45147E8A93793F66954E6B8860A43BD585E271E7F03DF5D6C9950D5A044D1FE3254F4EAD6D0257E1F7146FDFA5A3D2A9A61D3334BF45C9B76ED37AA7790CA2367DC42210F7B8AB7BE54697E148355064439150DAAFCAE012FD6A53460284F1817ACDA3BA1D6FE529F583F3DBE567DEFBD6B4F46E74C8B3983FEEE97D9D20161BB1B829D78C7A812DCE9E582CC4E03359DF24245D1A751E847C0CB9A4A968631656593E9133F2157B422B2BC9FC4D97AC> |-/H <1C60D8A8C9B6F576EA558CA95278D4131994310FCED8C14366F541DE93B82D453F40A9737EA778F2A5E9A19DDE1480CD84CF58AD6BD3A75726B9A9FEF04D62327CD19828A2F4B91B3FE8E1F270D0750624AF4931AEDDD18EA84A0BE440AACD695D81B929928E675C20B5F591A7319C00BE5C9563617384C980A0E256F97B094FC97E9CA0DC206BD62A3226B987E765061256BC6655E10591A45399186F19133D3FB261FE31DED0121C7992A7E6AA3287BA075DC2DACB9D97D74112647020B8C6A076D2669448034DA594DAFD95B7E2C4444BA25DC7D151D826779869E3A5A6F788E61FF9B9D86CE7F4B46487EB9B08EC51B1273045AA127E1ECAEA8A89B169A67E95080E7D11350F0853CBD51B5F525185F1EE04B29D01C1AD840F6C295C4EFD0E47D165F8CCCDB275CB7437060E73477A20AE> |-/P <1C60D8A8C9B7B202A52865A9F3C88AF95BF7A4F54D680DD7C54822E5BEADA7225F1A1670EB558A170B9E3BA429D4E5C1ADD94CB40C9A15E7A8CCC05E92EA8B0358D5B8430B67FFDFA5F8F742D1081767B654F7EE148ECF84C987C9CA0747CCC899F01600CC34C28344A10C25EBF2F7876BF30D9E25BE938EAB4F41CAF28134848ACEC42218985D0F14D0A3FBFD5555B69192CCF3A02303B11B4686510CE8D8DC6FAE96D370BB0CF07E19B63533C65CA624DEAF822D7CAA14306D7136600E> |-/S <1C60D8A8C9B628237790AD4658CF43512B88CF6291C92AD3157833D0727158E115F788930744DCCE13B9EF38BDC27C8E014E078FBB056AA6D9CB016D19E883D19CDF8033D08D547D5D80A3FE9C39FDEE411A7B35FC8AE765E13D02BE7ACBC307F7F32787CBDEE9ABCF006D4619D0C247F6E0B41E16A4C1C4214C84D3C939A30D93EF290EA5C62DA90EBBDE04C58DBD56852AA46650C7E91B27CD37CE3C1E878BCB595B818969A34C673C0F2C078B01E2D0F4D3CA28C1783BA1C4C7245DBADB7E8BA3EA428618A3547EC5E16465D68D17> |-/e <1C60D8A8C9B797474FA4303150FF95D22C1576367C7C82BE107A33DB836FE273C47A9F1C294729003E4BC6906C807AE64492E567EB699590C33760698497B7D8BD4606E6533DD313B7408096D0253255EE30E5A5E3E06503BE924638C5951A143C8FB027E022BA2CC9736D9A6F100D38EB1D4C686421142EAA9CB9B186F914996503E87D112FD301022C9ED0ABE9EC3841A2AAB1D0ECFBD04DD27FAC9222691EA422325A2608DE3AA47EDFE24D5B> |-/l <1C60D8A8C9B8581A5C985F5B74008F0E2CA964639DBBD35F5DD00E39B9E95E3CD2193CB410613D02E647955F9BDFF4F3308822726BABA78ABE406A4F243D0D7526BB93B898D78CB4E4A407748C335667C85BC7C5DB0D0060EEAC> |-/o <1C60D8A8C9B78D34A55956A51486C357D04D448C2012FC2F5B0A5FE1B320E5CD61418E269420C85D10935D5D9B29D4FDDFDD85C698EDEF649FCF7B4152030DE7FB7B0AD250869A491A4776C5C05E1436F84934B318F30DD94DF542C1FA3FC71DCD30BC8EC67320F785CD0C113E143028BDC1093B4CB998C3891C7A3F7C> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CZADCU+ComicSansMS /ComicSansMS findfont ct_VMDictPut/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 17{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 17{/.notdef}rp /e 6{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf232 10.4399 mo(DSDP Hole 522)[8.66016 8.32031 8.66016 6.24609 3.58594 9.2168 6.31055 3.28711 6.57422 3.58594 7.32422 7.32422 0 ]xsh%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCZADCU+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenright <1C60D8A8C9B72DDD4BB51EC6C49AB7306C1A14C493E9BA5D78AE2C195B29D94044F912FEED39F75BE34A7150607FEA016A23803EFDD2F9288AF7A180AEFCBFBF998E3FBDAC6F3A4074B0F5D69EFDE59096176B6B29149A14AB78FC2B3577A37D471DCCDE635BBEA2665A37EE893BAA312D5DB22CA01C4916AB9D79F1B336301D84554794> |-/a <1C60D8A8C9B7BB5CA503F41BCABD6C718309D7FD3EAFD4723590A6DB54A64A3783FF0E8915C8665146025473AABA73A7307808FC49DF54120176FFCE6E5630D745DEC9D7FE687B22D69E14177C1006B659795051D4F564854E1C732886E0B2617B0D55057161A197AD04FDD89E349DC800C8FAE6C2E2E7218942027A386140843CEC6D038F4E517DF6E091EE1EC97061608AA6DD07992C53BB029F315A3C165875CF85B20BCD136667E2BE57C24163FB07309C0F29C421C91BBF197F69B4468BD92D4E0F963A574D94F4959F6C142EC285F75B0A57DCD73FA9D71DA6249A4005429B> |-systemdict /gcheck known {setglobal} if end {end} ifendCZADCU+ComicSansMS /Encoding getdup 41 /parenright putdup 97 /a putpop%ADOEndSubsetFont
/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 8{/.notdef}rp /parenright 8{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf0 28.4399 mo(a\))[6.14063 0 ]xsh%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCZADCU+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7CA6425CFEA7643A8DEBB5A06DC7605086653C2C486B6F4158198BD8053CFA2CF0B5746D9FD99FA76ED96704A3EE6AD5240E402B445EE535F8D30988D2BF1D277FECDEFAAF08DE0E8B511C56F4A81B9520ADA97B65EF70A3DA2FEDBA1CA8476F2464DBC51D59ED582B47C20AFEA363D12C1DF79765DCD8D8A76043722F8B425E1F7011ADD62634BA97617AA71C6A854B0F0CC686D37B26387C30ABB6C12591354F3ACB70299295B8E1528868221EC40C239E0BBA6645FF00A6753502A06D2C7D368BE1A45974809B92A1817D27F99B4A021556897221B8E32123B695D2F3CCFD1AED08823BA> |-systemdict /gcheck known {setglobal} if end {end} ifendCZADCU+ComicSansMS /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 8{/.notdef}rp /parenright 8{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b 2{/.notdef}rp /e 6{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf3 197.44 mo(b\))[7.11914 0 ]xsh%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCZADCU+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B7B9B9DE292882013E19E33F82B7ED3A5C89FE0A41E2745CE52BF345EF21317B06CEB633B4C461C86DB59ACA948BD5303B9C1ECB87024259662E6DE6401329C576CA7C717795A8221E64812E10D7279DA0C4ECEFC761695BC43E126B44B9576721BB314891B8E9D440D85A903F31586B4587EAE794E85616ED3F2F41CC7C8432421936554CA0D609EB4EA211DE1B1E7934AF872FDEE11CAF3B598B06E47B41> |-systemdict /gcheck known {setglobal} if end {end} ifendCZADCU+ComicSansMS /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 8{/.notdef}rp /parenright 8{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b /c /.notdef /e 6{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf4 351.44 mo(c\))[6.16406 0 ]xsh%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCZADCU+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/d <1C60D8A8C9B7F000DE2C8396BDB351B4990D8D398AAE78675B97459FA78429037C4BA1F4D53EE5133D48D0684659BD3916AD44F9EF388C820B65831703EFEBCB54E84A08629938E7E1E9BD71B24EDF23DBE596C10C019E480A33F574EB4B56CE5524F79CCE926D853B8A82B0FC6533439ADAC617F645B18C65D98BB846B0DC1C7B681B7522D351F2F82B4E916C460C2918D70553B74A3820D6E276C27FBDBE6C2473D5769F6125482A622191509AEBF182367421867D352ED6C0E76416F79DC149E960E3968BEA79DBC1A9A96F0CC21F57FD172BDA58BC> |-systemdict /gcheck known {setglobal} if end {end} ifendCZADCU+ComicSansMS /Encoding getdup 100 /d putpop%ADOEndSubsetFont
/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 8{/.notdef}rp /parenright 8{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d /e 6{/.notdef}rp /l 2{/.notdef}rp /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf4 512.44 mo(d\))[7.04883 0 ]xsh0.75 lw
397.032 72.3755 mo
397.032 66.5435 li
0.952941 0.882353 0 0 cmyk
@
394.08 69.4243 mo
399.984 69.4243 li
@
408.696 68.7759 mo
414.888 68.7759 li
@
408.696 70.7915 mo
414.888 70.7915 li
@
427.92 69.1353 mo
427.92 69.4243 li
428.208 69.4243 li
428.208 69.1353 li
427.92 68.4165 li
427.2 68.0552 li
426.192 68.0552 li
425.185 68.4165 li
424.464 69.4243 li
424.104 70.5044 li
424.104 71.5122 li
424.464 72.1597 li
424.824 72.52 li
425.472 72.8794 li
426.192 72.8794 li
427.2 72.52 li
427.92 71.5122 li
@
426.192 68.0552 mo
425.472 68.4165 li
424.824 69.4243 li
424.464 70.5044 li
424.464 71.8716 li
424.824 72.52 li
@
432.384 65.6802 mo
432.024 66.0396 li
432.384 66.3999 li
432.672 66.0396 li
432.384 65.6802 li
@
429.576 69.4243 mo
429.937 68.7759 li
430.656 68.0552 li
431.664 68.0552 li
432.024 68.4165 li
432.024 69.4243 li
431.304 71.5122 li
431.304 72.52 li
431.664 72.8794 li
@
431.304 68.0552 mo
431.664 68.4165 li
431.664 69.4243 li
430.944 71.5122 li
430.944 72.52 li
431.304 72.8794 li
432.384 72.8794 li
433.032 72.1597 li
433.393 71.5122 li
@
436.488 65.6802 mo
435.12 70.1431 li
435.12 71.1519 li
435.408 72.1597 li
435.769 72.52 li
@
436.776 65.6802 mo
435.408 70.1431 li
@
435.408 70.1431 mo
435.769 69.1353 li
436.488 68.4165 li
437.136 68.0552 li
437.856 68.0552 li
438.504 68.4165 li
438.864 68.7759 li
439.225 69.4243 li
439.225 70.5044 li
438.864 71.5122 li
438.145 72.52 li
437.136 72.8794 li
436.488 72.8794 li
435.769 72.52 li
435.408 71.5122 li
435.408 70.1431 li
@
438.504 68.4165 mo
438.864 69.1353 li
438.864 70.5044 li
438.504 71.5122 li
437.856 72.52 li
437.136 72.8794 li
@
435.408 65.6802 mo
436.776 65.6802 li
@
443.328 65.6802 mo
442.968 66.0396 li
443.328 66.3999 li
443.688 66.0396 li
443.328 65.6802 li
@
440.592 69.4243 mo
440.952 68.7759 li
441.601 68.0552 li
442.608 68.0552 li
442.968 68.4165 li
442.968 69.4243 li
442.32 71.5122 li
442.32 72.52 li
442.608 72.8794 li
@
442.32 68.0552 mo
442.608 68.4165 li
442.608 69.4243 li
441.96 71.5122 li
441.96 72.52 li
442.32 72.8794 li
443.328 72.8794 li
443.977 72.1597 li
444.336 71.5122 li
@
449.521 69.1353 mo
449.521 69.4243 li
449.809 69.4243 li
449.809 69.1353 li
449.521 68.4165 li
448.8 68.0552 li
447.792 68.0552 li
446.784 68.4165 li
446.064 69.4243 li
445.704 70.5044 li
445.704 71.5122 li
446.064 72.1597 li
446.424 72.52 li
447.072 72.8794 li
447.792 72.8794 li
448.8 72.52 li
449.521 71.5122 li
@
447.792 68.0552 mo
447.072 68.4165 li
446.424 69.4243 li
446.064 70.5044 li
446.064 71.8716 li
446.424 72.52 li
@
453.984 65.6802 mo
453.624 66.0396 li
453.984 66.3999 li
454.272 66.0396 li
453.984 65.6802 li
@
451.176 69.4243 mo
451.536 68.7759 li
452.256 68.0552 li
453.265 68.0552 li
453.624 68.4165 li
453.624 69.4243 li
452.904 71.5122 li
452.904 72.52 li
453.265 72.8794 li
@
452.904 68.0552 mo
453.265 68.4165 li
453.265 69.4243 li
452.544 71.5122 li
452.544 72.52 li
452.904 72.8794 li
453.984 72.8794 li
454.632 72.1597 li
454.992 71.5122 li
@
461.472 65.6802 mo
460.104 70.5044 li
459.744 71.8716 li
459.744 72.52 li
460.104 72.8794 li
461.185 72.8794 li
461.832 72.1597 li
462.192 71.5122 li
@
461.832 65.6802 mo
460.464 70.5044 li
460.104 71.8716 li
460.104 72.52 li
460.464 72.8794 li
@
460.104 70.5044 mo
460.104 69.4243 li
459.744 68.4165 li
459.097 68.0552 li
458.376 68.0552 li
457.368 68.4165 li
456.72 69.4243 li
456.36 70.5044 li
456.36 71.5122 li
456.72 72.1597 li
457.008 72.52 li
457.729 72.8794 li
458.376 72.8794 li
459.097 72.52 li
459.744 71.5122 li
460.104 70.5044 li
@
458.376 68.0552 mo
457.729 68.4165 li
457.008 69.4243 li
456.72 70.5044 li
456.72 71.8716 li
457.008 72.52 li
@
460.464 65.6802 mo
461.832 65.6802 li
@
465.576 68.0552 mo
464.568 68.4165 li
463.92 69.4243 li
463.561 70.5044 li
463.561 71.5122 li
463.92 72.1597 li
464.208 72.52 li
464.928 72.8794 li
465.576 72.8794 li
466.656 72.52 li
467.304 71.5122 li
467.664 70.5044 li
467.664 69.4243 li
467.304 68.7759 li
466.944 68.4165 li
466.296 68.0552 li
465.576 68.0552 li
@
465.576 68.0552 mo
464.928 68.4165 li
464.208 69.4243 li
463.92 70.5044 li
463.92 71.8716 li
464.208 72.52 li
@
465.576 72.8794 mo
466.296 72.52 li
466.944 71.5122 li
467.304 70.5044 li
467.304 69.1353 li
466.944 68.4165 li
@
471.769 65.6802 mo
471.408 66.0396 li
471.769 66.3999 li
472.128 66.0396 li
471.769 65.6802 li
@
469.032 69.4243 mo
469.393 68.7759 li
470.04 68.0552 li
471.12 68.0552 li
471.408 68.4165 li
471.408 69.4243 li
470.76 71.5122 li
470.76 72.52 li
471.12 72.8794 li
@
470.76 68.0552 mo
471.12 68.4165 li
471.12 69.4243 li
470.4 71.5122 li
470.4 72.52 li
470.76 72.8794 li
471.769 72.8794 li
472.488 72.1597 li
472.776 71.5122 li
@
479.328 65.6802 mo
477.96 70.5044 li
477.601 71.8716 li
477.601 72.52 li
477.96 72.8794 li
478.968 72.8794 li
479.688 72.1597 li
479.977 71.5122 li
@
479.688 65.6802 mo
478.32 70.5044 li
477.96 71.8716 li
477.96 72.52 li
478.32 72.8794 li
@
477.96 70.5044 mo
477.96 69.4243 li
477.601 68.4165 li
476.952 68.0552 li
476.232 68.0552 li
475.225 68.4165 li
474.504 69.4243 li
474.145 70.5044 li
474.145 71.5122 li
474.504 72.1597 li
474.864 72.52 li
475.584 72.8794 li
476.232 72.8794 li
476.952 72.52 li
477.601 71.5122 li
477.96 70.5044 li
@
476.232 68.0552 mo
475.584 68.4165 li
474.864 69.4243 li
474.504 70.5044 li
474.504 71.8716 li
474.864 72.52 li
@
478.32 65.6802 mo
479.688 65.6802 li
@
481.704 71.1519 mo
483.072 70.7915 li
484.152 70.5044 li
485.16 69.7837 li
485.521 69.1353 li
485.16 68.4165 li
484.44 68.0552 li
483.433 68.0552 li
482.424 68.4165 li
481.704 69.4243 li
481.344 70.5044 li
481.344 71.5122 li
481.704 72.1597 li
482.064 72.52 li
482.784 72.8794 li
483.433 72.8794 li
484.44 72.52 li
485.16 71.8716 li
@
483.433 68.0552 mo
482.784 68.4165 li
482.064 69.4243 li
481.704 70.5044 li
481.704 71.8716 li
482.064 72.52 li
@
491.353 68.7759 mo
491.353 69.1353 li
491.64 69.1353 li
491.64 68.7759 li
491.353 68.4165 li
490.272 68.0552 li
489.265 68.0552 li
488.256 68.4165 li
487.896 68.7759 li
487.896 69.4243 li
488.256 69.7837 li
490.632 71.1519 li
490.992 71.5122 li
@
487.896 69.1353 mo
488.256 69.4243 li
490.632 70.7915 li
490.992 71.1519 li
490.992 72.1597 li
490.632 72.52 li
489.624 72.8794 li
488.544 72.8794 li
487.536 72.52 li
487.176 72.1597 li
487.176 71.8716 li
487.536 71.8716 li
487.536 72.1597 li
@
397.032 51.4956 mo
399.984 51.4956 li
399.984 57.3999 li
394.08 57.3999 li
394.08 51.4956 li
397.032 51.4956 li
0.768627 0 1 0 cmyk
@
408.696 53.7998 mo
414.888 53.7998 li
@
408.696 55.8159 mo
414.888 55.8159 li
@
428.928 53.0796 mo
427.561 57.9038 li
427.2 58.9116 li
426.552 59.9204 li
425.472 60.2798 li
424.464 60.2798 li
423.744 59.9204 li
423.456 59.5591 li
423.456 59.272 li
423.744 58.9116 li
424.104 59.272 li
423.744 59.5591 li
@
428.568 53.0796 mo
427.2 57.9038 li
426.84 58.9116 li
426.192 59.9204 li
425.472 60.2798 li
@
427.92 55.4556 mo
427.92 54.4478 li
427.561 53.4399 li
426.84 53.0796 li
426.192 53.0796 li
425.185 53.4399 li
424.464 54.4478 li
424.104 55.4556 li
424.104 56.5356 li
424.464 57.1841 li
424.824 57.5435 li
425.472 57.9038 li
426.192 57.9038 li
426.84 57.5435 li
427.561 56.5356 li
427.92 55.4556 li
@
426.192 53.0796 mo
425.472 53.4399 li
424.824 54.4478 li
424.464 55.4556 li
424.464 56.8237 li
424.824 57.5435 li
@
430.296 54.4478 mo
430.656 53.7998 li
431.304 53.0796 li
432.384 53.0796 li
432.672 53.4399 li
432.672 54.4478 li
432.024 56.5356 li
432.024 57.1841 li
432.672 57.9038 li
@
432.024 53.0796 mo
432.384 53.4399 li
432.384 54.4478 li
431.664 56.5356 li
431.664 57.1841 li
432.024 57.5435 li
432.672 57.9038 li
433.393 57.9038 li
434.04 57.5435 li
434.76 56.8237 li
435.408 55.4556 li
@
436.488 53.0796 mo
435.12 57.9038 li
434.76 58.9116 li
434.04 59.9204 li
433.032 60.2798 li
432.024 60.2798 li
431.304 59.9204 li
430.944 59.5591 li
430.944 59.272 li
431.304 58.9116 li
431.664 59.272 li
431.304 59.5591 li
@
436.128 53.0796 mo
434.76 57.9038 li
434.4 58.9116 li
433.752 59.9204 li
433.032 60.2798 li
@
437.496 54.4478 mo
437.856 53.7998 li
438.504 53.0796 li
439.584 53.0796 li
439.872 53.4399 li
439.872 54.0879 li
439.584 55.4556 li
438.864 57.9038 li
@
439.225 53.0796 mo
439.584 53.4399 li
439.584 54.0879 li
439.225 55.4556 li
438.504 57.9038 li
@
439.584 55.4556 mo
440.232 54.0879 li
440.952 53.4399 li
441.601 53.0796 li
442.32 53.0796 li
442.608 53.4399 li
442.608 53.7998 li
442.32 54.0879 li
441.96 53.7998 li
442.32 53.4399 li
@
446.064 53.0796 mo
445.056 53.4399 li
444.336 54.4478 li
443.977 55.4556 li
443.977 56.5356 li
444.336 57.1841 li
444.696 57.5435 li
445.344 57.9038 li
446.064 57.9038 li
447.072 57.5435 li
447.792 56.5356 li
448.152 55.4556 li
448.152 54.4478 li
447.792 53.7998 li
447.433 53.4399 li
446.784 53.0796 li
446.064 53.0796 li
@
446.064 53.0796 mo
445.344 53.4399 li
444.696 54.4478 li
444.336 55.4556 li
444.336 56.8237 li
444.696 57.5435 li
@
446.064 57.9038 mo
446.784 57.5435 li
447.433 56.5356 li
447.792 55.4556 li
447.792 54.0879 li
447.433 53.4399 li
@
452.256 50.7036 mo
451.896 50.9917 li
452.256 51.3516 li
452.544 50.9917 li
452.256 50.7036 li
@
449.521 54.4478 mo
449.809 53.7998 li
450.528 53.0796 li
451.536 53.0796 li
451.896 53.4399 li
451.896 54.4478 li
451.176 56.5356 li
451.176 57.5435 li
451.536 57.9038 li
@
451.176 53.0796 mo
451.536 53.4399 li
451.536 54.4478 li
450.888 56.5356 li
450.888 57.5435 li
451.176 57.9038 li
452.256 57.9038 li
452.904 57.1841 li
453.265 56.5356 li
@
459.744 50.7036 mo
458.376 55.4556 li
458.088 56.8237 li
458.088 57.5435 li
458.376 57.9038 li
459.456 57.9038 li
460.104 57.1841 li
460.464 56.5356 li
@
460.104 50.7036 mo
458.736 55.4556 li
458.376 56.8237 li
458.376 57.5435 li
458.736 57.9038 li
@
458.376 55.4556 mo
458.376 54.4478 li
458.088 53.4399 li
457.368 53.0796 li
456.72 53.0796 li
455.641 53.4399 li
454.992 54.4478 li
454.632 55.4556 li
454.632 56.5356 li
454.992 57.1841 li
455.353 57.5435 li
456 57.9038 li
456.72 57.9038 li
457.368 57.5435 li
458.088 56.5356 li
458.376 55.4556 li
@
456.72 53.0796 mo
456 53.4399 li
455.353 54.4478 li
454.992 55.4556 li
454.992 56.8237 li
455.353 57.5435 li
@
458.736 50.7036 mo
460.104 50.7036 li
@
463.92 50.7036 mo
463.561 50.9917 li
463.92 51.3516 li
464.208 50.9917 li
463.92 50.7036 li
@
461.185 54.4478 mo
461.472 53.7998 li
462.192 53.0796 li
463.2 53.0796 li
463.561 53.4399 li
463.561 54.4478 li
462.84 56.5356 li
462.84 57.5435 li
463.2 57.9038 li
@
462.84 53.0796 mo
463.2 53.4399 li
463.2 54.4478 li
462.552 56.5356 li
462.552 57.5435 li
462.84 57.9038 li
463.92 57.9038 li
464.568 57.1841 li
464.928 56.5356 li
@
465.576 54.4478 mo
465.937 53.7998 li
466.656 53.0796 li
467.664 53.0796 li
468.024 53.4399 li
468.024 54.0879 li
467.664 55.4556 li
466.944 57.9038 li
@
467.304 53.0796 mo
467.664 53.4399 li
467.664 54.0879 li
467.304 55.4556 li
466.656 57.9038 li
@
467.664 55.4556 mo
468.384 54.0879 li
469.032 53.4399 li
469.752 53.0796 li
470.4 53.0796 li
471.12 53.4399 li
471.408 53.7998 li
471.408 54.4478 li
470.76 56.5356 li
470.76 57.5435 li
471.12 57.9038 li
@
470.4 53.0796 mo
471.12 53.7998 li
471.12 54.4478 li
470.4 56.5356 li
470.4 57.5435 li
470.76 57.9038 li
471.769 57.9038 li
472.488 57.1841 li
472.776 56.5356 li
@
478.608 53.0796 mo
477.96 55.4556 li
477.601 56.8237 li
477.601 57.5435 li
477.96 57.9038 li
478.968 57.9038 li
479.688 57.1841 li
479.977 56.5356 li
@
478.968 53.0796 mo
478.32 55.4556 li
477.96 56.8237 li
477.96 57.5435 li
478.32 57.9038 li
@
477.96 55.4556 mo
477.96 54.4478 li
477.601 53.4399 li
476.952 53.0796 li
476.232 53.0796 li
475.225 53.4399 li
474.504 54.4478 li
474.145 55.4556 li
474.145 56.5356 li
474.504 57.1841 li
474.864 57.5435 li
475.584 57.9038 li
476.232 57.9038 li
476.952 57.5435 li
477.601 56.5356 li
477.96 55.4556 li
@
476.232 53.0796 mo
475.584 53.4399 li
474.864 54.4478 li
474.504 55.4556 li
474.504 56.8237 li
474.864 57.5435 li
@
398.472 37.96 mo
398.472 40.9116 li
395.592 40.9116 li
395.592 37.96 li
398.472 37.96 li
0 0.956863 0.780392 0 cmyk
@
394.08 36.5195 mo
395.592 37.96 li
@
394.08 42.4238 mo
395.592 40.9116 li
@
399.984 42.4238 mo
398.472 40.9116 li
@
397.032 39.4717 mo
399.984 36.5195 li
@
401.856 38.752 mo
407.977 38.752 li
@
401.856 40.8398 mo
407.977 40.8398 li
@
421.008 39.1118 mo
421.008 39.4717 li
421.368 39.4717 li
421.368 39.1118 li
421.008 38.3916 li
420.36 38.104 li
419.353 38.104 li
418.272 38.3916 li
417.624 39.4717 li
417.265 40.48 li
417.265 41.4878 li
417.624 42.208 li
417.984 42.5679 li
418.632 42.856 li
419.353 42.856 li
420.36 42.5679 li
421.008 41.4878 li
@
419.353 38.104 mo
418.632 38.3916 li
417.984 39.4717 li
417.624 40.48 li
417.624 41.8477 li
417.984 42.5679 li
@
427.92 38.104 mo
427.2 40.48 li
426.84 41.8477 li
426.84 42.5679 li
427.2 42.856 li
428.208 42.856 li
428.928 42.208 li
429.288 41.4878 li
@
428.208 38.104 mo
427.561 40.48 li
427.2 41.8477 li
427.2 42.5679 li
427.561 42.856 li
@
427.2 40.48 mo
427.2 39.4717 li
426.84 38.3916 li
426.192 38.104 li
425.472 38.104 li
424.464 38.3916 li
423.744 39.4717 li
423.456 40.48 li
423.456 41.4878 li
423.744 42.208 li
424.104 42.5679 li
424.824 42.856 li
425.472 42.856 li
426.192 42.5679 li
426.84 41.4878 li
427.2 40.48 li
@
425.472 38.104 mo
424.824 38.3916 li
424.104 39.4717 li
423.744 40.48 li
423.744 41.8477 li
424.104 42.5679 li
@
432.672 35.6558 mo
431.304 40.48 li
430.944 41.8477 li
430.944 42.5679 li
431.304 42.856 li
432.384 42.856 li
433.032 42.208 li
433.393 41.4878 li
@
433.032 35.6558 mo
431.664 40.48 li
431.304 41.8477 li
431.304 42.5679 li
431.664 42.856 li
@
430.656 38.104 mo
433.752 38.104 li
@
439.872 38.104 mo
439.225 40.48 li
438.864 41.8477 li
438.864 42.5679 li
439.225 42.856 li
440.232 42.856 li
440.952 42.208 li
441.24 41.4878 li
@
440.232 38.104 mo
439.584 40.48 li
439.225 41.8477 li
439.225 42.5679 li
439.584 42.856 li
@
439.225 40.48 mo
439.225 39.4717 li
438.864 38.3916 li
438.145 38.104 li
437.496 38.104 li
436.488 38.3916 li
435.769 39.4717 li
435.408 40.48 li
435.408 41.4878 li
435.769 42.208 li
436.128 42.5679 li
436.776 42.856 li
437.496 42.856 li
438.145 42.5679 li
438.864 41.4878 li
439.225 40.48 li
@
437.496 38.104 mo
436.776 38.3916 li
436.128 39.4717 li
435.769 40.48 li
435.769 41.8477 li
436.128 42.5679 li
@
441.96 39.4717 mo
442.32 38.752 li
442.968 38.104 li
443.977 38.104 li
444.336 38.3916 li
444.336 39.1118 li
443.977 40.48 li
442.608 45.3037 li
@
443.688 38.104 mo
443.977 38.3916 li
443.977 39.1118 li
443.688 40.48 li
442.32 45.3037 li
@
443.977 40.48 mo
444.336 39.4717 li
445.056 38.3916 li
445.704 38.104 li
446.424 38.104 li
447.072 38.3916 li
447.433 38.752 li
447.792 39.4717 li
447.792 40.48 li
447.433 41.4878 li
446.784 42.5679 li
445.704 42.856 li
445.056 42.856 li
444.336 42.5679 li
443.977 41.4878 li
443.977 40.48 li
@
447.072 38.3916 mo
447.433 39.1118 li
447.433 40.48 li
447.072 41.4878 li
446.424 42.5679 li
445.704 42.856 li
@
441.24 45.3037 mo
443.688 45.3037 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
453.624 38.752 mo
453.624 39.1118 li
453.984 39.1118 li
453.984 38.752 li
453.624 38.3916 li
452.544 38.104 li
451.536 38.104 li
450.528 38.3916 li
450.168 38.752 li
450.168 39.4717 li
450.528 39.7598 li
452.904 41.1997 li
453.265 41.4878 li
0 0.956863 0.780392 0 cmyk
@
450.168 39.1118 mo
450.528 39.4717 li
452.904 40.8398 li
453.265 41.1997 li
453.265 42.208 li
452.904 42.5679 li
451.896 42.856 li
450.888 42.856 li
449.809 42.5679 li
449.521 42.208 li
449.521 41.8477 li
449.809 41.8477 li
449.809 42.208 li
@
454.992 39.4717 mo
455.353 38.752 li
456 38.104 li
457.008 38.104 li
457.368 38.3916 li
457.368 39.4717 li
456.72 41.4878 li
456.72 42.208 li
457.368 42.856 li
@
456.72 38.104 mo
457.008 38.3916 li
457.008 39.4717 li
456.36 41.4878 li
456.36 42.208 li
456.72 42.5679 li
457.368 42.856 li
458.088 42.856 li
458.736 42.5679 li
459.456 41.8477 li
460.104 40.48 li
@
461.112 38.104 mo
459.744 42.856 li
459.456 43.9355 li
458.736 44.9438 li
457.729 45.3037 li
456.72 45.3037 li
456 44.9438 li
455.641 44.584 li
455.641 44.2236 li
456 43.9355 li
456.36 44.2236 li
456 44.584 li
@
460.824 38.104 mo
459.456 42.856 li
459.097 43.9355 li
458.376 44.9438 li
457.729 45.3037 li
@
468.024 35.6558 mo
466.656 40.48 li
466.296 41.8477 li
466.296 42.5679 li
466.656 42.856 li
467.664 42.856 li
468.313 42.208 li
468.672 41.4878 li
@
468.313 35.6558 mo
466.944 40.48 li
466.656 41.8477 li
466.656 42.5679 li
466.944 42.856 li
@
466.656 40.48 mo
466.656 39.4717 li
466.296 38.3916 li
465.576 38.104 li
464.928 38.104 li
463.92 38.3916 li
463.2 39.4717 li
462.84 40.48 li
462.84 41.4878 li
463.2 42.208 li
463.561 42.5679 li
464.208 42.856 li
464.928 42.856 li
465.576 42.5679 li
466.296 41.4878 li
466.656 40.48 li
@
464.928 38.104 mo
464.208 38.3916 li
463.561 39.4717 li
463.2 40.48 li
463.2 41.8477 li
463.561 42.5679 li
@
466.944 35.6558 mo
468.313 35.6558 li
@
469.393 39.4717 mo
469.752 38.752 li
470.4 38.104 li
471.408 38.104 li
471.769 38.3916 li
471.769 39.1118 li
471.408 40.48 li
470.76 42.856 li
@
471.12 38.104 mo
471.408 38.3916 li
471.408 39.1118 li
471.12 40.48 li
470.4 42.856 li
@
471.408 40.48 mo
472.128 39.1118 li
472.776 38.3916 li
473.496 38.104 li
474.145 38.104 li
474.504 38.3916 li
474.504 38.752 li
474.145 39.1118 li
473.856 38.752 li
474.145 38.3916 li
@
480.336 38.104 mo
479.688 40.48 li
479.328 41.8477 li
479.328 42.5679 li
479.688 42.856 li
480.696 42.856 li
481.344 42.208 li
481.704 41.4878 li
@
480.696 38.104 mo
479.977 40.48 li
479.688 41.8477 li
479.688 42.5679 li
479.977 42.856 li
@
479.688 40.48 mo
479.688 39.4717 li
479.328 38.3916 li
478.608 38.104 li
477.96 38.104 li
476.952 38.3916 li
476.232 39.4717 li
475.872 40.48 li
475.872 41.4878 li
476.232 42.208 li
476.592 42.5679 li
477.24 42.856 li
477.96 42.856 li
478.608 42.5679 li
479.328 41.4878 li
479.688 40.48 li
@
477.96 38.104 mo
477.24 38.3916 li
476.592 39.4717 li
476.232 40.48 li
476.232 41.8477 li
476.592 42.5679 li
@
483.072 39.4717 mo
483.792 38.3916 li
484.44 38.104 li
485.521 38.104 li
485.809 38.752 li
485.809 39.7598 li
@
485.16 38.104 mo
485.521 38.752 li
485.521 39.7598 li
485.16 41.1997 li
484.8 41.8477 li
484.152 42.5679 li
483.433 42.856 li
483.072 42.856 li
482.712 42.5679 li
482.712 42.208 li
483.072 41.8477 li
483.433 42.208 li
483.072 42.5679 li
@
485.16 41.1997 mo
485.16 42.208 li
485.521 42.856 li
486.528 42.856 li
487.176 42.5679 li
487.896 41.4878 li
@
487.896 38.3916 mo
487.536 38.752 li
487.896 39.1118 li
488.256 38.752 li
488.256 38.3916 li
487.896 38.104 li
487.536 38.104 li
486.888 38.3916 li
486.168 39.1118 li
485.809 39.7598 li
485.521 41.1997 li
485.521 42.208 li
485.809 42.856 li
@
501.937 35.6558 mo
500.568 40.48 li
500.208 41.8477 li
500.208 42.5679 li
500.568 42.856 li
501.576 42.856 li
502.296 42.208 li
502.656 41.4878 li
@
502.296 35.6558 mo
500.928 40.48 li
500.568 41.8477 li
500.568 42.5679 li
500.928 42.856 li
@
500.568 40.48 mo
500.568 39.4717 li
500.208 38.3916 li
499.561 38.104 li
498.84 38.104 li
497.832 38.3916 li
497.112 39.4717 li
496.824 40.48 li
496.824 41.4878 li
497.112 42.208 li
497.472 42.5679 li
498.192 42.856 li
498.84 42.856 li
499.561 42.5679 li
500.208 41.4878 li
500.568 40.48 li
@
498.84 38.104 mo
498.192 38.3916 li
497.472 39.4717 li
497.112 40.48 li
497.112 41.8477 li
497.472 42.5679 li
@
500.928 35.6558 mo
502.296 35.6558 li
@
506.04 35.6558 mo
505.752 36.0156 li
506.04 36.376 li
506.4 36.0156 li
506.04 35.6558 li
@
503.304 39.4717 mo
503.664 38.752 li
504.313 38.104 li
505.393 38.104 li
505.752 38.3916 li
505.752 39.4717 li
505.032 41.4878 li
505.032 42.5679 li
505.393 42.856 li
@
505.032 38.104 mo
505.393 38.3916 li
505.393 39.4717 li
504.672 41.4878 li
504.672 42.5679 li
505.032 42.856 li
506.04 42.856 li
506.76 42.208 li
507.12 41.4878 li
@
512.232 38.752 mo
512.232 39.1118 li
512.592 39.1118 li
512.592 38.752 li
512.232 38.3916 li
511.225 38.104 li
510.145 38.104 li
509.136 38.3916 li
508.776 38.752 li
508.776 39.4717 li
509.136 39.7598 li
511.512 41.1997 li
511.872 41.4878 li
@
508.776 39.1118 mo
509.136 39.4717 li
511.512 40.8398 li
511.872 41.1997 li
511.872 42.208 li
511.512 42.5679 li
510.504 42.856 li
509.496 42.856 li
508.488 42.5679 li
508.128 42.208 li
508.128 41.8477 li
508.488 41.8477 li
508.488 42.208 li
@
518.064 38.752 mo
518.064 39.1118 li
518.424 39.1118 li
518.424 38.752 li
518.064 38.3916 li
517.056 38.104 li
515.977 38.104 li
514.968 38.3916 li
514.608 38.752 li
514.608 39.4717 li
514.968 39.7598 li
517.344 41.1997 li
517.704 41.4878 li
@
514.608 39.1118 mo
514.968 39.4717 li
517.344 40.8398 li
517.704 41.1997 li
517.704 42.208 li
517.344 42.5679 li
516.336 42.856 li
515.328 42.856 li
514.32 42.5679 li
513.96 42.208 li
513.96 41.8477 li
514.32 41.8477 li
514.32 42.208 li
@
520.152 42.208 mo
519.792 42.5679 li
520.152 42.856 li
520.44 42.5679 li
520.152 42.208 li
@
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginCZADCU+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B66482B35C34836F0E20BF616040B5436119F91C04A4FFF5928BF58F0C4C7700F085A7A99B7E4AB95D4ACBC471077FA66A9920CF93E9E8B294BF2BA82B4644830E155D21219D4BC7463429B5AC18C39C3AFC8B34640E91D75CD879D617E93EB4ECCBCCFA7E7DBA4AC0D3B3FE1C92681EA5F2AFA04A26FF98D3C2DA3613626D7F9EA9477B5C4BEBB05D104817C8A6FB7298DC7E454AA36F51C94470BAF25DA450E79249D4E1000BED8DE4FC399F6ABAF7C22180F3C650C847B0D1D0C334DC3DA9557C838F1033123A9256A0ECC10CDB90CB3C1395B36FBD696FE5A815B009423A56618570F514642B5B536F239B2B69B839B6454303298864410E01422F330CEFEBD9CF005E8373A6A20653AB17E07B4681DC4045E7792133FA39140E> |-/O <1C60D8A8C9B6D31C06F41A86D5D9300BD7D02F822E86717F4D0B97BB6311DC2CE492A9C52BC1F5FE35479DB8E17A87808209C4624B985EEC3016348440F6486941F1266806F498860565679C5F246F66B0113BD70C71995C473A489D624E210ABCD4FA6434AADAA76367A265B888793300F9060400F8B261C1857545D1A56BA8C48F0A03070E4CBABC> |-/g <1C60D8A8C9B7883C34847673539A3C47283D2869DE727C001A8ED17F310363C066266AC877F71DE696B52BA5756C41FA2C6742427FE25CABE743DC5A8409CA03A46FFE172EB266EBE72B596730C9547F1BA9130523A2B6925FB6C63D24A5FA2932E01CB40C0D974065C69BA7D95C92F84E75317230A20A5B57C1414477131B85EE5ACE9CF2CFFA8F81FDD0E1570B07F54AEF9E9559FF767E5E4A6770AB6167D2B403FC1CDDEF440629F36A00CE900D50814788B0FF5D0993B3F9BE201807168AC2FF35AD7144226A32EFAB4AE57534B933FE2F650AE3AB04CFB63638BA8BDA42DA1BFD76C61D93DA> |-/i <1C60D8A8C9B8524CA9FFF1D59707FAB92D69C69B7C857EED4D13A4787BF89B18996B1BFB164CA796A0EF07F1407DF3454BCAB96192B46A6EDEDC573AD74AE5EBB6C7E282C40345BC6C9BD822E381040AF84910E37D38B52009BFBA09050BADAEBC8553B469DC8708DC8B7D087E48B2E8AA99CA401E54F66DDB7E9923B974D88CDA4785FD295B41FC4A68D170B03EDBFBD3758274FE3E0C921CDB5782B906DFB9938B6191061DE008B5105239C6B4135C4008792AFAA4EA6826684C0C> |-/n <1C60D8A8C9B7B07F0BB93457D6C8288A70E0DB940B4E04FCB07C44C762FF75D1D950F6658944215ABDB8E09DA0C33F6809AFCF2421406F8688ABED2DEC4D49A55251B25C4373E5276DE26457B8215FA156A3918E62986142B216E3D126083708C5AB3D018A7C93A0546D1AE450568C33979D5D1886CAEE4F45CEF158C9F75F841729756DC86B9981305315BE025F34658A8B30DA9E4FC92E74778770409CEEBC81A51BD2DBFB108DC9287AA20C6C0FDC2D19D58643D88EB36209DAC3D913F6852F2F8B06C4883A03EE882CC27439C56A729CC60E3CAC44D3416B7B9356E70E374DD5228445902D99BC6E06C8C6558C> |-systemdict /gcheck known {setglobal} if end {end} ifendCZADCU+ComicSansMS /Encoding getdup 69 /E putdup 79 /O putdup 103 /g putdup 105 /i putdup 110 /n putpop%ADOEndSubsetFont
/CZADCU+ComicSansMS*1 [32{/.notdef}rp /space 8{/.notdef}rp /parenright 8{/.notdef}rp /two 2{/.notdef}rp /five 14{/.notdef}rp /D /E 2{/.notdef}rp /H 6{/.notdef}rp /O /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o 144{/.notdef}rp]CZADCU+ComicSansMS nfCZADCU+ComicSansMS*1 [12 0 0 -12 0 0 ]msf183 38.4399 mo(Oligocene                             Eocene)[9.58008 3.28711 3.36328 6.36914 6.31055 6.16406 6.57422 6.28125 6.57422 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 3.58594 7.49414 6.31055 6.16406 6.57422 6.28125 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CZADCU+ComicSansMS*1 uf/CZADCU+ComicSansMS uf/ComicSansMS ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (522geochem.eps)%%CreationDate: 4/26/08 3:49 PM%AI9_DataStream%Gb!R&k?9*%&h&'55jofr_?m%/WhT%?HY?)3ZiC,AjH,dthB1q6DaaFO<L$0IF*Gt/p=gW&Pr:BQ12LP\]ADc&?Rk`Xou93(C#(Jk%o7ifZS7:3WSQ%MZ><+@G6crMVcRPA[d"+Dd"%q<nbOdoqZIsKjf#m[2Brgc/DRVPCeOHUQOP]b2Wi(nMDt'Tf^+EEeNPEs.e^F&E%;J!I;mpOO4Xn$j:Wje$AP`HX:B!YYi^P!>*gTr!2/(O36UK&gedU$6IQu5$hG:V41j)47`gfd6QVM/FLOc8P)%>2K?i,8tZX$9[t%0BH+L<V^40#+sZFU%h1X^*n1dJ->(>LJ_n.h&`LN>Y&Z+U?-(nr7<C/QDp'41u!03%o:Y;7o)q<T9nFbm7s_3WANm)B5"c@j]\uo%lBDU$:!^r9BiDA.?hlW2#udXXTXj<4>>%&\L&\&X-0!*t<Q]eE!4JLMohM:\:+(EmH)?s4CNV6Zs+.^B\reUk#)/XmX6%o4]n4<O%+HKPbC:oe3AC@RIG.!!*d)c6/q(F===_bX84$YZ_C):NnOENMT$.e(>oV^JZZdue0P@h@SfsiB(SMqNM?.:uM9K+O6#$+D:%W1(r%gpC'l?0S.H2BHZ8lgojhYVrD`=spGp>G]&11t&g%(NH?QH')kJ+'eXQ)114?rpTCWdm:iu4.UD_%2t%;j%-VRBmE%A>P/f*845\h%9QhGB\IR[tD7n87ic"AkWcsr3qip=[5.ceL\IECUbA#9O]X:@]Q!o`aKsd7>\HQ?oKs_\D/o1M^<iX\J@B9%Um?A"!*MDb>iIi"?%'s9ra&hR!*XVH?n>!Nt/eabqYOt8udQUp/_]^[bVR4=G8eZr)\/?2`ao+bH+U6MX513M#mWmIDM)mjEK.GGDF)g!K6>-pq\G%K'#%Te":"Pht9>XhkGSYZreC"2501::XBD=gZAu89'?]DRE[9'Ukj6@\EO'J/YgnrT1!c=DEs=#d(cSSf>p=5UPrj!pn!pEimjf.*s])%mdg$?kGA)[=PG<q[&^%sHV/gWeS`!"WHVnsrnfs%HD/n!Jl=hopjX6bQe*uL<N2>Tmol^hgo]QH?D%F?f)'*hgr;q"2#aWob5XS*%9/Z8f:flbh<.t[RegkRn9"fEcDnm$ej]\EX/\cJi08^'Db`sO#]\N]C=BM>VZ,VTZrF`1X5T6W:^lSob)YjmeA3_k`PlICnP$\hs%JM3;'.S(Z`B`dJ,iigs7M6?&C\()TG,s+PSS,=JTV$aC@QnT`qkdf&nIMsk1+CqV95'nceb@6"_#8HR<2nEiKO]5a`+jhn'mkm]T%>@MPU'K(4O^8I.[Sg^s9$_>X2-VA`5hC#\K'eOF%2KM;O^#2MjgQd@gRk@+2o\;cZ#DQ$3Q(H*PTNdlQkZ$NS>CS02]!Z:PgOXe*%W0]^UcR#NV]%eJleD>\fCr=B"O?SD[oIM/%C9.?h^iOuKrMZ6p^6A<*TRJAh`T[,:Gt/eV*lsgD?adQ-b<O6ll<\[V[[#<fd4>8i%b+IKf'n/,r9)TL57-BW:d1?b_!:\*N#o=A,Ui]\Yr<E/4;^k^R.^-#ZQqr\]Z@unkn^;giDGYm"436$HH.OR:eB2^+F@u;o!c3>@%4)*M$(.q<"n.-Ilk8#u!<KL8jh-pKp)solOqHGss=;hsX!XV(tr2Dh:WfI>[?f0(EMTSFSm4#+ESf4Tg-@TqV:TIdr[*rc3RsXh[%7V[8:V=@M[T9_P,+<&)iC<r[nN;cN")?;q%r)KVuI&YPaM/D^eKlXt5qW-m"0M&.d!:m=ODP^;"hpB=u*e^ZfHE5eL:L?!u<A?];%-S\:!-;Z8n^X:(NWDGgY;bZrZ`!QWo!nladXqrK,h#i'&?Z(:e"G[FHTe"Gt*JAeV4je0MF9YWJX"<S#TDZG1aHGoV9"QFL;1Y5]%kBX4r0E-K4;=!,nB)*/U'a8FW\lJd2>\u<_5mdmf9^2#B<\pmm>UJBr0<dgbI[4Y`e=*>PV(^[ubq^/SkC&ha]LY<-ePa*18e\^J%'%mfB0CUb^9;4,fW/YV#AUX1AnN:gL$6K.t)GTB**"T$c5omlenfti0R_B#+Qb(_mc^An6\5XuVk>I"l$Kt]*?:7GYUbndhi;[[e%!'!b#d-#)ES$`s^KAaclpot?Zr!(O*Be+Ur^Ak1/?N>CnSg)F3O?lb</X;(^jV@bfAcbntoB;*kdh9a3+KAqLVbbE))q70qZu>r-%lHr=%T2VZR@N<%m6!!"WRT#QGB:>X3=-d.DkU3qJZ'kWIJYAb;0VWPF<j"8tQ9(jAp9DD_"(gDo$B[PGXZuIPc-bK)W5G;N^SRk.%WIY'K;P"-5hPr\h49l,d*#;gq[7^JV1bjUUPu>rs+D8.*F]udU(\Rhbi[b#Wq1C4%^J7SUgQ-iL>4$74f.K*4K_gW+<N:4f=bO7/%b10pmdUI#<D;VPs9<hD#ffB.CWf?2&nk0V>n<.kmh0D.`Li#sa0K1,7MfS!J9VVRbeC#RFrZO"ia'p7?r%"VAC,lUZpKc>LRl:,[%?\u6Q(B#mb1f!MMg[6n5s'8Cnn'U)\]7_@>Sp@QZP*4k?^+WkFs$K0Ls2-I+^]+0rHlE$O[m@W0H2bRL(Yb6E*H6`(EiBs?f=rgh%SbFB[bR4>n=g6q$H.+A=S^i')D8/Z>`Cp2SkCpY!5#_;*d5Lo@:II0mqon1uP1fd/DpJV)aa0]o1QA;%#GcpgnnX#l'pHkA\'G#h%a\Q$q7AJU`/eb/^J,SSd"7!WaKNbobH3$TNfPu.'Nar!@R3%MfQVuI+_.WpB^J]i0\Wq'@b3a68YB%5E=1QjLqaW`^_K3-59KtI4%3rC@bY0oeQ:Q7iQK>,KM]@1MBE*Cih'^h4c@3[GZ$uLQYXV*[/kPm"rG8dUU;lNs#5F6^9f@(]Okt8R=;&&7BFGg_)"rXkOE@/*%%kG=6^mJ$65BtNpX@d-M.:kdQa5O+n[_t_]!e.RX-:!M;b8[m0%!qFMS@_Q0[djio&bn?,bo,hYTnrdllrkm&IgGWoFCoPs1C6VmT%YW>e"L^s%C-7t)b2V,QY=G@c#ekhh&>BGs=>MN3*GHdg;mTYKG:<Jng46`l68uM;\WE)'0`2[f4daQ'h7fk9jLSaiO\+E]rT/N-c%l%0/!l0ssSQ<ml!PY`m<56>>02]J;QWD^.@aM5e4q5%69;ins@0[#d7`G9hb[;Mlc.&N?H]l^U1K^I-he@O1nU`qr7K8c;T+-g1_%h3pZZBEGrK=.Xu.E:sp!XDP3G$-#&@Bn>L\H[R9m7Cg!6l9K-3k]5S8Cm2&2B:C;pfQ]#KZ$j$]>2U$91$k0TJi.jlZsLm.]`UkC%NZ4NT5'%\Zj@NTAN1=d'5H\)2jd3kWSLqGe;fi76N\6V5qWJmkK1c*]:Qf.OcHC,rV:J.`VXI&H%+]%NmlK"PQ0.[mc"T);iao/g%_`kdbU2ShK0PUq85E(,=W?kB_^e0jQD)?e'p(D!P[_cViNrk3p[8pq5_/3Y[9V(Mg8]7k^^_=$/6EFIMPM<>%<hCoR`oUL)gGaFY%#[shKfe@S3nY]tc">Gn^+$'3(1m??(SPoCipdflsERJ=WC\Cmm=94[elWRQJ(YpIs3Z-q'N[pG1V'p#t%c!]Z0/]6sI#234,h/E.%N@0AO;QJWg-tBKJb1Y[%$_223XoBBEg1<Uk0R+`E9jbU:02J>J]^oH)^JKtr]$8)/dso-!lfiTW0;PCA4hXq!G)7RX%cg^,6+YQ8%0QRM<D@<ElT8)4,8bgopfUkVlh#sE'%3eUdR00gT?.7rm8sO_6ip181%@r?UF]d'KS;^1$`D'Dp=LaTuQN!N[L1*$+B.@5q]?fq*%]Y-Amp<$TF2FDhl"4_L%FH'ATIANM&ej%MWS57@"Sm.Il64Sct('N%.pMTAt?E-uZ8SRt*dHnV@'rH0.!&XUF5]IoQHnR]mQu(3E%SBE]5DQ[4m;q>rH0(qc68`d9N3PcjT3()$'--7d0\A=cL^*:%"2/7(ir7u%783W\;rr/@C["*t[p=4O)Pp"^p,5$JF3iOfpE6tEG%;$.N"G<f+fm._S0ab!=oX/6qb6LTguE/Y9?`M*\%.VD>IpXc!%"\u_;d;!W-=WgZXr0fIM#>0KDnldKOP0eqjZ3lc7?n8'iJ&@(E%WA&otM!@fQq)3YKYPtL2dOAg2CX9-&;lN-j#/7<2W8isR(HbNiG\+mP2ITfDi>.I>>!3)LW\]=[6'Q$f:(Jl&W'a-<Y"(B@P#i=`%17<k8,='(hWhE&W:Z&49M\>k$djccj<LPl)$T3HpB^6VsH`uQP:n=)PHF_a>]C=8AL:"^h+G5WLd3^#_0pke%F<eK-(T3Y$Q4d)=%"8UOQj'Ut!s&/6$UaSBd$J1NaY,b7IB02lbG;*&9B8dFZoGA#KYg4Xc.imUuM:&&"M3r45Q277@:N)e1,fKd9*0#X.Z7"ui^JN6s%'j%bE@V!mGK49bilAr)3L(.M>j+*pI[[l0DC7_C59r]?aig<i-Q'\rF,^#P/2>CFY-QZ5CfeJCbBOHUoTt=ar@^Fb1=7B22=/@n0%VdtS+7(-aIQYad][:gNLAY8mdK&36J=SD1f3PbM,HOghV_<LF.'AsST.)j[Q<KJd!'D!F@/P$A'"Q`8CVb3jfC;q'dAQld5qju6^%eQ2[;S9Z,3fu=F89+!TUKUJeoAQph`7LQ\K+%0PR=5ZI7NRiRrGsml@-\C&Qa<G)s0Z%S(R=A"7m]YiZ2;`-jq/RKMXNC/HWB`D(%>g4O:@*(HpN`c;e_^-`=>8eBa&r$rXoHnC9MD/.%(2G@-c$bH^"8\3r`JGGn'C*ZCRhYj`TWhf9$-K](7b`Bg<AkF=l'(+oi7Raa%3^M_"XKq"BX,K)*l)-^Wd+<Rks&*^B?5rRINSA:4T;?':>7S.b.X?.b)CMche',:QbU$NiJs(%DfFX9W>Y#cQ_bN'lN`m0l>AV![%gA]p/LLH\ej,.\8`YA#LbB%UlF6uaCmumnoSTgcsL6oi2SFMH:r'`gJ^&/!W=fDLdb)beFmjG"tB$u/HIDcid:cUb!n?,U7Lc(:R%&P0H6oT6<dP:@Cel]ER%_P;upA19D,BH#qe?u@X^Va'Fj<oku&?7b]$qK:>0&U"*M\7O1Sho?6q$5&>@,0#Y`E';dQJd8;\s6,ZH%p"'."K/.p*hLk;qmH7BTbhMDe0'6]?KppOOXdYQ$Y.*Ff$=u8U)*[WLBk'%pT/))QpH-/oE@,5=:OPkK>,L,(ij0!HCVWH@jhJ=&%)o66\.]AoV(9*YXi)'D'DViIf6$B?MQ`98r`6/j1JOT#,?@'H#lkjp!Us)`Bb"t/GE+tq%15_9Ji"p_c1n)`FdL.MNNgVpWnC%98%4U%k+Dd[m7FR.80(]l-lWn2N$KN-iU8uZ(jRu$Mulc9ttR?h1Z5sm`@8F?D^kNnI&@KN?]&L5dlTLG-/4n[4Q_m)VZ+da$aj0ojD%_d`"o8e\RsHH_5*`UJb8<kF;2\)L&T<M7hjLTSjNis?q5PdOBX8EV'[j1!k_bA9[umN)!gF7Klfr*,&GrDX&3EU@4FDpPgMb=ITE%C2V`(<QqRM58COlmV"Mfo%l+k0>gsU>;4$O1[u:WnBG4Km&Y->H934\j6'(3bua:U=aW)I9BXTIApV0JPF9%33(da<\[/R:9Q'Z9%4#??N(GdihMsjhXl#qgRB4j,7cE+J%5(_0uITS*J^R!,ef6!QFVfoO/s(f5Dr,-7&nuK4r=Pd`!Q:pnAlLjVDoj:4%COh5O`cc7c%qo78_@<_,,?u=Lug"=#DZ#3SMS]*M:hQLY*^J6^UV^HSnA89iBKWF@kD/80Sk=9.OjPfZEHZ@7*bpRtmDRGFH$0Q=f]q<F6HnK'/%?aP2mraOt-B;K2%hLAmEk1=N'SD(>22/DV"s'"#ef7'f`Be4VC'>FV_C1hujD&Q?rA"."7e3`stgYFSb`ciN_k>#$(RCq?T8+s'5%h>0uk&%$q26$lY$Fa(,Mk3CXl1fVriEoPFR/l_0"`p@Hs4ES3GjdjVk>R8cWeMt=B7s4[TqYBo8&^fjk0Dfh!WMQnODJ?!ZcJ<26%Vn;!>Vnu_aVi-u?pA"=JBqSDgKm%gO1pt!#EPEUHC$s`^[2@;j1Hp89GAN%YC>I`\g[!,koFa(6Z0gH:7,@ca)V1mrrVF/Gg$,;@%h/3BW`ElZU0A=]HlS]a!gRhQe`oRl.f4kH9qfAdG^cFWLRL6-qft&fK',oW)!_GRmq,d7'olK_n+F'c-<NVlo-\!uqhJ%%T5L:jS%AC@T$XF2%KlL_X[i9E8[SK;^oNdj+GUTdMJj3@8a<&SKo].6?V^C0M[R^p[kX'Qg%Fum';Z3-YpZKeG2S?5;'lAT@mf3X<to_)/:%DHpM&GIfT8Pfc`BQJ\m_k,Rg=\^us"SXe$eheAum5<cN(Rq?K64gd?&`_ItDLUehhmQT4C?A2.4c![H)HcJ?RVml9HJXI;@I/Yb2%;sS<A./C)j<g;F?SaMJ[h8@u[2mh%tC3_bDdt@R2F&$lc1o>GCT@5D&5J,mF*gdIngY46HcqZ7g.XR;KVQq".cK26c\__7>f@kin%hWa"spuT]Zm'k>:Y90(aZ;XjAJ%+%Yji:t4VaoJ8q3CW/::G9$=5DFs=JrAUGB9)]O`UIaG'US=dHM03qcWc\$h*`_Wq*EV4e<mh%VR"%K5!7U_7X!K6Y=u]"FaBk^g,e!tlSOl\]m?N9h/ps9_WKQe*RBeQ:7oau^o#5!ZWedDZo$@enXhWGXff4.@AbM&"m:3;2#[6S%FgDFG0"$9YbsLH6Nck3Wbm$5R^>=paP"q#0>CB:jR`Zh,37kU!mru"jq-I*H4O6flND:%u>?el6[*t<)XZ9adpA<?4Nq&oEesojp%3:O8kEc/u^^;itV]q%4;Z)-42?0HAp'Bh8_XIm/3:)D4HZ;]]'37m&IV6(9VXgrIpGj%XO9_\:.K,ef'1/ik.:+]s,e=Rr!Fsf*.%9<H<2jIYhk$uDAD],^LO"iP@ZM>.G+`Ra%j(B'-2Ee)'_/SU!@VEqrj1AJHrmI5MBMYao]*PNLQ@:..Ahed$sRI>#mm4I_dH1*l\%l_AX.n^33gH9\<5>`WM7`^7E&[EI*ql):eoG*VmILOWURBWZ0LaM*E!jB_0L.^MOX#</(Tdb=BKr(>Jj6gac([he\&@-mkpqsJ9;%7+FKOm`(/LUV?`YIbrl)7XY/3e:.CGS`:RQrU+A1=5V6#YH-BPoB8VjI;J0Df`PH-%:H7oXa@gAUPRW"j8/W5_fjP]$iT""Cd/PB%cOKjJ_l,uQI[ST%Iih@=J$gB`QerQ?GMungp1\,RB)e6,%!7p%?2sZ,9R_2.R==i#52>\YbbDNF48c-:o-:_X]Ud0J!K>;$bUn:E%SL_*,k%E#B[Q/=s38/CoqW0KAhIn!0m^9^WbUTXGerTBJQtjVtMcOU^c[m?$Kdp[(G4TVKp2]bBCG?>RD0obUs1GVA?9$"l`JZ'Q%T"hR2*0!Pe;gKKDVhdB+Q(=sfoj0fU$V,)_$?X@Y/l?hC\\9['rHl1R=aHNf*B:J2b0Il'O'/s3N2`Z&H*6M(*%B)M4!i<7l.1<U%bq<THiLO/]2pn1VD8-c/44Ubmf?\j-^,f=,N)(onV5R.=`H8[ImjXgA9MU1%-G+-&(NOB?W>Rt*Fn:(WNH_s4oq?SG>4'hNR#mlI%]"dmMn(bs$'a,bh7<Amj,j5_&_E5/CmfT,XZ9AECN6"bNmL\&#C(;moSX,+u'L#SXj3MV;4%4E?'"o]S4N^E-0"u5LH<,09@?,J+%raKu`OKdM!;GQZYW05_m_aH([1T.T"jVGk0,Ag^kj&<DSFr*".WV[,orMB+.,6(O&_D*Qbr2Mr)V9b!JmT!8ZfnZ#Fg%&4IN_Q#o%[^YAIaT`4cAbh6aeS9cnn(ZMHq$38X].-)CbZrL&N+We]a)+_1pU@oSf\Xp(.K#^[Z@>J*MS't6d6Zag9mu>?HUjL,Y[-1KQaa9e%T=L^$`=A1/3BNN_!".NN+]-f'@DM2_p[Vo3rrI^VdItYC(rjDs,ml)R;MR*<2+R[Tpn[VP1H$j#j^%)H5LRY<Cjnc"&"VTl-?=R7%XI(1,k<*bgl2#sqIFN36*kSb+kYrWb_t0^;L(1E/&]dSWIc#1A5@WqOLocu`k2Pp&8j_s)fQV5&"&YA[/+l:WPbl(YA%.)#4q-nC%83)J$3p*gQ7%0!$<n#*8nr4^AF$&"GFWb;RbBgZe0k*#KE#Lf1'4T$Heh]*RW%o?:[r\+UY3[#:iU,\JL-&jd%DglOO6]IRgQ(!Q%<:L9_g5:>u3;D!f;[b$45Fql*>5:!>\_N]XCkgtpkHl"lQ#_aRR\-C^$>6+E>?\T9nU7&:Kl@m%*WI!cL=>tD_.5f3pFXj+6)'(\%fU!0@(k#"ljj$kW;3!ub<5/`Vm&?P_Z&kiOIN.W,^"Ka\SrD!kq_!'DTdIMOiU+Ucj^WKAAA+`u_3LlBaJ-%Yr9UR.KIpgdX"Gh"%_ZinrfY'?ak3"t/IC(`<50\hXN[kokm[(Aif8]]V`$A.(_PFE?,nV'Q0C,rW8Ntp14KhK%H=0c4TSZ/Z9F56!\\:-kY3J6;M"[9Z%I:%0id_sZ'i6kQFhZ*(#rK+GZ1nA#F`ql78+*CVAnK\_25.pF,+j$QRAWs7Sa$d":0cn)Y$;]OC-diI.ITj;SGU8h'PWV?D^WY48%`eBk+K#[]nb/!$M5&kE*FmAR16l>MgF[KX)F^b,aA/G\n[)'anc(4b!0V.=OJDt=Fh`S9\-lo@3IMgDcDO<0r0$o=pd(AM4fo>*'%Wdl*>/&6g%`^[<cGL;1d0SlGC)U(Ne@nqD530^rC977,O1P"2'/nE-JFrp73bm70f#r%'prK:]Z*g:7hEZgU0H\Tt($R?XH&WeTZ%KTeUShPV5(*I6U"r.sVh\)hn%82DMD9kiT6j<O"Fo41\GTFKrW]a%f8[$A:V#c!.EZX(mFb:mAk,AMl/hMW13;M,CX1]BfIi8^,"%HuEO(i:igR!"&>saSBt!;[H:'S1i9B$HNR&m28'M4Lb!c9Q,+Hg%F7WUEHR\,JY1MQ5$1j7-N^)na-2K9M1r,@hjWt6+2$6g4ML*%O>Yr3pE<1IENG;kh;G\hj=oj7O3kK8>*mHiKs@m.(6Vd(6>\qVcg,A0opq?u3].WDZ]Of<ahlPLAL#UQ2aaO=cd^1(lcZ'!jpe"1%"bu#bC;\bRp7[gg\srh3?^ag\9T?@TUpABK\eTY.lf[J=YkoPHm!cCW+=i8PfBgQ3CK*olLK,rPI[A(_0:[1eU9qIOQ&R[KP3,\7%KPA5Bo3`E))-Ib2*^(H(Sj&=A.!uRg"r0^Dd"AQJi0T,3[U3(<Q=f,Rh3ZEV#P.BEkKDf7BFr9Arc9`=6BmYN.33*B)O:CDOOGfs%^ZL@a'0,2Bd$!rAFV1o1@`NuFof\(XZ7O9i4mJo;n*qjG'aoM.!,O]0mN+oQQ'?Z;0`qBnc=nls[.AW5PM3(AYpas7R'ef:NNorZ%@fpS^0M9;YUF5'CZ*]Ch2DZB28h+O:Zbq`VqSYre\WP*N0!#f-P6Yf7IdhDSZ&Ju,b7ATKqYc%&1X%Z7P;mJ58*461VXV+cH$R99%@=mMD`tdY,M=U1*#SDkXUG/A9#olZ&`<%"g<#9m.^sN.jckr:JKipraY"$7TY'[h3K1YRK`qjb`Peto/38/Lb(llU[A\%bJ%__Va%&Kf/P#2K*hd1;(''=;&,G*;?VrhE>Xa&d\mUn'h;X]Ja\mu?*8VkKkT.N9]DW/"4H,8[+@X00?,W/ST)9>4D&kEub`FTF&866qDu%g42tGd;15!A9N#7a^g53IP<[,*@B=W1YG=V.lR*tkQg!W^24Kg>1(:',,!koq1G+[3DA=RP)AsqXh\1442Ze<crQkTC;8rFD`dpW%j!$n^*cD*sCa?H(H5;gdG&h]>W2F'<m-o'5q-FWsGBjsQ?/n9m/#bC!b/odD+Z)*5Hlm!R`Q!Y!mpG`BHPEA[C$]LYV\le)7!S)`%RLqq!O`h?Vl@ejLhN"3"1lOX,Oi-Bmo0].)l<1VN4Vp'cZ'U1/!O[`>E23p[aF,FP8(50?$_EMi(f@R=N(]3OQOf?T30!UFJ[-tg%XkM*bZ*@_][iAK%hN!T'Nkq)=cq:1@OW"h5j`PT<21dR?&4o(>Eg7c;/hj)7MEm0)n+I).9ZHqRm<mholA;%pDblBUQu:rK[$\qB%E.&ftp)[q(*cuI?jNUOjgL=Zd7gnK6K6V==Z,)5U(1Xg`PCnZ.\X8Z;3NXU4_:$=I2Z$E70)1`0"RJbY:U3:bL_QQZCbC#X2q;d8%Nq^G-5DG=W>6B11bK9WVot'e*3W@I_g@cjo+1<hh:Ue1rkYg*]jNtkYd.oJP^7I]YMp7n^SihlM\qj*a#$k3:i1N)PnJQF(>B%(l%]#[W<#+Zt2%@'9sT0]Ae$P&@f(S<u0P:\aj%UFGd*K*`73eo?%*6Am95n72H`q<oiEQqtF*'0^[\gN+?.Cj@,SNe5W-LEB7e0QjS%4usA@F7:?,=aFLQr;sHh)N"$]\;<f>-@@Nbp3tIDrIu3q&mBTWVZr#)O7r,"Du'Po^5f*VQAn+1FIeumMTQZt%$i:_cfa>HBrkY]%<jMN5rM<<P>iPQJP,9/LQON,>nS+_k6OM.elt<kd),b.j>Tf62?d`17?LtB9YT62%%eiPf3XJfr,==a&NJ.RhC^k8?Ngq$E68PFN%$E!N,4C6`:,tiFQ7m[]%(dq!9A@Gu!`gH*.D.iBQ8c=h.U1O<f%L:*-!AQ=F+KB21<t3!CI+\pCVJr9Lr#o1c:IZR:V$]!nIuPg?%);Tk.?G\9=P"\MYO3o,8K;=lP1Rlg+FF1A\)I\h?nlV:D/Db?%P4"jt9X9:afhrF'Ko*W/<\HNh-X/tSR#mPaH!kN&A9iP5h**R_%8`T/\K'p=V4MFtKBGE\/Eb#eV+&P(4J_u<BJNl.*8^WK'^]#tWan,<(>g+lu*ac^73?U&TdHT:cT*1Va.-iqXZP]^I55@*h@4^,Z%nHFjTj8Fb#UcBF7r.\R)_5&a2l"r@%X,"c+M.G;qpnV2<X2C#cm?W1kjT8/02rJ1*Tp^sPGO'[$pY0QeAWLVSI?_Fj9&JILA`our%-MuWSd^P(p[asVV'G@B#:o`;P<iF%p&u5%dVRZ<TY(-qH0bfJ)`:emUA=t@8pUs%j,>N9q$!Hd38d3_F\5<1hbuQMKp1O9)P5s]m%.2e/kJ]nn'WY1GYqBa2d\P@69<.p&^\30J30BnL`=Gi3\!)JeGj,'Yd"X8c:Ni-4T:4NJ'4^"ctOX/:<1G3Q9MZ0n?W'r%N8:G==%H]#f#.Chko/il-e;I%G-Jp2DiFTV8DP*.X/MbIu[=Cd/E;DT[9VC*!YA>kPB?>\=:g*.d7rS%7t()`L.2'!^nOZX*?CDN='[buUY%BT!:rT`r>d__Y3fk3!1eOU8Ac@t%bAoUJ=k3Ii'SiVHJnU*tjbYHZeEOMZ$KgisH?q&jAcHYcI:_V'_h),aUYjf19t&u3`<AE9gO%OV=Rbc$V6::,uYk_JTi&1e8MUl?Yf6_Qj@Bk1'n\1tr\;MKs?l+X[BQeZ!1dFJa$W!"ho-MnYuZh7Z^pN!n/<*]XrD>6e7P@ZUg8%SP*L$dYRJQPe.3UMQ)N[LE$$fYqP4VogV5W7bjs6iP$;*3`&"F9SD[:oAN0'/_DGnYkLW6a<[o3o&8)3.'>h[bk.KS_r\c>mN#jV%EMN$6WVLL]D@%.W5$TQo,AtHqE'[b\b,r!kh&&Fi4W\QjAt:n.&t0._NsODo5tiO\(@'9b1cg&.m37,%.R$qu.WH_Es)tRBA4%^5%n<.tmb4D:$+n?IakKAlche9n"k)^GT^)Sa(%cFR9B09O1\)Go!jk8QMh"n8fO2.E,29Pe#$Sdg'-r!k[L(-kKqWtP06MOYnB_#,`%^A%kGHm:pj6_]g];;;@Lg?H'U'54SFS`."#DhW&F@IC]MmDNOjLYemC).n<QF2^hfgX(OQC&`%00Z0OmMno0om*o+1jr(.pZ1I/^%L4fj150Ai6n"\)trB?*te/t;-a[jt&k!tSs$LNct,8JrNT)W7MUW?!Fm'UBU5R4XI6K7i\K>_#`3cL/mYQqc9rb_G_)L<>,;W0t<%fZ7"M;B`XFkYpHWen+KQE*p%XqD$PKM^Z,B3D:omEX0udlq'9<.U8$7iEo01$al$A$bM&_1PRX[DM1f+,2WS,,R1pohC"BW>V5m8%$e;J\c\Wn_`<6BUCoigGi@Gkd!ga<+ls,Y*ka9;S^kEGG4"mo16J.DJHKh'WlmK!p$SJ[rW,u=^NX%#=YEPG=6Mg;eK76!]`4*Q9%n,`/KHn,%K1OJUcccg6tInsYGM=c_MguHRhB(g8i_7raMj@3b\i6g*_2]kJ3*%a$3e0/mkP<[`;3\1:_Q";sJVZff6Z7k[J4Z1V`%+&DPW]1kLaS:<q;S^%(gbHMr?I[H2_PWYuedA\qi98i)[Y^;1!G0AOcS`6EuU=3L&(<JV$<k(E#>NTQl$J=%s\^G17faXRB%Wpu_%O)O^gCbmOElo$KLm7iN*<87D_)jb!"r?to87<Mdkl#]F"#^#?]O7-q84L3G[O)a>4$GCM#1YnN/]YiJB_[S\'#!i1I\Tlqs7-.1`%b@0Lg<P_aWlsqQ/TZ't+nKY(SSN,dR6'Q:md`^Efi'<:.*VU)T%7m_$P;RA"YV/g:BMn_KC/6W.>n$>gf4t4`c,#dJkX"liUSVn!%#LQjJqN>+9OF$@pl#0jbIn=Mh/)9C=fP%Q6aY?"N>[QAYjC7-F#,%lCO2sc80BCruIZKI6SR:k=[BCggmlMc#rk$[ordJ,CrM$tH%>!EYY8[WjkIXj'%defkW]!'ap#1'.SdfZN`DNrgr$1EWe17Ko?-5bAg,KQ_ibGG)Fk$q(C?'m3-1t$iOCcV_O@aBeb5;lb)?!(%1%2hZQ-S*k&>nt=ZX@=B,<<fSl'0$O$mkkcUIV@1SD9,-,::c;UHXe!/@*^N%uaefGM?1PG^8@.QT]qV:GV@1SD$bpP-Qu'@lOEte&%*_A7qQuEsUkoDCG/o:K4?^M`iS'Knj5&fqN.[r%q[N'EJ?"/a%PtgF[aquGEbi(66GW&ip)^Y@BiictCKf)+?,"@tp(R@]aj-3$$%9c)qDnOlKLaJS:$]oFG/0&AB>Wbf7qkK@PEl,&N*V"'RYdtJr4n[so2Rk?7Y0'YU6i>'.^[T!7WpVfUc+;XZAA`.EcKS`Jr\HTJ)%6qA+]]N5mh;QP!1jnJ$aV2Jl/lMIl(&5Nm`i]l2dI1GbB,S3LC#gI[U*gD.FI8ebrOnNdubP</W?Q0WJ0/0>U[WC5c+p'3f3(saP%SAA@*GV=mab+.rb$@[tJ5H#1eL0=8Ubjj;j@NW0SR^3bI0-Tep8g]^Nm?tSbfB%Ajh0j9Xo%(1H9Wgd?F<e:YHTsDR@^'M5'"ft5%S#2G:RCdn`7Ing](Gc\U(<&HJh'IkD<3RD6bT4fRlgrJ/,3KQ.$fd@j:41C<_$KW`RKk&E;1bd,+ID76;(MpLc`#(aKsOI)fY]oF%#qKoeZbRq]Ue;F!S'(HH0T6=t8=j2@5:\<g&/erTR#$n=^9BKNX!hI)?JIg_E]6sN^B[L)?VTlbUS2(g<ZgXHdV($Qo8b@>MWFaI%9k/_B5rN(<\.Rl<N5-/0mDN98:00Yg3sjef%;SC%G%!JMmQfJuD^Kg%VJuQ?G1p'(`*1:'@M<O,Q`#0CCO_]JplY^@YaAVqZ*?^&%;#c=OUp8h=fgO%X3P-J4Gu5)>AY8^'@q2I@HX42g$]1O:e&8"jW-]^Y^6Y1-27aS4Y=A>>iDk7L6diYth&,@LlKHI4gsG$`BdG[;%F-(R"^EnE=1[Jo-oMN384,F&'`"UcGr=^%QnaM.se[l7kej#9?M$8A'([bscAb6pc")l*(([f$4DY8N5gr3ef%^QU5Ic2:4Aa":M%j:`hd.<!jd,5tKsd+^8JKfacj;M+h.0>2<@pYIF7E>M<M9c.OU:oM:<T15!r'pg^3?t-6%Q6[8)Pq91@*ujL1FIDr,Nk]rl=ls54%AN9kKF%+gYMDZo/8&Y.a,h@DT"?K!;@f>&<^)&Dh`5H=?3kr?U\7WP>njI#T87UooY/+YJX7ucJM-Z%qd@E+RWIIOc9ir$l4N.r0%1&30leAle]Rpt[rS]3LooU[11Y`IM`FsT!=O^M6;G_GB09R$N2?MW4l.#BD.!`.ZJN&bSW'+@H%l6'e7I0INdG-><Ke0\<#UW@F\%^No'5/aOs%Y62L0QT38cU,#UfHYSW.C+@0SaDtOXg6#H8%4oD5jJ0t`OiGMa[fmk;hjkId5B#YGf0AT3IuZ#fW=MG==Lbj\="+\4%gILq`rn&,/[Tb>Y1Vlu]p:X\SmCU;!^A$NcRG;k4*u"N089S@s4S0u=i_9W3a8YY+VR>-([\`Cf?YUKuQn`*eMg4H'CbdafY1<K9%O&!R8/K/P?5+Wa=LFr@F4mVeom[:]EH=WqXpU=Lj0-]QDN)/a9O3^[o^;R_&[XR2A?2-58g>hX5aT-t(J'4Gt2)3QF528hR&md$q%#[RkP3N&b5H!2or:X4(A]Oj8o-/g<;L/]5cB>h3[kY??aIU,He3`Vb(^5$ign%LAcno8AgLJs>+[b=g+RE/,ZX$>c#e]9B,[d<Mb%OMBF7b\Z(Je9n;=;=:,^X%/J>q3B8#kJPlq8`(<NG=HfCR)B],+):nNP?VRpCZO^O8).s*>L<jN*-;M)-5CH\qMJF-^r\tTC7S+:%#>@g>/0lsRie<%d71Lc3N>^52TiKKs:##%I^!*c"pBZXkK2#`F]&/GWXbpApi6*[@",9jq,_4,Do_fq2!TPC]3L3Q7kUG`f)L-]n%B*;i!2^U\%em33YQ@HXp8,>KuCpT6_*T<ZcmDOVd8WS-SK8lcf2V-3W68$0'fEs#>?[X_ACS:!,ULaAY\PBd?S(+qO_n=8?\`#5n%hg0&`?CopIk`D7Op9C_s>Q]sGJ.XF"!Ud?B=b'j8BWA>4Qj).*_Tr/..pIYeMtPP&[UQ#='%t>'5pL]ZDs,7;lpp6\3)"%5<''T6%3L9"ihun>pV6QfZbH<P1U]9q.IUr9Ar(0S*IZ+H3.N`OapoI09^mIe:$.Zt<_B_'K!?*MO/GPgU&C7YmU%]OS0urQnOF%Je+o0HN%%kmdNK*9W4Db-n=PBs:ESdO]EpJIo[8sELQ.U^"=NVfiMn@X7\XhKWQM2@pki2sBINV.]gV^K)7Y-EGearhPeS'."COo`njE#@p<%T$AGqMb-J*8J_l%%OoE3RK]'8#;G+",`rCBa]-UMkk$-'J4Xe^KD+BBZ2iFlEB/Ql%>S<3!_f$bM!OX)/3nng@Ppi/*:0>$J4Xe^%@9nW/!_f$bQqE$lK\+"-q?WIKr5C5&n0.Je!%RujX708Oi_dFc0<u&].%d$Q^\K9bd&QU(4N\K?,29%;jhmUN4p&k4*p$%+H_nU,%5KXeL_YlQWnjU9R4OQaq'"hR3e>%Dk<<3>)NnhCM'LhsuK4A6\)u=G#p9*;WR9[kjoh0<aeF;r'af19XDQ(X#r<A-XqXV7IJMeOc%h,%PKqScZm68e9d]^$BB6Lf7eIH=bLrffO&GQ$MG6b)5mfQ[:'1V'giCe@86r:j@l;V=>E]$^!C`D=bYIc]2=oi#imMAJOpht;o"%:iD$PfA?2d>pf5E^TZg%-@G_9l7V9R^$?Jao,!VeL47`-m\%2&^g9M#Y$\hEG`WlCinj?d=*;ETTYL'#?V`S8mo@,rhW()#\qU$o%a-ZR,^\Cn/7e@bZ>^S'$V!TFW1*OT0'$*WBo"0@aU8IdeTCP%\;"+8"^Zq`Rfem_pb%3nOQ;+>kf+@EI`P:[c.%(<FJ+6gZpjd.J%OZM:0INj7lFO'l4Y.jn<?T\CP`^]L$?i6sRUNqp(T6E9ZH[N`eiZ[4>)a<^6qGk;HZ8nZ:oo"#+LI^)/riTW+j"2P=C'=#%7@`?'%<PRM!deY4Y'*L'd@__Q1^@1p;qjW"PE=VNAT+B[>="Jjk4h^rL1a:i;)u;<1oi8c#hr@A*9D?!1U%_j-JY(lea[dHC>sC1tT_DGN%@T+2]]7)kB.f<;]J[<e=,j'd.fGEE;M]N[LeO/3I,i8252X`NV]7.lYiu@\t^\Cn/#(2L#McmQ=DV=Wah[mp!lDoB.QQb8Zlcj]Q%?hK>gj_W:frSk`,r283!ht;m<FRiX+^](BC=>$%AgLK]+99SnbhY$cOh9q@h54A=of.2W%f2"*'cr^1[)Eepbf.W..PSZT>I+L#X%0I5B<#i>5IEZu%oY+KWq4g4\cjfu#'lPCWRb\cCX^?_*oA&H%H-W`(IJJ4S[44q/onV9J*(?Yr:@`c/fmdW+H=L=%,c@qjGO2/G,%Y?))8@bC@GPue>JgGqIe5*35:US]B51$QB&`Aub9gYQT6b15#UP,&D?'WBG^I=pLB2oVd[Q8^L)D#(`L>3IO*YNbKL$Y*psCm,RM%I&c#Xj_:]Zao9@UB$_*RR<mM6cfCFAYN<JMIsSZEDs+U?bK<=BgY2L0d'eDL050)FB:IUuUN3=#S9a_[iSO)LE1"Psl^N&q/\c';%8#E1imT$EtX7lFkG-,neg@`?]=8P124g!Pb?-R%IT>jX5LPM@#mIAuuBYVc\.IGa7oNA6Fg+'J`58rE_?+k^Cl9;f.mA](j$3]N4%S;Yd_R]jBjT'RMFYH-8>n(oh+PM)GS$27YH4aVL[ZTn9bOW>D4$HLWUe`Z:jj\;=/rP$riSE60)RI4>/3rVR6KVlGbD-pU][>FG^%^ePi%>P@V![Ori?[,&`Dd_j<,qQ6SV!Qj11>Zd%Peq+(Hk^I9](*@.-0$!RoaLPbLj%XF=S6FIOf+6H?mFUNLD<KuiefK<[ShP4C%_tmU:gr_4Za7ibGq_<^`M.bPnFn(SVnq[)@8U2qmTD[GVdRS!"2/-u/VC#(\'b?kWbfo(OQ-*_$$WGZEF1[j.fQ7Lh\XCuJK^EDm%B4JuLG'f/i<\j8^k"B=Sk[lb0q`,-B/Ub3hVRO1Y]8[g$bmAfA6iXSl.2?rpe`5r(_b?!TQd`tJQ>u!&?PcFbmd4j/rjr(SC;![C%(sA,sk(Hh%B\IRB5^jnUS7[9L0$ckDh&6&okNgW1%Y*Wnc\:V/d`_&@!utLG$/blUXlka@:Fk(Eg01UufNpZ7rr"3`JW@bT\m1bf%+4M/Z0BJE/V2:2.<0i$fR$XG(ot.7>raDuQ5Ci+n[`1P%ki0J^/6K?\'m>mT,u"#kX1ttqVgQ@q=Z\]lH,010/0&4cEmW,,N:F7Q%]*f_+Fn4!d\]V_6doG)p,7tLg[QTC7AjOEhYOc!r@"g4PdmFogdKqJlkt(n-bB)b&KqDGBfibmGL!tCTE-1VY6JY:"s7kS5Ia(.`%q3k?o4d9XU-%#Fk$h)lqD\bs'P7)=%WN5F*/aKm_1+>TH\N*S'=0B7-e+_5L/@27f<;)5%Eir#<SCr,44EkFbFfKi"\bEt4VM&+.%k_+9(>V;#kk$5@,4h\J:B?X<s`u00YQ7Oc`P"K%V-hE.g3C%>a%R7-(N9m0S2#ZZXD[-3Pf;ZtuG^;&?]%AfH[@Tu;q9+9YD5]Wl%TH\O5Md744mE)5\^!F1d,6#!2s/aS\5PNhn$/bHm=*"b5343It8cW@5dl8f&P5RnF#;9]2r!BF>HctqR:Ko&<Qn.('9&#C_pBS4]%o=0LPan(s7T?"1uh-%1]os'+R3IdZRICqDWGmWn_,)l\H,EH<U%Fq02T,AsrgY7F$P6gX[:*=6'i8tL$WR`n`m]as5V\f-r?'lr6%@cPr6f#,Zo)6uGMR"GFl#F+Q<Et?5FiHPVYjHb_U],SLKem@j+p$-jGXM1g_:[Gdd,0)KMEMtFmF#]I5o-8U322CLE,fLD-aC/N_%PD'J_'uA");7"p$V:uB4)lE-3K>WR$A!q,=RCr(Uq"n3i%?$;fceI<[oklC6`G\3'^(3lIPo4cX<e'u5HoBJlb6MV+0qrXTQfX&Y%D9cBJp/[m?jat5<p95A\rQ;SRfV>Yn"M\d$4m"[G)o'+:hoB?l[Faa?m3laN.,'!L4Y&>G4OU;k\[[)D,hePAD1<pGUK(aB>m`le%niCrTj+84eJdt*;:A2WWK?YYTUO<o&;4:*Go)NpF[.r^gH_;o'JRpmkD:-;$mpZW?^ma*$>J"Z.m3PuoCpfQIZ[U(48@,GLi]L5+%M"#.QHafk?&XDLalP#c#M.`H"6Q0&[-k5Cp2`j'_M5^EZcH`&YgM+NZ$C0_R/L#?P.WZ!@7-rj9lVA#&D&"NJope%I\G2!KBQN;3%pcu,c+jg0YAJN=(nQYCN$Z.[YpgH;G.;CIRiIo9((;;/q95llQ[c)k1-c72O;V@K&Q2@RL$sc]8#%mDdKABjBFEQqlN-4uEEeFjF%XQM2FSiBCtG*?VS[eQsCXnCFq/k=ALaFD"QC@0C<o]/88,Wr"R0]((X$LUk-^hA,H*h'E*Og&RM8B<DqIW6W8"c7oJMs/ZH&qpC[%ACBkf_FL.A@5dFA_Rr,8l]gWIA4[E,@&ZN+DhRu!)2X$*e\7YL63m/&ImVfR1C!sb]0Gms^TTU(o(,OM-K>EZ!K16X=9Q#iS<WU9%0b'5VQ_=G#VomV[BRe5O*<YYpYU2VQT,hT8oJE5%jl@81n%:$:"t0k#"/3#5=/)O&I^j)3>5>rN(rh_7K,?cJ&lkS*20)fGI9>#(%DaNDXF&VPV@=()$9tIt03NYL:7J=Oh(OaTpbRVO!oXTrt0!kXa$f^(4O,:d0gb<62G7Msn>E.(jZ#%:iYNi8OL506"Vue55p3u?b%hNeMdYShkl\Y5];-3BSAp'-Dq3bb6M[^3T;',M,&hRC^)+3&KT5A+(i]Fdf$bZ`&V^Q]L"[[uTJ-0H>e/3OVUB>nS$k93(>qL\3O%bsu5$)3+#?(](4OHiqa=m_ijKW+kUMe/V8[I;*NL3Rig&_p^tr2M/p]2pp-=/>me<#Fft0-q5k'P3%(_?cqsRq27?6g"Ap/?,KHK%IHP?k6!^"Go/.7YDn-$`H*h]jMJmVU^CY"]DRGe>bGjj;]*%)=iTJV=U-"u-bA[=6+5b=gQCH8LgJ]#.bqj(UmV.Gl1-!i\,.7<D%nV\i.<<*o^SKcW;DL+9Z:d%UDc3kp\`0P@(=3&ea:7)@GT@:+qC06$Cofh:K?(p*o4<p<=d'LAWN+g\?eSf)7Q<H/V*G3TpXr6hg%Ere-02-(kSFc"Lhk3(6k0su-&WS1RUiJ$#j9,"]T7!6=V;_kM$2CnYp)h5^W(uLmY[YlToG*XICDUMH8Ku@Yk;[e;Y#pNn4]2M&C%Sn7I0[EaH(X!+p0%AKqf3Lf?;kq9X(Xk\doJ#@.!1D?pgmnJ3T(1GY772'g=]MNddR4FVp1P/if$SgmO]4eR?n,9J)!)5--$:bo)%VZ**V5:*dpj+Y$urd93C81[j75%ERg*7N&+eq1WJ\pMRjjS&J@\R,&V7&C"'@.)0OI/@&ngm<,CE[u%6_Zg'j\&3+g;q-;/`['M/%/Mq&&MpOb"adi:C^8&A*3etP&9WcP,i''VOmR7`[YE'GZ?]Od6MD:GPIXTNnPNP)*BE@f]C$0a'_N2.hC8Oh4=1?D]a5;fpk5<s`%FB\KPAmZnYc,koYTaUOK`!m.M@4db@,?rok?\:0/%BngUl>gF6K@IC_hO4aY*_*Z3,FA_C:%'i)&+c&D--:u[%"4`lr&pU]bj8R"%CiHO%GGWH+7a6(#epsC]%*!F]SQZ`ZTofF>__04qb[^*<H_m(0,+AU^TA/A[FaOP9rI(-E!chMs2nR#Rc$@PchOdKDg7;plmN+HD%j7.MZTjt]=7I`g!T>ruMQGP(WiYXbH(B^(uX0:7)%W1GijjkL2!uBpP:I[^Dh713e/pPF-[NYC]$4e#^_C;SEoTlR=2,YZ:W9o3'%cn3E"M!95#l)#K^9#e'S:2o[*T3iZP&dWmSG&Ou09XluJp+b;T`1S]+(A72p3Z)5JMJ[#M"\ut]o6kJjh7;q7BX]$sMGH0,r!)4g%"lC_c^Sc7AHD5pRSnEa+fa_Y@4(jbsbj+O1S2B=igSr-]J+IZ>I&q*oOlg@[O#c`ICS-@N!$-IQD5(Mi9u-J5j)a(Ji_8<%03%)"%eq&ItYEF`PrX58X&/D+Z+0[7';j&p<&rO$lNdeK,n/5UUOaKT$QBfNDAQr\c4.g\&RsN>Y@YmEX;9-.*"6^f#His%ijsgDCAOlRK%rX:rpKmsD3-?4.Q:mUZ5ogsNVH!r?R<q7]2I^3/``3Djl*TR@CIR7+_9jfF)H,V$(1AOYb3[R"fQC"%C\XR8/*[d&'J?Qe5CQiKM%hQ.iBjA_7s1"9o#pJIGIP?j_6\C0P&_#s3=+Wg3u6ZcHiR+014^rL`C;F$L4lc[t_`#-YY$]Hmc*VlGh#S5uFHsu"B>F,KP$]PGf%P5$fUcBj#`Hm-@b&t_:Npd/&sB+4Jr=nZ66f;s(J6npJ:cAJGeI5e2Aj\A74ieC\b6f5oU$ROjL)FZ2SRYVbQ-rYBH\675BY*u6&%n>5h6I=B?ZOR3RCP8-4-Z^]u(0b7\7Jj(<S-*<]QITaD]H1Tt/`r%C/Fa?!pTY=KKjgr"JA-L?;Lc5A6=_^hUM0UVkcgKd64h:))%Z7?5j,QjrLr;AK;M]])'r_F`S*orS,\8sW1+;-6Y5/?IP>@C#^qoV?dGbL)<r:Gf2!AGd<YhWB(F)$A"FBlp-)&GRCNM4/B"%D8R%naK/crTW0$?am0kml-acg56s^p>R'%[l<$NfEuBE^i:JBN-ZBW_;]S'<\dJ.^,+nZ#5K]Q^O2E=JHEotdYhKcTh5t:*d2W(rFr!k%g_RarNeABK3`$^>rX@1)$e)+4&<Mr&?#lR#VbX^&%uStj7)WB7*e`;@Rk[jr4V-"oN5rQ\Jp>K.5*RjZ#4UFB.4iCVfIOl;b3?P6%%/SCI$gPZ]W'jn-9Fj>GjAofYL&UF+rLg`sP\m\;2V7a&.l4W=2AQSo$JopS,Mrb"&EOm)[kukI-u4f6qM_sIG(c[\K>eIS$:dms%)=gB?O2-kI'Q[28d)$lUn^usT0.np>35uHjH=J@`U&1`gT$Z-S#2Roge2$YE=03s)gJg`9i.+jn_/1[oe\;Zr$IdPXe6mL$%bRW4%.M7gX2VNLmE+As,%ds9/kH$eNb]Gn\12pK%=^o'tar)UXKP3KH$DGrcpb[?%L8KtKrujG$m&S3UN"kKB"`At(fK!_@34HG%l]\[#%k8/J_D#7eiMI;M<0P1NR%/Rt+m*L_l[$$nB7I-\)=)Qin3ROD^gCT'-2W4EMGjL+,0ZN7&C#,/ucT:T*aZr0!eWC(O9:"J()aF')%L[-bHb0fM?e^Vb(9$Z;>H0.sQllVn*W))CP=RZ+Kh6sr)[d.2dYO.d4[fhR&_,rp%C1p%.afUS(V$9bllqg-.k9`;Q)p<k,5Y:&Z%d`[t'TVV-SpftODQE`Uubq_J^cc=GC=m!V=%W.M'AHR[TJ&Nr`/W,9@6H4^aa#5"5VN1<3ifokRL?MPt,V1UX11Nup^Lh@!i6XZ>%1!F1?k2a`XOW&lB$r?^1YpW%hIsT2)@3%`D@'>XF[Q3#e4bErV2(;D!Z4V8Rds4bg%[W1"HY7T;)/`4[kF5.=k9SnCnia3-s/!g2%S;;O4][qW`nm08KVm?>/jL^@tLL0tfaS23DDio:3IjsqO-fWWSfmb[G?+*8*E;r\oHVVMmVm?>/jL^@tB//m42HhY7_K.r^Mnh4Q%HHDrG5-9Y/_K&=,Mde3\3't2C&":I\e&(`)hbC0CjOl0Jd@%UaEVi=I1!5P.;KZ=g<e%&S+I;N1J[&/kY]):k=An:o:+elmfU*1o%K5gKl#AWt]!M1D=RM(+QR"9DrAlr`WEEEA1\2qUbcIFa$6Z4@=TO7R\bGesuZdZ)=("7m.DRJ7\BiX">p%2MS>H4p9Vs@FWQc=3L%>eVche(JP"GAH;d-bYToXBfZ/mCDq&q76#n:=%;rOCCIP&R).OAH="\rVGZW\+?jdI_Je8I+<,$K3%dcF*@qS(=$VX_d[6?ps.(,%]iX.@YLe.Kf3Po%"GY1F]QRi4!9'k!D'BEKG>@OCEW4R5U\NZp?35.&ai[h6>+9:Kn#mdWm:CKcnU#_sEG&Qq[=6nF+Q;0`DD/+D%4VO:Qbum1$U()Q^6F/nc]CaXkS'9[\_\N[[qb:[K^,.1B1qmC%`[T,Xnf]efW@hiGlXrF9=3Ete4rYXemai`%<HkaClqT.gg=-<K%XnL26[4A[/F78(-4.Gj'CCoYV=a^A(a>8[B=&_)P8tjGZZuT:E;_XFlC$T29OagK(o:8HO.u2=GP9QFp1k'Ti<r%M<j[]er&9=)8%4n#K7HtSVjpWg3Xq[Zr!4tJD=Zu_rb?cfPdAEV,!Q*N>hjNM$p&qk-?2rE_$jn(6&%jidlSt9_:nic7,cO9`bU!9=4KSgG_bX?o7%n_2_\ZB@6@OM*g!ZX0SD>^i&ch0=.P:Y)T7\>t]:Q#TXe%&?hKbC-m;$<fPFKXI/hI_E]N:"be59+)\S=-MNjD7gYqRVS7*p$_Me%>JHeY!(nU147dhuiI][X.ELhA]"UsqF37o[cgI_&4?]UNIVd<V^Ii"fo^%b:9?`Sl9G>?\*_aq:9@!pUbegeOg%;fK`O6"`2U0Z)%]*kOHpNJE71Fne8gO:i?*nRK,U!b:qOgfRq=jtfO0<CR?GdIB^L^qZudG"jki05t(Re]OoDqON"/;Am%X&-@kjJeSRR00QN`5a!=%N1uV>iK[f[5>AmtZ1HZs[h:2:m[Z%QiY;bWp%]shaE;QRZ(Va^+:_(NF^_A$3qP8)<_/T"NM)`6M*(fO5\sJ-I*)p+.+?Td_"&A[%P'0<^Z@f&W7+0?d;g(]:@sHGI#ZGo&QRb14B7q]qWGLShjWRNFW!"32ZnoR`*O>P#8NS.jg#8/8M1h"elk$dGGgakC;g+BfPJkQT%K;\).k*_%$SIqac%%Lu$V3E!MSr#+7k6oap9%aO;b1J&TT!H9&Nt+b8).CZ_U)\]W;g'k@,U-r8KIJu.#9^I3;5EP(a>4]"b"c1O%_!"[>^7:HI:s)O$%KIjCN%eg5I2tG3ZnoR`S\B@r,>$RN2"mcb8XQdsPPI5UPb$GhPED^.0H(<lg)4>AN\Bu[BbLTHm.BFMMklmU%VX,QjOb6drm';88LruRK#He.NeYO9+0IHF#d,1jKFsdNUh[W%m1X4:l:[u2u_f2(/>)J.Nm?.)T0euFb=5<4X0F4kl>nDmhVQ+''%n%q^1[!IVNn:R8-i@t!WD\P7"=$QMahG?Bm2r;K.J;Qi`8_)J@SZD!&&U]1r/*56LoccTinC*4oN@NPaa,m0DD#<YC3WAZiV*;TS%&@6"C0bn,sm-[;Wkm$]FRQ)f/%9n<gfgE-;Z"BWSY"5mridANi$>/js[ub8UkLJm4<`ZsI;^uNRQ_!a@CAr'nmI^5IE:[HjEtP.$%"tnj?>RA&\bj94#b(,F9Hh&MD6!?B4>a"5U]5p#1hYDH[^9([_-Rr>E0;k0pE2cLq,qh4b6f.3_.6J<11A/nWi\OrGn'jL4Cn>Jd%Hh^q*AH*\(Ienm.f6<e?-,5WLWWo0%mj@k"=erJJm=><m'3ot'/6B_oIZr^TRoI`B2#-/k$*M!6AV\"tVYBAFpA\8j!VN2!iGkpt%U:M7@fdoB@b+3D`$eUO+jgRk\Yk4jK9'L'd57RUIrt`;TDRaDu[c*"$d)2d21b"pFB@;S.<;*T$f'7'PSi`3,^!unB?9ll^dG`X4%ApPUpb<A8GDs:sQNV3XSiR8532]cC\O!uZo#62I6)u_jQs(co32,)bX5<Qu/N$8`Yn!QU"LqHU7CtFA*F@Rjm<r*"NdfDf\J)J@2%r:)jcVZ0Cql(dnL:G)Nsm@U:-9hRRFT!"3jXE6=B!?ZJmded_\Wp!8Jf@!/<h9kh_X6F?Ae+0AQ?kk)Y0>_W0\os`VBF"QFKCLeS%F2TKXA.+E3nJ3+b%`#(W-@2\HoNhu@%gVQU]!fL;EGWZ0TW/-'H_017XM%/lXEkJ9MV%r5St4IjMHnsqnno&R>HXP&S/GG^2Y4@i%5gQTqf.APPgK*1YYc_d(F^+TfYbI]_`.Vt\D],E&9B'X/]]M5/YI5:-X5tqh+WpkP5gOmUdBm0\dZ#HQa]g9Aq4cp7$te0&Nl;0h%Ad2[S\k5[n:/&Q54]jC8J2qmRk?'V_!YQ.K;U/LDiL?p=WiQOMc*7Pm.5E`rLbqaPSXLTi;gK,2/EUe>74P%SakO74&DXl-1ld"=%H.On6&lF`j,fLJ1E#@M%ZNQ4dQ$pgsPR6r4W"X@GL'rh0_*!7Y]!&+=)rL1.:]qQlfq*+%!iD!E<E5s94&BS9#GMi,&9C\f_(_Oj%N?-3%TYTVXcsT-J6_a`a2?Uf9cVZWR@H_MrAa^8/D?duY>T6,hAhZp>OG:M*+-7Um_Z3@iQ4X+BY3EitBM<:I"9AmQeZIb^OU93g%@OGR\NaXApMrSi"a0uWh"&Nns\f\qiWDn"jrO_>a0FXVnU?D>2Jmk+<&*S9H3HWLVA#+Z0\g_&.CsDShXD#*n[2?[rl#p+SCI6'&%6*C?2ns2Y)WRQ(]Y$hLF.-<h=#n07Rl)%tcl\b?:&5j=INMX1m'X0A\o-4rQA(t$qUP'V>ZjWf5P,3OsTk=Z>d'Hs#)i!HamKd;2%?dQ.FdZ.?*#ag[E4YoA!3$KIN5JG*],VD2E\*<]:*9mQ+os$4-Q9ri&OV<_MAede7RFdY@$lqYH+%a>RMOkpaSji2/KCLrO2,,i>%Q'_TJfoD3_iTd:PdY75MaNM2e6O!s$^]mJlM\Qjo="UKS$0rat*eJpjE2GWJU/hn`!qR(^$-,$i?Qg'2L,+L\&rC<aFHr)EQ8!G\%-6/:WE;Ya8\YuS]7O2ZaKEKqJ>os2=BDN,KfpJQK';[Os*eI.70J[.7VP"WV;5Q"t)b1*aXmbTYQBrsLW'L,?Q&6KDS0XpRbV4/m%KMm[gA#0UW2$,Na+%J,F)WdbEk.JKq"4#!^Q`LIJ,b]G(\I^$0VSFO6.E'?/WbCBT.'obf:f66BSLIu9<#9o`QCPJ55/?q/TkgJ)%pon9l_,=k9lBM&t'KT\OP5n[),R"p)g9UMcls,3[0Mkm0p]Q`7;E(-Jo5?Yt`!+0_h+64@Q=4_MM/PG:0(Z=?Ms=25R(DN53%Op]%',i]McK^\KHpe#L(5N$pA!oLl+PO5&grRLrV?=a:BbQUpCcWYsbZLhn<Z>J%@6+`mi%PQ[7=@0L*3F,476caW<)s0jV!&M@$lWP.%I+uF'/3&i]KVtKbJt63>D*!>17B`YmK`j+rV5dQ"e[&pf7+oZ!C`b]Hi\jP!`M\W_K'gUVbE!kk3<P9'[3B$.JcHOQR%$uTiW*?e%"U0ZJO"uPgJJ/d<-`5DSo2e!RmVHQfJI%Vu?r:!nQjr04!'rV.g`Au0A.FGl4tdZ<I/`F%#aejc;,pb8L(e-fo[!nWg:c5\.*,nO%X_rOn$Z(6QXI,e3\%W4YVl9L6%@XS>h8f79/1:[(*nb?Z<J+sPbm2BHGTP`i!LY165(s,d!kF]'##Wn$R(06UeCJ`eB>j%e0X<IV%l:RG>$s?Y0Q0^jLU_nq.U9.Rgq'[p9N`=9me[4RDXu,TdU/cra@HqfG9m'@HH$/\*(io"in4)&-&)dLH5ou`rXs>=tjsMM1G#UMS%T6](W.NJQE5on)@NCCX/<Yn.NVLZkO"j)PR&-UD5E%5V6*C<<U%<.]gSIHr%S\%l!Hn^RgJAE]qW`FkYU@#u]a8qU(q/Ho8!i:)U%B#(t8Rf9nf-W#H!Mk\=R*b?`LN%'3J?-]#Q`(h^(8(\r%&>lF)-8`bV^LnF91f-hrrm&_jOtIH9T.V)p&uZd!BELOC:Y?(lJ@;*E%1s78393?.0%\2lZAJRr)!&k=$0kd'+4XL4)La081!UK.!$OAt!)@G_&p#H!R3[:*Mrk_k.6Gt8*?P(&]:ue_iVANot0KOqjl`@5!%dQ1#QFUAD/AJnJDZut=)\j<F((,LsnN6#!qfs7P/D<nbeed314,MXieltCrbY@F?C\d6#b"GX?,"Ar*s/Au>iQ:FV<@:a83GdJM*%PH>ZpNEDUr:kKmb+&rV<dpO8TW?Fs5jq0u_2/b"<,!Y@(<R%4PC/ssM"t,-K-NKSf=^VtT;sI<H6(>FtB\]:.)W)Y?9TGB><N!bs%:oDUZTr_9*ep7Tm:khS-+O6@C0F8BoOs$$?/<-Z).KKPY2(Y"n?nZdD[CZb_lt7Mmob%i&7`td<Tb%ccciC4HLTE.".'++u9?\>/%8)tpM-;$eH#cNb^:]jDHeQbiYZlJFU<1YOj9fNIk6>VqP3iFaH?:mr+XO%!C)SYnn3LZP3*__>;OhQ]2*6ZPF+PIV[OMd09&u/Gl%@SX5+R(>PSgb:.n(3MS'1Q;e-:l,J'-6e9s6mP&h6ol>PT!=$I;(eZ[Lag&1LlJ>ZGjZK=b<V<k:j$u\h-\MN^c;>s@KY-V+?%'N%YG+aX8T!@^g:qPC*/8&*drTq;!N(3c.A0I'00!*?f4d79WX!bM,<nI*XC;bEBaG,a"$dbWQEgn>&]"Z'9$%k%/dO$tg[]D`NY[>4%.VKDnT\r(3!R(uhe-@JONMTZu*9nD?32nYo0b?>M6*puTPI=YYDZR6J^/NO4#acSbYGt?UGG.d(O$k._*mF:t;bl<:7dt_bA']?=%1ST(MN>gA`IMc_oHm?G*WU3L7#mfPr!T+1h;iY_I#sJXN$,2:US:)D3ZM+f]DZqs_1OkkG$34Sm?*P&N[S3ih42I*^!8e)hPXOL'%8ebTm[,CUJ'Hq%(^F1I)"+_<N1f0;\.,'m*12!+t_OS:@KZX+SN)UWA2l.k!8naib)'n`uBQGZ7I[D@Me?Z5/SCFhP+b5B"81B6'%=$jiq6o?]=JNC@'4X&!RKTNgO"WX:-TMRli$>H"#<#1^2.aeE4)]DB^2$A)_E[k!RS;n&(G)Oo[Ib\tTEt!?L8shSUAOUn"o"AO(%JV/e:W9=MlK^V8C`[@ccj]gQ&a"?0q3"C5hWgc>>QCC3X;j?R0P!Vej;NfsYl<5n0N?Ht2IHQ5m1)Wo^$l/:F<hsN/es4\t?-(u]%JLH`?AF+q'@TTV94lP^Wm2b(L"AB[eYH(EWGG-42%n32<*o-RdFc9W]8VucLBFr$*_I/8$89pPV%"Lf=Z1oOUVPIXNPY!'p?tZD;%L/oj?P61GC>mrP:KWl$.0Z<b6.tehCUMGJUTfmt$[jWFH>ipH$Pk3?9XW3-L7lQ.[kNR7^.scl(nGj$V)@kK<&4`fALg;]Z$chG8%F5P>=H>#:L-R/\[Y?t]Z,,>7OA^`ng4fRFkracZI-man-kgj%r!GkmPdA2AOe4cc6hlnPn`aS?h;8RiN!,Wf'jon"=<WT`B'DdPQ%R@\m4YA/Zh7upDQ%bs9:]J`0&-o,k%$*BR1C+7+GT9O%.>ei5MGYOF_&T+s,liSS<Vbrkh?&,3,"Kk+W/l1Y1ObI5N!Qm]U+M\La%!4H0Np-C>a1#(>L:\BnaCUt\nU"bKmKl'WG`uNH1hR.>![O)1[CJRWk8f)FPP&LOJUJ`XGRR%B_[dCA0QH%\^EqU9q$?<\PoZbt'%dOfdB_'$:6>6jO6%OFBN+c7EN5T*nE005/E#uU5M%g:/[disCU-L(XSV2(jVo!qp^a,*^>U$!"+3k<_U"VN\M72SXZG@AB?Luf2m%Vi5Y4(c&@=fp4-r#..WW%!<IH0L<(dfuQ6(1UJml#$lbf-$Y5_Rab--G)OWjF;,lAo"$M2+BXE+a%b%HB>uR"12@]"F`c_$djIhH%=GLbJjRcil74*N*#ll'?D?a&`);`H&MPa>l&BJ:a%[<oG%cC_#+*tNF[Qm7r#H?(t/-6GBb!?(drG9lY-<82(M,5F)<>>]?0duoh%B<>Z4_3DOI53S+OR'2d!9S4>F%[6hoXK'-Z.[a*>9!^i-9"eX0UfY[p%Eb$2=*063q2*"h$4M`SBI%C>6mN(kWHEiAd%83"_@Bc9%fqqBJHMC+"'Sauk:?@![Qr5lq#O,A4<CPhC2A'S,S]c*`<`NQD2+M&4/j#.^@7o?`+1,[#+L6e8m+LBr'n]LdQqg"UBo?e-_I-!l%?lu1WH0i*n4BV>O`hB14,=,59G?Kkl3)!?^F?k0f#J2GIMol%dDZQk1&996Y1XJCCrB1jl<Xnaf_T.?!TJKMn%AX5g$$I:h<FEbd%@qb(C6IZ0f.Q)NU-N+7m`6e<41>pq2d1-4Y<F?qWYT74]6c]Bs@;=V++#NJNb<I,<''DZB6r&mH!`i</(d_B$TnEV3&OTuAh-_>3%B2?r-j&[)al$8!bX/[k+F!hRS)%MjQHhsCtS3iMl''Z2]66M*rb<],C"<+"C(=P+#PFslT-E@>3+MA,-&WU-l;\h;#E*-+kl*P`&%#1Ed+W\oA[e,Hj2WqIg)(o9-Gd12gr)S$sbWR_?`9`#KdXuHaGR&?+B_RUsdEdbj2W<YL!VUc4M6$h\a[%Rj?G*pHE^o@_MA0F^N%2N=X@""?*[*KXT]aDQ&C6D;f7"Ji%_FDa?#i#!bf59)"cqHG=1$B5%<P#/rJ5)TX&Wsi$/?rASqO\dM:K;j!GIF)q:Tm'T?`Fs]U%*<fJD@@FtZE*-_k$%j[LK7/g]2Q>O%ZkO1-FPW(PWX@0cgo;T)7D1BX2:)Bg<U*B0apYm$-C<,jiE$&">I]NYV;FD<J7QVao<_;e%TR!%LR]m(A;;lNoV8+(rqb6(rXr@k621'WlrCSB_k'Y$&9stfW<`NR-.:gGNStAW7@*>oATj\jEH8834K]KA;!e\lU8I<F&:=N+-%=uY(=m9/YX/sdnYMeSLZ<`NQDQQ8b`ELq-:XP;2/kuhcEVSFo)*i[99'H!#fN=CP%V1Lps)Sq_RImOn%q5s`V:W\]LWX?h0OfOei%h'F3uV.uY*g+-7u*PQ5=RQ88/<<Zk&r;iZYD6Og!lhK3\I0h\2MQh2W[R5++32ij-8-BZu%Hs&+3=lBnWWkMWiO$Hu@1(^WLQQ(<%:fRO1Jk@''PJ^g$eR/op?XX?tW*3"Bn\jK&(9je?F'\562k=F(:SgNVbG7@:BJIG#!Ob\("WUQC?t_3*])i+\U2Pb&e@NI[B[=Pc%,DZU8#1#e,*$?ZLZhT7a!Qf)-VJ1Os<`J--S#*q=kZX:*<E5F.:GJ%YEtG6[(edDXp[ga<lD-kk@l(MLM\oV$W2bFh2DlH][<dLW%AAph*Zqk-$'"f:X"<*>uE+oKq#N8h(Af(6Ae-NKVqr@B,jp6b1FRH:F^2XIBITB)ld^\.1R&h4mJFk<BFuD8fJ3\l:*F$C\.a6g?%!"7m\@d=AT.<P_ud!g[Ock<\HVDnd[WZY$[%#.(S,9/&2#!/CXotp2Hj9CSA"U8kD-bTQp6@rbSf6%p(W>k2V`i'::VCD5!BeWhR%_l=>=4I1)]i+Ro].LbI?)si4L/<-S4a0[.B<Tu0k't=Bo;>DmSVUPr09De:UPfJ$PAV1D'=I+V?<L>CJ]g6"F9]T3I0Nkl_&(7d@%!K1+7%^WF_5mrc02diW74<"K'WWkL,]a?!j_%'MHW6p,h%]V!$gClm-R"8]idg1TJWe'k8T@/Va#tf5@Wk!X[<L>A:`\lt2)@f^2%#5]OZ^!]sLELdF]gIQpOJ5oU:c1NFsA4O(<-qr4Zl%AUZ/Fp4rHZlBB9#.G6%&fBaU2ssp(eh%Nm"=p]mJ`VOfnMeF9dOFL5_:BB%=@`j?3)!?^F?k37Sct$EZ.Q+JpPOtU@9"&>i?(*"MQM5K"AGd6k^rLYg_UHC&OXV&-Ud[Q5ue)!&C3;D<of&I!Qg3^m?:kQK1&Nm%$%C?.+&sdE6+o5lU4\6=Pe+[pB[=O)@gb]"<^IcU**-'J\j.aB\e'T-$<-3oq]J$pB91/:#7)X"+M^6B'r6[?I1R-mVAKXR<J)==%n9j@nZ@l'X\Lj*&/RcSZ0N/fRO?6>Y$A5=#"'q";M9j?'&dHKA,ZR.GW[c6RdKISF)attYVUW$'T,4M+biZJAqE.=^\U[[[R)(Wh%gXW842&rLC%JE)7/d=9Cp?YZVQ-*qH9]8StR\EA5FpLdD)sdZR<ZHK>5C86DO9i97<`NQD5A/A(7ZXKEQr5lq#O,C&&KT7T7eI<Q%Q,BUObRhH)R&Cr2;<e>>-bW,BV8MD9FA.d\.fl]N0U)FaBH1O.:SgObA^[4CJf<EKkr:!tR,tQP!lK[TlBu`6k(=1uWHEiAd%5rt%<G1$HK3C&K2?QqoOQeN##FhJ<I0`BC(hhdh+Vd:tC<-b'QR%ibQF+0h?O$$\/4WJBi`#cIBPAY6?SrS\nBda7;P+d0>`8H^Z(OBO%+V+)=2),;d3%o"RXN4(q[%tuj3rHhSj+-5&=2'4\r._03'84q9R):/.WG`I1RmDHl(H?OjddTe#hSg^eF[^%UX=58cjRLk&JK^+?%:fJB)6iclu16'OWU@gZ=6YNGAObkq!#(pOXUsp\]$qNK3Um;(J6["e)'N$u-Lg+=dX/Re>Z9DGik>j^##H*-K-Wa+I>oB<GOlZ`&%9V(`3($>)V8M"$*(,L_6(Y$O>.jR*AK;]<>b.o2BZR.q0&FBY3gP+p"4Q`t>4Dc-:<b*2Kim5N)e"r0L5S.9@"-]f+DCM;QK,ukT%"U*'4V^&+(ldCptjsW0a?o/\-XB@Y6bs42hiQN;(o>$4(pR2-c)CH2n,n7H@1:#[XAljK#ZuCSi)&-b]8=WHW<hsnWg7SlKARX-Q%j!''8*9;15iMf;8W@9O6HGe_JZ<0.M%u$a,2Bp/^kU:OOEV$;a8-r3,$).qde4W3`#2ebs,+3'N%rShZ-)`6$2*/-9p^N:I6>mTs%aHhBUkgZmt3V/dn6-@J2cobbn6Tc_<]W[/i\?`HO,>6uX&u73&K*:^jY/5M35K,$UnfFRIp^t`;mm-t(.U0-ufc*O&F:2PA3$AP3%,3<35K[hTC8&A6N"6a7M9OU(:k@Qp?,G@._'GQod%gCApNI!;SWF34e.TjKb$dRa$10Yl!_E8!c*]n"[n6_1MgIS-RN!Dc&RRT(<%CqNH!37^()@R9)-(lMH,!F/`%Z.uXXXp]8G%-<n%[2<bA6U6%W%H7OGPR6q([Mn\POjmnfYg)A-1H:Rp@#eb1fFbY]#PCg2-.!sZ%F9"u)#ug"l(a_uA>6.lY^9KRBH6*<H"\fmbU;Y&[M\^=&WXX!)d[k@'1_=#@ggo\gc^!?]PS\'aaCXo*(UUWjKPc0`%3-%W+T\?u%7@U*:.h)iAdN0ap&h^&ia#kVup:)'hdb-r[Lb0D].oTTt'FTngX#/#G<#/Y^lgSKqb.JIV-(25V1/8;YA]u+LKJ]1FON^pTiBZ(,%16_jHV$r(.8VR>IA,K@OMqp05@"'1=]&=X7r=t^=dsNc=IHmNfEKsYS@V;Hp[8d*H/6/jMJipS'(:t(g'iht-<fu(FbbDC&gfJ+P%S/_^NQK2^>>Z3E^3SH#a8."0A5FYF/6.m4_W3%cT`7LI"(n88tQ_*>%*O-qWQ7gi7qX(5PKu]##aLt&B*0bH<W^dOp@CFSsjsVa>%2GVG\;688i8"J3dZ;l%U6'(A#:gg^o&[4Ijj.#s75SkD=ZqP`hQnDlW\Bmp<:gflZ-;9cGUEYSo0O_OL0S)T).@["NUd33E--TA6%UJ%cnZOKF/7[I@H-6TZ4O5*P:-t'ai(7?9h7gR-T<BAVQ$ND.O%^7*K=A]s1a3G^S(.6#:4[LR*1.L6<;q>-he?t%re68n(2?jIs%4HY,uKl7IR'be_8$uLTf.*2uK_rF(OKlPp:68:SOPY'JriNQT>6)GuP21"Wu#;*$%;\6Rc7'i7.JAZ%l'@C5%>dBbJYbIXJNem'B%>MT(L3Qs:q@FSM8$6l/PPO32j<"uq`?#4UATuhoSD@;IkC=_Q%TAL+<500f/^_+TgHIJg)Njg[g@f]k@/D&O;a+Er,8K(Z<$B87,%h+(4<8`])I.i)"><ls.6n3kd99oWqB&nFS1&?iTQBugK[$Ai9:2'!"p]AF$PD]B'>27[]XK1_[oFLlD/'g3O)]kS%P$JcKHQ7u+&%2I`^X;XoZSg*XFb<5>FC9;Asu8Ns;-,UXtIa]Tc(\V9!u\mbIR\Rh0[L>UuA;M&/q+YC'gP3p@9oW]Mt.*JQ;eYOY8;1]L&7$iKG%+@jqJS/u\b:,R`S,YY$V4A,F(jbSS2%X=ljTHAh"Cgc0\S%+,slHDC<:LRKXRlQpbM-HOgBUeq06I.>K'dX8%Jh0dI?n;_G#tC&(%"K;mH@C.:$Y\Y[C;jW0207fV(/<klK$Y-%d$h"HM/DfllWQT<IXRXZ!Vg4e48f2/RM9F*#9W(/a\h7)2*5Cjc$!gu)W#6.47(;rk%99:Z*h-lG4^n&ED_bj)[\IgN!P.;CV/`X'e%"u*oEr?P4PAH$?9L#nA3oAl,cjp^Z%O]BA3CIH?BZJKQ:?JVtm21KkqcLD0Z`U=^%I)Zf[aVeT7'\V8F;9Tm&E_<5L7U+r69oMPSoHRe169f/S-NRSQN\L<L*I:)9J72"hS@JBIBq#IRQJ*Zl(I`N^>1X&7a3dcM1]rk\%QCrZ2Etk"IF%Es@bI0Rg3Q063>c?r5Oo?IPZm[UsBYcMOlIZY7$`XF'g($Pb+\iofN"7RA@0`of!Ii!RMq-L7/0[(l2%(=3U#(bR%]LSF6-qHUF6Vn?99;=H+B_">:K<ou#;@r-_[YO!_"d9Rr@a\]a6PYeMWRPYG_^%dT<5k(YUqdZ__RMkco,O$Md%Ei#:*0oOB9M3:%$:o2Z@TOb],tCH5%:)DfUSBgRj9V5^Jl>SkSe*X'(.14p>*4^[`.[3UlZn/>6#o]@6*66ZKW/MMZ"oOLRH*rDCl_.CGOS'Z+sd:?%R"V0K*%>?)Or&sk61coE_a1:ILDu#rP2&F$(E!BJ&>j8(]U[7-Fe)f]7D37hg4[@78MjuiJOpN0B*m$%b;6#p&7^GA%*p2c!q2*_%0N(_,Zuh5/N<4+=g0fL_,sU5ECP+f-i`QjI>12H_7u7ER6uA$tU6PpWMA1Pe_?2.=P7Y,bO83VBp.WX!rTuU=Ga#0P5jGAB-%hpX%XpX"c<&F6_W`UUG4I7/D&nW!Od)MQn-oDn]5I:FrN#W:$*nh)X5-fWX?V?KdXg'dDa-,326+u-aeO`>k_&uU"0Q4sQ--X^^drd4.%3?E:'0jP#0(`GlCH\1KS&"taL#ua>#JdLaINY8Na-Irsi.(KH,_GgVqQ(pYils$aKcjc+dn.nU0g?9\+2m[QBQIJKT4Q+brFQHd?%Q6reDg:T$.jjc25iEqh@7-Pd-IQtfh-iA.FLQ:-((!iARYq(8Y@=qTc?,D/h\>m%D9)>0u:0&?*_?m$JH\CiRERtI\N8eghSeT.V%_He=BdmH#@]GB9?Tsu<Ghq#MYeWqMlmL.<)m$@nq]WJbW<S:/bO?c.P7T7>*Ae+H![[FJV*&X&SpTD#b&L4>kSTZr$^[)i=+u:Du%nf!W8WG4j3@$!GHa-"(UhNp7fn9qIOoLibdk/D<]JFd#McEP?`ad!HC=0GP5*p2$>Y`O*ob7iDeN>3':<9m;/SVZj4;pI4F;CQ7A%4DC$I7@k7F\KLWh4PLMV%d\H&-DtWA8!2gd*dYru(=lQ-6H)*Q*&@&j3[NeMO.>f@X`\f.h!b'jU0CAbGlAjV*F*"%E<T,]jLg$V%f7<s`!TXdl)gU,BF!E;aDHaQYc.i`N^:.XRNGAhu)c&*JAE1buTPOhCSWf%;5nhbnM]8\M4(1c])ko*,D.'k,OW=^_A_B@W`?\Xf%l6&`E\:gs,\[&A<1`+3<%'J#n)-_^B3g:DGV'K,uZ5/,/ZC'Yb9bqE4c=MjOYuOgm>Y)r1VJ*@k&K6uT<C\VN39AcY:2OR^5&Tip%nl\\T1@HMAbb#)kYT]<JgTEOha;8]Q0Nq.rM4F?/9A]D1Gs3J-Y/@BKA;p*NaPD9T@*.t=GN'd:dpieNqXn.j`;A8SkRM7'"Vs?<%Yh*X2DY`%Qa4tipc]W7-Ys.iqSMR]@:UFMW?V?9n<reR@AoVJ5n'3Z(Vrc67V6IlM3IBT62lU5A/]6._HF*hY/.6u1?F4S;gci5Y%nPS"*S;TOsh+o;&ca];WF\Hf->*53X?MP'kl^t(imCO,a&,koKo#pX$_Ga.id=DqGWt?LJ>4VQYQ>[[dVa[lpBIjOP"#8d_g(#s=%>A5_4foQ(;b_5\deE;t)qf66`gI'NeP05l+7NPi`r?-GNm5#0]*!7&&7gh:%(Le:4V%fn%+Osc'l!-R:]pK%.ZG,e(;0q!"q/Z;$%523>3^=S?/V<>lWX<%C?n0#Nio=H3a7_X6]5LRV81\'B\H1F9Is)*[iYcX'E"1:\_.VB1BK-`='SnSRq95gXq'll[netAX*hX3a9%jEdj$'kdZY(lAiB6:Z?%7'sE@#aN9=-34%gDsbRHr;:>B<u!.hB\Pa^G3'C:@H2>Zb:?](\:,iieXa,FDC/]/^".9\gF^>f]KUcU%41u&l*t-%]6N@t-!1CoE[hGgSI=a221f3cQEIp^7"ERg@M^la!NU/I'EG(R*lIOWe[J&Pt!GMH$0!ftn+E)]OQt?=SV""uAPo;#)%$n4VL!@g,N*."2i>O;Qsjfo]t"HUr-qOn&)@`GTs`T9Yq]SA@Sg6Jl1>%H;VNN\Jg<pVT'cN?r;fis,/?,I;JA+B.YK@A^M$g[9O%8=fI@4)ak%omqmU?_1)[f4t*BPLu&)<]rm=V5IG4<MXdHH26s)1aKr`j,bW-:Sd'!5Elr#@/i7239u"PQ7r2FPC0t.?M2K_bg)5g%q=#_S,dITnr>7&d:[q=&s3UItT%%Pr[Sru;OYd//A[WFiSCKdMf";!*.kRcgELP#-g]MKh+cl)`.ZWRE^OOa]Go&QJgYso!bkmnP%jd+!G4QFTK.>G`RJ!;kN&qe"]7/l6lD$C.;]tC9IWP<UM0L[21"*_J\<aQAg@e"`F5@;2N0SOt(f,t^a,3rmaBSGq."gQ7+nLU&Q%!(A%Z'd5LeKS\GJd=Ut<.kAcg>J&)c\b#&e's2qbe%Q5UV=)75^or&$:r:ps%U&]cHPFF01F@T[i$4J;^#(HSqEXaFS+:EJCKXuX%^&R(nS^*OFQi&tNlA+E9%fK5-M9IB!I!HD%(%9R>OC7/=6tXO#?h+W.@[TR+VlnlM*.+@J<9@Lfe<&!kg1c?R;P+3NlkB'ZMX+mK%RNlZ#%Z'ei]@>MXp-!sEL:dubd1T>,O-1#`gr?ZT(tg$#gAocBa,cfEn4Yog9Qr!?Uu)dA+8grfo>iI)=sO3+)#'IFmArL!&j,[0%inYQCTpJ=2i43QZiua:[S_%KE6]pRtb;eQjo0@&IT6r.>,WRR.D#p[7H!p$Rb:)$+WRdC`VQHVi*pAB'OX'fVa%\lL$MRR<g&;,I%BC\SO$Yd\9$2=QD?62XXaEfA]l`_1ILC>-B7dP\-^Dh>]!o0i)3TNM3hQH;g7*[aEn=ZJGV"uG\.3Jd\5I0nG%"uYecppZMDJTmF%0qLPUOP+\*c%S)Ied0*4KR;YE5$Y@XJ#YKY>k4[c5JBc#20!.dDLDAB"WY%p)OX1%l)BB6d'-ucPcAP]#83A\pX1Jg\]iC^j'qVZ%KG5M8b<#2[KU8TJ`G9#TiEcB&reb)NXZ4GXXZ5^U\d6iNLD6`#@9`?9rK0P[\X""2/4f^h&%V:T+',.$<1Gl'G+@sCf6>WEgkOmL%Ef]2qs+m!Uf,Rir_D_d<^p/^79O^\AU_09a?61uVo?fNnbDL<#T`Bn&(Zp_[K>`BF.(Mc[76eMeJ<GJtA/!=Sa_P#Z7'hr&RQbO%%+%L,oMe9LMGiCDEEt9O8^)ot*3cME:S.I&m@+Gk75niKnpPN=?i"gbp+5WiS4M&UF4,6jAg*\i?nLk4?+dO6Fe@$>@^Xr*G'3j87%Md#UNQ.Y)I>JCjm+6n#/OoD,fd"-A'WJ>$jA*e"ccaeA.K@;^]BEi-nll'rN"X=,EiJ@cqpHs4'bCJ[HaO9lH1@'_>n9M#o?UC7`%-R9ek7CQ0m>_nuh";:[S/;Zan8u3h4HNrB[n=l2pQ8gNT9j@>g7p7/$_l^Q_Bgmd:3S81=R,lQKI@5n:T?"P1b9Q&/o&3mD^ak8;%8`\WSKK8/a&+-gZ3mCq@+\d98*@&muVgP72&%RtG[TqC@NhVk&P`Tb#YGDmpa:S0I0ph*jG7>a'2<Uq'0')Hs9H+Wuk;489<f8j<%f#qL[G%<,[BZ^.#.*l[3REF(Xh!+FOgjM/UF$8$3f0br8`fD30a+LLES:^K_["&_27G)dZ(uiJ,83Ar=/?"qs*bdUA\s5bD%;B7;%Fi!6t4_<fcOu%HghIJi+[o0uR$ZBBi8C$8+QZ1,O`KEi'E2dJ,Kf2G32_l=mL\sObGl,0:R)C[8@WX^s!M%4u$2Ne!I6D"GocumM%^rE.Ao&3jTc%$i*M1gpD2h<'=!"<%8Stao0.7P<[DTNQD#9%jE&*;1c'.8>c+5_DpTO,N1q7#^&:D-(HCS^XGLNi85/N:'"SW2W'%M>THIZg)bQL5&Q-BLoUJG&M;*f4P`"oA<393TcWA6,SE`mAU6$Mp&<q!po)AKNC==Wup3;IsL0n?rmgg7M0(cC8u&-P51B'@0Jtl%Obj%aes:[08(n;8RVQV7`L:L36c0A0#N"md#uf_[`G+?I5o0Fq/pc7(hUqN2F$;MZd/mJl)gMXhAc/()p%eEo2;HM(rY1D^rVLYQ%\$k=dT-TqVf+cl8%%1n6aSVPgnUAP"Gi,7YmtXa1q]8U_5D0j1f;RF#*aa6N,;&A>R)AfEir4BdJpoqSahAil-Jo>(FROtuX7sNZ%c26J`ir-*.Im<:.h[^[8pVS'7rNMfA5:gX.%u\'o_qO8O0Y+q?B"7TQ!<9bDEUSZhrkA9?GCVn8Zcue_ZYD(*Rg56GS+0V98P7$o%d%o]dR7!.u1!Z1IA@+J%*Xs>;cm"0%A^`/Jk&(u_ni-m"L*R`TM.gtL\F:ZRP8*9@`2kXI1+.eE17>Y?;cC%PqI;8:9OtL>\O7a`%`&sPF>Dr;_8S_eN-mr_,"'J8.<j:R@`_9C=7hqn[SL6DW39?.k$E"glCj5CA\V[g=LV,^-%h0j;U=)Mg*-YV]k&Y^E_XP\lU2?&]%XJ;[65bTK>U;U1L$+OY*cZ!+`etbG`3@@E"?<`tVXg0^SdOs;T$k<eB9rW>,MmcX2<84UB9q=`<IGH*l(e'-UPfhuSFUBk&T;8\3%/X6rT.M&m(>%l3CL6usHXAI,8Q.RLZ381M[AJ:7>IScoOGQoKmWKd`kjhpZ_1S*/>`la^4]h.(5k(k7#'m"Io)FbP%AabsH0M%!J%(eWksC67_OC[fFba"6'iRC:\)Yt\mN9"W?8b"=1\62P,fOe`1";^A'a9AWl7`%#b_.mUNbafm?o'o`thK&('")Ap`Tn;GU0JEe2$%SgO_Kj`/UXRm:hNqP:KBdE)98..R74hYUJLTX@sSIZ4H*GEJshR.988P#eZf8+h=.5^U\,+G8toaWgG/8fk7lA#Pu'Bh1a=k;_AZ%YX_\I-]r!OGZ%sSCYFIaIVI6kG!WYfc+)q'e6_,*[dQdO&/Y`BOKu6U87Y3]3tDPJKX[22(AGCtEs7f3e_k=TpP@hEgdLa<+JP5d%kN]sHd\poc)Cj?!V&I=bO-0!fQW;2Oq`['o4c6++%AZ\4:1UeWGbd9*?=jiSaiBLg/u7Te.E]fEWs2E<JuHNmERE0SmAI&UdYLr.%jW[jh.%83b<`'5>W:gcjS`aauY<'O2Tj5cEOH*-okm3m[B*ge\4!6V;d6(R93eJ^k7uLF87FTO9q:)osS\\W9Z^jk3%"[X;]F<GV%r)#5S+Ub?R?mIt1OKQsXi^P"-fb:H7>N&ZDRU!QQ&>f.%>XsF8_V4ph;*"dI4E_a]*d5_H+B,@*4Y9sWB[J9,\o9XLPHs1"G%!/;%Z^>rC,K$FS,oBCtS%$_U.^n!`FJ9&ck?R,Np6tsA$ZDLs&t9kDD<MFDM.k:RFVo7F]_\e-Fs[p5qD2heJ)7Y:JZD#-Zl&;UT+.`A%SU,c4Xn-2$_l>ru>:^dJjXFCRR;Jaq/V67Qc<6HXZ_c0)e!)dA/\DsKjig4&YX3?O,9V6\p;[ehl"JF@3!7u0Sb^?^/8q;p5qgNS%2)?EMBJ(t\8].j.BUM6\:dEEG:3(E3:HWo5$T`9jU0X;-;?4CZE=s=mP`md%:`?oY.b3=/M`V)E>`PPt9o8'IkDIPdF%XP"G4C_F%XScUH/)#W)da@'YW&X#j7a"(>m;8#3>*J/]^j+^f6@k`F3985]4N2!J)nLC=Q5KS)o#F=FgJUKeb>7bm<%W<!\t!%8NrC>`D+fBA%aCQXj9NmXeE_`otR8ANL)e,a;%eRu>D$^7jN)X')[kkY_,10FXJ69e2+]XC9Ppf,t;9E'q]ga8%7AsM25?R+Ad(ois9KHJ,/tHnM%[gDdt4.W(=`>XT(DR$Y]/X].u\nKg^/7ksPSrnqs6bRG+,$MiY2r/&0'R1m4RjtL#SY`N8XAh5d7uJ2AMf[DRL]!0U3<]pr75'kU%"2#W`RMMqE?J(6El#oPf(jag$m(R^dFu@_](O)_E(sSh,dM=*:U%/uMO\`_DErrhL3OafMGP9eo;5LV^Np2?MkJ_E?2]kr]J3p#K%_HSpcpZi%&7#@nE$qd!;NJ\Guop6#OaC4B;+\`(dY:,_#'qGBZD6u6YF$;4';D0adop=eA9j/.1g=U*QkpA>R@><@8S"CaDjGS*5%oguc=rI)^YZ+Bp`"I>A[HK8RW.MZ[L<Ib6,CoJjiI4fBrpct:aZ4E_&>h0ljr'@mEA<AGc)X:6/JGF4gD!DUo(hYi*(sQ8S>$#D0%%,n$a<?60P8l?j:cliW9Tri<lWLRbJj\gJYdu#!<M7CYV8tgK0*b&+'h<a:AdEQY^gLA!J=$RTf]/\9N2YA;QY^$AXr5aJ9*l(`X%8@u:4*GNOu]UH<hH%nS^nL#*motcc^$NNo%Z_P=_]f(<[%0g\cd@$Hkb)Ed2^!4#0o)2P6F1i.aY-^mCm!,FQ>YD-MAkY?6MUHP*%=1fNEN0H+4f+E2il[u'\ju1-ODp<7oJ\]Zjj/hg0U0[]6;B1')=h\;i&,qi4=Or+;)N&s#Fqq#[GV$;ICg,h5La*`NQUb%ocLG!<%C%qIabMpRV?6ei7lU,-t6[_`V*"U5jW:+KZcf<u&8!ASY/+)Z?kFu)^mW)3,Uf4@kjau*UfNmK*)1/O1%pSC/d^W%^1uBOZ.g%XS%/RbonE\<d#AJKIhQW<@FAts2T=>F&H)i[M'k@(1165qLRc;'JP$0VF[MIWN+bWAlmb%k&#$#!*bhJ8_cPQkTM,;+h:qA+E+%9b26%Pcl!kpgYZVBdGAK7B&sJk]CaJ2sDn.#BjiRW$MY'ma<X/8`Pq1g)0O60>&D)K4iAC^]CCoXI51olE2_0DWDhKi@F=AQ/u?`Ni^O>%*CqTOEu.E=gAk;F:L:0Cgado32VIVJAl00N9YFgU(cS42n%a%=C[V?-DK+tP0DMh=$lh0XGBDlI+Cg;;iN]RqD%'gX/N5d;>YVc:%\7)C3WAH"LXJrd3!&mq=8/$9b.Vcf/7JV&mhEp2TAOks[ekXc';*_.I,GVV!X8tP15PR].G!;FS6GkZj74j4rM;tIeY*m/Vd1Tf]%j.5b>q,AZhJrJj<:9%Sj'-i_8C^dL@l_nEk.+6h(:p=7g@*Rk(PnaMM)Hr^UT9:ISTopfD=XtYS25juGKFM7b,DCm<%$Jb+q0+&h%B1@ge13b@cBW]*<82>GBV8\7kZFBTl`hVcd?r(Y&7Sua56kq'cC`GPQ#:^\(RF+DgPVIrSA`2PMDSJ1)oRJ+(`sSRbnlW8Q\KGFR%E?10I`\*;rRfZm8BURX%((hH"'40lU<TIi@8OAk:$s$4V8!$LG(d]iUnfag8-5@2p6[rg?,-_Hr.4n8X*#T[0q+/H%j7.Hc)gJKN%#-ZQ\Pm63)[ram]:gMJDe0aC)C-(u`2)0E_[RANC`JV-.(.4iX!/<sc'O!pr<)$J/!i[B1'qHbKM9+`meH5$5ZTr!H>V'H]>%^Y]%-AJE!Uk+3=L*WrZ3/p9!\Tg`=c@Nf&a"5EVR20)t#jG?\4;4Qa4F&:CE:jsX*BYD,n,[CcY6nqj.ft$kZ=SgAda>6A77URL$q]"b%\JS<ImYmJDNCdV+WR.S@EDl<Vs'd#qM+V:u!2*WZ:N<.$`NVURUtF7CTJVUh_@"PCrn;"q-<0l,#FB&po9fp'eK<qA8WH4ijbgO3%6Ob=ajUaR7^aKWoN3K$<BE]5G<"RJG@.K1aW'^-3,iSe_bM<p7lm^Y^*!S)q:U3>&8NKfi\:C6!X9UOTkoQ.^^N7d?raD4nM%0u5%<YBdd=joUB#':tYEhOe4.9S6i\G+b$"n1c7+;T_pVI!T*5qcf'r`[:[9L;XbBXnS]1W=B&9btq28Xo!I6:/Fb:)L.ac0]QI`^f)N%>28VIfr.Wt8u#mPp)(*S80$9I#-V$-9F=Yu*+$Q+W>`0(q5?2aXOB\:>VDkaQ]9Y>ep8<LloG<_>rtKO(Ks_*+'1YRjM]2[0\8_*%ZGADjhmE]i]L7NRNiO'cVXGHbFJO=[p?%",19SuA1+ZhB_T8'*m=AW:S!S6t7eld\)qs[.,,E>>F.>`=W!)RXA;78m,3&ZY:BT?m%:-%E3#1I@:Bn9/K;JtGk'2q7-3&3EL9X2%l/7Id_@l@?T>jY[qlmS1<jnl`&CcI(MGe;#c+q*8a"SO"iBE3[T4?IhVGfdk/GN,^_%aENRf`@>osC=?^]=MA-c'^SqqfR(@3d%T\8#?[9Qj@Qi3K"6<=r23'jSI*GL#uFrt%CJl3b*T`+Pou'-Mac:HQG@a&9I(]%(7_>;%q2hd'@ipi`KO)c'#tR=W2o`L*3nYHSAjR"SNqqLqo%Lugfegk\Gpb-NmB0=-CXBe8b$k(2k#UUi5dOg<Kt%PZ`+lXf-I-s/&c%du%d?=n8L5YN:;d5%>g2'sa"^,Uk@ccbf0#%u4WW1EcQWag84P*Mqoj&6J5`p*S1p-Qn_/*2c`h[230&r8X$a*:YEC:l)&\W3ff:jQ^%V-*o6XlV,Wo@+VGVD_q,PHV%n])Q6-N<*[/:B8#mfecIBs*RdJ)piXWXT@#SbCZ_\&Ml-Qo3=<1qn]_NYg;;;ES>GM@8JS%0?6m>%r?drGn!;!]G#p6m9fdC11glMDS9Gf0AN8Ikcp@$SA9Y2!AZ"=MpV6(n0(c8/hr(eAXE)JB.g<5;@4muXBRk+din7@Zi\$:"M5t=(%+'SdK:lJfnQV-.qQ0?t`AKmijhW)$*H=!D<LUaa"*<\#$$jfI=(.lQ7#JXTMGiWiT`iU.D24]N9p:<N\a5afBc(EZKH-ac*o/tqh%Orm-9BPqL>?Ad]+jUc(pdhqe5"jLU%<4A4ehK0_F_g"T!*&5KTMhKbG\BK?2KT@sWQ1A29_Grc8b@G,A.\F1]bk,Sp`Z&'8Gj$fS%/J7%>(9!,)&uZ#R$P;I\Gn=OpLG9->THM[CVEK\5:4sjlZ:;p<0\]#")d1H(%4u]P(MO`lT,G,IFQ8Hu?Xc`>1`W&,%3BBT:>fs:%Iq$IA[n@^FE;(4sc;OHhKoAKU5Nk:B=UHl-)T`a2f(&;bF#NY;99/XMJ60M0=L@OAIEN\\NE+C^n.t,k@UH??C$C?F^`RM'QV>bl%iS'm?i./+E[7<u,p,An>Iu>@%n!.KE7QQlq-V2ck-S3JSbaK<#n7AphD3h<2Ai+SF><[%:1`*_bcHH"tY)PMgp1cjId0FLAb58+4%;MUC]I9LB!r>5NW[U@m2N(l]`k)<G18@kR?J_ClbMW,>nXgm"mBoFbHg/g#mnkEA=9/<r&QDt^Qin6kJ2;Q^;>TI23*CuRh\^qT!%Yq,HS66+TN/8a/4BP+!r)CW9N%^g(gq>QjrH/Yc?[.!"8@lRo>6.0/dHrRR804O"s8uL@/*$cmuDqJPHma.I]I7Y,G_hlXIA,Mof%G5"/?mokkl.2'I@hW?V96;QaPE?:1@*+O6#QOt$<D*dNtekKQE&:<T[QYAAP`h[2sLi@&G(leTnYg/=\60n@JoJH""cUZj1[Bh0P%T,M8<@&sI(RI/S2HcUl-^TDCj6O_3mmk!4mSR(NiA2.V;iJA?I0!&ahN8NU%5pW'DZ'cpc;E0J(A:i@eD9$Oc+D/obDfXSEgTfF8%Gs$-=@+0mD^3S:9,W==#E0g92nn3r[>Ju]+euWJtf^MW&qK.\\Oe(!,dB?:APJ/cV/n9K$=gPm`A&:N7O,+gE=l)paB=qFBp@iAd%'s'l?G;I,a1(VG`Ump4^fCt8MDu!e#X;?9Uih2GZ:^4T(H`#E"k/s9`MK2,,,Y)(KAK*<>nsH\J1PbNohUZ:!rE;_`$g6*[+GaAC%[q*Rd4/E294sF#>G,%-R$QH6XDf9S9E<DY*lo=oW?BY$jk?d!^:stJ/kEjPT`n\6P*6s1Z=iWOl\B!9S3EAX.RRRceKbNucNt!d'%ddg7=l]sR1pfQ_-m/pBdp9IKPE=Odr8[,bI?Qq6IMC!l!3M(jRUE1KW1,$n)E1=#cB!S,;7tDkTa3otld^=<.]Q6J''4c/PG#^X-%CYf2I_Nppe*?1E)[et"1FEE^ha*IT?oo#FQ=FS`1d3\.RR`FjAT`]"oD+#(XVjl>P2g<2pg"7,6ShdqJ5.teD]gHU](\mAN_F=m/%>o1aT[Fa4#nKWOG4rVs,VnLuhp!AmK?2O#ZGsR3Fqd[]OS7Y\9fC>E+s))>(],ZKD[/,2ADLAS/TEoBooiX::k*GIWg;o7K%D9N&%j5kG.$X0r'Q/,oVYSmf(ODqX?bZnc4dnGmk\STp,)=Ck-.\5)k1]ku\)7D*mdZ1r3%3$_=*t0sm6Y.LFLrj[NEj-QRLPO)DbdXrQ%49."e^uBWYaM]mgOg'Ln6'8Nq[._F2fgIf5e2h`A#Y0l3mF"71\1rb'.lWbLN^dHpT,BXJ&Vc^l&8Fs\#'8bSZ_9951rk,2eC#])%LDtn<m,e0@/aL7H/mJDP)_srXX<Ok8c"q!_j7OiK/MXO,o4A<`B%o1MNn(#Ih]"L=3=#EIFT.$.%50UNk:4>FYoW5P#!0e0Grr69%2!hIjTOGob3L3@+2@\%Y`faiU?):u`7J_.dIf=B!@<S&5OH=.RmQS<b9[1@<,-h(4cKShds%<uD%.QQP6>:3tkMFU,:@;d%Vq07U%S.gUBq,\SNKN!!"8Dm;_`[@U&J.gQ;5G%'@G"QQ!U,?h[q-)'ZqXK;sJhUqKH,-B3J="G<_P[)g;gP#UYC"^?fsl=ukb&:qQCbAO%AL=<tZZJ@rK]1""Y/t>e[q$Ne1qeVuWpr?GmfJu'3Qq2%_sYZ*7V94\Sn$7<m#(f1k=pV@nD!oU\JC*@MiMYTO.,3hNE`0#bNGs<%8i.Y.#JX-DXI,tO*&IAsaSRoLTNLX7$RIN)*XtorSK0!2GX$.2]:sA7<nBk(C8S@>.W^*Q@NXP^=2r)Mcp,-3`#.BpparSp%S-J0%qmI6nIsl#-+GXn[</[.T!GmB8nA@Je,nP^V,!BR6jk\?&j!rd&gZ&9i&Q+ACTJV!lf8h)M)3RC5&VRpacuF4iKO0!g$<B!lDt36/%,O&9V19*(lq%4SFj#$53Z=k6@4B(g!ADZdIEHbN!BI+7hBG6[A7a'=.5SL6/\>Mh79p3#_e<*YeddEucX2e7%2PpY^Q&^T@9:G0[%=GN0PNg3J^U2afi]UX,?MWkHr,eFdXK,BSM6uu]2;Ar6%]WdW"!ILglYe*G2[*l%#b5tZI%98R-Q1O+N'n+"V:`S\[omg!OQ_>Ao%1bE,\H"+fnJNW-->%^'(THh[HA_RWG#\'4o5Qm5;/L5']S2`7R$E2M:VhdpQdO%WUC]U04F\OuM5gM.tZ!7cl;[rsAE_l=%iir/&%^31X#>63EMMP1dA%4%q'T3-:hr1#TT7n]K<Gc@jq6*#emZsLjZ1oaTXAH>gTQD,d;4l]@^Z"o@`NR008;I_fu5MsJ*5P']9RmoD0%*;3eTV,<CbV8,t2'N7SrJ&pAA>)iC>giS(l)Ao^n61u4A.I^[(-P[:5obUrgWTkmYQ7QV?P53N=20S'#_%'HXcX(:<I5RSUCtZ[i%#:C,3O>/K1PLb1-(Il[@TWYdfUZIG0(s*83Q'-'(FGr_m-[F-!g=sV7`k\poM_m2cV`4p_=H+)9YA(d=fk>AI5:N6T;@O$a`_RpB%]Hhi%lZPF'*,aA<aSgQ9nbl;@qc_/H0*ro?9=",96iAWRUaK?N5-+F9!flH\GoYu>>6gNP>!P"X9*ptr=?jOiGS`E(5m$l%USHKu%ongsi(a4>WLe5``H.I.-9^52u;!b/2diKCV/1mJ`IMY&.-ciAD,V!Xj2aom54WcQ,=biVFGZKj,q;2@E,e=RE8SP#<nKr"6OfkWS%T$h-#s)+c,S[fB^aOp2E.r#^Ol!4QdSS^p(_.):`<n8i[LrtrM<)0fpNg?V5*H)p[CDFWU;Fu`m&qa0u@h#.s,nUs)g?u!O60oKR%&4P%Xd/bUdV]]rAF:+`f8c:u>:-hDoBk:ZfFj(DR*Iu4&4it0p@`9gU?%OIrdNpqXG)9[>NrX?dZnT=[6na->FYmh_]TMn4*J3KH%?&'P#Or=7VSg4e4oH\42$[S!2%+19g`'@,`BR0+"nKn<8=%+;ZFeT0/S6!+j[p@@E4BM!'Stsp>H;Zu'.XI8(28F7^X%BpK2;j\J%Wr\ig?4Et][8>9#X+;ju?6.Zeb"IT6)Sf-H;P"5p;kpGbBj`6d:Fcl<%F0!.+=O3r-A7O?!$ILe)V#PQ^edpq#):QCN$mCXB;`OA%o).JjE]&B@,d[r6Oq]%GX/k%2684YB<JksB'nRijWt7Zj>_Ru*dbI/&\VMl6)?@KB\LH"]/gs=aaZu*cMA/Nu+_$UZ91MWn&RP;A%EKm9H$)AiH-'2"pTrPsi?qE63OHf24!am.>\tG9uL]Wf=B>3ESqZmV+N!Tn<_\drU3g5_-5"\k\'Pe8.;\$(TJR2M:J/p(Ol!?4m%G*4bOO<@_HXuA>::+])dH8m2slnq%b3C<E3#,fuDfR$s=3$mg=7D&7Xi[IJ!,G((j5Ct7SK*tEM+!^:'s+k48EC2),Jq-HcMEmG/%7g`c+,C#CD^Q+V>.D0J<67Rh1&5u/"@idp+UU%iH:aP@W9NC;&+Mi(Z;^HsUoHL"0BnI+:]:g^B[EcI8i:\FrP1h`iPrbZeW`!KZ%*A\D]eO34H585$$'Ahu.Wmho4bLs"6>#l4R2%s"o@(P;HFeXsE,*Q)-93e=="RS,H'3@aW9$P<D[(pk&<U(Kc][G`B8p-JiYM=Yn%F:\F9NXc,dh$*m&/*S/VA0hs*0M3frd4U?0"@?#D#.0Q%"JD#t99CV$Ug.X97$)dgfH[XNiK7Y/,)h[AYgDSR_Fqq43p;eS$=tK]%;+F:KUQ0JVq->I`n6?QY1_D]-74jfYl;J2$hT^']\<8fc_m/2t7CtUFTdtsQ&R@tUM,6eo:!p*qN;O'#ie1AGa!&+Dc'b.2+AJj\%P`kAA3uUd$GU;%O!FA@"%X9;M'C\U7/`DsUhLnGJ.KH<@U*qU;L;M]Jn4L!h+M<ju-fC72Rc3N8!j<l@;7*B:!+/=1KD8'u*<]:R%$OQ2E(86hcE=&ipY!@N6RsR8`:paGTa(6tN!)$K;Xogi:pJf$"YajtYQIP73Vo9ZN:3*PFb72laHCUI[H:>sY79k64j3MSrnf"L"%k;9qiKhKG]fn@^thP,Ds.LV.ZhFQh=F1QcA3]*GUn)Nn(@#.?OO2o`>K/E+hSR4:/jc\U#2GI&Ef>EBdCchJS7!7W9?0ukFq32]?%kYJuI7qWr?]UnfYpK*u\Q6@ni>@;M74L&I!!!f8.e(icr*pkRL\58;CHLOtd,nb1RL#68phc.8S;R=cJII"%;RjI!i\0#ImF,]DP%=.an!Z=Z1eAI_HO?Du)KV.plQBN5/_-pjY?_Fb28%<+ZLKJX:.XJ/gMSNHd+:&SNKpJa!tob+T0I;'bNWYNW*ND5V4;nVRJdec"o%=+&fk^97(-4t`Y__hZBN(Cq-n%*V/GX6Q*NEGj/T-TSuFAh\SG=EK8@T<Ltcrfir$7_>>(5'/fso]ch^l>u[(k6o#s1DYL)p\`^)%Cb9b?CjhMsqo5P3\OPS#;^TDKP8ND'Y?@;`<C@4<[-V-?CUUrXO?V+76(2HQm60cgA8/QN23i+Y`;.qakcK78gtH*5_0:321eC6A%LC]YqnI+$>1)ENQC!DhtFf':LVKOt[[ECDN*Gsc[lDl]m\T&<r>4P,AGQ/PSI+"FspainJ0527o.I^V44'LeV+u^(33a-j)E5DWa%)&^$P1@XNeXf$#nq%LD6/,0t2+IZ.?0`^?kNX#M`?KeS8^q1@7HTN/-,;5D2;MXI*=UOkT+tJI?C=ZN6/Kcq+/Tk3@d5TU0/OV_^%X#oR_7=%+EW6BKB;4*8Pr]`jnk[^*@2@"VU)WlPrmhOO3i*=#uhq8K/?J0P2K1e9FF#lX`QZd25f@C\/E#tPeUa<T=a.%FhG9M^.%ZCZ+6G.%6M`@atsIKhWsd&p[,Y@``oG2[;LiDOiQAf#po/5$(qQ;@%T9nD6$D<Nle#7dk?Wu7M9[8mOnSI(J$.S@>dUpQf`.h-np%H-qtc$M6=nKsZ#-P]Wq1%P[uqTbC^KGOJ2oF6sHahW'pi:o)^\LPir/bS2$FS4/UTjEJr1/aSKeGaRhjINKT72qaOV"oqXch(pa+%1]('?8LR3i"4X._%s1DY6YM!n-0l1>>t\6S?'dQcfp1q"fjS__d0b]VU0Y?nr?Yel-WI%@B`_")5%C8mHhkWnHo%:[W^C>,';Tc<%i^VIfgHm&h?s8g;UoQ[<LJT@t'Wf04H(ahWk8'D0%BIJ:,Xg@Lh_m0iQDI%%BQ:<,TO0CO[D^9Cg,b8!d##)<M^O^Q8'7,*^pKp_%L[T6B)JRA?2p9(RDL]jQ_'TIhok.WmKneEo[7c-jIj<WF%W,)#L<VgYQF!42r2tq)N_#Vf?,H$=k:Kg=;k;_HRs[qHc_7u&fgVOd%BB,*VrLT*!c5MH@j.6K/P<VZ%7WE\cbqOD?lA!]H#`P@5%%P`"G0]^%N#*_/4h>HTKTj7Cj`8s<II&0+2!d?/Yg(pob!Ii;Po[Tq%[Hs7$/3X[Rf^XL3a:16*<piQa08-1rZ%lE5L#pr6>,&?qboJm9Jo=E=+*/P\6/CK.9'E@q8I8U3Xc8h`^_Y%$S?PGB,ntq2\&`Y;%1f30I=]N!a+E!;L*"E/1+tE`*-NGbSOauQri$']'%m:*+B_#BWOU_EM,&bJS_F`Z0F2^gD-?,)m"`+7u,'0^T$6g9(8s#Z$$Z_AX%LFNqIaK$489dt!6\2n#?j<E:K&\6!3Q!t@PEfmj_Oc0-uD3&o&'"Q(/pOc\$/s;bATo7-&8.blEOa0I:#magINl$*H3D]?2@M`0g%[sa2*Eof(s<Epm,)_9::J6lchYciKm61cA-f[7PRJR7E*7BmgVHBIP:M-a^>5[mK_(JWj"!%q12!F4.%+tq@Ob&\Do(V+1ScN1^M%>8l]o/ju3U!kl\//a!_?(R^icP_eNlY$;Bl6n_H19DB\e)fhnX?Xt/cT)l[I9Fg:e?Xt_tY60692&EQbJ6ui6HOorYIZ\n'\dn4f%j>;Ma75dc3$%ZGo,9a.TpdI*V!B(5a7b5IubWZscA*h%'#Z)a]IDQOAVM>U)8<$8=,9*K]H[qbYAcO4[:a;/LO+R^QA4iBX*d@X*%g9E?bZ*7!=*19uDCqq%D4HV.!VMppE0C'O5?[E8N/]&;*F(AcIb[Q5cZA(V"$=Jm15g&[_iZ.c%(40BG*)-]4$dOlVV8PC"Srt-\%S0Lfg6t(pnA:k3maZ7:#HsXMjcB4/XZ()r^O`b2AYR&O:%1G8n'Ba$1b(8Ijfk?eO&&^Js4Jj-$/W"OZ@g_d`J9*OjGsZJ1b[3/u%#V\c?q\a%VZi=9ueH;0`)b4rM&"Fk["(*PncB7ccI[)/?jG*Ej0S,6pj[5[cX!.?nJ;tu75R>`!S]0ZP(4hK^j?YTJ4J*MLd0)M9%d6:EXAt6_0V%.ZZF$5]$J9Eb0b(t7]TH.1%KP63c'E]q<NasIae</./f)qrrR48JX1lYa4'@o\i&;2nrgZIpq\44r_RtF*e1>4bG%G^2P4P"nV[,<H-c3>1#d50J=(!#s$65[YfCbn/OKL5)4Z$#F.)$?1/$fZ;+$3.E6YOfZq9CugJM^EIsIBGh^2ZB;6&J8F;I0P#uZ%(d'M#!80mY:dd4IdW1WtZB<fC]bJg_B"DK?4)?,\*:e1\fLFFbo@=;SNGNLXR=X![dp.,fM/D<HRFoaqh8mpAF'JaYOc>\>\0/AF%bm$]e9lqUe8S'+JhT4;`EK3\:,GSho"7SccV$V'N@q/8<KK$1;%M(o.hT0=%F/\ck!,lCR)F.GU2tF(D9T=]aZL41e*Ip*>m."38%'Agf(N:@_Z7Q/-"-\-+l!Qh5.NBApZ)Og^s*\#ctTI%D$1_tHL!05"bLiDFUoLL,,_N>6H$#sJtAN(dNOc;]C4orTa0/SE:)bQ&6%%uu=r$$,*Bl0qHB*;TPaLlE#.8EM@o*18hY<08S!2EN6V$:'V^CaI/b2'Q@1"NlkNE'QGS<;]iN&EUtLi@u8_jiEYPpI%B+\;SHj%*N_[h10nr4,Ku9d(RR>++Hdukb,iVd`QA/?4dJ?'mb0a0V"?[u1eTbSd*[L\2$#b,J5@LV8(JHdDC<enpVs`-8Y@:a9>X/l'O+$8%`u<q`cB0]HF$_.tOc:c7d?d*g^0Lak;G$f?7MZ6%,GW*H!-Db;65h8&NauB;d#kF9O>7':UKVOHkf=6+Op%:"FUR+Iagrj>N[?`O%i#Gnc^_[#n,QeR>NdM'JfoH+oRZQY]84U'U!76k]4I<ke3jR/tS>Urs+ri?\W'R($gEsa-J2!GiJYOC&9*caKTFo)_pI+7@^bE'R%M"bli0q'ZZ.FnYj0s[?;/m*p=1aT5dJ/Hs'.1\TC@UtY_!Ad$#dKtJ3A324UT(ka_1%W5jn;HY>gj9XJa@:Zh3Uhr##Rh]g0=&Cs%,6I@m-?ts:(JUK^gH#<Z'8>m/k+*[I$Ft`p<]$q3SKq="ad:';"=pd$`HM;4o(MhF,-d"P:]:"7M-*2edK6Ko,NV[a=@Le0Ekil"%OVO4<aM]S!.`0('<\ts+?,2>p*,5k^8.J+F<TL&9HNFj,<frBG\\]Ikd55bm/[:0[U];33OnGk>[NS\6Pm.tR<TO%MLoV2ia;Ti@%`%(>Q#lkHHNjA0r*E:GIj.1BI_@kNRW1:^19-f;"KI-3d?eI>f-'D,mYXGo2b?9G$6kWNJ/<S$UgB!V]LQ5Ki!g^n<:'*_EYXB+k%,qP0qC#BYT-*j0k@']i+j<m?"5-_Z6@n3%*&sgTL[Gm.&YXI3*J0jb$5b(%PQcLMYgh[XjBYo-?\3r7A17`JQ.%VY0!J`#Zdd0Ld%NBq,e4rXNXXG>rk*<Cr^5REGT^`i%63C+<t8:*H!LHK6t7%WP8M\tF_q7)V(!T&pH%e,3HX5%n2DoaJ]Usao8;?I#=BZdkei.fHn%hK&j<8CkP/)j2*>2rk3nM4k'^+Zj'6]\)Xk!NV[lDR(@pGM#ssp9$Y/niM+O,FkMsHMasVRTpMg`D1^\^LBnC,dSiOfl:'D=?5MA%G<IkZn3V6%F!7,2^rENujK[b3GZJ->)`[-N)!m\;Q.l^c1L9ic)eMc?4)AQ:n8!*P,JRI2YLsW7:<@m[A#Us:L8VZF3*$\gZc2h0%NP/fnBSP<Nqq38/d[M6\*T#Khp8lMhBSSUZEK2eDMd8VkM.Vg%`f_H'=j7_@hV+l'jof'@[aDD3$Y$,PG.TZ02K#fOEAsdR,5F-I%qG+c4G5lBe!:tc9c<$Gd43'(QhAcMHeM^I?L<^lNDtA`!p;dlge@N)IQOK@l`2_-5a:[QN_"7U=c5ach^P6\=T$hH&ku1fg+,gsV%@->WDPWCbiiR.?>"j'uRPM_?.YDAMK>`tI(g?H>VBPFiDFd]LWgXBcpK6u7$maMY4deAUlmRD;^[UuhS7E9K?BPU*4AQ3G\_\BUh%jD;7-M(*DHC6*$U)\mDNg$Ap<Xhs.pTNQNh(Vlqg1(;qh53`O6=@4$=an;i#)iBH#i0#B?1=)sbNi6FM"`f"hdLXt!8H!L]PCE%1%d<;Be9s"nSnG&'H/XiS>*gjRb#5!O;59J#^_C;1u/i8;uaQb`u>m1PgdKr7/WhH)&,7YGfB3'Gc,S.$B@l_SUrK.Ul[!)3&(/s^p%p#1W=G:80O'n\WWYp7sM#-ZbSZ$h!uQH:K&L5jnR$k4&qBY^/=3aG8!6V?GDG)t2TN$";g=?r+]XId4N4PKVpf/q7XX$IsAjk%<!%pc;:DN$e<c.BCg-StZ7677b538Am,@Bd"=UCd-$-'ju9c13<9GrQD@^gk/VG6@sI!$.=d3VKBf-^NVu-aZ7VrbAdbb>cg=GY@%9J%))0OS<5HT@ih@IdAeD.t*JKg#9u]h0=['dn?t1`CJ#Yc:Ck]loN:<uDI&K(E@S8"@P=2k6LRg,(B1U!gs79Vb9<fKsZ`iB?!@o;8%;5@ld#iDe1;^]3UPSp]M]ldNL,^\VVPR/35[88P\eA4jPOgn^6cBWZJ<P_;NPoqUG!_dALT.?mPHq[ZVS^QQDRD(Ht3.0Z$6YK^e%W0^uh+?idU$?\O"+L7-p,JBoM&t!.:3q2gI'R;J*)GQL,`DH)enIRMt&)5)<>(B].i['Z!C=I%$"t7o#-N+_K,1F/!G:F2Q:229#%X/;Uk9uY;EUlLkf7>oi9-6U/O>$FM7Yc#,olq%pK[ce-_Qj/LY6'b=4A(4.VEXUpJYY<3J?lAtW5Me/]no9/gR$S'7@uJX(ZLMXj%EmLJnA?OcZ-HgJ5hP[Y/k3@@IlXR(]Bpip<f&)fL"NFWA@87A?qPMb.h\95WF-*q^daSK6o`Fi!M2SjDHD&A[4YXY>jh2a.HXH*[%.DLDh5SLB2`V2NG6MlWcS<(hkP'iD3SYH18hS(YUh#X%Tmr&"+)98<bo%i?,X`_"5M+iNm`\.MY9t;FlG71Gt==&LS/i6?Nrbb42%j3Ss_I;cimR?H]]q`R![I%_SH:@u$Rh/+d$FZPW@^=UdR5]<A:J_lV\Fc/+shS.%15E_uZkO#mVe`3K2`HgdnPpgJ+_pS.[(7OJn%OD^Ut5\mgf)YJ!-<*^5p^5t_T9l.4tQ5FG\)G"^K!<CqT%an>5A/24C^?Q1ge:"KCqk>;H+KIO)8_Ob;J@FeP`-7Ej5V+jn]4fn9%LjCDM$XC*"3<^&1-c"Jjjp<nS65EX.JS8rL'pOHU5h>3,5^9?\-,>uu7Y%t.#$$@7nD0lb&DsVU#fLc\*a'O)^0CC;iSD6FQ1mT'%h8ES)n"pj)]N[nL:ef!"&8b\f$0A%I'PYnCiF8&V96dr7%=9:n];b%Fma_oEMXDhj$ktAbB97$1$tqTiB-=gc56Jl!NC-n4c[\,V%Ih#.0jb5g3#sc+FZs9E*4(i9ec+n<tD\a8)3B>'HJaFd:RF#hdI6bDe2!?BYJaB8Z$tQj%W(mo4c;&rWp-"FVO<>B(?F1*GRhS]+%S"!Z26@dn79h;k,$";Z49o/']DF+IbC$MFl9S>H*klIZYglP's!jHP_.0K%u-WODs$8L>S;j7J^.GjV1ijr-J'@om"93AZ`!aUL7%'5PQgM!B0X(#Y;'e:m07,83o03qFAYSk"/`AP@KW)SHDPf%C]nEDLPRR8AHJ)cEV+&kPf35[4sl.PBg1I[dcHOXM&,3NcEYWY=Gi%?OCM4Z?'PSCUiM,re#W*pKf2&DUn8J\op3q\Q-ZpS==U_6FTNZ(JQt4'9/gJ&Oih^:5Qn!`,k6X&^;-@<,pIY#i6mK:MFLbiiNtD%TNaD\n_?MkVFu%gBNqQgF-EcIN3'2J&Yc<^<<ALYpEB=!2@+#!Y6a@FpGg)%>/Igm-;?V3cDGkTg"A2\]4;4Blo&k#U6To@.olXj%RG'[l/C^K&MUJ/cE5DTY5p"p,Jq0^"K3&f2PM=@_m5F5Cc)icM'N;oe!89]2Bg[JR)a(5Hh<!cL2`N`6!!((d!rtm$!<?5>1&q<s%9uR6OS'".QFZ#8rC[0N%EmnV#PhU'Bn\cN6CJ=dSP>;Lk-5ImI>>7COD3Msk=uf'WQ;^cuoLB6d&e[I3UF"9UE]P+C=+"JcF^flu%iWc=EK[NkC85Us_ZW[Uo<fU.?C=//7\iQ!_\<RR:_G,E6E,@'2Bt'B3g6sp:6F_li&Amhs7*c$eVUZ9]9f@JnK6;b'-9F"+\>d;q%i215j_6'KoJRQTgQNsl)TXBV%6Ghlg=DM:gJm5?$#iMRT#lqGi7^tF.i4"tIOEC.%TXU1n&A1a8Jj=0^S>':X,0ZK4/&BuY#mfC2%F,\-P8A!Jt>a@PThPTrH]^;E,V\5#F`D[#u-76JLrX)4-AhTqfk/"sglo5TB!H;PE>jgbs\R;H'q+%!aeOMMg.9+RP7p('d@U%WS%;S]`gT#LpHKZcj-'s=[+K2Qa&m`I$?_neSY&0Hq9TKX7rdQmYB"TX4:GaF.E*tKGN7%OR\B?j-XK%"372$Yg\r.9k2EU&CEGfO,]%Gj`<@&nf5$FMK%mb`B;B'F4fX],UuNdr;.iE,8.?JdSMZ7tAQ%,X?MY,EP'aGQNCL^e0d2"\([saPp3n'Oo'NPd4=e@'%W`TsPM_%1X-Y),i(oL*P>e]T.8"&Vj:$5/"a+hhafH%O![*uV+Wt"_eZkIHCoo5nTIZB[i@rWTm"USKEEB'c!jh()2<h7:(j<5Blgn>JLEpp%bgLCrB@goC#EQ""/2pp<k&MY";GhTN0aIPHR1+6e!jiOlkU^<.(o.dp,]\K6ZjHLI<B6adHGfN)<an5U+uY1qdLnuXH\#$t'h10_%e+__G#:e.^`If*c\Db7m&QH-'.)Q+Deqb#5r3OBZP<cCC6/qQOGHfk<9-UD(YTA0":-M"?-Mt^P8"#A_5Y<Isi@)*W)Zs;-$%rMl%>XIAAJL"#@JT253Zbf-\#U#k:]-o,?M_\ms9B"P]<!&.L:@PCN@:$P1S2+%O>qC+;mGJ3./)*?XP4Y$6Lp-05F=Y(7RGa29!6<`)%M@7k@iY';N=1/l9#N[J%-TlL<VSrsFH2+7:nj3StGY7>br,a4Kk<=jk"i$Aj^/*;*UYCW/kaP2eL/G\Oe67+*W/:T':]h=IL[pHB%CUO>5l?$L?%U>s=p9fUNd>pbqRr%_k8>BCDWJMdXIdG:+6k^XI<?c.o%K>Z;FH.;]Z3[#rcm1iE$61c:Tar6i"oZVEj$>&HOcDjR%B3j!JJrBQBS.sN5C-#XR)oU/aFfY!UM*8n!M+L>K3nfkLCg!-DZob>ArhKuk"hDJUqu-F&7X-$[9_T:,QP2j`MpFB%&60K$b2Uu_%]YVaJgfUh(1]R_10Aq%_)]=i8EGKYBD,dUmj=Mc.efi15(9mmkMNnC=@caEqU^hnf)^\HK;NiHc`Q:2MOK(?@2ooG^?^Nlf^KK`n%ZsRI4["6_H\()2q*<+XY,nIksEAL1L]!7gjRn2ha-Og'pFP0e4\tDcFCAdA:;aR17+'\L^G`ho_"ji;P59mDd"V2P=.3A1F.F<4i%:)$SE_4&J-Phj_N(4I*\Y%]KX!r.UkJa'\Vb/E&$j\ckj\@UP(Q.qJ2^uX-B`A[([@R=0c8^L.6@0*J3qg9-41_H.gU08aMWs+$0%h-8%J#K34\9?dtF[<[GFAgFQ:2f'\PHM*NG+[gJ[m5YQ*D:ioe,hS6Sh+>a6N2#]Ee)VBuHZ@>7lu_CVW>n"U8HSs*?q5C)\E)3q%-3@^Z5lsKT*$c-K7p'!?`<dUM%'`_3G,3<PlUkPT$LQRAQb:d#I=IXl".#QNU"T/^59iLFllKi/g-;NMkbVhp3qLefORL@r;Zp7d%_W4/q-!gmU>&\^_)MSLYKfa&b(^a4Vdb5]o?Sl7-@K;9`/p+GU,p0O7"8S%h>%j96ZoSOGJB[Vkgtr,RdtXT%)^RPBm#qI1\[4\O%c$,C'+W.C:A:2[qaqF:[d$V-+#;YGQ"6P-LQn-!VLl8h5r]4IBkDbN)!u5lpgs6!8F)F)[$V\bZ^^W]M>c0p'9LR+El^.gn>^>:r%GaMN;hEM&]VHnmL-NG(I4C]`G/5.$g^'b:s;r,=4J:oobiJ]a`9+@tQ_-DdC5SQo4&PQTV"MpT7TEktM\Y/VHJSBu-q._<#0R53A%!),n5l2`S3.cOef/I*Yt?S2McR,F<S=ZgX,Lj_9"/01B:kClKPM0q=)RNq<u7H]$MbF.Q#7(lhZTb6nEOAV#e?n_]REoGP%,$qF*%%3aZ+58=neQAL^4D?Q1,g83VnbZ)L`]<j1.$Thg'/k"emW(T4LMF2V4?.oW5(@D=:>R<5SSBI0';M;R`*2B030"dQ@ONW?nAqb6X%YV76=j[<KV,$`EHas+Wt=?Z1+X#gmLdaBHt@1VRfi^!RRZtoZ'[0^M>7gf^s:`rurm#qka@*>Ah5SMbtg-(uDfTlomRg<lA&1A@9%Q7K0%&_L"*#@'p6T9WNLJ@2c;1p]hrXK`UYFrGm7[T3s-M.q5FL]POb7*ERhDZI.$kKe;OT&j4mRXh`7Gpf1sQ57c%bq[$c(SYs_%bAu]M4@31S&j.!Ea`8gM<rcCKK!Uk)Q?J*@o5bSbdOnhe"27%*>\753-&AD8:PS[q@C_C<49/g#nF6o0=O+\m,(QL91W<$\r5tG3%f7^>d*otT_k`n>+"AUVc.jk<$'=r3:r)=r[efc;h.p$'5,];_d/!RuS1haPG"9`Q&apXG%X]u0k$IDBQR`G8YR$D;o!R`VD.lZ>?%-=UO"&Bb3XX:nUn<Am)`!3OZk1lJhG!ENnN58*Jq=I!_T*6B2\g-QC%<4R$<7A.eG#+Q6D.[?1Mlnpg:V:&BgBfr%fRQ\!oaU?CJ%.5<=>%Y(LJ&=#ioKZXG3`)sKV;+,*?GpNS7O=;2)E=?s2!2d,'<pBZib&&Ni*+13k&eG(p9"EKic2a]JLV.*p!Dpp]8?Y]Xb$+'A%O`DeA%fe$pDW61:\P0pD"X[e4+UCXW:lGCL[(EhfObm2)-OIKl-q_BH%iA"@;9jil,7`fDY^E0AMR<IO3B&Du%*GR=());J!7=&'%Vji3O9*!,6O>)5MBcHD(S0e(Y(HqhkXKdH2P9i2M-g(Ps7?4>J[k1:9cB0WCK)hHI$:P\sPBPb!.BJMM,[_Gi3GDhH?n)^8k7qJC%!@M_mSt-(1P@p:/"l,nrdd0FgRl#eg=MPJadO)/FGrr8XCHYIl8a3$9RTp2*(.aX<;]u]/'55hjHTiAXS4S&U-e8HSR9Y#u*[m4&%;4e.M=X,XU-4T5d(.3bB4Jfq\#_^;u.h#)OQu$9k<T_!;Q$Cf/QX"aMXV"i:#"RT:eCoT.P$I,L=jjH=7m7K8-#;QhY,(ki-=HsV%Z@%_3P-mS"WoSO=B@8L\CO@8#j@ldh,"c#Y2ULds-u"3ZYob3^Uk+auWX7W0=5rc`9lf'pZN?M),<-LE,W?oq&PI.+Loq%48_^<m%#U]WPlloV"5:3tp2W+WgE?o<h,)kS@nZD(EOYk.k"KDQ[j@\&S@S!X)pgV,23n.6!l<H,-1SU^j5XSMdR.-6GK-ko?-.XHd+M]5(%Ve=:)0ODp!#T_UZg$Ut4C4t^mEo]]?)$3<G#E&h)j?D!sJ;r>"qHq)cebXrlOd;[_Mb.AIXrB"T'/FTF<E):*fWlqH!oQi%;[=4#%>k'#aG/YEN5djjQQ5MqHPq52%89#2+7G=4o=W<GH)t=Vu'^<XXd9]'I[._XC9q]Q7p(A`N8I6&5d79p!g/sZ6WrRu=%cSQ3,LUHq%jnm\\LbspV"Eal7jCn@j#ri9FaQ$[/![)OUk9H]Q!"_0Eb;e/iJIlP7!H9e+,41Z7QpV/k\M%c7J4+.CM%OH1`dA"R+X6;G=BZUK%OlmjIkH+ar.>e3LnshSqi.-Rs)1W4-O$HkN2PaH1fT6=[RNaS!a[Ka]d2p\lDFS0Xl7E-ngkg;J?q=L&A4e@k+mWeMY`O#e3_m\N%$H^a&@RBp/D@)!<KS6`0dh!Z6+h>B9*i/0]A,-Hoa;UHQ#MJBfBqRcG"2p=3$S4j+Oi96c"h?3EZiLg#[T,U""DJ>]lS.<`DEDD2%%-0Fj"1/UfOS]Ad,7*@*lqsKB)J!0_$pYrUR2Gr,JNR3[OF=opg^"ld#Y7U)cIN$uUq(Rc!W\>:ba&8.,?$RXrcia"qCTK):KP_F%.^:)iQ4$S756bLB0HY/r'7H%*O4Gsna<KX(:,k!15&L`do>H"2Ll"I.a%H.Mg7pJ6^`KV=AQcfph"`ugTcP^+K1M&95@&W+a+NiN%&a&W9Z#qD9UO36,a($K]-86M.fG.eR$1W8!(uYq`nK9_4&K[4%!0@#7Pmd+&D1S0o%=#pA_3l"r*VYD0N!\o#*s(/:+#/olgJN>8%d#Pj&*BIlSIAag]g!O-%:$2Y`UL0^SNtU$k@Yj4YJ9<[c%S-V&7uK%^;%$bPmB@ZtT8DlI?_aiKF]j5UmR0ShVP?j>J<pG:j(Lup%$*FM,a8NfA,U"0[,Tda4d;^-am)k1KB[]h[5mcbb%p212cuIqsEtcmiX>3Q]#j5lE8k;:A3I5qc6`1'.XMc/h3?BCTed1A>W@j%g%GYC,4'$"u3>7RcgEO;6q>i?=8;'ohj30(m[&<I3e3"C<eJM<,E^c*/;j*2Q"U(G;k)ErlYJiM>'9+4=+e6&OJ`:55u8mjW="(,pm%L83S"8K^bn38-chRgqbERNF+aIbol&mJ]tO&I=C%*\^:c7XMHg7Ol24]%=nl7JOlTO?>dH1`O:\JDOrri/IfOdCM]jdmS,]@45Ci%i/Iu8I#-T\;[/p7.h@W\NAa0p(EmbXfsbuj8)2,5`F<:"DPLKd#?4V,H\Wj=O-!t.r<!"<+`'71H9CoR+mU]_eghB^EIeXS)R]\l%MAdsaf4,+!2e%%=*$g,5NliYUXUKggrXk0n"obGYl9mkB[<ne/!;rd=ZG\q1)^B$H5#P9&*sj1QQf91'#QabePl9$0379H>YXW;%%_24B%J=gDWlB/9gZ3X96U`#[#ioB=/9':YZ67h]I-O\\')i1R73ekd\T<Z[f<18M\JOL1R,ih%"p`-#2H7^<a6r@:bcU8%s5.;S'%D^3nVOgpQ+`eEXp/:M/r)PgI]Gqu)+cL-bSmA/55NNdQ[JbE+W;X>F>`Rpij"n-7:TI"H;7j;*>^d@E[8;(!):1(dFFJT*[Z_bpT%Fd/Gf&o:C*A'.8??E;=<%iZ+:"]s$9<MSG#K_7Upr9YI,IHhGA^$[s)`9k__Uip[>l]0t@rjC$%LjC18k<2E'obl%7pkT"KF3XGJ%)@@lK)*L=e\!e"(:IKbt8L5(\.Ntc@!Fo-Hip6*ACpXuYBS,FsBtBni!XVXp:YVn@8J,G8QWbqu/lQ-(o?ILdDL%A_oOgJ9)uYVk%KZX_q4<rh97s6T>g!b(t-F3qY<AK!TqNAi$'(I*;^c?r_NL6&_"!.eG(fNsqS$5L8?ML5F!Cp*li+'&*I!LCaEOmoup*n.k<*%Yh%B5;CZqsQ';\GnR]"[P@n#Sg"$YZo2/V_J>09E;JN;U@"Om:ELJ5j\cice%_jPj]h=UFeTpdEo-BQ?2,@o:fd"=rC+>!*N!C@J2%K%OsW@l<LbilYH#Fq_9%J4+@hiqUfA>?&m!Y;'taYeVef\L4abqm5]sHD(!ocTD$(QH[$X2j!Tb]rp[N/B23/Nt[^BV>eQnpgpRGRm%027C-Zt`u6a%6(?3_#QpfJ1pF"_"1%5c[f/!-X;Xn4hi$<_Zi3e\nOV%1?%OY`r7(cqJ]-.+68p!-YU/G];17,^#Z^W+,chFATCD%3VhWCfG8a<@RZc_>A*8g#Q+Xa&ES<a#^D:u=.UE53UBq7B+'Tjl\H<eE.CFn,Yp<ZJaqR7N"_s49O,!]4si<pp_;hQVC_OUI4pX<%1iMnb'2^,k8gpO<9515FWKm0c4$RG>ZG8Xt;V/3C/ZSto?]B8?hMBh::?2MN7nL2[04UGcoj\.D;-CDBAQ#h"oiQj6J:`TV.'M'l%Qh"%(0qXLerg'^5]S/u\Tr5gE)Fkd*[,rdX+_Sp[/B':aU5a0$lus^UOHB/=hGKL!o\J2B]?YPlLcrj-#"A?&'SoW+.qt978enDZ%j"f7<*XqRF$C<<lFY^F&E<8mEA6SJW5\Iq^9'ieWP/T[G[#mnS/W,g6<Xl&>"AuQ?+&b_j&;PYU3XuuLWsUs3XcaC#,VIs%N-2'"%;AAuNc#U0U,3E@_EP^9Np9tUDT+1e)&&"[.50i3A9<!2ZjH"`QZJth5mpfg6.YO2nTe^d`\?Z^'3=?m$:stBoX>l%KL)M[$7e?^7%<YhjtWZ?mh-=*49Ahl1W%NFT#!_JULVZF_3MH9^Ujd"`N.,pl+MUM4QE*+Hs%Yobj,m,@=ZrD(o6u*o]WHA2b-<;B-)/W+G0-RGT%7ZnAIAC=b$!d?IU.s]+8CCPeN.mss_&gg:Ccq@MUPO"mO&7gR0JtuUXX1rVVAh&I;"0Y@Rd?`#2<RP!M>B5a+HBoR7Xman(3u4sb%=M/38efi&+-t5#*X>FUf]X32+dP<4u^F_7b$@&3^"n4XBNWSNu6"st(&o"gPamoMrD?.(tU]AH<_:DLA!bb<H!U814/YgBbW$U1L%?*j<I%qFpo"j^7bZP9O1V0K%DZ3E$7`K1;>!s]i`\W7X-`.<tt;T"C^7O0-O,[P9AUh7euI&/CU^K8Uhm4D`S4*R'5a'9h-!<?9'%h/]bLdX`Z9OAhB4%;M-&2VTqB2IQ@2dB:YGbDaQjVs:LFZ9TK_=c-6((N4$-3lD)a71=LI*W=i8Z$c=!UQX-OnO9Q?@U!S2TKm;R%(3K\da;,><n:&>0P$UBN`NT;f*<6#9J,[?ps)?-X(Ou,L:I"fehu39Chu6pZqXO1+?iTQ'5Q,[$If87"5Q;+?s2Q3VdbfEk^A[M=%bI@M!rdX_:S)=4l^AXONqs??BrD+hcHn+m:/8P)`/8P5d/8P'VA^/-^mFORpeA(msiK0+A$Y2aAe%Eu`LA5uhGal/7r6MekB06+T%f;J0<k1b!dJ0d7)qknAmE41F2(&:C4R0rb/PL0#L:!Bo-4?C4ER9/qKHm<hcdYObZk:XdRiZZd3BCGW`J2H7%f%19^T$#ZC>c>$5%Qb<!-jWrDD7nZE)/&sEB^*)AlbMq:g3Am7$@7JFu!1jI,+F>-ROm-)rRsAXMm?3BOdj6fFKf1_9UNkshmt)<6:j0_+=hTs;\hbZd%nd1;%#VYkA$f0jGh+)8FZqG*om8E4E4)0?UU^'ToW4>=qYU-j@.s4<#-MOVE.>-H#UdXG@Mm)o)SE4*hFLh>$hQF4b=n,&+b_ga_%d`uW7>jH'fYH1YZEOj#JeoiZL[7f%)'bZ5tH[T1:UCshTd\QRc14Qpi8aC,h7.?eRUX7R10ArO>53LOEe=+"@Y"cC<3b=_/q3Z?Q%Q?rKh;[g6@r5N+0]uOmX,eco'ah:_u629.+0-;dT`e9L\XID;tc3FuD=D>:RXh660MX"gi-(("L[8t\T-Pc*OY;CSA:tL;`:Ki[&%#jlNMcJJ2V-S+&]qt/V4/SNQn9p/RmT`opC'D)FM,cuLfJ<2R*7-^*j2kW34k]`it_X=J.\eceI3RX7i3i]R2'^JqL[cgfY4XJQp%0=6s@]SA?6Pf3Fd]RmMrA^te.AURjZMFo/%-V\@M`4)o;Ui\Im)YdXlZ(lS<=o3Ng,Ck52n_5A-g<KLeK6.lb)YWkN%6dt.V<sQf%m]K:D=iubh#7[5tnj&p*<'mO-h1.=:+*kg2H'm%u2=]ik"%'XEPnq>Bg8[lN\p^rG::HHVFJI'SS*7[9i9u!)4CL18Nn$EIW\sH*%^4)@^gc"ufX1j($H2CM:kE^lGg-<&/"OT]Io^TAs/$2No#9c[O/WW]7M2N]t_A]SjZbESs;0eu.Uij)cXmj'uUe0qt&Nto8'O&Zf%D;q'5/M?F6hR(U20ik(;ds^V!Ns./h"lL^r.g_-CUp3mm]sjEWm(c-qg_VMT0*9.KSU@osCXjs+M(BiXnk/f82=@PBm8P!*HeP$S%F0P+\c;I<EM]3_IPp``=8$7.#$@AS5WcCNApE6XrEP=lr\P1kNlAQ8DKL@E1<mp-/p;&\nhd1I)B\fC=AaFM6>rnOU*uac;^[-?u%XPtQCc\[tEYbrm(pH0_g>'7OI:A9/#[duT/`("P0fBD!A\$9E!(*$U9:ctH=f\Qo&ESmL\[+n?2GfP5b;7ncR>.WCmoJ=Q[b=l5^%m&Tr^q4A+c)G7!r[`'nHF`sSjfq31@7-e3^p/1(nCAWEp<S$B87LNYhnR/'>SLcW_QKI:Qa';8D9R$>=;O4u#qScP7Uj.jN`7:Z.%N7c'K4!&iuXY&[Zr.a`69*qY)MH11-j>jO"X(Z(rWoH,hf%9!u.Zr5P['"R2bbb$/8aR]6qFk$iBFD7LeLg0.]@`"^S7D;"DHi7`%LuiZ&M;JRZ>3DVK'DW+hZuHsn(pH.7g5&H3V)'#+g)[8qHqapLe6K_31*/@\qdmP3h-.#6=f`aJFOW4*Xgqq',sJe..(>sgfK9O[%_j46dB\5G*Au(9-[+_[gKc@J.dNVn)$&EY!]T/:mFH+C3B=1gm5c;;qr/n!@NO]oCNDl$9@qs'8]PI8i()?;JH48^')!9QBpi2=B%]jaLJUYIb<(d_c=93lgmG"#;TF8-^1oQB%gD_'.4>f7kUhZK<N:Kt%B&RNURRi0K>Irt7D`o[n?l"LNK6..D%lklRc;EgdO&)jA!%P43kNm\@1GG0=`0g9m)W7nmrtl9UW#hg:jE8WHM04Upd8c>afu.iPQj'lQZ,:>"]/gY#$/bD+70o3pZKNK8m"BH9]t'oKKumAr6*%4$8PqX+.V':5k]@C*#r;WD\qEMB5Tj51]pU.c0_%HQK%+?`[H!nE<ONG.Q[,#Bn&FYX2jKPP:K2]Vcp#Eh'RV_m_@Q:D%XdI!pF'%-boJ""dR<VI-Dm7,LYE];Mo,6h@b(E;3^NM^9=IH=RlK.)7hL9C#,+>-;T$m.S4X<S6'CMrYXCg#X655rQ(n*h\(7?JTf`lP`qGH%mIG,RK2drO0BC+f@0TMlQDh\Amu!GH<o,#R)Xa7*X,)Ake'hrF>t-Mr^%F&TVJ`,HVO_#bNBR%il['*,*>trEYb!Lgo&_g2%Du_q%'Mp:IBGmk_fXNH"7U`f3BZsJ?p0g^#"h0L$5uZ1=ZW#T=a`bNoT9=N((?4?3VQbaB8mrP*U2VU1.88hc_=:[=QcG59;oB;5'g7c+%`Rp?^#%C4AR`Ftsi;-RX1Vb><;&WVj@DT6)64!Cp>"XJ4AWqu`>LSI`-5EF4eW^T]<6S$Mc*pp"RJ1I(/JnT#3<>j;SSEt`p%;jp%eQ#IjF]:j,A.U6XKSIRAnfkq!"&mT,iY8F!6DH_ledY<@0\U56brT]OPGaZK`98:?pZ8(s:Sm>]4@<07iWsD#4#_\pF<jXs9%2>:%0i31S97%poC$Np$'rq75ALB`EHL-djiaX?T/\[Dni`a%ukmGX:(TP\5=/U-EJhAkj.Y3RD`M@%.g-!OMr0>JOLdH3\ad7NT@n)im%O#%EF`Z_J\4eks(mg\\<Q4MMm>@&ISDe+AdBaD3sDoQ@a>'lIgG>'2%BUp'Xg0*ZrXTFa5kZ-4Y=.=m[4Bp7a.SJn:915G,`0+Re%N+EN#HTg$F,6>:17^3!B[Xm81ij&gfW3aOF_EYbcRN5kR_F.^/"1m!os)-K\*'$A:?[\7h0*k*[(f!R8"=LV![`mUY2F??e6;&c*%rb&VC@pnRqUm4(\(V<D1pfcK=K^!'3MC0sJV..laMCArp"Trd./HSu$nJD8,3aNP;d.Tju6!Rnq^_ZUbU6U7>/QqcZlYN7h[8qs.%N$\,ejd-eZr4a$KUZ,$4a<KUiViK\:IEMcI7SjoGR";*Z`A2\dd1QihC`*`L=s%0?*Nr!IO$G*j>BS+&!VMV6K-6tb1k`hoj04M?%jkUYX%r-R+:2$"->r56s3t8.uRd<>0=1)5p"'<79LrbIEOF4`N-WD=OIYSLb6QKN^`ekU;e\MPH>ofFH>ZHj;1[Y3/e#cgP'`VCA%pQ=T@me\.AIik3M[C2P1e'$<BS=B&OihT/b+q-Ooi^la0geU!r6<;h9])YoFkq01Q4%o%p:Pi(-%&^IBi3oN_=d'o%G<3G\%b6U[%a(<0^kpl(3kUOYrH<3Cc)m:"KU3p5,giZVR#ZO*j0jsfWmgS/sZjctb.q;FketSEs0_-Fu;7(?L7[J"aGSB57_K<15XfFUo.:)=4%PM2r3(5ME/V'/#Km`>0f\t]R_[<P7`5mV0qL+6_=/"4PGS<Ti/;bBFTTVSX`e5\Qm(?m:mdE?ahUcUWjKMS0/U+<Y?>3FhX`ddF3%op"(qfGt98iuZHp2XD'QA43"g(Xg5<&?jLTCpc!nrA,^pY(4Sj:Q&mchfN[D<dStBf7Tq8M(1r"Y`#6T5c6#q@^FmUMD<QiQB-*C%4\$04ZfpJ>ilLr^9]N[Zs5nR)edq,[GoC_W)BE>fUQgH;!HpoViDC\2cM>2>eQmrDG)(2I,MY8">c;T(J:%;Yf)1[EEV]/km[Q[i%juom;hM%Q#6`qh]c81B`3>@9tGXQ`Xl13XCBJ&%q8ZNNZ"CSGX4N.1q>0?J\=tD-FBm`-KGl>2:pb%!=BF3V(/n;''Pa7ZEQ$870%H`cueq0'T=#u&dAbg@`$E=Td^+JiAA34+N'I5PfI`'H!&MF7o,PFAf*f7RBOXeX>qAa'm:O[Uqei!;3d3kXO4?#.[ur[NrKlr%0;%6o/l3!.!h+VaM(b%(qT4"m\lLhG1L]7@%bk;e-P%7(200,d3];SatdC<)m0:L[OG^>7D=C+k30t)/SR&aO#np7S<JgEL,u'V!+&^%H,"SJKe!dY&5HqSep;Ipf7U4JX]9J>FIfS6L$2.BfSFab?4n(lO#RjM8;r,]iOi=:.p?XkSE6=J!!m;X:b*TVBD<:(jd2N[Z!&dE%=K=t?P)+5%=Y:YKr<TcdnafjeHk-IV3,"V=H%&GTE6bO?'s2!r:7?r._]:2W87F:Y0@,Y^(+\NB3aY[IE3*#l'1#$r@$E9m;70?:%>d@<\f>U/tmEUXs-k2jdiPe5)XTQBYE<K1>ZPBAt)o<W\*-q3GrKP0!6Vn#mOu2j:?CS@6peBA$ege7/\k^l,6?K&1FS`UU\69Q$%rN`lj@6^)0]GmW*JM[1`L@]k2>gd?n;S7*6`$XiY_n"l[0l@;?4tH<3NjVnj;Fg:M*N@\f%[H.N&rYKgYbAJe'pHoEGn$ODA`TQF%`S%a<3D\#0<fj6]fu0WsB2HpLB]Yo:TL`$]3,&l%iS%P?#GjVt;JZQc7#0jiF@`b:Oq+&eP=[FPEaD68c`iuF4P)X3BUpQSB%uID%`kcK[O*ZNT_"];GHh'(P/G+VteT&dm.pBAC3QjK$ljti0dD+*@^/3Z8?g+Hr5Uj`'`\h^3hf\@*/X8$[4SS<AP)->A2;".,Tr^cl%c#&FSqHOU:j5MYg@-"/s(pOPs+k39W#RP2S6GlW&][*tGIE?KA%%]Ss(A%9q!A6cFBXpj$G!,3I3?Fbbf23IZ,&_Up#Vkl0)GjEV%WVj3>`/U'UjeT/%efi&J#ui(1NYH.!_MJP[2@%RsCHRL7hDnob<UCWuP%n*p]c+@bWocZs]F#lnKd`k+SdduTGg<06N<X)]PH+g7%93seJ+VE&[Z=!5sAQ1n/(Ne'N@oC(C*_ogWXt>QI*g(L`a)-g=AOr"#,\K\n>h@_Z0Ki0ZpH/Xr6$+8S?ZslZQ:%Ik>!(ssM+G\3%$CA%7ANTRc6^4n,E>W\WhMq:u7pG:=J@t2r8'J21.CS%+NQ#&?@i.b%D:^RqP-%8STsGBdR[%2Biq8u07k3m_:"_q`om.IL>-SD&%>.q9Tb9_%DU).lk7p4k1JfZdc1X$uD`dgNSbN3p3=1"FlM\l45aD`)p)7^;/C=Q3Vd^j1V=/nh\/t:UR7%_'Ke.oLK2^6:ghjiXb%rBcF;Gi^6R9MJQeG4!UR0/[9S\.17D^*=*,i!0_-.mi5k6DHaO-OaT%7/Dn)nsY1&3@=KE"-tWbde-7JWO7qMP)+5%=j;4l[Srf(%9U)@S.k[[C(6KK2+;CR[M#`6Oia]k<#ec:`)EE[R`qg]'oel"S#8Zed9r)IQ%$\L_&K<ds]Xu)IVWUHbm.<un6r.P_4[g_,<Y%7)%lCO"E5=UQjShs,I;3>JK24Y+,f;@a[6K78O2_"<X9BV0`<!u50$P:mc?BJuRJC++.?9.9hAAon"g5T,]dLn3[Fe#7!03`2oa]d<M%(uN(Ao8gR&;O<HmU]fDFK\WiS.8o$gki=q3:[(=M;RpN(D%AKg5N@"0q_%GBOi2%2#("@1gGt]@\S2]5^#.7$H]f47*+?HrY(Tj\%W[T%NQ'o5:l\S>s+cR+-L2(+Zb/VE@VQa,<Z$$.^WMKtjZ_nYF33:]100@j-5pN[HXdsEq7&7GrXBmhc46:7JVQSH-p?#nto_`F%%BF/@Mk]VM`=\hr`MQ2DNa%c\N'rApoi[iR3_nh.H:t;8V)mK085qA&:gX8e8)O90liUrl.7k<t+:#SK?.R@''/[XGg=ta_[nVF64%E,_BGk#D*BQE/07oI6AtX,i"D,U&Le:EQir2Q_d>e?iWpLrMW9K7Z8!1/8WUfs'E%BS^-Ea$:85gaXGa"sQdqOYuc(=nu0':;i:+%q_`YtEo$^$XfIrn_:R+c9$"EKMuj6MauTmR$RTnam<'\5N$g4?p1IPe8$SA_o8F5G22=?eF'1XbHYR6^c^aCm_d&1&'dT(/MRCH@%HOtPJ$jVaGp4U_&FdC=S($,I'="8!K;Y,E78q!iK%8a^fQj*p>gB4n?=m[Nh@a\g582pij?DIe!TrT!u1Q;Wem_I#-\bY=s8j_"!%Zol-QVI`sHX#0'<T`m@QFpkJ*6^8(sOLJZk>OFb>1_Ns1*=hFCUlg[mrCaYQ<((ql;H]3J8p=[BcS_u4a=E7]=,6op^X\VZUkZsN%E3?IUQh!^VZ]jjG7TZf14*+Dke;li\)2n3gZp(7$-Rm[;:S13!s8V#bldrqej0sMa!rr5Rs7F44If7mas7jdprUt/Zr0O%)rr2kO%?iB9)rqI!grVb&,ric&l5QC3`s7kXSrTW't^\cjUs7#%jIel:l?bZKVcThBg=j'UurpbL;rh#-iZJb=]rTZ'9b?t5;rr@VZ[L3~>%AI9_PrivateDataEnd