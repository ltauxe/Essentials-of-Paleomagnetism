%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: energies.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Lisa Tauxe
%%CreationDate: 1/4/09
%%BoundingBox: 0 0 510 384
%%HiResBoundingBox: 0 0 509.0654 383.7393
%%CropBox: 0 0 509.0654 383.7393
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 6416 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FFA852A8A87DA852FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD09FFA852A8A87D7D7D527DA8A87DA87DA87DA87DA87DA87D%A87DA8A87D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8A8%7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA8769B59A8FD08FFA8A8FFA8FFA8A8FD6DFFBDFFFFA8FD0EFF7D%FD6CFFBDBDFFA8A8FD0EFFA8A8FD6BFFB6FFFFA8A8FD0EFF7DFD6BFFB6CA%FFFFA8A8FD0EFFA8A8FD69FFC3BDFFFFFFA8A8FD0EFF7DFD6AFFBCCAFFFF%FFA8A8FD0EFFA8FD69FFC3C3FD05FFA8FD0EFF7DFD68FFCAB6FD05FFA8A8%FD0EFFA8A8FD67FFB6CBFD05FFA8A8FD0EFF7DFD67FFC3BDFD06FFA8A8FD%0EFFA8A8FD65FFCBBDFD07FFA8A8FD0EFF7DFD66FFBDC4FD07FFA8A8FD0E%FFA8A8FD64FFC4BCFD08FFA8A8FD0EFF7DFD65FFB6FD09FFA8A8FD0EFFA8%FD64FFBDCAFD0AFFA8FD07FFA852FF7D7D52527DFD63FFC3BDFD0AFFA8A8%FD07FF7D527D7D5252527DA8FD62FFBCCBFD0AFFA8A8FD08FF7DFFFD04A8%7DFD62FFBDC3FD0BFFA8A8FD0EFFA8A8FD60FFCABDFD0CFFA8A8FD0EFF7D%FD61FFB6FD0DFFA8A8FD0EFFA8A8FD5FFFBCCAFD0DFFA8A8FD0EFF7DFD5F%FFBDC3FD0EFFA8A8FD0EFFA8FD5EFFCABDFD10FFA8FD0EFF7DFD5EFFB6CA%FD0FFFA8A8FD0EFFA8A8FD5CFFBDC3FD10FFA8A8FD0EFF7DFD5CFFC3B6FD%11FFA8A8FD0EFFA8A8FD5BFFB6FD12FFA8A8FD0EFF7DFD5BFFB6CAFD12FF%A8A8FD0EFFA8A8FD59FFBCCAFD13FFA8A8FD0EFF7DFD59FFBDBDFD14FFA8%A8FD0EFFA8FD58FFCABDFD16FFA8FD08FFA8FD05FF7DFD57FFCAB6CAFD15%FFA8A8FFFFFF7D7DA8FFA87DFFA8527D7DA8A8FD4FFFA8FD06FFBDC4FD16%FFA8A8FFFF7DA8A87DFFA827A87D5227527DA8FD4CFFA8FFA87D5252A8FF%FFBDC3FD17FF7DA8FFFF7D52A8FFFFFFA8A8FFA8FFA8A8FD4DFF2727FD04%52FFFFC4BDFD19FFA8FFFF52A8527DFD08FF7DFD4DFF2752527D52A1FFCA%B6FD19FFA8A8FFFF7D5252A8FD08FFA8A8FD52FFCBB6FD1AFFA8A8FFFFA8%7DA8A8A8FD07FF7DFD53FFB6CBFD1AFFA8A8FFFFA87D7D7DFD08FFA8FD52%FFB6CAFD1CFFA8FD04FFA8FD09FF7DFD51FFB6C4FD1CFFA8A8FFFFFF7DA8%FD09FFA8A8FD4FFFB6C4FD1DFFA8A8FFFFFF7D2752A8FD07FF7DFD4FFFBD%BDFD1EFFA8A8FFFFFF525227A8FD07FFA8A8FD4DFFC3C3FD1FFFA8A8FFFF%FFA87DA8A8FD07FF7DFD4DFFBDBDFD20FFA8A8FFFFFF527DFD09FFA8A8FD%4BFFC3BDFD21FFA8A8FFFFFF7D52A8FD08FF7DFD4BFFBDBDFD22FFA8A8FF%FFFF5227A8FD08FFA8FD4AFFC3BDFD24FFA8FFFFFF5227FD09FF7DFD49FF%BDB6FD24FFA8A8FFFFFF7D7DFD06FFA8FFFFA8A8FD47FFBDB7FD25FFA8A8%FFFF7D7D7DA8FFA852FFFD057DA8FD46FFBDBDFD26FF7DA8FFFF7D2752A8%FF7D7DA8A8527D52A8A8FD45FFBDBDFD27FFA8A8FFFFA8A87DFFFFFF7DFF%A8A8FFFF7DFD45FFBCBDFD28FFA8A8FD0EFFA8A8FD43FFBCC3FD29FFA8A8%FD0EFF7DFD43FFB6C4FD2AFFA8A8FD0EFFA8FD42FFB6CAFD2CFFA8FD0EFF%7DFD40FFCAB6CBFD2CFFA8A8FD0EFFA8A8FD3EFFC4B6FD2EFFA8A8FD0EFF%7DFD3EFFBDBDFD2FFFA8A8FD0EFFA8A8FD3BFFCABDC3FD30FFA8A8FD0EFF%7DFD3BFFC3B6CAFD31FFA8A8FD0EFFA8A8FD39FFBDBDFD33FFA8A8FD0EFF%7DFD38FFCAB6C4FD32FFA8FFA8A8FD0EFFA8FD37FFC4B6FD31FFA8AEA8AE%FFFFA8FD0EFF7DFD35FFCABCBDFD2FFFA8AE83AEA8FFFFFFA8A8FD0EFFA8%A8FD33FFBDBDCAFD2DFF83AF83AFAEFD06FFA8A8FD08FFA8FFFFFFA8FF7D%FD32FFCAB6C3FD2AFFA8AE8483A8AEA8FD09FFA8A8FD07FFA87DA8FF52A8%7DA8A8FD2FFFCBC3BCFD29FFAEAEA8AEA8FD0EFFA8A8FD07FFA852A87D52%527D7DA8FD2EFFBDB6C3FD25FFAEAF83AE83AEA8FD11FF7DA8FD08FFA8A8%FFA8A87DA8FD2DFFCAB6C3FD24FFAEAEA8AEAEFD17FFA8FD0EFF7DFD2BFF%C4BDBCCBFD20FFA8AE84A883AFA8FD19FFA8A8FD0EFFA8FD29FFCABCBDCA%FD1FFFA8AF83FFAEFD1FFFA8FD0EFF7DFD27FFC4BDBCCAFD1CFFA8AEA884%A8AEAEFD0AFFA852A8FD14FFA8A8FD0EFFA8A8FD24FFCABCBDCAFD19FFAF%AEA8AEA8AEA8FD0BFF5227525227527DFD14FFA8A8FD0EFF7DFD23FFBDBC%BDCBFD16FFA8AF83AE83AEA8FFA8FD0EFF7DF852275227A8FD14FFA8A8FD%0EFFA8A8FD1FFFC4C3BCC4FD14FFAEFFA8AEA8AEAEFD30FFA8A8FD0EFF7D%FD1DFFCAC3B6BDC4FD11FFA8AEA884A8A8A8FD35FFA8A8FD0EFFA8A8FD19%FFCAC4BDBDC3FD0EFFAEAEAEA8AEA8AFA8FD3AFFA8A8FD0EFF7DFD17FFCA%C3BCBDC3FD0BFFA8AEA8AE83AE83AEA8FD3FFFA8A8FD0EFFA8FD14FFC4C3%BCC3C4FD07FFAEFFA8FF83AE83FFAEAFFD46FFA8FD0EFF7DFD0FFFCACABD%BDBCC4CAFFFFFFA8AEA8AE83AE83AEA8AEA8FD4BFFA8A8FD0EFFA8A8FD09%FFCACAC3BDBDBD9BCAA8FFAEAEA8AEA8FD04AEFD52FFA8A8FD0EFF7DFFFF%FFCACAC3C49ABC6FBC76A17DA8A8AEAEAEA8AEA8FD59FFA8A8FD0EFFA876%C3A1A19AA1A1A8CAFFAFFD65FFA8FD07FFA852FFA8FD047DA1A1FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8FD07FF7D527DA8527D52FD13A8%7DFD37A87DFD26A8FD08FF7DFD04A87D527D7DFD0FFF52A852A8FD0EFFA8%527D7DA8FD0DFFA87DA87D7D7DFD0DFF7D7DA87D7D7DFD0DFF52FF7DA852%FD0DFFA87DA87D7D52FD0BFF52527D7DFD0EFFA852527D7DFD0EFFA82752%52A8FD0EFF7DA8527D52FD0DFFA8A87D7D52A8FD0DFF7D7D52527D7DFD0D%FF7D7D527D52FD0BFFA87DA8A8FD0FFF7DA87DFD0FFFA8A8A87DA8FD0DFF%A87DFD04A8FD0DFFA87D7DA8A8A8FD0DFF52A8A8A87DFD0DFFA87DA8A8A8%7DFDBAFF277D7DA87DA87DFFA8A852A8A8FF7DFF52A8A8A87DA852FD68FF%A87D7D5252FD05277D522752527DA87D7D272727527DA8FD68FF527D7D7D%52A87D7D52A8A8A8527DFFFF52FD047DA852FD7AFFA8FDB3FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2007-01-23T05:42:08Z</xap:CreateDate>
         <xap:ModifyDate>2009-01-04T21:53:27-08:00</xap:ModifyDate>
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:MetadataDate>2009-01-04T21:53:27-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>196</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qw3zN5K1LUvN+meYb&#xA;Oe3VtPjARZ1YvG8fqsPSZeizmUJN/krtvirH9f8Ayq1vVG1xYn062g1bUP0gsSpJQSNp72LSuFVf&#xA;30cjrcow/wB2L1Bo4VZXo1lreoQXN1Nr97GTe3sMcMUdiI0jgu5YY1XlbO/2EFeTHfFUf+g9U/6m&#xA;LUP+Ren/APZJirv0Hqn/AFMWof8AIvT/APskxV36D1T/AKmLUP8AkXp//ZJiqybQtZMLiHzHfrKV&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1008.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ComicSansMS</stFnt:fontName>
                  <stFnt:fontFamily>Comic Sans MS</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Comic Sans MS.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:InstanceID>uuid:C96671F640DBDD119694C530E56F11B9</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -383.739 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 383.739 li
509.065 383.739 li
509.065 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ComicSansMS Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ComicSansMS def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 68 /D putdup 69 /E putdup 74 /J putdup 97 /a putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 109 /m putdup 110 /n putdup 114 /r putdup 116 /t putdup 121 /y putdef/FontBBox {-93 -312 1187 1102} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings17 dict dup begin/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB70854A4518CFB8D731A1977C1C08A> |-/space <1C60D8A8C9B84186EC> |-/parenleft <1C60D8A8C9B72DDD4BDDDEFA1F2E33EFAB2609E3C9DE388E20E9C059C4F1BE51DE95F72A2C12C7492DCC98E0E6966BF3C6ECA33D6154D0170812D5FDFD86FCB61BC83579E6C82B47DC2EF7EFEC0791C5D64493C14198901FA2252477E06D36F6FBD8470D6ECFD0F8931D63CA891EC08EE802E9833B5640A882BF6370D5475D687E5637A4> |-/parenright <1C60D8A8C9B72DDD4BB51EC6C49AB7306C1A14C493E9BA5D78AE2C195B29D94044F912FEED39F75BE34A7150607FEA016A23803EFDD2F9288AF7A180AEFCBFBF998E3FBDAC6F3A4074B0F5D69EFDE59096176B6B29149A14AB78FC2B3577A37D471DCCDE635BBEA2665A37EE893BAA312D5DB22CA01C4916AB9D79F1B336301D84554794> |-/D <1C60D8A8C9B6079F6CB7E532E9AD798E1A9E0E9D7042D09A7BE48F45147E8A93793F66954E6B8860A43BD585E271E7F03DF5D6C9950D5A044D1FE3254F4EAD6D0257E1F7146FDFA5A3D2A9A61D3334BF45C9B76ED37AA7790CA2367DC42210F7B8AB7BE54697E148355064439150DAAFCAE012FD6A53460284F1817ACDA3BA1D6FE529F583F3DBE567DEFBD6B4F46E74C8B3983FEEE97D9D20161BB1B829D78C7A812DCE9E582CC4E03359DF24245D1A751E847C0CB9A4A968631656593E9133F2157B422B2BC9FC4D97AC> |-/E <1C60D8A8C9B66482B35C34836F0E20BF616040B5436119F91C04A4FFF5928BF58F0C4C7700F085A7A99B7E4AB95D4ACBC471077FA66A9920CF93E9E8B294BF2BA82B4644830E155D21219D4BC7463429B5AC18C39C3AFC8B34640E91D75CD879D617E93EB4ECCBCCFA7E7DBA4AC0D3B3FE1C92681EA5F2AFA04A26FF98D3C2DA3613626D7F9EA9477B5C4BEBB05D104817C8A6FB7298DC7E454AA36F51C94470BAF25DA450E79249D4E1000BED8DE4FC399F6ABAF7C22180F3C650C847B0D1D0C334DC3DA9557C838F1033123A9256A0ECC10CDB90CB3C1395B36FBD696FE5A815B009423A56618570F514642B5B536F239B2B69B839B6454303298864410E01422F330CEFEBD9CF005E8373A6A20653AB17E07B4681DC4045E7792133FA39140E> |-/J <1C60D8A8C9B64C38DC47DA0111A58344AEDBBD09842D94435FD89D87884F0112939F9ECE7F42AC51D8AADB72D30702CE8C7D24001B22FBECE7FDDB1A733CCDBC32FD69386D772A74E6DA939DFE6812C2E078A7B32CABA9128D3A48B066014CE2799F44D0B506A1C0D8BC6228E017E0D900D3DF824AFEA8D70315380DF3E30C22BAA724A9CD934733AE27B759A29B1656471D38E3E1016EF6360B637E2B361C0BCF6BF36DD684D154242CDD4BB39E623FAABA84EED66D5732839FF9AA03714FFA857C995BF7CBB7> |-/a <1C60D8A8C9B7BB5CA503F41BCABD6C718309D7FD3EAFD4723590A6DB54A64A3783FF0E8915C8665146025473AABA73A7307808FC49DF54120176FFCE6E5630D745DEC9D7FE687B22D69E14177C1006B659795051D4F564854E1C732886E0B2617B0D55057161A197AD04FDD89E349DC800C8FAE6C2E2E7218942027A386140843CEC6D038F4E517DF6E091EE1EC97061608AA6DD07992C53BB029F315A3C165875CF85B20BCD136667E2BE57C24163FB07309C0F29C421C91BBF197F69B4468BD92D4E0F963A574D94F4959F6C142EC285F75B0A57DCD73FA9D71DA6249A4005429B> |-/e <1C60D8A8C9B797474FA4303150FF95D22C1576367C7C82BE107A33DB836FE273C47A9F1C294729003E4BC6906C807AE64492E567EB699590C33760698497B7D8BD4606E6533DD313B7408096D0253255EE30E5A5E3E06503BE924638C5951A143C8FB027E022BA2CC9736D9A6F100D38EB1D4C686421142EAA9CB9B186F914996503E87D112FD301022C9ED0ABE9EC3841A2AAB1D0ECFBD04DD27FAC9222691EA422325A2608DE3AA47EDFE24D5B> |-/f <1C60D8A8C9B7BF865DF0D20FCA4404E9859CDE906439E1B6481B2FEB75413186C365A9DBC3A750FC8CD5B7F7B8622936B45EA60095B3D37F9B468C68E03657C1298567EDFC2A59EB6AD01922F49B485CDC5C730EBEA4B7AC828B861131433F470ED067D8654035DAAD4DA6650191581F595073FA084732A337B92D51D4D5D1490EB14D559CFDA4011DD74E951F328BCA12BF2268B70EA48A2C4C52B1A0109B3EACFA7B6EF61D5055DE5A6ED1F24E05DB4ACEB6> |-/g <1C60D8A8C9B7883C34847673539A3C47283D2869DE727C001A8ED17F310363C066266AC877F71DE696B52BA5756C41FA2C6742427FE25CABE743DC5A8409CA03A46FFE172EB266EBE72B596730C9547F1BA9130523A2B6925FB6C63D24A5FA2932E01CB40C0D974065C69BA7D95C92F84E75317230A20A5B57C1414477131B85EE5ACE9CF2CFFA8F81FDD0E1570B07F54AEF9E9559FF767E5E4A6770AB6167D2B403FC1CDDEF440629F36A00CE900D50814788B0FF5D0993B3F9BE201807168AC2FF35AD7144226A32EFAB4AE57534B933FE2F650AE3AB04CFB63638BA8BDA42DA1BFD76C61D93DA> |-/i <1C60D8A8C9B8524CA9FFF1D59707FAB92D69C69B7C857EED4D13A4787BF89B18996B1BFB164CA796A0EF07F1407DF3454BCAB96192B46A6EDEDC573AD74AE5EBB6C7E282C40345BC6C9BD822E381040AF84910E37D38B52009BFBA09050BADAEBC8553B469DC8708DC8B7D087E48B2E8AA99CA401E54F66DDB7E9923B974D88CDA4785FD295B41FC4A68D170B03EDBFBD3758274FE3E0C921CDB5782B906DFB9938B6191061DE008B5105239C6B4135C4008792AFAA4EA6826684C0C> |-/m <1C60D8A8C9B6FC2D96873601FD7D92169A9B88887C32231D12B856F0FF258B62829FEDF861E7207C12D5C53BCDFD0EA3F0EF441B3104EE7A8DCCC9135A66A3908121FDEF89ECB4290FE2DEBBC0D2CEC922FC3B50F2ED674EACC69E69FA370309E0EBFB994E62CF35AAC76A68A27F1193FA80070D9751608DC309EBC2115575AE6BDEEB113F39584664AF7AAA3C82601F097876EB086034E5AE78A75047B10841E51F7380B84CCDD035E85E1A5870A2BB0942D4819E585F0952EB73250253334BF49322F96375F5B49CB7CFA7A0B232F8AD1DD38A4207A81B8B16535F38363976D31BC82130B6F42B86DA3EA4FFCCC6C8DA3BAD0E6D585D10CCC6A4EFCE59BB479065B92972F3D516BBD63C0E7C814F065EEF1040A3FF51C243D5475EBA7E962CAD4F75D3AC0EDC0C293B5BB6A5776BF4AC8F3BC665CA79374C2D10BBB5A4EE69B305850280C1> |-/n <1C60D8A8C9B7B07F0BB93457D6C8288A70E0DB940B4E04FCB07C44C762FF75D1D950F6658944215ABDB8E09DA0C33F6809AFCF2421406F8688ABED2DEC4D49A55251B25C4373E5276DE26457B8215FA156A3918E62986142B216E3D126083708C5AB3D018A7C93A0546D1AE450568C33979D5D1886CAEE4F45CEF158C9F75F841729756DC86B9981305315BE025F34658A8B30DA9E4FC92E74778770409CEEBC81A51BD2DBFB108DC9287AA20C6C0FDC2D19D58643D88EB36209DAC3D913F6852F2F8B06C4883A03EE882CC27439C56A729CC60E3CAC44D3416B7B9356E70E374DD5228445902D99BC6E06C8C6558C> |-/r <1C60D8A8C9B75BE51651FFE67439D51A25F90110BB907676984B99DD0B35C7709F13E9D884F7A5E4D5DC6EAC702AA1CA7DD0308EC3E47EA3A772341F5B614E58D6E83BA0E5BB48DBDD3ED30A643443B6748E7F94653D8C84439C4E79874BBAE5D54AF00F5DBBDC68AB601F5B54A0C720942814BB32E87436> |-/t <1C60D8A8C9B7445140689D163BE9CD19CB6263AAD663E751BFF4FC3EFD289F54C938D7522CDBDC78B86C3A6B352FEC6C942B3A84D1DF37948F119DD042933AE483D22B2D630A0536911763BEC72090C0E7972085EC665EF1618CB3A1E365C68118F7319C489021F7E5BB1237C8B28D9185CA450113B4347A96F5A190A1E41185CC68C22E0D8B3619F65EBBC7C09A7899C42BB7EC5C668E84BEB96E5966CE04926328B6CA13AB435E16BBB7670DDC776BE2EE98FDA0050964E0FA7809BCE05F1D859FB5837E> |-/y <1C60D8A8C9B7B202A5830BCB89572D4CAA1828530B4C7A43C892E79126B4E916330B53C34B415984C412BF2B91501F199A00E0EEB36801E5C6C4B96A328630D8109B95A2744C5BE5BF5BFE00A713EDACDB62A7B27EF5D0BAA40EA7DBB9CA276B4EBCB844D20A4804349C4F910157B64CA0E9CA2D8701B2B253A960994A4F888E6CC95DBACCD8EA343526343BDED882> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PESGSJ+ComicSansMS /ComicSansMS findfont ct_VMDictPut/PESGSJ+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 26{/.notdef}rp /D /E 4{/.notdef}rp /J 22{/.notdef}rp /a 3{/.notdef}rp /e /f /g /.notdef /i 3{/.notdef}rp /m /n 3{/.notdef}rp /r /.notdef /t 4{/.notdef}rp /y 134{/.notdef}rp]PESGSJ+ComicSansMS nfPESGSJ+ComicSansMS*1 [14 0 0 -14 0 0 ]msf229.58 379.371 mo(Diameter \(nm\))[10.1035 3.92383 7.16406 10.876 7.66992 6.59668 7.66992 6.72656 4.18359 5.12695 7.32813 10.876 0 ]xshPESGSJ+ComicSansMS*1 [0 -14 -14 0 0 0 ]msf12.1797 216.391 mo(Energy \(fJ\))[-8.74316 -7.32813 -7.66992 -6.72656 -7.43066 -7.28711 -4.18359 -5.12695 -7.11621 -9.31055 0 ]ysh50.9639 350.139 mo
497.364 350.139 li
497.364 4.53906 li
50.9639 4.53906 li
50.9639 350.139 li
0 0 0 0 cmyk
f
2 lw
2 lc
0 lj
4 ml
[] 0 dsh
true sadj
50.9639 344.551 mo
58.4043 343.67 li
65.8438 342.7 li
73.2832 341.64 li
80.7236 340.482 li
88.1641 339.224 li
95.6035 337.861 li
103.044 336.389 li
110.484 334.804 li
117.924 333.102 li
125.363 331.277 li
132.804 329.328 li
140.244 327.248 li
147.684 325.035 li
155.124 322.683 li
162.564 320.188 li
170.004 317.547 li
177.443 314.755 li
184.884 311.808 li
192.324 308.701 li
199.764 305.431 li
207.204 301.993 li
214.645 298.384 li
222.084 294.599 li
229.523 290.633 li
236.964 286.482 li
244.404 282.144 li
251.844 277.612 li
259.283 272.884 li
266.724 267.954 li
274.164 262.819 li
281.604 257.474 li
289.044 251.916 li
296.483 246.14 li
303.924 240.142 li
311.364 233.916 li
318.804 227.46 li
326.243 220.771 li
333.685 213.841 li
341.124 206.669 li
348.563 199.25 li
356.004 191.579 li
363.444 183.652 li
370.884 175.466 li
378.323 167.016 li
385.764 158.297 li
393.204 149.306 li
400.644 140.038 li
408.084 130.489 li
415.524 120.655 li
422.964 110.533 li
430.403 100.116 li
437.844 89.4033 li
445.284 78.3872 li
452.724 67.0659 li
460.164 55.4341 li
467.604 43.4878 li
475.044 31.2236 li
482.483 18.6362 li
489.924 5.72168 li
0 0.992157 0.803922 0 cmyk
@
1 lw
[6 3 ] 0 dsh
50.9639 344.357 mo
58.4043 343.765 li
65.8438 343.144 li
73.2832 342.493 li
80.7236 341.813 li
88.1641 341.105 li
95.6035 340.368 li
103.044 339.603 li
110.484 338.808 li
117.924 337.983 li
125.363 337.131 li
132.804 336.249 li
140.244 335.339 li
147.684 334.399 li
155.124 333.431 li
162.564 332.434 li
170.004 331.407 li
177.443 330.353 li
184.884 329.269 li
192.324 328.155 li
199.764 327.014 li
207.204 325.843 li
214.645 324.644 li
222.084 323.415 li
229.523 322.157 li
236.964 320.871 li
244.404 319.556 li
251.844 318.212 li
259.283 316.839 li
266.724 315.437 li
274.164 314.006 li
281.604 312.546 li
289.044 311.058 li
296.483 309.54 li
303.924 307.993 li
311.364 306.418 li
318.804 304.813 li
326.243 303.181 li
333.685 301.519 li
341.124 299.827 li
348.563 298.107 li
356.004 296.358 li
363.444 294.58 li
370.884 292.773 li
378.323 290.938 li
385.764 289.074 li
393.204 287.181 li
400.644 285.258 li
408.084 283.307 li
415.524 281.327 li
422.964 279.317 li
430.403 277.28 li
437.844 275.213 li
445.284 273.117 li
452.724 270.993 li
460.164 268.839 li
467.604 266.657 li
475.044 264.445 li
482.483 262.205 li
489.924 259.937 li
0.87451 0.243137 1 0.129412 cmyk
@
0.5 lw
0 lc
[] 0 dsh
50.9639 350.139 mo
50.9639 346.139 li
0.74902 0.678431 0.670588 0.901961 cmyk
@
50.9639 4.53906 mo
50.9639 8.53906 li
@
48.2432 354.296 mo
49.7314 354.296 li
49.7314 359.998 li
50.9805 359.998 li
50.9805 360.982 li
49.7314 360.982 li
49.7314 363.045 li
48.5547 363.045 li
48.5547 360.982 li
44.6055 360.982 li
44.6055 359.841 li
48.2432 354.296 li
cp
48.5547 355.327 mo
45.5654 359.998 li
48.5547 359.998 li
48.5547 355.327 li
cp
f
55.4668 354.139 mo
56.4482 354.139 57.1973 354.527 57.7148 355.304 cv
58.2324 356.078 58.4912 357.204 58.4912 358.68 cv
58.4912 360.152 58.2324 361.277 57.7148 362.054 cv
57.1973 362.828 56.4482 363.216 55.4668 363.216 cv
54.4873 363.216 53.7383 362.828 53.2207 362.054 cv
52.7031 361.277 52.4443 360.152 52.4443 358.68 cv
52.4443 357.204 52.7031 356.078 53.2207 355.304 cv
53.7383 354.527 54.4873 354.139 55.4668 354.139 cv
55.4668 355.076 mo
54.8584 355.076 54.4004 355.376 54.0928 355.977 cv
53.7871 356.575 53.6328 357.477 53.6328 358.68 cv
53.6328 359.879 53.7871 360.778 54.0928 361.378 cv
54.4004 361.979 54.8584 362.278 55.4668 362.278 cv
56.0811 362.278 56.541 361.979 56.8477 361.378 cv
57.1543 360.778 57.3086 359.879 57.3086 358.68 cv
57.3086 357.477 57.1543 356.575 56.8477 355.977 cv
56.541 355.376 56.0811 355.076 55.4668 355.076 cv
f
125.363 350.139 mo
125.363 346.139 li
@
125.363 4.53906 mo
125.363 8.53906 li
@
124.855 354.489 mo
124.855 355.567 li
124.557 355.428 124.258 355.32 123.955 355.247 cv
123.652 355.172 123.353 355.135 123.055 355.135 cv
122.273 355.135 121.677 355.398 121.264 355.926 cv
120.854 356.453 120.618 357.25 120.559 358.316 cv
120.789 357.977 121.078 357.716 121.426 357.534 cv
121.774 357.354 122.157 357.263 122.574 357.263 cv
123.453 357.263 124.148 357.529 124.658 358.063 cv
125.168 358.596 125.423 359.32 125.423 360.238 cv
125.423 361.137 125.157 361.858 124.626 362.402 cv
124.095 362.944 123.388 363.216 122.506 363.216 cv
121.493 363.216 120.719 362.828 120.184 362.054 cv
119.649 361.277 119.382 360.152 119.382 358.68 cv
119.382 357.298 119.71 356.195 120.366 355.373 cv
121.022 354.55 121.902 354.139 123.008 354.139 cv
123.306 354.139 123.605 354.168 123.908 354.227 cv
124.211 354.286 124.525 354.373 124.855 354.489 cv
122.506 358.2 mo
121.975 358.2 121.553 358.382 121.242 358.746 cv
120.932 359.108 120.777 359.605 120.777 360.238 cv
120.777 360.867 120.932 361.364 121.242 361.73 cv
121.553 362.096 121.975 362.278 122.506 362.278 cv
123.037 362.278 123.457 362.096 123.768 361.73 cv
124.077 361.364 124.232 360.867 124.232 360.238 cv
124.232 359.605 124.077 359.108 123.768 358.746 cv
123.457 358.382 123.037 358.2 122.506 358.2 cv
f
129.992 354.139 mo
130.973 354.139 131.723 354.527 132.24 355.304 cv
132.758 356.078 133.017 357.204 133.017 358.68 cv
133.017 360.152 132.758 361.277 132.24 362.054 cv
131.723 362.828 130.973 363.216 129.992 363.216 cv
129.012 363.216 128.264 362.828 127.746 362.054 cv
127.229 361.277 126.97 360.152 126.97 358.68 cv
126.97 357.204 127.229 356.078 127.746 355.304 cv
128.264 354.527 129.012 354.139 129.992 354.139 cv
129.992 355.076 mo
129.383 355.076 128.926 355.376 128.617 355.977 cv
128.312 356.575 128.158 357.477 128.158 358.68 cv
128.158 359.879 128.312 360.778 128.617 361.378 cv
128.926 361.979 129.383 362.278 129.992 362.278 cv
130.605 362.278 131.066 361.979 131.372 361.378 cv
131.68 360.778 131.834 359.879 131.834 358.68 cv
131.834 357.477 131.68 356.575 131.372 355.977 cv
131.066 355.376 130.605 355.076 129.992 355.076 cv
f
199.764 350.139 mo
199.764 346.139 li
@
199.764 4.53906 mo
199.764 8.53906 li
@
195.125 356.519 mo
195.125 356.971 195.267 357.324 195.549 357.577 cv
195.833 357.831 196.23 357.958 196.742 357.958 cv
197.25 357.958 197.648 357.831 197.934 357.577 cv
198.222 357.324 198.365 356.971 198.365 356.519 cv
198.365 356.064 198.222 355.711 197.934 355.457 cv
197.648 355.203 197.25 355.076 196.742 355.076 cv
196.23 355.076 195.833 355.203 195.549 355.457 cv
195.267 355.711 195.125 356.064 195.125 356.519 cv
195.559 358.388 mo
195.051 358.263 194.655 358.026 194.371 357.679 cv
194.09 357.33 193.947 356.905 193.947 356.405 cv
193.947 355.707 194.197 355.154 194.694 354.748 cv
195.193 354.342 195.875 354.139 196.742 354.139 cv
197.613 354.139 198.297 354.342 198.793 354.748 cv
199.289 355.154 199.537 355.707 199.537 356.405 cv
199.537 356.905 199.396 357.33 199.111 357.679 cv
198.829 358.026 198.436 358.263 197.932 358.388 cv
198.502 358.521 198.946 358.78 199.264 359.168 cv
199.582 359.554 199.742 360.025 199.742 360.583 cv
199.742 361.432 199.482 362.083 198.965 362.537 cv
198.447 362.989 197.707 363.216 196.742 363.216 cv
195.777 363.216 195.037 362.989 194.518 362.537 cv
194 362.083 193.742 361.432 193.742 360.583 cv
193.742 360.025 193.902 359.554 194.222 359.168 cv
194.543 358.78 194.988 358.521 195.559 358.388 cv
196.742 358.89 mo
196.18 358.89 195.736 359.041 195.414 359.342 cv
195.093 359.644 194.932 360.057 194.932 360.583 cv
194.932 361.11 195.093 361.525 195.414 361.826 cv
195.736 362.128 196.18 362.278 196.742 362.278 cv
197.305 362.278 197.747 362.127 198.071 361.824 cv
198.396 361.521 198.559 361.107 198.559 360.583 cv
198.559 360.057 198.397 359.644 198.074 359.342 cv
197.754 359.041 197.309 358.89 196.742 358.89 cv
f
204.377 354.139 mo
205.357 354.139 206.107 354.527 206.625 355.304 cv
207.143 356.078 207.4 357.204 207.4 358.68 cv
207.4 360.152 207.143 361.277 206.625 362.054 cv
206.107 362.828 205.357 363.216 204.377 363.216 cv
203.396 363.216 202.647 362.828 202.131 362.054 cv
201.613 361.277 201.354 360.152 201.354 358.68 cv
201.354 357.204 201.613 356.078 202.131 355.304 cv
202.647 354.527 203.396 354.139 204.377 354.139 cv
204.377 355.076 mo
203.768 355.076 203.31 355.376 203.002 355.977 cv
202.695 356.575 202.543 357.477 202.543 358.68 cv
202.543 359.879 202.695 360.778 203.002 361.378 cv
203.31 361.979 203.768 362.278 204.377 362.278 cv
204.99 362.278 205.45 361.979 205.756 361.378 cv
206.064 360.778 206.218 359.879 206.218 358.68 cv
206.218 357.477 206.064 356.575 205.756 355.977 cv
205.45 355.376 204.99 355.076 204.377 355.076 cv
f
274.164 350.139 mo
274.164 346.139 li
@
274.164 4.53906 mo
274.164 8.53906 li
@
265.246 362.05 mo
267.18 362.05 li
267.18 355.374 li
265.076 355.796 li
265.076 354.718 li
267.168 354.296 li
268.352 354.296 li
268.352 362.05 li
270.285 362.05 li
270.285 363.045 li
265.246 363.045 li
265.246 362.05 li
cp
f
275.206 354.139 mo
276.188 354.139 276.937 354.527 277.454 355.304 cv
277.972 356.078 278.23 357.204 278.23 358.68 cv
278.23 360.152 277.972 361.277 277.454 362.054 cv
276.937 362.828 276.188 363.216 275.206 363.216 cv
274.227 363.216 273.478 362.828 272.96 362.054 cv
272.442 361.277 272.184 360.152 272.184 358.68 cv
272.184 357.204 272.442 356.078 272.96 355.304 cv
273.478 354.527 274.227 354.139 275.206 354.139 cv
275.206 355.076 mo
274.598 355.076 274.139 355.376 273.832 355.977 cv
273.525 356.575 273.373 357.477 273.373 358.68 cv
273.373 359.879 273.525 360.778 273.832 361.378 cv
274.139 361.979 274.598 362.278 275.206 362.278 cv
275.82 362.278 276.279 361.979 276.586 361.378 cv
276.894 360.778 277.047 359.879 277.047 358.68 cv
277.047 357.477 276.894 356.575 276.586 355.977 cv
276.279 355.376 275.82 355.076 275.206 355.076 cv
f
282.841 354.139 mo
283.822 354.139 284.571 354.527 285.089 355.304 cv
285.606 356.078 285.865 357.204 285.865 358.68 cv
285.865 360.152 285.606 361.277 285.089 362.054 cv
284.571 362.828 283.822 363.216 282.841 363.216 cv
281.861 363.216 281.112 362.828 280.595 362.054 cv
280.077 361.277 279.818 360.152 279.818 358.68 cv
279.818 357.204 280.077 356.078 280.595 355.304 cv
281.112 354.527 281.861 354.139 282.841 354.139 cv
282.841 355.076 mo
282.232 355.076 281.773 355.376 281.467 355.977 cv
281.16 356.575 281.008 357.477 281.008 358.68 cv
281.008 359.879 281.16 360.778 281.467 361.378 cv
281.773 361.979 282.232 362.278 282.841 362.278 cv
283.455 362.278 283.915 361.979 284.221 361.378 cv
284.528 360.778 284.683 359.879 284.683 358.68 cv
284.683 357.477 284.528 356.575 284.221 355.977 cv
283.915 355.376 283.455 355.076 282.841 355.076 cv
f
348.563 350.139 mo
348.563 346.139 li
@
348.563 4.53906 mo
348.563 8.53906 li
@
339.646 362.05 mo
341.579 362.05 li
341.579 355.374 li
339.476 355.796 li
339.476 354.718 li
341.568 354.296 li
342.751 354.296 li
342.751 362.05 li
344.685 362.05 li
344.685 363.045 li
339.646 363.045 li
339.646 362.05 li
cp
f
348.095 362.05 mo
352.226 362.05 li
352.226 363.045 li
346.672 363.045 li
346.672 362.05 li
347.12 361.585 347.732 360.961 348.507 360.179 cv
349.284 359.395 349.771 358.889 349.97 358.661 cv
350.349 358.236 350.612 357.876 350.763 357.581 cv
350.914 357.286 350.989 356.996 350.989 356.711 cv
350.989 356.246 350.827 355.867 350.501 355.575 cv
350.175 355.281 349.749 355.135 349.226 355.135 cv
348.854 355.135 348.462 355.199 348.05 355.327 cv
347.639 355.456 347.198 355.652 346.729 355.914 cv
346.729 354.718 li
347.206 354.527 347.651 354.383 348.065 354.285 cv
348.479 354.188 348.859 354.139 349.203 354.139 cv
350.109 354.139 350.831 354.366 351.37 354.819 cv
351.909 355.272 352.179 355.877 352.179 356.635 cv
352.179 356.994 352.111 357.336 351.976 357.658 cv
351.843 357.979 351.597 358.358 351.241 358.796 cv
351.144 358.91 350.833 359.237 350.31 359.779 cv
349.786 360.32 349.049 361.077 348.095 362.05 cv
f
357.241 354.139 mo
358.222 354.139 358.972 354.527 359.489 355.304 cv
360.007 356.078 360.265 357.204 360.265 358.68 cv
360.265 360.152 360.007 361.277 359.489 362.054 cv
358.972 362.828 358.222 363.216 357.241 363.216 cv
356.261 363.216 355.513 362.828 354.995 362.054 cv
354.478 361.277 354.218 360.152 354.218 358.68 cv
354.218 357.204 354.478 356.078 354.995 355.304 cv
355.513 354.527 356.261 354.139 357.241 354.139 cv
357.241 355.076 mo
356.632 355.076 356.174 355.376 355.866 355.977 cv
355.56 356.575 355.407 357.477 355.407 358.68 cv
355.407 359.879 355.56 360.778 355.866 361.378 cv
356.174 361.979 356.632 362.278 357.241 362.278 cv
357.854 362.278 358.314 361.979 358.621 361.378 cv
358.929 360.778 359.082 359.879 359.082 358.68 cv
359.082 357.477 358.929 356.575 358.621 355.977 cv
358.314 355.376 357.854 355.076 357.241 355.076 cv
f
422.964 350.139 mo
422.964 346.139 li
@
422.964 4.53906 mo
422.964 8.53906 li
@
414.046 362.05 mo
415.979 362.05 li
415.979 355.374 li
413.876 355.796 li
413.876 354.718 li
415.968 354.296 li
417.151 354.296 li
417.151 362.05 li
419.085 362.05 li
419.085 363.045 li
414.046 363.045 li
414.046 362.05 li
cp
f
424.417 354.296 mo
425.905 354.296 li
425.905 359.998 li
427.154 359.998 li
427.154 360.982 li
425.905 360.982 li
425.905 363.045 li
424.728 363.045 li
424.728 360.982 li
420.779 360.982 li
420.779 359.841 li
424.417 354.296 li
cp
424.728 355.327 mo
421.739 359.998 li
424.728 359.998 li
424.728 355.327 li
cp
f
431.642 354.139 mo
432.622 354.139 433.372 354.527 433.89 355.304 cv
434.407 356.078 434.665 357.204 434.665 358.68 cv
434.665 360.152 434.407 361.277 433.89 362.054 cv
433.372 362.828 432.622 363.216 431.642 363.216 cv
430.661 363.216 429.912 362.828 429.395 362.054 cv
428.877 361.277 428.618 360.152 428.618 358.68 cv
428.618 357.204 428.877 356.078 429.395 355.304 cv
429.912 354.527 430.661 354.139 431.642 354.139 cv
431.642 355.076 mo
431.032 355.076 430.574 355.376 430.267 355.977 cv
429.96 356.575 429.808 357.477 429.808 358.68 cv
429.808 359.879 429.96 360.778 430.267 361.378 cv
430.574 361.979 431.032 362.278 431.642 362.278 cv
432.255 362.278 432.715 361.979 433.021 361.378 cv
433.329 360.778 433.481 359.879 433.481 358.68 cv
433.481 357.477 433.329 356.575 433.021 355.977 cv
432.715 355.376 432.255 355.076 431.642 355.076 cv
f
497.364 350.139 mo
497.364 346.139 li
@
497.364 4.53906 mo
497.364 8.53906 li
@
488.446 362.05 mo
490.38 362.05 li
490.38 355.374 li
488.276 355.796 li
488.276 354.718 li
490.368 354.296 li
491.552 354.296 li
491.552 362.05 li
493.484 362.05 li
493.484 363.045 li
488.446 363.045 li
488.446 362.05 li
cp
f
500.903 354.489 mo
500.903 355.567 li
500.606 355.428 500.306 355.32 500.003 355.247 cv
499.701 355.172 499.401 355.135 499.104 355.135 cv
498.322 355.135 497.726 355.398 497.313 355.926 cv
496.901 356.453 496.667 357.25 496.608 358.316 cv
496.838 357.977 497.127 357.716 497.474 357.534 cv
497.823 357.354 498.206 357.263 498.624 357.263 cv
499.503 357.263 500.196 357.529 500.706 358.063 cv
501.217 358.596 501.472 359.32 501.472 360.238 cv
501.472 361.137 501.206 361.858 500.675 362.402 cv
500.144 362.944 499.437 363.216 498.554 363.216 cv
497.542 363.216 496.769 362.828 496.233 362.054 cv
495.698 361.277 495.431 360.152 495.431 358.68 cv
495.431 357.298 495.759 356.195 496.415 355.373 cv
497.071 354.55 497.952 354.139 499.057 354.139 cv
499.354 354.139 499.654 354.168 499.956 354.227 cv
500.259 354.286 500.575 354.373 500.903 354.489 cv
498.554 358.2 mo
498.022 358.2 497.602 358.382 497.29 358.746 cv
496.98 359.108 496.825 359.605 496.825 360.238 cv
496.825 360.867 496.98 361.364 497.29 361.73 cv
497.602 362.096 498.022 362.278 498.554 362.278 cv
499.085 362.278 499.507 362.096 499.815 361.73 cv
500.126 361.364 500.281 360.867 500.281 360.238 cv
500.281 359.605 500.126 359.108 499.815 358.746 cv
499.507 358.382 499.085 358.2 498.554 358.2 cv
f
506.041 354.139 mo
507.022 354.139 507.771 354.527 508.289 355.304 cv
508.807 356.078 509.065 357.204 509.065 358.68 cv
509.065 360.152 508.807 361.277 508.289 362.054 cv
507.771 362.828 507.022 363.216 506.041 363.216 cv
505.062 363.216 504.312 362.828 503.794 362.054 cv
503.277 361.277 503.019 360.152 503.019 358.68 cv
503.019 357.204 503.277 356.078 503.794 355.304 cv
504.312 354.527 505.062 354.139 506.041 354.139 cv
506.041 355.076 mo
505.433 355.076 504.974 355.376 504.667 355.977 cv
504.36 356.575 504.207 357.477 504.207 358.68 cv
504.207 359.879 504.36 360.778 504.667 361.378 cv
504.974 361.979 505.433 362.278 506.041 362.278 cv
506.655 362.278 507.114 361.979 507.421 361.378 cv
507.729 360.778 507.882 359.879 507.882 358.68 cv
507.882 357.477 507.729 356.575 507.421 355.977 cv
507.114 355.376 506.655 355.076 506.041 355.076 cv
f
50.9639 350.139 mo
54.9639 350.139 li
@
497.364 350.139 mo
493.364 350.139 li
@
25.6367 345.6 mo
26.6182 345.6 27.3672 345.988 27.8848 346.765 cv
28.4023 347.539 28.6611 348.665 28.6611 350.141 cv
28.6611 351.613 28.4023 352.738 27.8848 353.515 cv
27.3672 354.289 26.6182 354.677 25.6367 354.677 cv
24.6572 354.677 23.9082 354.289 23.3906 353.515 cv
22.873 352.738 22.6143 351.613 22.6143 350.141 cv
22.6143 348.665 22.873 347.539 23.3906 346.765 cv
23.9082 345.988 24.6572 345.6 25.6367 345.6 cv
25.6367 346.537 mo
25.0283 346.537 24.5703 346.837 24.2627 347.438 cv
23.957 348.036 23.8027 348.938 23.8027 350.141 cv
23.8027 351.34 23.957 352.239 24.2627 352.839 cv
24.5703 353.439 25.0283 353.739 25.6367 353.739 cv
26.251 353.739 26.7109 353.439 27.0176 352.839 cv
27.3242 352.239 27.4785 351.34 27.4785 350.141 cv
27.4785 348.938 27.3242 348.036 27.0176 347.438 cv
26.7109 346.837 26.251 346.537 25.6367 346.537 cv
f
30.7402 353.018 mo
31.9785 353.018 li
31.9785 354.506 li
30.7402 354.506 li
30.7402 353.018 li
cp
f
37.0859 345.6 mo
38.0674 345.6 38.8164 345.988 39.334 346.765 cv
39.8516 347.539 40.1104 348.665 40.1104 350.141 cv
40.1104 351.613 39.8516 352.738 39.334 353.515 cv
38.8164 354.289 38.0674 354.677 37.0859 354.677 cv
36.1064 354.677 35.3574 354.289 34.8398 353.515 cv
34.3223 352.738 34.0635 351.613 34.0635 350.141 cv
34.0635 348.665 34.3223 347.539 34.8398 346.765 cv
35.3574 345.988 36.1064 345.6 37.0859 345.6 cv
37.0859 346.537 mo
36.4775 346.537 36.0195 346.837 35.7119 347.438 cv
35.4063 348.036 35.252 348.938 35.252 350.141 cv
35.252 351.34 35.4063 352.239 35.7119 352.839 cv
36.0195 353.439 36.4775 353.739 37.0859 353.739 cv
37.7002 353.739 38.1602 353.439 38.4668 352.839 cv
38.7734 352.239 38.9277 351.34 38.9277 350.141 cv
38.9277 348.938 38.7734 348.036 38.4668 347.438 cv
38.1602 346.837 37.7002 346.537 37.0859 346.537 cv
f
44.7207 345.6 mo
45.7021 345.6 46.4512 345.988 46.9688 346.765 cv
47.4863 347.539 47.7451 348.665 47.7451 350.141 cv
47.7451 351.613 47.4863 352.738 46.9688 353.515 cv
46.4512 354.289 45.7021 354.677 44.7207 354.677 cv
43.7412 354.677 42.9922 354.289 42.4746 353.515 cv
41.957 352.738 41.6982 351.613 41.6982 350.141 cv
41.6982 348.665 41.957 347.539 42.4746 346.765 cv
42.9922 345.988 43.7412 345.6 44.7207 345.6 cv
44.7207 346.537 mo
44.1123 346.537 43.6543 346.837 43.3467 347.438 cv
43.041 348.036 42.8867 348.938 42.8867 350.141 cv
42.8867 351.34 43.041 352.239 43.3467 352.839 cv
43.6543 353.439 44.1123 353.739 44.7207 353.739 cv
45.335 353.739 45.7949 353.439 46.1016 352.839 cv
46.4082 352.239 46.5625 351.34 46.5625 350.141 cv
46.5625 348.938 46.4082 348.036 46.1016 347.438 cv
45.7949 346.837 45.335 346.537 44.7207 346.537 cv
f
50.9639 281.019 mo
54.9639 281.019 li
@
497.364 281.019 mo
493.364 281.019 li
@
26.043 276.479 mo
27.0244 276.479 27.7734 276.868 28.291 277.645 cv
28.8086 278.419 29.0674 279.545 29.0674 281.021 cv
29.0674 282.493 28.8086 283.618 28.291 284.395 cv
27.7734 285.169 27.0244 285.557 26.043 285.557 cv
25.0635 285.557 24.3145 285.169 23.7969 284.395 cv
23.2793 283.618 23.0205 282.493 23.0205 281.021 cv
23.0205 279.545 23.2793 278.419 23.7969 277.645 cv
24.3145 276.868 25.0635 276.479 26.043 276.479 cv
26.043 277.417 mo
25.4346 277.417 24.9766 277.718 24.6689 278.317 cv
24.3633 278.916 24.209 279.817 24.209 281.021 cv
24.209 282.22 24.3633 283.119 24.6689 283.719 cv
24.9766 284.319 25.4346 284.619 26.043 284.619 cv
26.6572 284.619 27.1172 284.319 27.4238 283.719 cv
27.7305 283.119 27.8848 282.22 27.8848 281.021 cv
27.8848 279.817 27.7305 278.916 27.4238 278.317 cv
27.1172 277.718 26.6572 277.417 26.043 277.417 cv
f
31.1465 283.897 mo
32.3848 283.897 li
32.3848 285.386 li
31.1465 285.386 li
31.1465 283.897 li
cp
f
37.4922 276.479 mo
38.4736 276.479 39.2227 276.868 39.7402 277.645 cv
40.2578 278.419 40.5166 279.545 40.5166 281.021 cv
40.5166 282.493 40.2578 283.618 39.7402 284.395 cv
39.2227 285.169 38.4736 285.557 37.4922 285.557 cv
36.5127 285.557 35.7637 285.169 35.2461 284.395 cv
34.7285 283.618 34.4697 282.493 34.4697 281.021 cv
34.4697 279.545 34.7285 278.419 35.2461 277.645 cv
35.7637 276.868 36.5127 276.479 37.4922 276.479 cv
37.4922 277.417 mo
36.8838 277.417 36.4258 277.718 36.1182 278.317 cv
35.8125 278.916 35.6582 279.817 35.6582 281.021 cv
35.6582 282.22 35.8125 283.119 36.1182 283.719 cv
36.4258 284.319 36.8838 284.619 37.4922 284.619 cv
38.1064 284.619 38.5664 284.319 38.873 283.719 cv
39.1797 283.119 39.334 282.22 39.334 281.021 cv
39.334 279.817 39.1797 278.916 38.873 278.317 cv
38.5664 277.718 38.1064 277.417 37.4922 277.417 cv
f
43.6162 284.391 mo
47.7461 284.391 li
47.7461 285.386 li
42.1934 285.386 li
42.1934 284.391 li
42.6416 283.926 43.2539 283.302 44.0283 282.52 cv
44.8047 281.735 45.292 281.229 45.4912 281.002 cv
45.8691 280.577 46.1348 280.218 46.2842 279.922 cv
46.4355 279.627 46.5107 279.337 46.5107 279.053 cv
46.5107 278.587 46.3477 278.209 46.0215 277.916 cv
45.6953 277.622 45.2705 277.476 44.7461 277.476 cv
44.375 277.476 43.9834 277.54 43.5703 277.669 cv
43.1602 277.797 42.7197 277.993 42.251 278.256 cv
42.251 277.06 li
42.7266 276.868 43.1719 276.724 43.5859 276.626 cv
44.001 276.528 44.3809 276.479 44.7246 276.479 cv
45.6309 276.479 46.3535 276.707 46.8916 277.16 cv
47.4297 277.613 47.6992 278.218 47.6992 278.976 cv
47.6992 279.335 47.6328 279.677 47.4971 279.999 cv
47.3633 280.32 47.1191 280.7 46.7617 281.138 cv
46.6641 281.251 46.3535 281.578 45.8301 282.12 cv
45.3076 282.661 44.5703 283.418 43.6162 284.391 cv
f
50.9639 211.899 mo
54.9639 211.899 li
@
497.364 211.899 mo
493.364 211.899 li
@
25.5117 207.36 mo
26.4932 207.36 27.2422 207.748 27.7598 208.524 cv
28.2773 209.3 28.5361 210.425 28.5361 211.901 cv
28.5361 213.374 28.2773 214.498 27.7598 215.274 cv
27.2422 216.05 26.4932 216.437 25.5117 216.437 cv
24.5322 216.437 23.7832 216.05 23.2656 215.274 cv
22.748 214.498 22.4893 213.374 22.4893 211.901 cv
22.4893 210.425 22.748 209.3 23.2656 208.524 cv
23.7832 207.748 24.5322 207.36 25.5117 207.36 cv
25.5117 208.298 mo
24.9033 208.298 24.4453 208.597 24.1377 209.197 cv
23.832 209.796 23.6777 210.697 23.6777 211.901 cv
23.6777 213.1 23.832 213.999 24.1377 214.599 cv
24.4453 215.199 24.9033 215.499 25.5117 215.499 cv
26.126 215.499 26.5859 215.199 26.8926 214.599 cv
27.1992 213.999 27.3535 213.1 27.3535 211.901 cv
27.3535 210.697 27.1992 209.796 26.8926 209.197 cv
26.5859 208.597 26.126 208.298 25.5117 208.298 cv
f
30.6152 214.777 mo
31.8535 214.777 li
31.8535 216.267 li
30.6152 216.267 li
30.6152 214.777 li
cp
f
36.9609 207.36 mo
37.9424 207.36 38.6914 207.748 39.209 208.524 cv
39.7266 209.3 39.9854 210.425 39.9854 211.901 cv
39.9854 213.374 39.7266 214.498 39.209 215.274 cv
38.6914 216.05 37.9424 216.437 36.9609 216.437 cv
35.9814 216.437 35.2324 216.05 34.7148 215.274 cv
34.1973 214.498 33.9385 213.374 33.9385 211.901 cv
33.9385 210.425 34.1973 209.3 34.7148 208.524 cv
35.2324 207.748 35.9814 207.36 36.9609 207.36 cv
36.9609 208.298 mo
36.3525 208.298 35.8945 208.597 35.5869 209.197 cv
35.2813 209.796 35.127 210.697 35.127 211.901 cv
35.127 213.1 35.2813 213.999 35.5869 214.599 cv
35.8945 215.199 36.3525 215.499 36.9609 215.499 cv
37.5752 215.499 38.0352 215.199 38.3418 214.599 cv
38.6484 213.999 38.8027 213.1 38.8027 211.901 cv
38.8027 210.697 38.6484 209.796 38.3418 209.197 cv
38.0352 208.597 37.5752 208.298 36.9609 208.298 cv
f
45.0068 207.517 mo
46.4951 207.517 li
46.4951 213.22 li
47.7441 213.22 li
47.7441 214.204 li
46.4951 214.204 li
46.4951 216.267 li
45.3184 216.267 li
45.3184 214.204 li
41.3691 214.204 li
41.3691 213.062 li
45.0068 207.517 li
cp
45.3184 208.548 mo
42.3291 213.22 li
45.3184 213.22 li
45.3184 208.548 li
cp
f
50.9639 142.778 mo
54.9639 142.778 li
@
497.364 142.778 mo
493.364 142.778 li
@
25.6055 138.239 mo
26.5869 138.239 27.3359 138.628 27.8535 139.404 cv
28.3711 140.179 28.6299 141.305 28.6299 142.781 cv
28.6299 144.253 28.3711 145.378 27.8535 146.154 cv
27.3359 146.929 26.5869 147.317 25.6055 147.317 cv
24.626 147.317 23.877 146.929 23.3594 146.154 cv
22.8418 145.378 22.583 144.253 22.583 142.781 cv
22.583 141.305 22.8418 140.179 23.3594 139.404 cv
23.877 138.628 24.626 138.239 25.6055 138.239 cv
25.6055 139.177 mo
24.9971 139.177 24.5391 139.478 24.2314 140.077 cv
23.9258 140.677 23.7715 141.577 23.7715 142.781 cv
23.7715 143.979 23.9258 144.88 24.2314 145.479 cv
24.5391 146.079 24.9971 146.38 25.6055 146.38 cv
26.2197 146.38 26.6797 146.079 26.9863 145.479 cv
27.293 144.88 27.4473 143.979 27.4473 142.781 cv
27.4473 141.577 27.293 140.677 26.9863 140.077 cv
26.6797 139.478 26.2197 139.177 25.6055 139.177 cv
f
30.709 145.657 mo
31.9473 145.657 li
31.9473 147.146 li
30.709 147.146 li
30.709 145.657 li
cp
f
37.0547 138.239 mo
38.0361 138.239 38.7852 138.628 39.3027 139.404 cv
39.8203 140.179 40.0791 141.305 40.0791 142.781 cv
40.0791 144.253 39.8203 145.378 39.3027 146.154 cv
38.7852 146.929 38.0361 147.317 37.0547 147.317 cv
36.0752 147.317 35.3262 146.929 34.8086 146.154 cv
34.291 145.378 34.0322 144.253 34.0322 142.781 cv
34.0322 141.305 34.291 140.179 34.8086 139.404 cv
35.3262 138.628 36.0752 138.239 37.0547 138.239 cv
37.0547 139.177 mo
36.4463 139.177 35.9883 139.478 35.6807 140.077 cv
35.375 140.677 35.2207 141.577 35.2207 142.781 cv
35.2207 143.979 35.375 144.88 35.6807 145.479 cv
35.9883 146.079 36.4463 146.38 37.0547 146.38 cv
37.6689 146.38 38.1289 146.079 38.4355 145.479 cv
38.7422 144.88 38.8965 143.979 38.8965 142.781 cv
38.8965 141.577 38.7422 140.677 38.4355 140.077 cv
38.1289 139.478 37.6689 139.177 37.0547 139.177 cv
f
47.1875 138.591 mo
47.1875 139.669 li
46.8896 139.528 46.5898 139.422 46.2871 139.349 cv
45.9844 139.272 45.6846 139.235 45.3867 139.235 cv
44.6055 139.235 44.0098 139.499 43.5967 140.026 cv
43.1855 140.554 42.9502 141.351 42.8916 142.417 cv
43.1211 142.077 43.4102 141.817 43.7578 141.636 cv
44.1064 141.454 44.4902 141.364 44.9072 141.364 cv
45.7861 141.364 46.4805 141.63 46.9902 142.164 cv
47.5 142.696 47.7559 143.422 47.7559 144.339 cv
47.7559 145.237 47.4902 145.959 46.959 146.503 cv
46.4277 147.046 45.7207 147.317 44.8379 147.317 cv
43.8252 147.317 43.0518 146.929 42.5166 146.154 cv
41.9814 145.378 41.7139 144.253 41.7139 142.781 cv
41.7139 141.398 42.042 140.296 42.6982 139.474 cv
43.3545 138.651 44.2354 138.239 45.3398 138.239 cv
45.6377 138.239 45.9375 138.269 46.2402 138.328 cv
46.543 138.387 46.8584 138.474 47.1875 138.591 cv
44.8379 142.302 mo
44.3066 142.302 43.8848 142.483 43.5742 142.847 cv
43.2637 143.209 43.1094 143.706 43.1094 144.339 cv
43.1094 144.968 43.2637 145.466 43.5742 145.831 cv
43.8848 146.196 44.3066 146.38 44.8379 146.38 cv
45.3691 146.38 45.7891 146.196 46.0996 145.831 cv
46.4102 145.466 46.5645 144.968 46.5645 144.339 cv
46.5645 143.706 46.4102 143.209 46.0996 142.847 cv
45.7891 142.483 45.3691 142.302 44.8379 142.302 cv
f
50.9639 73.6587 mo
54.9639 73.6587 li
@
497.364 73.6587 mo
493.364 73.6587 li
@
25.668 69.1196 mo
26.6494 69.1196 27.3984 69.5078 27.916 70.2842 cv
28.4336 71.0591 28.6924 72.1846 28.6924 73.6611 cv
28.6924 75.1338 28.4336 76.2578 27.916 77.0342 cv
27.3984 77.8091 26.6494 78.1968 25.668 78.1968 cv
24.6885 78.1968 23.9395 77.8091 23.4219 77.0342 cv
22.9043 76.2578 22.6455 75.1338 22.6455 73.6611 cv
22.6455 72.1846 22.9043 71.0591 23.4219 70.2842 cv
23.9395 69.5078 24.6885 69.1196 25.668 69.1196 cv
25.668 70.0571 mo
25.0596 70.0571 24.6016 70.3574 24.2939 70.9575 cv
23.9883 71.5562 23.834 72.4575 23.834 73.6611 cv
23.834 74.8599 23.9883 75.7593 24.2939 76.3594 cv
24.6016 76.959 25.0596 77.2593 25.668 77.2593 cv
26.2822 77.2593 26.7422 76.959 27.0488 76.3594 cv
27.3555 75.7593 27.5098 74.8599 27.5098 73.6611 cv
27.5098 72.4575 27.3555 71.5562 27.0488 70.9575 cv
26.7422 70.3574 26.2822 70.0571 25.668 70.0571 cv
f
30.7715 76.5371 mo
32.0098 76.5371 li
32.0098 78.0259 li
30.7715 78.0259 li
30.7715 76.5371 li
cp
f
37.1172 69.1196 mo
38.0986 69.1196 38.8477 69.5078 39.3652 70.2842 cv
39.8828 71.0591 40.1416 72.1846 40.1416 73.6611 cv
40.1416 75.1338 39.8828 76.2578 39.3652 77.0342 cv
38.8477 77.8091 38.0986 78.1968 37.1172 78.1968 cv
36.1377 78.1968 35.3887 77.8091 34.8711 77.0342 cv
34.3535 76.2578 34.0947 75.1338 34.0947 73.6611 cv
34.0947 72.1846 34.3535 71.0591 34.8711 70.2842 cv
35.3887 69.5078 36.1377 69.1196 37.1172 69.1196 cv
37.1172 70.0571 mo
36.5088 70.0571 36.0508 70.3574 35.7432 70.9575 cv
35.4375 71.5562 35.2832 72.4575 35.2832 73.6611 cv
35.2832 74.8599 35.4375 75.7593 35.7432 76.3594 cv
36.0508 76.959 36.5088 77.2593 37.1172 77.2593 cv
37.7314 77.2593 38.1914 76.959 38.498 76.3594 cv
38.8047 75.7593 38.959 74.8599 38.959 73.6611 cv
38.959 72.4575 38.8047 71.5562 38.498 70.9575 cv
38.1914 70.3574 37.7314 70.0571 37.1172 70.0571 cv
f
43.1357 71.499 mo
43.1357 71.9517 43.2773 72.3047 43.5596 72.5586 cv
43.8438 72.8125 44.2412 72.939 44.752 72.939 cv
45.2607 72.939 45.6582 72.8125 45.9453 72.5586 cv
46.2324 72.3047 46.376 71.9517 46.376 71.499 cv
46.376 71.0454 46.2324 70.6919 45.9453 70.438 cv
45.6582 70.1841 45.2607 70.0571 44.752 70.0571 cv
44.2412 70.0571 43.8438 70.1841 43.5596 70.438 cv
43.2773 70.6919 43.1357 71.0454 43.1357 71.499 cv
43.5693 73.3687 mo
43.0615 73.2437 42.666 73.0073 42.3828 72.6597 cv
42.0996 72.311 41.959 71.8867 41.959 71.3867 cv
41.959 70.688 42.207 70.1353 42.7051 69.729 cv
43.2031 69.3228 43.8857 69.1196 44.752 69.1196 cv
45.623 69.1196 46.3066 69.3228 46.8037 69.729 cv
47.2998 70.1353 47.5479 70.688 47.5479 71.3867 cv
47.5479 71.8867 47.4063 72.311 47.1221 72.6597 cv
46.8398 73.0073 46.4473 73.2437 45.9434 73.3687 cv
46.5127 73.501 46.957 73.7612 47.2734 74.1484 cv
47.5928 74.5347 47.752 75.0068 47.752 75.564 cv
47.752 76.4131 47.4941 77.064 46.9766 77.5181 cv
46.459 77.9702 45.7168 78.1968 44.752 78.1968 cv
43.7891 78.1968 43.0469 77.9702 42.5283 77.5181 cv
42.0107 77.064 41.752 76.4131 41.752 75.564 cv
41.752 75.0068 41.9121 74.5347 42.2324 74.1484 cv
42.5537 73.7612 42.999 73.501 43.5693 73.3687 cv
44.752 73.8711 mo
44.1895 73.8711 43.7471 74.0215 43.4248 74.3228 cv
43.1035 74.624 42.9434 75.0381 42.9434 75.564 cv
42.9434 76.0918 43.1035 76.5059 43.4248 76.8071 cv
43.7471 77.1084 44.1895 77.2593 44.752 77.2593 cv
45.3145 77.2593 45.7578 77.1079 46.082 76.8057 cv
46.4063 76.5015 46.5693 76.0879 46.5693 75.564 cv
46.5693 75.0381 46.4082 74.624 46.0859 74.3228 cv
45.7637 74.0215 45.3203 73.8711 44.752 73.8711 cv
f
50.9639 4.53906 mo
54.9639 4.53906 li
@
497.364 4.53906 mo
493.364 4.53906 li
@
25.6367 0 mo
26.6182 0 27.3672 0.387695 27.8848 1.16406 cv
28.4023 1.93945 28.6611 3.06494 28.6611 4.54102 cv
28.6611 6.01367 28.4023 7.1377 27.8848 7.91406 cv
27.3672 8.68945 26.6182 9.07666 25.6367 9.07666 cv
24.6572 9.07666 23.9082 8.68945 23.3906 7.91406 cv
22.873 7.1377 22.6143 6.01367 22.6143 4.54102 cv
22.6143 3.06494 22.873 1.93945 23.3906 1.16406 cv
23.9082 0.387695 24.6572 0 25.6367 0 cv
25.6367 0.9375 mo
25.0283 0.9375 24.5703 1.2373 24.2627 1.8374 cv
23.957 2.43604 23.8027 3.3374 23.8027 4.54102 cv
23.8027 5.73975 23.957 6.63916 24.2627 7.23926 cv
24.5703 7.83936 25.0283 8.13916 25.6367 8.13916 cv
26.251 8.13916 26.7109 7.83936 27.0176 7.23926 cv
27.3242 6.63916 27.4785 5.73975 27.4785 4.54102 cv
27.4785 3.3374 27.3242 2.43604 27.0176 1.8374 cv
26.7109 1.2373 26.251 0.9375 25.6367 0.9375 cv
f
30.7402 7.41748 mo
31.9785 7.41748 li
31.9785 8.90625 li
30.7402 8.90625 li
30.7402 7.41748 li
cp
f
34.7617 7.91064 mo
36.6943 7.91064 li
36.6943 1.23535 li
34.5908 1.65723 li
34.5908 0.579102 li
36.6836 0.157227 li
37.8662 0.157227 li
37.8662 7.91064 li
39.7988 7.91064 li
39.7988 8.90625 li
34.7617 8.90625 li
34.7617 7.91064 li
cp
f
44.7207 0 mo
45.7021 0 46.4512 0.387695 46.9688 1.16406 cv
47.4863 1.93945 47.7451 3.06494 47.7451 4.54102 cv
47.7451 6.01367 47.4863 7.1377 46.9688 7.91406 cv
46.4512 8.68945 45.7021 9.07666 44.7207 9.07666 cv
43.7412 9.07666 42.9922 8.68945 42.4746 7.91406 cv
41.957 7.1377 41.6982 6.01367 41.6982 4.54102 cv
41.6982 3.06494 41.957 1.93945 42.4746 1.16406 cv
42.9922 0.387695 43.7412 0 44.7207 0 cv
44.7207 0.9375 mo
44.1123 0.9375 43.6543 1.2373 43.3467 1.8374 cv
43.041 2.43604 42.8867 3.3374 42.8867 4.54102 cv
42.8867 5.73975 43.041 6.63916 43.3467 7.23926 cv
43.6543 7.83936 44.1123 8.13916 44.7207 8.13916 cv
45.335 8.13916 45.7949 7.83936 46.1016 7.23926 cv
46.4082 6.63916 46.5625 5.73975 46.5625 4.54102 cv
46.5625 3.3374 46.4082 2.43604 46.1016 1.8374 cv
45.7949 1.2373 45.335 0.9375 44.7207 0.9375 cv
f
1 lw
2 lc
50.9639 350.139 mo
497.364 350.139 li
497.364 4.53906 li
50.9639 4.53906 li
50.9639 350.139 li
@
%ADOBeginSubsetFont: ComicSansMS AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.systemdict beginPESGSJ+ComicSansMS dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/l <1C60D8A8C9B8581A5C985F5B74008F0E2CA964639DBBD35F5DD00E39B9E95E3CD2193CB410613D02E647955F9BDFF4F3308822726BABA78ABE406A4F243D0D7526BB93B898D78CB4E4A407748C335667C85BC7C5DB0D0060EEAC> |-/s <1C60D8A8C9B7544E0B2F4A61F93D1126BE4C1AB23A9BC15E8D4F67C7217D859EAD9231FE71D3434A8F690FE356BFC6DC5BE77A03DE604D8B1C950D5ABF263BD11471F4641C413AA949D9FA9D14073F73C97069B262302E724A697D3CA7C59E77556DAF46750C504A58130B4D898FE3BF71EC7F017C1E1F27AB7041A63DDE724A2C84E3A413C54A5DDF57F8C9D27A1E3CFE7B403B1328B029B85307F57108ADCCE743F949020583B39DD4E46122F513D45ADF2471EB3FC18875B6CA7F87645D6D9F43435BEAAB1F189966F0EC695829B6348DF5F29560E30CB97F829CCD3E61BBBAB11852283FEDA3181F7D> |-/w <1C60D8A8C9B6218487477493A6ED6FC49ADE7DB5A336FA1EBC5DDDBD48D99F5928C02BD528261F4B15A41301EAC0B328314A22E884D6FD1C59CA5497BCB2DD47D888224B9D6A58A779C950597CDE4E747B3963BC377CAE93AA58AA7115E69CE989D76E37B26207B544A0ED52C2A2EC01472B28F0E832B7D16EADBE6104D00877050F8D30EEE2CBA8A97FB7E3C2997DC2B38AE56987D1577B31463680DA7FF636A537A36637C58577517E9D0FA948B1552DF9E47467B7AAFAD757883931987E128011F634BAAAA9FF3D857B1ABD99308B07> |-systemdict /gcheck known {setglobal} if end {end} ifendPESGSJ+ComicSansMS /Encoding getdup 108 /l putdup 115 /s putdup 119 /w putpop%ADOEndSubsetFont
/PESGSJ+ComicSansMS*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 26{/.notdef}rp /D /E 4{/.notdef}rp /J 22{/.notdef}rp /a 3{/.notdef}rp /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n 3{/.notdef}rp /r /s /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]PESGSJ+ComicSansMS nfPESGSJ+ComicSansMS*1 [14 0 0 -14 0 0 ]msf357.08 153.296 mo(self)[6.81543 7.66992 3.83496 0 ]xsh387.08 307.296 mo(wall)[9.57715 7.16406 3.83496 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PESGSJ+ComicSansMS*1 uf/PESGSJ+ComicSansMS uf/ComicSansMS ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Lisa Tauxe) ()%%Title: (energies.eps)%%CreationDate: 1/4/09 9:53 PM%AI9_DataStream%Gb!Q;ksFs`ddFXHmQjf!RDM(d,_U[R!eQ"+,""V[8VXY)g-<ljT<@TU5SCs'T"Vnb[9f)ndp66b<F&m9:WHpQVQ3:,3#OF!^Z/t@%0QlLcqTm"jl7D"WQn4QYn<%'oQLTWUi@ku<"=YgF((SAITr9%r&bbu$YqUK_ST\(EI^1NNVd4bV85Db)q'(9Rrhhn>/%,]H:AaC3%+-!/t3b(YHmZ6?>DE:oedHPo.XgTU8@T@ES\sgl56b]I!LqX8)\D`8,VXneSGo#pHE%TGRNB]!kX7-,cRp<[sF@WAQ?Ui<3]t6#1%]mq&a(B1qg0:/WXW!sh`5$`QH=*>m=7X62o)!+9&_i\Udi5:%@TkG/=&Yj`YYj]g8p;dc!MrhUb*)7kU#ALWdO(Y6]P/k4'bjpG4%!`TFhjhHM4W%WhaIeZ,?M0YhX=R7RQ,CbeQ18jr_LA\gGLqVX'A3!qCOcGc`?,@M+^8qhENHjBVW9@C:k9lT<=!N1n1`6?VnYI(J%XuPh=,M[Y)@;aR!G#7ruTC<fu7gdc"o)ZToZ8*H&TY'a#-mdYp=H*^UJ,&h+W%HRMc1jkIqM`O=qiN:\6W$f/P+BBk,SW<2LN1l'%1F.jR2'6^5+9imBLW*F_:<R=p9(V"L3/JmM%"s#%0T8CJi:D`FY\*(9Sij"bs&kS6i3%=!MLRAN+/'HmI(A;c!qea,.p\D*TdUG6%]h#3t[2O69m3-Gn+$GO9c_?4L#0FZ6D(jZ6ZZ+8-50NJGT/$?s6.dUX'*uBd3"2Fa(jr40img9oIKopn2\:MOJH37(EUYf1.NF1@%i@oXHRM^ZQ-l!55S60DT#%_6u-khMikeM*b'oP@,p^99Z<&tJbdV3q]SVB5j1mHrY\BAmN0KdU"E1c131PB4(0;40.8FF?Yir)-X%A:[N)"attu-j>#3HV3]lO5L\o5`ah:qCQ`>4:?Rh:\Y,WJkr>%n;5X'4b?Jn2uJE2cmNLjE0IX>V4_2b$"Z(+Y)20@PS5)O/eTeQ%-[CmIS5<!p-a]#eJT>ah`"M,98jWL8'5A^98:""uOV*6':^[%HN\KE!Go$5]TC<;98&cW7$0?+05+r\_%mJ)`&h+uO-1+'XU'q%`%UATgW7d)(%LJieD,%!me$2$PDTo69NC)4jJPRr>;%.m;Z9^!KZ9mTP%6N>sW8eLlRrXk``BAjNH5jqA^;6iXH+e0c/&EssA=HjOt%g442f.7=q>]b&5Kn=<BG\5(a(HiqO1&J=n0BSTJpl_J^p4Ln7:#j"H1M):DN-bLT[E;540YH7-P)3[M=<`uas50:*+Ug'(1=oR>n%=b]==QUb3>Z9/U^OiU+=>3:Q1X%9GH/ub1"l17dI#C[>ekS&FCIW@sX9n%[[nm25hIS?&(Lg6'lPFkC!I$]>HT4jI:O%.*sUV[O9%P<8>Ro#!0B]DS/rQn0d]Y/nB":F8HCbJ2.0-2eC%%V#a9A6d6#nJh:`qWABdK-?8O66&Kc6[h'g7jBS_"lK"QTkS73M>n/`ZW'WO%GPD^EWiX9um=4W4G[J.;hEUPp6iPKS"$!)Ne[E@M-5=Ara*`t/!nY:?a"]-d#VM7u3-Z?I:W%=b6d!4ci<]_E$'QatB>j+M)Y@.n%.F@8YBkcm))EjK`dmR*cT,!tl#=R6F4GS6FV@bDs*T5XTRh8=+,MuQb)\M:BWN^UXl&trqH6UVlqiS!n_n_a`E;cA%GrUVO%5MW$%a5pr$R!XE9b5K7@&)qnLFH%&^)Bf_$c[rNU]V9EIM0<(Mmg,/0&u6e8D,f5M\]`'j$!e,[$^M,4=VJr_R*U`6pedF1ct7U;:RH0p%cmoiV5oh;I]5\Y@%,p^l>0UlDHmg5Jl(cg"*ps<>`_n;7(.sLmOsekQ9k3UF@D%"PQ"Pr$ZTeE?PCeIOH_=jf:WC>Eq>smI`WU^!%I6fXFCH[YL4Uhc^'l?uBGWnH)*S2?qA.APM9*&*</<L`h"eH6^ROuX_0<BP)Zu9p&++_0nIXabMSR>X.'h"pT9pKrB+jZ?uaB_BL%'fICpCA16r&Weo<M=BjP`4_.mEZ><['Bp9C;g=2@0tQ\'rgPH`A7A1-"hGDZ"t^tRKp&fJP/oY2'/^0h2'CV/os/+WON/O*a8I@_%:CB8ob4>tC$Yoe*EI*%\":^W<*_&RHaf^t`*\6Km-'>!4DIo&DU#.P58h1$,,IZ%@a^rS=M\72`b_d%tVq11QrK_+S=b;TGDu@=l%C1Y]N)B#MD;0OuT)b?2#g^MV/NBpDC81Bsr_&,:ol3iNHPk$H\D0\#G7W@[l#/<8>#c0ug^p8`;8s&JF6uQ0Va^bh<Bi0oo)'nU&%Uo,D/M'6%jC65M!-hIS68`OI7Ad"gI!4Eh[eGQTEGmlnV&7rgVY<Rs5q*g_DM_^]O[deF'?niMgmWtpb%+[c'm[E5`:W$J3QR_\d%^^thr1^>FoVhr?"aoX%N2BZ/?5X=FF@:"^Q#:0=Kg$_0oUg9o^"91d86fqYsKPO11qN6U=T_,*',$JNM#:RJP7H91rj*u/?kpZmY%/CYigJj:i`4!9M_-5o9JA,=d=r.q;6`:AbNM,9UP&F\&!1h9/7f(g]i"iN$G9bh1YO!WuuVBLVb#PuDGZS:F%P+oW(B*7+<<mc\q%UAYM*pIalM)8+foQCR^dJfR.*VPBMk;2)-<`X[;``e;RnJu(e5EgY%aNA:'hZ"A]X2(ai41l-8_;arkg@Z>b$DG/iZ-XrPH9q\0t%;0$ViL0,R-=,@YsY7"8rj<G,"$-sMuOa:09']l*c/n4e?g6A2+&'otaicmZ&4I9UtH5G6'@5-=&3.[(rZarrpM`A`\6JJ%"iDhpb%15Mc3oXclaS<7e!d$m2m7E>lGPcjh=),[G&)%1DQA*s_f4sI-Q4"#=!jK?9[,-/X3/)(7-%adq5=V/)2<XNSYPP0VYr[T;g)gKB>%Ik`9Ej3^b>=:k6Jg@Y;r3KuXs%`XSUKos?7KP@(:;.Pp!KJm@)&dGMd52$gJiKK9g&"p+7ECD,Jq1K)SX,lt2QB,^Xg-;F3V=dWS%M0Ant/%=?COkR`/g6@M=;s_3-(+1miGgPH],_3R+R%m*NKr#taCnKVn804STT$(/sX?=R]=EoE4B6WGPZI4>Nn-lu''Mq57K[aak%N8",Pd!'/-Q63Y=iX1Lk-W2:pm0F`,k93"-LihQ&"HQII2rV4#:U9[A*0U2ln9eBU/&>^moTG5l4D/?s]p008dZ35f@@`MG^ljUW%j.pP?)t:2,%ah/2I"[c8]YXqEM8or&&[$u'&cF?A)%'Pu>D`]e@jXGtdup-k@&J\UQ(F"E?Y^hQTp4`hd<%YA8Uob^<IVKIRGLVg%R.ke^?1Np4A2*#h@U\_5hYrFgh&%g$)tJ&lBAo]MkdEG+ja4nmW9qj:];m7HI96tL4l0BUMj_4RdM$IqUlB0][_'G&G;\fLpqOLZ%\I<btN@XITQ1OcBPF!YXnqoq_l-UZRIRqTi'kN+tR0g%QjIMI>;c7e=-p*^::'i@";KP?bY2l<(mn,(aCC^XIgtP1!o";Giq!D?<%q=t;BZ/E6uPNV>77O*BHS[IXrJ_?A+4Y^hMHCYZ-dN!1FU=sqMmWA0KHoUn)HC+5HNutjo5@-[/e=:/,?2"'-Qd0hKMc"ikAWe[j%7]XLQ3*F@W`8CUa'CU1RH.fQ):Ad8Gp\I"PC,k22mr<^%?&dd#=J1YV$a'H3p]YcF2uV@HbQ$B=[E&&<,[J<*H\<H%T'DB6BQ1H&%(p)(\oAf(U`:oVh2o5lM1`FZ4kDNKTbBmqY(pkE%_QSoB$8OC$+d0M9)#qI)N*)#h'u,hknMg8)\_%l#2$<rBQmVA$7Ja&LDj(dX%XQEGT.Fo2iDYsrFBCbbOW5F43TU*8IeBYE+!eSHrf!A+u_+Opj0<"+*CV![l&M\QFKns=TJ($e@1(nRE_O<Q,rD"fEG>b+r;Q)tj%Pn`nJr@X3F:SbpmZC3.]Ws9lW=:Dm#Vo_2_gYFm2qj]%Qg0Lck7&>`0S%N+/ae1e(NCWBd''\@s_Z+kmD=j?tQGM>)TmWoL=H3.O%f`SfW2X.K7b"TBFaJ+K_[1mloCH2fA?KEcBZ5D83YJ$)+OUW#*40-V-I-mODDgM#/I=`r@q'#hm@L<(HC6-`.Y]i(k,F)C1UJNdT%""o,j,i=?-KeFc[e-Gi)oR/`9O*\]mhi%=e``W`,fmMLXFceNuU)KA+f22.fR("p7#OO=20,F+&jTjU%o>Mp1p'a+R[m3A5l=Ke=%Z@1m0"U0HGMY:t;1>pLV5mds[O9i=qs,9%g;9MU]YOt"G=P6$B/Yd<:9mG.)%.6Mfjj=Fkb0Hocg"iGg2;.6N[)8N$gWQcVAq\ZL%iA_LROfrEY$$<R/r/2rS4RM+OTj(l@%LEo'ZVos*)+aD(E'aK(\f*3sh%`r%OB4,#A*0i2f3)rO*D,n*hic%p0&s!/rkG4f14EV/%RLi54[j2[?Cl+`:s6EiSV6sMm2uf@_:Ue_^K4jCV=02Lgqbg)JhB%YrU\:4ET>t<XhZh"3C\D^%QDIGuV$rZf46!=@+O=N0]/GuD%:Zl3kg[Nb;j=bs=SLKAZY+V3IXPTPpoW!XS65Hn_1^*-Nbf8ml#5N4NeZ\\*a5ekf3*`b(5`A5#8UGo@Y=hlIq*FS0m+JsA,1iV_%6X]VQVU+Y\[u#Gr&0lBA<G_IARN>/Zq[%:un<^I@lGI-n3K(lsBASF;Qp5Y[][bsX)/ZVYF]L78aG_>Z^!Sa[M.DTqd$Hlkiu;;#%f3.UEGkT^ac?e\hit7Vn+E)l$-t,/('1j;EhB;7r?#?c7bGIIS;@XZDLT,ORK50*oeNOGB0r*.;aDB]n<ol5[_9kjV)D-/l;nJHM%LqDL<[qR?OZ.q4%)2Sj.\UB.-J>uNX_,`L7JO?6]8!.#o7R/j28%=L-g:4(Y\Nm3_/4im1/[+pi8HsP]@e[Aqrs+%_^D2m[[i1m\%=cFP+eKm2.89OBK^,)_i]EUM4;?`3--mOM4?_2f_3fk1rf,b3iGoq=m(>3?f?B:>EcFaRk^1VVrB)1,ie4.H?>`/=&]Q^;GHZ(h7%O@qmu8p<=bP:Hq^n;L[*Ve;'-=J--'c#;*f\8jJp->\.>(lhZB/.&,.:T+aq+C!Wh[cb?1/nBYCI;'B'&(;T'au7c?hda$6lLAc1%N;9]1*-$OM[.^*#8Z=p[`<kg2Pj3^k"i?cGfH]ro]F,h)IqAb3mFKCRoiHLS819-[=nJokBI/sulO/\m'1m?M8eu4"reGM!bojY"%`f-eN+22B@1LeH>$0Ir[l3qZi][&k#ODl=`5to2ar[CL4B_[YLKMRpJLAF,NG=K4W_;@8Qs-"-[rg.%nLSFfWM2(G@=,Z0^r1CB-%IngL6M`*PMi!geD1FeE7>V?X?s$`a]DpZp$s'PfFZgiNI%2P^IpOBb+%R^Dj#f)2uT3A;!?Ta"NN=<'onipoC6WD8sKgW[^rVG-M%\,8#0/YV*P[T=)pE(@,22Pc92n_T']a;qtia%1.Jq2b8>>TRX&UGH1"Q_;.gQNV5>UfZ<sr"i',f^;b;X*L&P!8%8Gr/YHhs"k$l%IbF-4GN`-i@Rnjdd1ZR37\i[S==qt,/k]2nP\Vr*C%i+G1@Nj!^8iT';TZe_gE+049NbD!TE_P3[(6u\nbLHuim*::.0+kD3j@"b%2iR6^Kdb>f5e*Z30>=6<%1^K._G@bns%Ld+Ge.(M%7k:Q:Q*_+je^LJL'm-GmoKXAQLjf\0l*OmmJ_b'*VRbo;B.,*$3`bbJYFqB%lK?<';:r/gRLf4Hrht!C^S9GQ7JEd)0#eHG&hB7>XUPDnps&iucYEC8bHjl\\86ADUZ(bcC".ec\&3rSp11CB&,<L%F=%KgZ?#63%0*N-=#X^AbfjZt6reT^"g/3*O8CF]M3uZC@%q.KjpDG6!9LT1fl\V%^hs"MGHj7u!0g7%-Ds`*9(-D7tI!:GBfP-E#PHL_"84pMC%H&qE2X72PO@Cf^U]rhC(EYTi=GI476W6B0bA:mQe^\ha:SQ&*Zak>L7i)[M]"QoZSG!&;r5h@s>h.Eo0)K_ca"+Hg'c!lU'iN.[a%p#FD9'_3%%$Qc6F7Y.g\_@At_g4?B)1Nc?u`WK4)OqQJbN1E\?Z8A'\-Wm%=MkS4Jh%=ebKME50CXCKP[qS-G+-glI'LQ,iQp'mo%OZu;aIqqN@Pg2T6"/mVa()![\@49`d.s\&n]Ru2KGR3&Tc%h6o.Y+lEj8g^2c%PJiW`$"\'e*a^=eti,g`fP]As[Nc@`)m)g(SpW%Y`d:DEt8RpC$QItl&k?a@;8'&/G*AWS75b=M.r8R/h65lfOC=3e?&h;QCT!fXhsKq]@qt'c)Pn#(W(7l/q^Q$dWRdK\S$l61Hg'H%4jS46nEA:OPS$6T5"`02!]al*=P(i=J*Bdi$dD/sJ$^d^.FXh=oJh]M/;GIl]2KHF_>)'WJ0!#XAWW\.pNDeccDNI8P5CH>V`.cu%'%Jaq<CcD@?`g/YB8#E5OU`rN:M0t0Vd!]K&!5-5QX7ECB^2*=nK*ffR?8"lQM,@BZttt2I'n<_3[eu=[1p,!'7R3#$^IRfSpAm,%(,]^!1>kT8'93DnBAMg4!XkR%irZoZTrDS_3IT/CpZ@8BX%?C=!8p32a^i!<=\<C3f?uG(ScED[j;P3rEa(paQ6Xcu@h1s!En"lY%dR#\!mlEmM4j]D?`%VM(hQAmG(SlZ:Zc<W;SFSohY-F-_;<dUR:f72.F4p?K1Sf1.-aB,2o?O`#?gu6E`P+6fWVW_[IPDg9g1r3D%eUi$*4$p#\B>J;3W+TS9EpZ;.\/_u#'GlXi1@sn@\EYW$N#;,<Q]'O=WC&/"Pl0VQS:`0@i/#t>17a&a[=_IUY`C?_f6%"15tj+-%@HUn)/j.8F'*rR@ME@5bYe8.qf-uSZ\f<?!naZBAW_s-lOhQCe]'eg]'+4')+^3ml-oP/f54+eG@F<tHcPJX*/l1%hg(de-TWk65%#0P6CS@Dk$Q"h;i/.Ne^`B)NR$;4>;.''#p5j8a<UZ'SDk5FO4:U.,C0a;K#kRTCg&btJar/\Mt[@)6QWVguaUfMMD`(Y]n5chnE%CU(!JNeDe'9]Bj!Wp9,9\R&BF0'$kC7APGL9<ZACp'P1R[MNCnlJm17*`P]DoO&7ZhD9H9](-1Zmc\E^mOfDe;8#+`n?b/n_X>Us%_U1>Un+5@!kG\1?e1^E%&)NU9D^+iSeP#COb63;hg`\E44prk[B6M!d)qUUhcQ+\#+"]kP@u[Ocij35Jr#-WkROh&)-TB#0U%T*,%]"33ne!&'b+Zsi;4/VK4R>^n=-J`0=\`YI6=feM7YD&(%]lgb%Z-V]8$9d.VaZ'["SFcGi)$lYZN_49L?PLnI]%pm/Lqi=t_.4kk%`+=>f9@hYmI7Et7/m*SJX>8(1U!DNPRB+`U<P$8VU"`5O7SfW6M/k(CX/nG?748uLXC\RkFbYB>Go)+/2b1X>A%G@"P]o\n,uV$`%U`<)7C.0<m2!SV#;;7caSI<CgL`Ki@biaVn)S&Z"]$T'3>Fh4UlOj,*@O&&Q*XcU$>r3IR>gi<)^.fokpB)[%[@3p%/_9,hYntWk%kAM+`1L3,E?$j!<OcK=5jp1)BA,+4\.)_9jok3(+FR-DA.%Ej>^=(<ZpY>\dN$=;m\J?H#nBCgDr>(%krQ^n6fd\cC3Joj8c2(Kp%T,mRSiLkMJ(KM**cY7,X:FmFUVLpHu5507@pQ*B9o9e[fPKqe<\NbOSZ@jb+PnQ2`_Te65RnmHnZdDSqn2&[2oQ/me>s<*^C9iZ?%VE<bW[bJ">kTX4)Bf2=e`[pbCHDAT'lb[g*SXD$DI@[Q*4dYlfjl<sVUX#[MT[hN\`PqH76YN5le-]nJq!q$s9Xpn@i,e<JH8u9W%b%co6>eccWCt._\^1=I%;<_lcV+5+'o,%'sjaNj"kun>3eEts.;qj8a1g7?@E20oX@8m@#BC?XSe9=?*1@(_32K,nIAS<p*/P<ik%E9VXgX#E)_j\;&#B&uM"%ohOTX3pA5,O0'C2u8WH](c`<MK5I=Mqm[Y@`E@jNTP-W'Aoj:UHuqY1GO3%:hpaOd^?u'\OtDUg1l&4%\6.l_UXASMAbC>?ctN'J8TE#1UYI9_Mc,cT$-SD(\Z4@sf!ThNCt-H8;C2!*P@c)^o>ReY$-ag+(gQ%&DBgSd0UQm!2Hknj01)Ee%DYlnuiG.?7R5C@Xs5B&u.Jrt1U'bh,OD:QR\_fj:kFrSiD7"OF+)3]k/H8Kr:!:ea2>ZI.Wc<K]hWVZMrP$=aQE#pF>IOpL;)Bok%bs&f'nr-VEC$OC&LoNC;\6)`9SR,9t;.O+,$biTP?_=X\lq"2)Hg5kl880o,lZiE-J'ti(P@_)(p"RcWAtuID]rZ!+qAuH$V4'cR%;3PR2r_OM\2q[2V.YF3`:IVV;ES5&CBJmq0XibPp2[V=KdFV:=0n5r7C"5[/hsR^<UX>UBr]h2hU[@Ya<c/W9$W<JKq5XE0KP%Es%PbrPbE."b,/_"Id]@lE2e`3LQkYLP[XjPL^Pq!+sNQL1hh:Qf7]'>\:#5JX?oQGSY.<s)*(L[e2)Pab'eG![91jWr`\E$,A9a1fk%Bs)!ac2*pQG^eH_4uj:elT@!rDk"TkT0#rTI\TANrL8elLURcK.#^g3i`Y_cmYS2NPIT#Um8K^_f$fPd7B#g4B,YC:kf9dfNFh2]%k1%>8G;5`=S]R)E&kHoq([a%UgWNOS4g00UeM\eS]6EF9j/rj!ibL3i(M`]l(iV+6Kt1aQY)6BJ9YqD0dKb!*K]YDk2%*2ri;gTm%,0@C;4AoqV65iWQQVlYbCIJ-hS^j5[eMEJM]:qN5I^`#+hrQL,l;-;9c%=C^>%ub$[iSF+/"=Q7qnC0MN^o\sWqW8!Y<Ia?p8nXF%Dmh54FX`=2[_s!!eu/4Gjp'^CiE.7;InhBW.?16nX8:q*aCsAR\Q\6:m="#t`3CN2I:#&;%eZ_A*l#E*Xc-3=DW?'`=Esc_GK7HF%bLHL.8(I(C1s;'N]R@87od39)p>+<gZY0eJ3S&*CYKpJd:Ann@n\?a&9>(,W51TS:IG^T2E6M4`oUbI4LKh0akO\"?-'5.Zm;P"l%IFlg#Pq'upmVWo93SbUKq8M-rZ1@j_R3O_UQ?+imAm>_hnM7RdQ`\qo96*2Qk5+u;H=g#Yp*H8/\4fu,]H<:Ie"s0_J*-7J[JY'Q%H0r?)=JGN[/(RYq9$ZW!jeWjJqR"qHO1god?f*a9nA$p,ls_'cn55MgKdM_j/7eRWbR<1.h@qri49orcV2\u7guhpXq&[I;8@l#&%B"FM5Pr$]S^ab*T_Um\9]1g89ik31pNWZIkL"X7SR4IEJQEIfJ0'W7ZV=(fuQZ&No$X%>?[:)`cgX\)BANqf<2\uK6?A[-nf22OO%]+FN2,iOC%(A_G92)aAE7OL)rMbu,0&tM9<0Xj/hRcL0MfV#O634(/^RZ61bonsT2BRQaLSkL-*e9q,2#qL#&C3ult+OB>r\%91r%LXpGPii%Q\"Ao>KZ9;`<k<`o?9i$82*8:R(DJiFN<n5&&Ypr7NUGB1Z1/OApR2A/'<e^AoG1/un'R-0#n"f8\Z]jYoUUY$?[_&iR%&\>95Mq?c)6ggA)ataKGg"dW@RU(Xtb<0cZZKQ?Qa"2W;&hIX$]>$N"<I,(!YcFg?n,<jC=+N2>oJ)Ou60RK3SDM"DB7.;7&-EEB%8blGeYOko#KkoXFadX.Uf!8NgMp^"i.arh))s!G)7([+#HImthghINp<(^^-T_bLsO763h]^\(N-@WJsD7k`27rh0;?t!:XQf97W%^.QF1J+HM\>SsuP^pQ[0j-+XInmV6b"aB/kr>!H!f_bPQjsHD+r'knRiL<sCNMUs0G)#S,6Jnb-l?,S_QsH*6C/g8:LFa5=!<Z]L%%gkrP@:h#]4^_^[c`Qq,NYsF=2`DT^r\0IA@LpV$71VrZL[Hgqbkd6UKU6kSYkmlqp/p>3U\5Pn(XH:Cj2,`HV=*9H4#qg@YE=OQ%qV%:ESD;`VH7Fr?aeI6ch6C/Lkt8^g-B$ATr:*>!,I%ptnnrmM"Tnk30au";W/tXR5@u#rL&oQ?I(T&^LceaYH8Do%(;fVZdj<;$%n^%$*K344SWY$UJiRZ(KnkOOFZd6//!GM32R>f%/VLmEZW!?+0.edYb:q>0Bb%*bnVnPiGOZc2%87*Y5hLCNJB7Mrs?pL7(EWWYi%Fr'qmU!_I>:X+Q(hJ[9g9\;jI_h=^&(H*^[\RuF.+D=nP,HMU(m(J[CrhHJuB&62(%8MRghH3o@9WaQh\SO^$UbjQj;<>%(K"L8c%Y*f*GDQ7glIgAZ!"0nlE]ps!PLNJ$04?Q<0%P*f[2ct2'H?!;..N^PF8?8\\'s!q1inH@!BGe4<Ji;fbps-GSXY`Y72G&>ODaS_<%2GTM25a"$;0d%r`J(<MAMm3XVF^=Ws)HKRGN1XnJB3o(n==%ZPQM51[]G@D#aW,L+%_8LS;AYhZJRq56?!LH./^udd*LZ(q-Mlqk%G-#Yh*WO^7Y/-.S'2"aX9pk:bD!?[uGS,/Y&"s5Q^Ir.>g?5S4h,)Q/ac7P#!:j*tZj$$o))0_XjG!OKobu;N[f^DNhcn*dn(qRe%gs_nZ9ZoTD!lm(.->bo$7uCS[&bq28FFB#\38uRTisk`hfS/*9gKE3GT>ViKM&Ps*/rZ"'jk?aH=.IDH'Wt&:/_;IVhWAr1gV$3U%p,$rtD(Ued#VFAdlrNR<&2AUmR#POi]!"1,g%'BSpU#!F(0X#CHWc7+k+@]3MflS"qlZ<)DO3S"e<lqI4B!VnA-;8_2?Pi"IDip<%o6;Yc@9a?OnVj@6DsK2UANkI(k;-XWU_ulD\)iU`1#$>))s$L7@:MdXF3-<*ftH6")6%7YIbgWgJi?FmP%ji#)HslmR9^'.^h)N>%YfHT/Z_#q7>1!>n9fqXnF)@u5,EUFa,/#qgl=?N0SuUt1\D>Rk!%*VmE2oBS,i\^'A$nF$`1k!7r8hT-+U5@:14o]IgUS$Lnq9m?%%+l$<ej>PdbY,Q1')SF]X0%bk^!HP>O*MhOT#W4F]JDkYVn!X\Xq<De68k&t%uN*l*o,I*k.Q]bn]%snlhg+#E1'<\MTFG@0b;@X%1l6OiknS`V<:?l=E7pf0E1(Dl,,MQSp,A=5gV*\,jd<4HagZG:8Z^jT"!J)*(u.I/nhBVmLsn9i-Hj-am2t+5`\c\@5b<P;b:%A_%-LV:[mGOO-E%>lFqanuI/Vs*K_HZ'5>'TA;i)X0,Q#o9Q-#aa2DpI<V_(E_Ng)8baSNJ7/V9C+pan'@ahuUYGA/+C9R1ZjtO@U!&%7"`<-dn\3/If2bA[r=_I&Z$H'1+j!?hk1lZWY,#3I+f/_g"mSHNi`J[egV!q*G87ZPE<Ka]6LgTnkpu3Ej$*&g!KnIDe!"7DkEO9%-]mD6`F;5uNNN?O@1'a#n)RYoFN63NYLjAMkmcNjG/*FaCD[\um'1=$QM2>,!l;?.N:UY,7B]LMBfAmBZ_N5*A3u`oS\#""V"DK7%P4Un>%3HSRg@i@*Aih.GZdT0ZR&NNL"ih^E[/Lc?iPT>&Z>%focfY5#JRJUOhH5p`b-p,mK*0j^"aLRGN#6N'Tr6MBHX&%qYJ6'M%HFglNW^]L0.*&%4ABgDsWn:H4=cTu+=N4+CQNY4i3)Fr:)+66dgrI[$RiL`F%!#%b*iQTi&7`+dbd`NnnMH]4Y#W`nrgU%:NLDuC%mIl`f:N$fcdJ%G-7pf,g<j2YWW4rSE?(]5JLt.D*LLuDV1'R1g[Vb4,^9S^(._-.H8M[$!gK^0f+TbGA"L&n&c<rdIGb3'/b)MuZ%I^8K((OB7BZ9`24IX.NVB%%cR`eiLkSUKQ^qNoiCP8)\HqBl,3/YHM$J?SEC!jd(:<:%$aNpB%^]I@?;eu5I_BVr>gZ'NIP8K77G%NMu?i9NGR^!e8S4)bcYS)HCH5)d&tNWj%r+]Z`3tGi,+,?Yi0i%WX+,Ad25eA4VQ>fXQmC<RglS+_.V:,[T-pL'f$:(;n?OZIu`&%l.(SC@#c,W1sk#5+L@HhJn:pj@!Ve..jc[IP-buULn;YX;l>b#,uAd-"\[`s*nZME+0f3>4ma'mVjMXcdeiL\OTr*I!^mc/-W-/?%>3bB]H$pfFqa:[31*L'Ch'WLfU]L:9?M*K[X&/`baXbH"qC^U86khT?WLJ6+#&7+9iK]uA\)sWSP6L[/BL7+$YnA]ieFIi@)1u]%%=QufBZ9C)tL2-(BO7CRU@XX6U1"6$.`4+lRE]<'q)NZN"NJ[?q(e<NYfq([o)>D\#D0,@U#p]]=B;=mm6eEK-hU9PpCK/]TQJ&7(%Fd)2D:8pTSUUS[4?0nUZ9]JcGiXaX5VX_!6m3h01N6<giq;l91g/oYD(.MS?,<EcUS6HI!a[U@Xac!;3XiFjlP#'N+Gr5dP?:-5?%NVY_`L36%dqinkdIR-Jm.A"3lh_sCdYJdk'Cn>mJ3(PRJJ*TVoa]U(]Ossr(+4mX\)Z/Pf1Yt7b/_LLq?Y+/HeQUI>[][tafeP$k%966):Xr$u/W<^#S%O5MjI-pj3+<%hL#l!"%?ZK6I)aES.^jI274Vb,eEA\iN9\AGk(M-8R3ZELWI?`!3-E_Q4nbaTK4#__sW%SeM%pa2S]HeA^rFYjNbHKV?T\,t8tZ=oCkER[ucP<9`7HPq*N2"c]X'1.:(n&AbUZ[`)5;;$lZV[_WZ(,bZ!G9,!p,k#3dV>L)Pp4+kt%7ACLlEYJE-paRQMH!dVX9'UD/AYCb:j^Frf(%)GNX_[s^b/+s6k0s2;]$@he[8E42U/m[.pqV@HXDAJ*5aSmoJ+[u*lo[q[%C"_f%)A_)>3!SQ[fF1^`LQJoeG4Nqi+cD.d6lM3@;kfB4X&>Ni4`qq!J#mb..l1-65BpMG2XfNETUo@P(.F8R9t4n34ni_B;@cn/nAVTA%RRM:'!8W&4VNPib6F_3,%'Qih51OZ]+jLVaY$IM@V+28^LtVl_,t77>:"_SIYsgMGgD^9s0p%2(kb&G5er>])TNK_lIm#Kj+qOBV%/_$e+g"ZQY@A>;HFKO(Yo!m)s%#c(WEp7bR9l!m2[](U=DW^X0A=F/NZ(`_\A#4f`238X]JnEW\\]8Kj2qAP%_mm'J2aXM/aEdsL%&`U6O0rfP215O@9K&O5fKO68$q-gmICGiY,))U"na&@-N0:H]UZWSraM:Rt>52XdR`g.d;V2ZO&7m@jlN#mQlej7oZ&3Xj8W8WM-%N?6rp-L??L*k%3AQ#VTL_l#s7+.$h['Kp7f7b!RaiUulXL`\f<H5KjZXlu`-oWSp[K6'Q]>>WY`'-fNFE/NZ1d=#Y7e5Q;T'q)bp%q(Om>+Aej'!SaVMg_EiBFp<.TV/]$n0=r7'e%q-6/G_FqW2YMh*r^'/Fp#]t!8=dbk#*'Wf>8gOc:-u/%:C#H)cNJ+A\.c(E[TC`%\n*Hj&&'q\eFjsiR5hS[r%S;Y'nM^.P9TLC%"od?hjW\8%orr&]9c]7G#qf9W<W&,?V4if&roa1aTdiVVG.ik1[mYGWg)>E.5B/<%43i1/E2FTkEMYk][8DHJj'sI8aJ_%X2_g7mV?sBk"EGI!Ub[j"5-as')[$Y;)a=0CTfKL0q/jD\XSYWRY^qL_\caX(XntO%1f:hg%feRkhW(5+[DsaqJ1Q32P`E*tV7t7^kZPF"P<8/9NLmij%PP81Y*Xiic+GK4ZfHMWIaNi)=<iU@YYr+\Hgjuif>,c6AlGO)TmE2m)%`VsuXY<`M6`aQ5)McYeVYYC7"GA$DUPI5*m'>_?V;CJ]TqmJjl%L*6?HEc,5F@4(RBWu>0Du<?>_/oh76MjuS4n6AZ\k5A1mS8<e%(1eKKeWTIQ:X[_:e&q!KA@et:N)X\1P!(?&OB@m_M@q!8Je$L1JUY3'j]C3!m"<Y\H*n'rK:pQdQ.dZD#:/]u%A_oTR$!q-)+ZF:%O_q^*fbU+XBWRB='"G%q=cG\fm/Aj,MKODlIis&LSIbI`l?^gF?"d-BmA6sI]Sl[9W%3hMe$\3]?u!$F]'b@8\N`nr\$65VdX*0H%&CpGEC][)tmT.p[-gId3G-JRC`%<.2A(*iYTc3<fDO&@>ba%,ZkoWq79l1nOI+[ZmJ@40VP1>Db!7Z7ALIh@X9r!&'cr9o@35^(Y%W2JC!npUd.b_Q8_m/AfC>.,Knrfpo._JYmKEF?Q'Z3t<XjW,FR/MXSlR;Q"a[Me,Pk1G^S30]oEJ;)O2XhgUC`sCh`BM9,5`bE>X%G68*&2/8Rm.&b[/P&&Q8@FpGW8gT1KqFhY6<^0B&=M=Ja@,$WPG8q)%hStNP$#&hmpA"9Q_>Bc7E[WbH%EWa=B^kQX8gD\jUZ[UY%#7]N,5;Y!j4Hs''#4';*:'M/.YSVi+]2*@lgP\l:4DIJ-!P2?U#@Ke-no_;pma-'&dX2nqldietJS8+:?Y@[n,)f5Z;,e]eZD8=r%k'\s,@n+kYHG7ZGB<#>^mpWqj2TH6mI2M[#U_DG_R&N(L"4Hb-ba8hjchm0FVI7??`cahi&Q<ZI[-*KY2"+kgrp=btg?8CZUCdq:%E2<m9\GS&_^tfId2]3UYih<Q]fZ:Y?GidCJ_15QmRt/W+a:V?)e@7XFDq$/*7'Y>X*4NO:VdNKSe)k+)"i5%t$BEjMK@ER1AVu0'%M$J%t*^J'=qR//8TLK"g=rL_>iJ]%Wo8Ab(=[P"CW%oS:3&2[qhsX*.E_<\#@]uK6n#%*>dou2bauoN$_E]a:H;?[CYlChmdUCh&%AO"XgTf"%\NL*RUFJmY%C6$='WhY0rl8+0rhZjm4"Bg4:.X94($CKb8+mUFRn7e!W]26=j+R>(R"foZr:5oV#Ir/SF9bott?Z0/9%K2KH?-MVo`kmV&q0P]^fW*mFiBYNm.1oOe>9X+NNILe^Jlb;c\A>iln9JBXQS/<!B7\%S@C/hE@<U6E0$<45J-J2ih2(D_1.[/uD%W8O3d3sdB=%25hbZ%GoiC1(8^K0:A-=R@iqZT'Nd=:Gq&XQ>:9_.o?F[?^N,W*hJVYc9p2'Im4e.MZn"86#'ZLsuN'_-.HGe"VHE%0Yp9G=_OI[eTtug%Cph[K%6lahCNq-<3R8fQp_ZaM$d9.DDMssGZ:o9?>W07N^j8rAk'cCn!+2n#Sh/8f345PL#BRO[dDibeO(/A%^CnNLg(V,g=<Ca`A=(>E1faic]U]M>HT,McCpDPDcbAipf'FJb*Z@-KHKVnsogpobZLP)A'C1jhL>P5Th8K0BiaZK&`j!E;?L51G%'C0.d%m05h?Yo7m\!O+hMt`j]Q#C(hMD!a->HE8h[#l:$_%u'Ec^s@[rNX=T(-;TIC(smb*e?8)0%QJf%EJ;RTo8Zc(9=(`ToUh_%mcc??Z"!aP0Y7%4=A^)\nc$m;P&[rQ\p/^@nQ+5c*i!-`>HEce)atR85a%*-KD*5!T+I!bK.U,57?+%"pW"%b,Ii_XogZ4*-:OG0%A`-S9`<P,d%;`:o]'2EBir-.$#A/,HM(R<L@.hmcqdYNnYJi?a0k(-=:#6Cd]K\8aB4O5Knc%2#r=IaR:(C*AHr]#[@I.RD3nWGO%pFW05md?;2e5U<mN:K9>^:c8D)n7/GQ0jK,`gO_JQ(8>Y9[;tY8l7f-7eq"npc]PVh)Oq'@$JXZ:=`:b``15C7bPk.IE,i^NT%g:%`@.p\&L!j4:W#(Npg`O#55fVq-Iu<h3q(383!S]]'iFlR=D-;$W8RGGL38fEc6nEQBk!WE#rI\$4U-J63:Yqf=D)-r[pu\g`fOHG%@\%)A7*PP#^cKY0B9VH'@@^u*oC6L9D63=p-W'2iFdCQX21t*\=D&N9Hia_[!Hg8_3IE7+Grop>-a:ld^+[SNep7.`>^lh@/?>fk%+ZV^:=cO5qa2^r-FdA08]4\CdZ-LDW=;f(=)aU;@O*-bNc6?<]:LK_(7<7dNFl)e7m*f@5AYeps1/uf.cIs7"-.[A=e>>H]F]S,1%:60O`Oic>RE]hoUAi0$0rs[I]hBZ'M&+>@*<YEh`GMYOsl`>fE4"]$/-RS@/=D&N9I"G@]-J&!CFl`X+BC1*G;du<Z9n!6qmJ,9U%CW8uN2u\T:c:0LEa((\7472**XL$-0%2@tsZ-G,QH#5M!`)u1ihHYH&W5?Z]cDQ#1Yq]V+F;WT^pe-NF3He#rZ]&u1J*]s>S_(2b%rtO$e*qAoo`7&1df1,e$@@]>e8q.'2]_bBf;dc0Xr]qmlT>EY4K.+gn+2L"=m#1fCXKu0(/7YTu3ih36rW(MP:=m:"!;SuakH,c*%5D"#93klYiF]OomrrCVQSen2]Ld-E4QBBHRli!T`c<E$"5D"$DGM@8dLc?%5/@)`a+dlVc#4!hlLYq_&LTo'nk:$<IXL"V6Unb3?%ZG`73+P']OlT6uT=jFt5?<J8/FU"Z5NLGRK_)goBRe9P&-Hg+Bc2+ANkoH`nigQFLW+M7T1q7.G<&;fA3ruKe+4[I`^=S!Vc2+AN%nI<%LigTO;c"c\]4p9K=O)!PM:17YBApmXbr(c52E6\6XAi5ShJnrq-2&kJ@+^D?;Wd4PkieQQ_ohiuVF*iq`2=%$++_lE4>dK<[%Tn$s8RD[))Re8HWQ%&9Y\7U/ZWV/E-pVSlSURJYfcoo#sD,dk#*;CPaApq*r"SW4Abm"a7-bqV*URG30*!bGkp"<pW_/0J0XA>@6%0&1HVjt48M$bIC6J2$i&@mpn*;7L4d[VbC%m)Cmj*&Eb6M>2@;URBg.OZ?QVf14skR9c60Ap,=0fJ3WNA9MNZPM(Z0jo+0QR9b?G%4],fmk%'lc5h&BBn<oJOG$u)jEKI9]*=s-o,1YM4]iVa:In]Kq#$jt'#X)JG)14?2fql6uER4n[RmYctF;pGUZWC_A!l8_5DCa7N%p]rdK;`%L+HSq]Z&H*uVI@/4ZSl0`uK.5JBU[P?kT&t89d[.$iG`GYfAo,q>ms'>YIV&@n>Y=t%7dYcZiNd>3K^Sj=:[IXok6,AX%/U=JbNkJ<2\u5'h-asotd2I:-l;g#M%u%YRG9$tL(=+0YjLcCDT\:9`8"l$(]Lu6:kMHa/hFbR>b!<@?*amn92g/+c*d*Gnam@G2%Zca:4a(uVunL\[fcMKR(Oh.r3UAEI3SaUMU!`?&paN#o<d`q@6J=/-L9?O6nOq%JC#B$/L7H::[WTtB6J\@'PdiSIATlWbJ;PUdg%<bA6KWQ3)r,MTW-cS&,@f$<D$^"VtMNSl>[+O0`h$``toNNFS(.Tq3Vc[#JbOXGR!oNLDHhX>F?&_YNXGO6I?E7S#["Zfh:hD\Qi%:=HN[`p.Mb[-C9=n2m/"U8.Ie@n32e[IRab]u/OUbZ9[:`01YE_q?G!)GZbdr#O);Cf<hoDe@elpC?B":'<G-O&eIW$$0q;+kUaE%9GVSYlIq7,!(N#ELQi?n^AG#icQRRPj1JRZjPVhM!gdnfO^s9m2s"`[i])F^9Z[-G:g8LofWT$^`THE+7Q:odK_f"#WCM;cW0=mK%$BYH`IhFSaluu)o2:#.L83,P"Cs/Br98X=64%bO4X?7C^l5HiC#VR,Z5o3OEr(36l)l4":=:M=sm8Lr81^7_<4`PXpUA#qiT13,V%)l5._Z!;pm0tZ%:f0/$g"saBH-V8/$Nef_&^(NsD)odj'<`bqe:L2RLBmZXZ6@r6)/(Lr:iOZ([DRr?<-#1S4ABVou4!2*t5$DTa%kJKQ6T[BQZ"&"(+l1OTm4'&;Xg["gUhI6[`foK!8`EUQd-T[$9!1MMKLKZHF%+;5FOM'a\AV"`oLa[--h;HrM%jQXq#.r!OICd7t%*2.d:LMNg4*3N%[T:`2gULpebe@<u2;0u*uDH8E>*88c^.ltDD%u7p;%Q.f7Nb>Z]U2Z]aL/tJG<[5":-+"<X<"YSN`pXk^)a,)3%E-@rZ!RcAf0bP[:m#"QJ:4fBi;EIA-Yl/tY5i0E'+l9^eZh0rV7U[Se@L1SaRj3"tX99pGQn2FtcLV?LTnhN=E+e[mLKuT99j_Nr%2K!>b!n47P5aK:=fl=l;HN1GjB^I.>^)HKaN$)"Sn#Ye_(&LK9YZU8Vlfc!6qj:G%X:HNA]GpKdFu)egFBX;E[qp)$p\sBFYCe'W%]:kM(F/S^G]K>"@6jsra<r1)PKu%Yu6r?1n'J(J1nH<YZHdKju#/50G`UeO+*RtZ/18qi/f6?XHbt1Zlb+s%noO3hn""-)H3tmbW%O:RC/XK>f[=f7[>(%oBGXE+mLTu]uoQWbe<8W?Z_`R]52VV'j,IIGp^Dm<;f&&jZ5;;64`(FuN"51;\7Wc>oK)4lspF/&b,,Bu_D%pIAnBYXX_FXgq;>kDo00e#KTtfGiMSL)!-7*hW&8SakDhlfRm@g@Z_:l69,Na8<?1V^/cq]*9o-3KH8YQXm2;PNKY*"s1:ieMn5J%TCs7N,(Nj@62-@6Z3F!Ng>c2&B=IRb'e6@L&3Kf#V7AJST(eSBkD*m(W-6=D,)8QIB89jZS?c'!mJqNr*T_Er6<[5bfF'ibrEAHd%lc*Q4p?nF:(YjZo!W$f)C,;X+rAa&;fT5\_)q=7YE/p9q4hGOT-<u`"q++G.MeSg\/?BD$Y%JO'K2k1T'6;]h`N`XX<VT``iD#]E%YkQ@SJ8>"r-UR:6Zk_H74EL;]>(4#FYEE\q%EB)EQs[+idT:HQpFj8)8C@$BW#dSCR!%jhoLIR8QctuskOWIRF7[n/Z(!>/8C212%;k1s=^7&(QAq.HsF='Is#5)r,E^&</fr3-4/3n3[9T%huboE!kXWFH.KR'="Dm*HHGd[$;eV#MB<Elp@p%7));9u\m(\M&&rDLtJ%r$>@XmBBQroE3rpF6RC8XZQ91qRh-]:nPi?a*dmE[`oV11H]#<X`sA:I/14\Qna"bTFe_IgO-PhOk8`r_6eS'[[E%LN5ZmD[r$Ng%iq^!*F#fY83NGBsHE_fuj&)$%]U&#tSMdQd];[(O0_!Xef=[YY5c`M,f3WYAlAhYQc&WI+\(fl]981MN7p>N'+Fg)*2F'S\C9;P8%5iT2uMUC8&Ch$PYb]`%6?DdUf.0DF\c=G?D=62/U&TJ6La\$ssm1f^SE[J@`<!@Dk6ZKLp7qF?NjnU*(mk&@Bdi%8^puuEDh,VdK%ok@aCB#06u6sOhkA1W6'G0.7hFUMT<h<+O;kloT.@sn(1C=#s^@nJs\3qoSo]Y(uX6j@&md7b(bC+X&9e(8'=8AUe*dMl8f"cg;&%\T1B<5>GJ3Q)j*n?$lGI5dL7S;:`X4fN%4nj?&fm_j9qPIHC5.HdQ&/d`q,g,Q*YkSYs-DA3T*\oFbEqihr<GVZIrRQmOcFd<"?=%c@sL`<4DldQ+Ur:6/eE/mMsuZ?>c^5eTD=NrA*E]9aGo3QDl8H+*2:CkU6>jI(`&s$KemDmJ]55\8V#1XNRp/m('a?n7<lrO-M;V%1bq3/-^X?>Tn:L6.c.B?J[5HGhCbSNiBo,>dsFT#YuDqIK0"4+^VoFs.c>erE,6pZ8b]F'b3?*;MoF!f>q<@T/uIKera/HN_UmR]%0)bIo>p]:"W/ast)8[G,N%($)_\A7UCZ>?aV2M@"oh0<(n>2+S^\aXkmZk>?^':\*I6Lo\\BXFhnS@'FZen[sp?qf:,@5^c;NbY,%E+QP)1m4/=](#T=RH]GH+f>&14>9p*dDY0ZRDSP/'lZi!kSj>?aki!q/^?QYoW`i=>7&jT)+8f&>Cq!8d$*88Y=(Ljr"Qm.gh5"Q%EFtd]3VpHrT/*0JcU$0S)\2T0mLf+<<mJ>K>c.99jif?h/NmosI=OH[jjO+i2>>L?]IE-.#Nm;fW+NWDUmj!op)c[7=?4>TI;mT-%?M,,>r::Q@Kj5'H;XmY2Jct-0RN>64$Udt3P3H)h\;4A#k/aE;.SdOfV!Bf5NTEDV;MSFrFu21KNTI2%%amu7ngbh@obu(\Gl095%rJ1%747#BVY-/P1o]MeX[C+$]bb&lH(0=1s%QfMfh:H!A@,'HS=06hoN)HFIacbfDo;t]aG3P+1MZjb93VdHtp<M0U+%O*mFi_jV%o]89ga/NV%4GQca18D>H9FqDG2+kH`r+:>&_s8f]iuOK^I1I^n?f?DSDl%OA?!odCXRnV'E?FYu.@-^lGkH68m-j^90fZ"jn-pFE%>U5KrQ;B0l\*$HJEK'g+Y25!s#Wi*EWg+I7<h>FA0MgZZaAiJ%dWKWk7ca=7(=Q8W-/H!2;gAbs;q:O=,@0k;-194oB<g.$[_#h;%iKqD[$FTH@?bRZ1D*MO\"RdRm-AB=+=9\:j8%Yr6f%[,k2B%Q>UtL2HnP89#rcEUA4"f&(iBEl@Y3ANUrJ=^o/;0hXUi!pY1A:>&%!R"XBGpl)0eQ!&#*0Uoba,VT3S]s2hE5bf?BK5#1fU&$72!9kh]7.N)gVs&roB%6B!DhdDT;(p4I,Ujc-B#?8rIHa?DD/o.a/_/C%f!tbOmY61lh(GMnrFJHa>(u&S[m@h<)(e4S#ZlZ#0p^`^*.9XT>_s=e0;>+Y;mp%9[(q8WRk2+.a6Nl\cm"WGgCcT3`1h+O'BJ2!%:]i75S<f*l$?;H@Ae/S)B?U&%]Co#<.X9r.^A0)@CB">ZhN<k"@aQ_FQ^!K5JW"=[T"0=gV0hf1JT3%MEN\DJ]*AGJ8f+AJ&eI*f%FYWj&HE:\hYLf:XrpdDd2dK'@ol2oEbH\c<*2l[X8seH+n!Vb.pW_RPSVP/+10,ZO4r2E+?ZjN[[P-mNHW26`'n<>J<1c2%d4=/n%,5/o5;(VqnEdWB)Wq[L@Q:Ns#G#'i!F9^Uc>0V(`MG#nh1H3Z!K0KU<(6IB94jm3ZC`<%:bn$2JlVRb<(N$JAqpD\S&0FT5$59je%kKJRdqQuS.5h=!`7mP<.Lc7t*H`#(&o8I09LD-,n3@7+=C:i;P!`i#P/tea*<#9h_N8#?>:A<uCA[b4;&ka"'<AaZ^8)IuDHas]c%=R)%ZI_6HIaphCNhpa,)S6mPC`5Adp<;b]&6;N*'*9,Fb)r%9-AXJUP`VFi4(B'#&'<Pe3/5d&B-_#>(VAX$_P827ud=aY&>bGEV%CfpIO.l"e\p#k%+G7Ka5Q+m<bnI)L,&e0'9K7rM1a]PD)iDLb9F/H=MfqGAJR^)/GeA<q`B.[@rLo]OZ=.WJC:lbjC#^:R"o6qR:%9tbtd\t#nd&i8[;dC=C\4K7(.Be!JOVXEjjQYbR&N0)LkQm+_^^[N/)$7,")1^.Na;SW1H"KsL&h:!U]0uoXZn@W4SMT`5a8>;aJ%f'rU;RS;qG%IJsTl3g>Dk?j00c<_.,+FSdERo'?Mk=Ca1D`Tj[Fg4ZT]hHZdG8'IIT!7r?ps*l.7OB0knS)RHN5L>Q,Sk404XOI<%loW8!_?perI/B;4F*;>?R-@T==5m=:(6bs4I.(>Ni:IupgFtfJ5pqt?X]R@!7U5[N_*9r79_\://kl82k=F@M_mo:bnsi@&r\.D)%s1*I;>0F*H.aD2NdZ*k"-/6'EFoO<]G\?ouH_8/6EDka$a,XC`f]lqr$nq(9f3E+P25fH%7%'&]mbL(&Kf>[f;e33=.uk[k?/Ul4%&7JC=cQ5J(NY\G0hi'(sn=Z't6YU&1L3hAXB%liX)]GDj>27UW2!?<&U6fSDp?)`GDOG;X%lkhBZ7&BR$)QBCF64j4FH_O"0Q$1a%;$F_dmrSIrC]S;o;[1Wkqm,J,3,89/kPoqNYaS#MSqU9;UbO7;>a"MNNd*1DZY6*-^9dS.8MBjA!LS+q\1b,U\\$+FiuJBXZe3DE%\ES)Ur[W&dK&lgPj*/->mdNON\a1>IL0C^(k-\h>@##dtNg11!]mp"=K;=;p5r6rZ]<Zk9"^c]=/>=Tnq>skAJRai*;'Ci<1c.#L%qtNHgXA:."Z&>rk&D!A%od]Qhf`lHq_FG6k7Ko/m1TOPiZcM!n`T(E`\'A3uKj3Uh+7OC[m>N^]TjVKuXk8323Q9!*1q-O&l/A?P%N%DWj?Y&su(U5\>7R(HolZBOM6Pdr0c7u$Uaq@Fqk"iX'9Fh=81\`"B1C@:S@f`"(;Q*;5qnfjrYCH!*d*r_hP-]Prb)[k)s-`\a%&rq+lmdEuE';5ChbbPhLrCMJhf5hfX,/-!E/LDWc8pH=!lRl^`Y,klsM-Yt=1:5=m.gtD^hj3W^g.*8R,+ZYrPSnn3EsCj/.iL/8%dLTHOpu2=Rde+&lcX'$LE-ZpS@g)Ot>i)*n&5V/LbPUlJes5Q+hXFS)X"Tf[dtjW_ft_HAiph/0(S!]'W0E7p#Vcj5\!8XT,F#o`%X>N8l:".A7\^W^hQcK)lBJedSU\5O!U@g%t-</gZJ=P)N>3%1h&*/I=iH<ic*PRF8UA!FKT#j@rRotFho`3MUek;dV&<5oSNIL/Z%^.>)`Y$MW"a/9P+h`6A^k+q*(ip.65GehUh,5a_NMO0`l&=TfU3F--%;1#uB7B.hp]h"#F%sd8-DkB@fbKQMs?A8:8Qi"lf/H<I@%Y?d`gc]e+rFh716m9.'KHV#\oQnnP`Na1Z9OtNTe8GA5Q]/p8.U`l&iJD_Ip0D2g.]Dbc?"NW].k6ULqf?I7[.YE'TG"e[7IXCE-%@'$9oU4,m4(:3\aT@`G1ZDYO*o$3hMX_L#T*.?7p7\`XiPp(d>pABgu3>#5\BcbrVX_CH&DmG^C2-G7!Wtu-kBF]r=Qn7M$H20T<%?T`afchJsF^Z.N<di`:aKcM&?lXHBrILh\@N\M3@r8Vk*G$r':8C-`Lb4q>SkCaP]!r(*gOLs0,`k-."rf(,s&$d6PGS+i#ItK]p%koH':c=DrP("&"&=+\$NRiueebB/5_@q^/X1!ar''QU5NcjF'*?H'hd'Y@cEcDq="=SIFmpH[-V`MAB[pT@%Mo"hGA!PCaJ@_T\P%V[ljNH!DA/l0`%"K%Nd7^RL2R@G8[A1MULgIKT$8e&,t@M>HN65[;%h!Bm.D"%a4Qh<L,e$K,&\S#DAWU=SeI(aTKtU*(q^8^uai%lZr.oH?iGZ7-f'e,:8q\s2$7b"FGO,dYd."[[VU25?53h591B^_e$\2b"%_pSGfVHfPXZ6\>h<;f'uPr&(INm?9JMX\::`L,kg`m%D'%no?Y43uFK(@Kh.Y<+oFEF7p-,8bc.3%r!;@1*;t@`RRMO)o]T:_q2lgWAOu,s77[hjLBf2ah)I7%M?%]9.W[:Yas"p-9NkYa\%O<dnogcJ^!FVeif4`6+TJVJEKOYj8@Ob@8(&B-9%H:21:!2!4^np0k!>!&Q`8_!#sLJRf1K[sW0&>_ZjZ__T#G3Jq&5s!@4D<h*P%f\`45oP;W6-lc:/NCHY5Z-5q:OHllb3tl)Zc\d9EN1M*?'G@<jDWpo-_L:E9OX.!mH"-\B7R+MDn6:lq91<:]o<Ga(aK:pQLlGp)%"'J.7.\EU'.7Se?U$D&WAi=;,'29ko,%\'qX3HQX$<=*T2,gJ4"l["n>cDIFFK3lqdj]\K^_Z&DC@u2(Qe.3h!Loa\2LKN?3;.j#%<I5-e9bsD1Xer>CW2n6mH0:CAFfR1*;9`gCaq\9pWmt^L?\a@N#[`rME9qgP]3;A*HW2jTI(L+oP?QqlY;Hd,HPXkt\hfKiR8rKp%ftJYF6`8K8WrB?"b^rkR;#XXu2__bU;/(R3BV=*\jshbuGi@iNS0%ltC(9rT2tib6",_`^9pW0kk3=M?KaT?;"p280Ku/!8rD,#7%gu3`_)sGLn$'b]3+_c2%!S&@5EQd7)\G$ZN6E?p%&"@d%5@@Vn(H1qe71pXa_#Z7n>_3(KItabm#g$";?/<r>n3`6(5"*..F6agL%Oe47)M<VOdI9MhO*8]X<D>2j[],d%M2YAKAV5?+)rMafi4ncaWQL0C1n`2>'8A\kJE]%c0c:g%Qh4#\<U&rXr7B9^md@0i(-&8OB%0b<U%Vau7MSe.3K,WZ:%@p$Xaf%d!Bl>/aEAUX<l-5m\`VEb2+O@jM*Y),^br?#G%UT[V+F!tKMYebl[aQA#+c7=2+//J/*2doY`%S4%4&HTfh0f>7Z[n0%;$p*<,'"sqO:P`+]jjT@)\h'7>3-rC)"T!J$h$G2AL[2c[-.,05l=i_GASA@XCaUE3T67Nj$k90jO7[H<-%pEU:/md@N:K0Ru]Q(L!<QqB9!`!]d('<CWFr$:_/,[OJ(cDp/tEqO$A'[=30Dr/p''7W=UcREB1EdC`^M!VW8ig^!X5-u.T-GWS/%Z)ZDhVW3)qj*X5:?ZDH1?QQ<E(Sh:g11\M^."`SSM[0sJD\m3r\qIfYSuk]-&RO5<&qCWhpu^2`VISJTjn9#J;@7dGV;NlPTt<]?%ouj_Dd]Pus.C69NVF.olWmpn5Qf"mBdcb=)[H*#Y%'HZSmWsr97$_2Nd.+`O1O+d=DuG\uJA*dc6ohKBF.`/%^C$&t3]XtV.0muX%9K/1lF,lM#8M\tSoMI03rpj$S/G%dCM?a"X8L:C[1?4CD?a0]GKhqG]\2f0e`JW`L'b%j3HU/g[om6H:#u_ki?G#m:2W#M2)"ZZu%IZ!RT-C3gl9FRkjUSn"gXmJN%:D)(;::43\S3#j"du"[V:'offNegid`$`o[7;bEIT=oEg4+c*YSnSJjk#d(MD@oPYjE^)F&SPEK%A3sWIn@n<#M'2$d=78A@]o[GHEstU,?HhtKKO&9'4\NZfd;ZCNo1m6.^[%#bAp`E5HIj0CmEGDdeePp3/DYk7X?`(Wbl:ff<QUiB%,Q/@f=ok=>\lQHa6_T6YkXooXV!Z_Q<C:9MRNm7N3Ig%t!@Bj"ic$i^^Q2((HA/[IH@=#)q!]Nc7a97a&@sNQZ3l`cq=@9C;^GIk%+aa4fcjuQq1X8G).`B=U[OHkWe"12g>_q\G\KR%a16c:L,[:,ad4<Vpd.`S\@5K4.`.o9`?#&g71@[K&]cW>U(U>UD`uG=H3Cl=(%OF3Gg<#@&ehf)B5>cHp;M<$nRc6n57Xd0di4d5DH3icBsUq_Ki$$Cg,G;BP<gG5:/&MR@l&0Np8n+(TQaG7L(=f3oc$/>h0BY:&=%SUc+^1%Ki7Q5+__Hm8ZN^[X,n53H)am`H.7@:U,+%Djn;W$]e5)2K4\Y<NQ93C%Z2"i3uBYmL2N&*+='A1e(fJL$#[KW+mVNC@2'%Qm&baJ&Y/n&=HUEldP%?qX/%(iY1EfKc7H@,0fE8&$/I)C;esfEt7?Qf9coWU?hM3l=\q2%$g:#:>"1DHb]EK\Grlp]CEGuKt)`"%r_[A<l"f09;3/'?\Q@cC%O@:fSV<TEDmEnhmr'd78,OolFL+j0$^(K:_S2[nb"JdOLI]m9#0YTf7fFmCQD0Y;@J?KLAp1kl43#F`%FM9_-+VIR):Nd,fc/N6hB-GIHHLls#dT`fD6V_R7GZDR7G(hMO(-%J[,F\bf;cKJ!KZS`@L;-R0\6XN0.Zk6QO]G)DCdN;NK=VVQ%7QC'6=$Q</6[sjWLE!n$OU\EDV0"L8/\sNS.Z-'^idCR(n4'6R/MYiq0ntnddC8\IC6j4_06dB?QuJis&^quQ?'fRh2r.)/?T-\3%aI7`optFo+\<SEB'S>Z_3Bq3J&<dooaDSZFcqKXZ#TauBj+G9"pe0<YaYp=nDMYg+X6!_Ek"OC[>oNCijf0H4B="nG/P&T2(j3#R%4q-um8&)+k.aR`q%-e\"KQO!cJn4l7N'm?DUQ`Rd!`%3=o@=&**:Y:M`tAQRO>V_<LY/EZ.N;mCI>WI6Kl2W>3cVY(Hq)h34'!tC%etbi2L?*/SXHi="I<Qe1N,kf@\t`k-S>DZBf2>DD+nlji2W`aW4E]RuW'_pC,AngQR)HP1qJPD65r+QJ+-!?[84p;H*#Gh+_lT(5%"7J2(mC+1tUR<ZbQR6sj2dFAknDg$UiY_:7@L[:r,u*"-JE(%koG[FI*B'H6_<8M&M@5ET+3cIs(lKds1t*H/:8gbfGY4G\@:Z'O%$$4_1aBh:F]L,6WFT$B&QE6V,l"rg5h*R^4PZ&+F0b45\a#6KDVSmRQD?Ys83SX:UJ"SMLT0qVHc20AXErl-Jk>tDd['_M#kql]F%9HZ^J:-Wu&KsVmX)iA\[D+>qjmngT!Lb01I1q(h8>N`X[Qr#L;SjLLOASU.+,9o:\@]DWd.9K4d'o6T>76`g*#0W`%RpA'^"oNo-%RSMc;Qd/AjE_X$oe*n[S;7Kt)or`8plA-1g;?T>-'m[Bapn'Y"qYK7lN=3s/`/g]-O't!cpD1<W$(Gm+1\R$I9)3Se\oo;@4%TF0%,V.-9H#Z=9cYW+H'tFMN%sb.,Lp)KIbD=JLV0`a(QFMej2lZ^J,QdCJ`,?`FZ\#r[9]j%+:cnb+Z35QXhb./;Dg#hN@"-+;?l>od%<IokW]/&9Zl2]Vi!)5%2bD,ug\QWT7ntuT(lk<oPqHQhRH"\LYepaT_a@tHL7$8L$Dh_%o[-E&+9(>A+)i@Zt4E^n@)$1P*`GB:t%n9$G'II6qe,*E8)>p'Z@p#X/6W=Z3<]'k*#=J'^ak%;$YQle46g5(ZZ"e2ho0%T&d;)D@SN#%B&*O,3rjW]P?#WtqbV/)Sag+st=%o*cAW?_o&P<5g'G1#a&/pP\KXQg;8,"%dmnbP^!7qr*HX,gYU;(KN/Vp"=<lZP8iT_-lM5"*-BrL?"]J@YJDIGh8JpiOaB8<JP2<%o1-qjg%s"eE:8f81#eRLS=%ZBo/e;P(?VKRNBFi!MZc45mK0E:n^/E)[HH6fo@gt&^d@&rpg1im?a>-+P<tR5d.sEFi@a4E4I4qI%JSjtr2l9U7fG_0Uo08(_!Y&t@.(TQ98G.Cb\5PYigsslkl^PCHq13H53(1+"Z@'c,S$/B$!VPKd=N!PpY9RSF?``LqYg5o3hJBMG%X4d1=>r,ind7^gjOak`ul6)+X"KeG[eM13MU33o+3W%iW@./56A<%jj<F2-1:4HM)ibu-h\Ko;2s!guHR0:'FJ[oQn-AEGDEEtp*%?gIb>EKB4Ak$j*^?th39+EFm1E^s]G;^1Cd-s"MFgFMt>OFIX`YbHo2F><M>\8TPuPO6]AH]#b`s)6b=aac<F<]<p<([hDJCPgX4%fc>b&3^Pc=^4*^%=>TX8r\8L0h\&7B]0*5ZA*B)`4D8)5a0#cT@r]_:jRm4Wd8.271E@LiXVd-*!APiU=H:gd0msq_5'k7^B#hW[%6V=VpnO7Aa[9\;70*KUdLAVV!$Yd8<O51[NqUPZY=GO8[n>6dQG^8/Z4ENp`TFe!(`kLWu2[i5%6"bJPn"\Cs6]ia*:%f(o6WWA9%lb'p^mWa_mB.m!mp/gUpS]c@EcJ(b.kKA-eBn(3o950(X5<b1nnR),KrkUIB1+;54-`m<uW"?qGSA?r,5&gEK*)V*TSn(9S`lC_]%a\$__T9lNF5'jErb8olaB--P:!Fu_YG7\W+7YF6L!g]E<MnV*JJG"K8XGNI[8+"Gk!=[MY^lIf\/8<F6/cqA],kd$V0))thbs^/U%hVlZ,XY3m<pBRekmTkA5N^+@A;(>rH`Pe\VSjrNZXiLuWD@:JHXbq(r]SE4D5Y)=DP!^C;>I[Aa^\H.,5aK*oN._4'-F8oKn-Kkm%a_].?YIG9WGt5/TQ[lJ'nG@&'(hHH]WpRJ7nm"Y$m-kRk(Z$sRpYN^b3s-hQrd+bEmgPR7&]t`rU3#;>#KALlf:B0C@qKnEJi<5N%?sYS!?_G/<J9)IHIR/B&Ac8[8W$p*EMnp@UB,W\*ZjO=aJs3^#MV,ZTba7-T3)aDY'AY\\`r%SG9!\!n)-'j[##U.rqZQE^qFXN>%`PR,PUWGNtYhL?EmB$TaokW]tQZm:X8YEIedeT,p,IZ9sn15?\LR+bISfJrG+)d$)9;T*!!)VB]=0#Ci+5L#)Fg8HrWJHFQ%Kbd#%%'T&\Vd!8D/_>%`Nr#blpe3#mo'B%\i6beUYA0WG:Y5+nLs7;"!_A\>4HYD/*GQE^-cH7`BVPBG&F:3@Jl,kT'o`#3Ii'GcBR5L.%jb:<g;Su_iP(!@"lC8/0:(kAQFJD!GQEY:-Q>\_adaq:Wa+%qAcPsV*kA1_.mkH'5UD)XUNjY(;'T;/"r]<?uGtKB'$CIcW)&\E%%B!siZVeEC"&UI[lPahb#^R<&S%b0Zod2XRZ#`3F/'Uhscd2jPKa;9Y>C,kRFF,kCog=ZEmG&0?ips.M=M)u$EPrgUh@s`JEmIG'E%0AsdE?-<V]bcFFQra3;WKU4#)AE!m-Jl(R9bucKae+i4?r%YV8Pl:>S9IJM#gZ9u]^)WWNAO%G5(?6Qe,7@8J$LNDc?GU2-OgD<G%6WD"A^4b#I?$!.r4iK@'K8_i6_Wa=#0$%`>DPWdQls5I;9*SG03pYT62\S)b_V&M?eU6jAmT>XBeEZgop3khOK96:PEh_qCP@]5j%Z2aM.)L\^sT[RcX`(_"3l[D4EA$7u)k3:nqZUl9s_ac377&YXD3(P0I*_o%LEQuj4Z$r4E/\aV@J7#o;<]jXPaY-+Sf$]#)j<tP+%",3`'eOku@Dhr""ARFZu;Zb#fi7*H;hTGA<5(#Q0\Fc=ci%j^nb3P&3TUj::mA8!=,t$dDH3Mej.#=0*O]sh+$F0rgd\Co@Wd9HR%-e@bM2A1JZANO<W3Qbmc8<<Tla\d"HK_k4f`fd+dq6NK`WCo;7]7(.>?']gL/h@-0?nHQK#.3p5-oi@rrnq:AY[r!Q3"eu.+WH$S%$2QDLoDIYW5gZ]Z$oFLLpq,n2'4a^n\FE?:>T4!ggOnjfibQCKGLktUN9%/aY9]_,,o_!!CG5b@FNfd3lS&W#G+Z,JleHgX%>L[/%L1KY&Y*I+pT]"lh,H5q0cJo%1m>X;@DWi%C>U,Hf!IUUeliUXrK\+oX%'RcGDe4l&]GA9VH+e!K/rFp8XK*5u=uUOB>%uP4Ou2/5%]c#G.ERnVT41]^ZFJ_&W?%/=[;)bd8@@,DZ+%tcF$>=N@![oqpHE9H'5LYPJN1"'eikRQ^CM+g)HEte>HT]PSb>6mU0e.4MWbMc"%`f'6,/J\n.a5i@PhXMU5If81m39f]$=*\Y![rM-0]16\@l/C:cX&j;d'-&LDhMn`/T#D(t_DPhD;g9mO9HiFhND$U8Ydr18`Y@T(%G$RZiGtWodiH(jB5dMg1"$:iA?p9@9W@;#9FY=jB*\@WD9)Ntn9$N,sLI`ILBCE@^F7F%oK+B&(G,Y:R5mrth[m7V&VDH0eRSh]R%>JA;DQjH;#cK_?!8$KcK[rHf2c#:UI<WD1IGE#+,E/Hu:T0%1N%1YR[$6OMKm+=t)ereVD(/I^_\)]CNKR?C-2m.44CJ?ie1!s?n%5p>^gid$GAl*0Ufc\-*=1*[FC(0%Wk'"3q@.UZi\R8(unmHmBHIPT4-lS<jM0"&WX$[$OZiSG1h$&1"GGUOEaIrAXPmk\9Pq009m%@pC?oA4$Q\7%WYo\_BQ]]RHLu6W`*1`H:WrOsZ;HJ%)Xi.[AEqnrp\LeH\*2D)->HA3,t[TXO8OiS/;rS'F,#QbrOWNR#,9/o@k2%AE(+%D`_[P_$V0^OJ<?-:Gs&>=H>Yqaf];+NVpTJN=$8\rIZ/<Kfn;\fEVRCjH'Ud5Ejd0/2mNC@1YEgi+.BMbqKFsPOY@lR,RE0%D3LQ?Q*-pb(\'u`qb:20hta1'WQ!Za:MQIAO4_,*UOm+0XrlO9k$G]3JBVBUhsh3HRDYSB.1`/WOeE_b\blgl7G5D>.4k6B+hM6?%BLpb,%Qo,-Nf6'O7.Woh/ibBfY[cMTkOk#5N1MG'Fo>RfVo=f$B[0t:7Hm(43#\hh4-c2P+IqnXEhBJ^YCnjVH&(Qo/"WSGN?"q)%Um%,h:i\+Y1K\"$T06:`dG_n<O:Ls]"*A&FLee'g%PO>:_c0p8\1?<]L!MdorNXuDpF!8?57V;l[(_XEmVc`WM"3A4lbOQ#lqY^t%6+c+J`$$,8PKu3))/K*74lE'6RoKTLQ[DOPbUQmT&IbSAUfq1KV?Y'boHTcaor9[;>j*1dQ6,U'StR\&"G_1nfBS](REtB(.ijtT%noe&BOTIZE`ePm4;7JLX<5_#9oeIO\YJXX+>TUuHR:-$p[bt9X.!:;Nkro!TZIebu3jk(pKBE,6IVBO0U:qq=%"/Z&i&7F:U7"m.%lq9Rm1D<:hZf>h7NqWcVnTJ?XI!ldfR3DP.M/;+.1eWa>kgr%;C,#MI'+Q+N(^jss>r^FIb^Y8a2^6@i\-5Bd%`)aW19Og<X.[YN%8ps"j_Lh+Y#tJ7JT;c?Rm=D8M;V^hSMKbEI89@dooPdo:iji8q09Jqg`W*V+73]"`=YptRS9Z2X,CWsf%gU"oRELgKH0ID_mqL4>%Ec_6[<VPm/;AHmVT4#CNLu8Yuc)UXjoi5B""\1um08O)`9FkI>alU23chZoTQ`;=3klF8B1V!DN]pYeMW_+R;=\1*.>(![OlcFhc%]2.lImQ]D&@.VUQlW]]/O.]["+7(R;:QluIs7k9fVnPB=iU\S3qcXk;PN\WG0lab(hid9;RIAte3'h-Mg'1=On1bh2-dUW+\[.e@%p#sfDoD>0:rV#t+9$]PBqS)jk_b]'s,8FOuYk?\OT6^[ULWd/V4BoC:"Y#3LjM*e>:-\[Ib1Y,,j,_7,55K/?l+tX>/PNZE[r)Zl%DI31uRnNcEpYXe,oLuTq32c%<>f;:.-0:?]T+Be(i8_fFcN!_-feZF\^$o?f4(liGoUh\N'!u<GDg_.&mG,?UdsjTm<0(D@g\U0W%gRiolkOEoR#OY;o&C^&B]H4P:Mo2i1oD75\/4\52S(HiS@'H^o2QtH/JIeY<2QtH/ff5[cc0KFdnFPEUS(HiS^oA*hk4Q8BlnGbU%oD75\OM3\4YKs>E<S<q(fB1Z"H4e3[oslrEIb,R/fB:_8oO$"`GT!spH9''9>,,;SF6jY9EaQ\c!=eW]p32kY)Do`MJ+kh12.-).%1CnOo9t(+o8HV1nq<8]_!@`KIn"P+&$/#@rT$FNgomAP\_XS/_c)+/*/'/[(Gk&2@YB:_sXs$V$RM*Zn>ki:4qtHGK,>S]"bJ3LN%-H3td;HQKggfMD20=3WUIX3[6ZnF3&L.j8/J^kc:lIdO:hFu7XK0s5C*^2a]q9;juP1t'GgAO6RTn@EUbJqnW?!mPUC0.F\Is,9#%k@9"/_Xqr^bK29LT*2Sb(g9j6^M\b!@FYjcch(E&VV_7dORJh1^^&tVPNT+)IJ@^WP`(HST2VhBIhTP9B92"&_*#$(==s1#@d5_>%rq92bC+<1aFK8_rkG*GZDLT<0.a1,h^WWP'-cP@B1Z5C6rG#;6J(Htj@YLdcf_6u2,c'*D:Hnc!/>$a,5.sbS/pP!0O6?!2pi?*l%^&cF5=IbF2LSl9:#OhA)l@2RG\pF5[==\S:2Og=3D5T14kJH6Q.t<(+jsM"hT8p[(D/\nAH2d)p]=I$ahtRdS\geK@pMVpumDf(i%$WfN<0FU.;4*LVT0<ai9s6[rF?f:(eH+\#%Ir\a@rZk-n^5JXM09uoU5J;.3Ri/I,rO:XUp[iU-2?3<hml;KLZYrV;b-SC=W1Q6?%@Gd[<0r\6%EpjKOJNTJ$k`;ob?$c79YKf8"-uj<4G:[u'mci?T^8Gh)&%6ETkDQ[-T'hnNYZlPX/b.+L/.Hg'XjisYqr#)8s1'Rc%h"!UoPO8,*P,U*9<QZULH2Ce"1PMh#if_'K^%^FM(\aM*#5;n3-P,Mg@nFpt.O?1k3d9rdQ'2*s2`pOUWX!I4GkC3p:ThJ,JkF._%J%PJreUucXF;@)&GAh2kbJf]a/<0>\OhUMG+7?gMUf&S.mBM;aqY8^>9.+%&de)JGo1-s"kA_>7hgT"1jPN^-5%UA4/qS4oI$toH%\c/fgaU`m9=YIM`eUK^V1`sBZIEc\JLNbr[d=$9&XV8HVh#61JJ,\l$1V]t`L#Jqjl.r]'I=:)lrd(cu./s"]7J[%$R/YR7(EKI7%q.3CHZ^Y2nq5;7pf<G&2!i(PZ.Tm#-s0YMei6LRW^K`hoUO2=Tf&HVRH>b(_QDS+/T$Voq[4#H1s5QGM?k0n]buH=P[ba?TX%8uS%i\+ZA^C'KAVscjJgu36LQ<uhR0&bt8?!UU=DLUs$bQ#3`jT3m`\))Isnt64f+hi<jT3'X@6FX#JMRS2N7+'VQ/bo`plkPDl2Nlj\%`s7f]`G]b6mm*V/'*m-_]mJe_QR-?D<:Q._Y!.+p;?)_'ONV'gRZt\ep;+qPUK)+07E'9HiS+=rQUB$s_jAA[A\emW*;@#0r77lJ%4t1LNg]FW+GE-%BohXj)IrOs8prMc*Hj;8e\sE##-e6N&J#HuC/%5Ef$;RRS:8n?1@a?^e]rKam%\BX\Q@kYi85K7@J(Y!UF6r"f%4h0_Jo.LM;48Ieb"+JpQL#m'lUXL"CRVGut%A/%>jNCQHQ,dq6H(X3r2QGe%=-i+T0E0rseY.s<5[Wm2B(6/N0C8hH)^c\s]70@R%-g1F]?i3[Vk#GXDGj4W9_pgoQW_TsA@];O+/ACRdHh*r<++:TtdtPc98#Q%:9Z4_j3<.R7ZbO8'm]O)EDWe(T?ZL:V[LN361"jLZ%]Q&NU&fTQODk@"CqPWl3f"%^Ma^30YBoJRs]6m%$VZ369o_.,d4GEU-M26fWs6[?%%qaS_/YhKZ&Ol=4IX1t='A:[gQ*'V4kQ6%?%qRCCQpM'`DQuY,+]D'^PZeO*V9tu&Y)NOoh3</Z^j8"(Mo%oE4?24<7_7MMLgeOi8r&/0fO*3Y`q'nr$PLDe>>BG5hcEfS`n%O5/%o?TWOnFkVCQ'VXnhf&&aO%[)EHnd"?:qjS43uKO4IX_6e\Ou=C0@)l]&NmJ-n!G,[48t""c@:#trh"V6q1n]QOF,%7/e=fnr7KH'%c5aS.^=j[$f_P]"hYI5]iSQG/n)Uod&"T<,:IPc<*Njm>EU=1+l$e;*Qn@l8^CD(Rc[RlO,RL?r&)3JVr3"jaH2I:WB>aO$^UFLH%SalcZh0Rfakjt:94tmclb2+*DjN"HD?OTk%knl[1le%#+a=jpQ@R&d^$\I;Z\P(eKHgnpYp]Q*H"Kqj<hAu3C?aFkE&_n*a^U(^/%hfipqj+gEcc47tJqJ:M0Oo-;m8`ZTfmL301D<kKBrMJKH^8.Rs*eSlaPNGnMR]!pYX;Yg4_YHFom(Ls&@sc6<TE"3AhSl=<Jml?#%gWsKcr,IY'=[)]Kj<ka.4nmE$hs$8'hR*4,j2K?Sc13[Jn8!nenql=`a3HhmpttDEh9mq<m+XD[Ic.Qqn*Jp0nbhg-;ca5(aec&*%_uF[iqr$CbE;o:u',OHr;a6oQE;9/%7_doa(D1?^7_BRa^;%G@P=j#Bp$&GeY'Jjs0b3Q7MNHP0f?rhEGZ=5.n`Q6&)=MMNc^T8_%L\LWS^YbU\i8N"[H9sK-Sm8%MRH].BhjhH.X*u0o8;-rKEFRHV9<1q\n:R8Hogk,%%,=&DiOt;]qNf7"+6Z2,ro^t%kf1pAKudo`%Tnq^i+"j'DG,eAuENW"+e`W!sSH%T\FEP1Rh1""*s5m$>:kp33@d<IKgJ<:1Y^#orZ1Hi0]ulk1UTJdn&l5*(^AQ*^m?0'78aG!#%YHGHGp[B!c_H7:r`NJ9k^%;K?F@bYX=7!YFkR2S(HKi=RZ$Z6RG0tn)lkR-f^L.l$*$=m3h8<U($i^.!YLl#9"hU^A%XZ1_i@ij&%`9Y<IZ('T2pO>Eap^e4WA`mr<]YA*ca#6\_!9F"9ajZ%?5e;AmETah.g[i/rO#Gc?s#7`CpjYrmFFN$;.D[)4dI!KaPP`,NH2;45%:2On+h`,WQbdg5>0)W0TjL5BgkE#W!quEGZ^Y$8?q828!S,2K,RjWcUiANe-5FoZU[G*t*m>YQG*;o:"s5SJcU_MN"2U>d^)eQk$%PP!K)hW",)]u=@J\)0;hrQ0[^J+p]Bgt3HsmdL115H_ddIL"e\RrS%Xbo_ER2YXG>CE)oahF??aH"usJmgd`X=OlT1/[p!+TW\W5%#3(-icSq5XSn[fAc/L^Y9ipn%(u48eNL\.-*/?#j[R/*J=WW;+R(Ts:doS3)Q:]alF8>g!c'-borUfgV?fqq9hu*Fl0bM<W7d.'E%W-!6%-!;as?U<3lipSglO]5r#HC#!:@iRi.^<OH%ju:%>\&:TEYM]8Ml"5%D1l`;!oPU1!O49,;(3;([\'MCBLBq"L`D@4W+j<Q\%,@GL\5]ee(#7j(g_3d>nj"-6Y!A)Qs,DN*YEup(s`c:.a(_Fl!Q86ibB-krEMkbj8l=M389$fPU&ZM^;2M@26K>'et"0aa(Z_uC4%kMV*q=ItMt+`Up-AgJZFFe"Fb8Jlu.!=/mEAo<FsS-.Ii0GiT<`IrjS*dWHN!(sSd*0)P&@@#hi^rBNWYegu&ZO/>e:W""UM.m_1%+P=:3K:j$ET8dgjNSk._EhklTa9Z=bkrfS<<.`8oGTbW83--h'@jTB)7QN[0R#!$hA41LT#7t92NeBI;Yfi,?Bui\3/M(HTC)7;_%OeqDSJ;KK[c0.8_)5WXH$%u<EZ;4ok\^Li_PG!=BB-;"9/r%H!7Ssfi!K3Nqm5)t<S-c2HBOBcCq`l!;)2=4Pb)ljd;T2B3Jn[Jc%_cJKEPfd9VOC^%$6R0gYP2MT*6419OG[O-/pO4p6^u/@307g&n^&\ERb>8JF+CLiu^bgg8J:/]0=hk%B7MGq/';9$2-,@=U8Gl&p%G7nmd"4.[ZNrW*0+>'Po"!U&dZ\VJ_A#/p`J>4CM!,HrjoN6j)R";REL')<:;1d"Z&]:mVkmd8)C'B]BKYbY_&qhbKKcG(:&",,=%$IuuPLbQ'LEu2VJ&onDrZ&ir:0Kd]"0I^MMR7.g&(Ke`j"u2?mN63h=8]\\,R&Gk+Q\RR$F+,q)<(mcL8B/2q4@9GE>0AY9kHD[c%,V!1A/8=&4/37=^oegGhr,as"g\u\9?dM(Ne/#.G(``#Ps64ob'h'#XAfWM/@AP1I&Oa6&hq*]G/gI=a-$9VG@&f37?b8cH#FOFp%8Ki`_nTd\L-d\R7:Gm0]PsY>qBOk3NThJGV=IM-HN=<DR-(7N-O[5>OU`(U!)6g@UH)cu3Spa'QUXh(h]$\S/1dKNM>pJBbTFAa=%dE))+."UN"e&W"7:)RaOU64]h:n4jAfn#`r]UD57_s.9ZjG?J5_L9[OU67gE7$`M+j8nK;0cQYlhip/WBqgf"m=B`1':h5ccc8"B%aforg04gl@6#Qp=S>p+T.l4\l8qof?+P!8;)4#KH%I6%m3'E57X(9_1Q'A!-AXJGDCSZh*aapYK6nuS'BbO5UZhH.Vq>8S414J#a%-R":PVTJ4QZ?k2VNZ!HC<\Je1h2X*i]hBNa`;7+3AR$&q'.KZBn_6S;(rbiMXpd<ZX-c&_^a+hI"t%6l8R[Hbp;#04"J_<3"Cn5:%U?cBX#r>]3_<PT:NFSt%^$J$B<_jfTdED=T*B^_WH5Sod>o'0$4m910,=F23d,0s5S`jVq_oXcjVO2A.f+>8gbWZ,=GU!)Rc2:Q?%,976Z\H:IZPoN(]dQ[r?3RMg5l>c#;nd6j@n3)5*dYhT))c\mT'n$(M`g+-E&-&uB=2TE`m`,&.<n_"AKKA"[f)_tN`G-dd70C6.%;4@Z/A,7Xkcd7i5F5qsBhYlj@_XE3AqKnDQ4--QcP/l]@7*K!5`Dd94eb7gG#tCg,,:jY?43h9&m-j)mrKP)so*Gu;fRIrZ*=p3S%GFtn%qU4/*G$n1N'i80GbU?@&^h6L>W-]O93u?RIP/gU3rRL:pI9L"ALle3NW0kE-+Q9"[@\@Rl9UdHi$D5Ah(hf?"bK6e8+OEnA%Q7:@b0RX[XRtL1J!Eeaoqm5>"&\n3Pna>7oAKG=::&FOQ]V!*emU@p;JB>G[O"p%a=.Y(#)t:aJd=Ok,#LKcpqaBS85j/;Npe7FC%8e-OTphE5aJ6Qo4CP*VG!=d,/+6CSI\VO%D',@$+^kTq"],LqT^?'q#DXF)Y"K^53i+$(K&Al*m8H?"5dtn:^NVlg!=\#\T1^m!]%:VjLR^4!F5p^lD^A^Xf!"]?pH@!__2/_u$"fE@?,90:"chOEV;Vb-^?kuNotbAD%T'!EY\`QK&FK9\a'M';3d-?Z/oZh&al,HsI9%U*Bjo[`En&4[BW]Wep)=@43?0W.m,pAC,oN*JKu[Ao\9#BO?8uA*^0oKMK%Pc8s>jX=pejX@+#59;<L3H;C+6'.q0p94/Hf&uPVY%/HStZV96+nAdB2@"t,3\TXU[ilFg=qG++ZQSSf%]P1WU&0;U16g3;HWN/PB_1o>9,R/>^D'BesD0&ka)^\S1N,n26L9cW)@2URCb%r^Zhl=:*PM#'Cd!8j7s4J^X^13e\0r8&*lp"/P<IfNEU0oD<"kaVT$6raIA&/<>(es!NlipE/:`5?Zc&ft/]t2"lQ-Ug'`<n':C=%O%@Ks;l2p.EW<kMHYp::KQBrIkFJMH(6>_qa\N-!DsP>S5NK<NY:%*PrpfoRp^.sS4][a@[q^l%bI^5RoX;C1k*Sa)..#@,<bma'%[T7bINT,(E!g@_B%OPrTM?/0:[0IYtH,U=4EXd\d"Q(SfJLYIXO\eD74UkMP,JOI)A>#iJV=+crPG5NW6HUL$(G+^,:Re4-YTc\s%[_E+IIJ)*^:^(4'#RqWn]7m!>;`b1;E:qEHWEMWs/\sAYN.0JfjNraW.^kDE&?^PBY!^&-Bh$`#SJc#H8]#Kk>K!fu4>C>8[-,f/%`_Rr$Npg*ZQ<E`@AiGt4fiW9T#@:#=VMqQL>qF6N*NRMG(%;rNl_`f6h2($619$"1R9k&>)R<![/(HiDB@$nX<\S8\Ju/Mf+<GA<%Slh[o!"o^T4D(0-/k!.E-utBi:mqDFqV_6t?jkC]A0)qXco469P/.5kNP:h66V;3)GoR/V"XXM;8MP\ZXq^#G*>IF7<HBbS))/^E%ieCangi0)%4d=/9-5]Tj0diQ<M.MMWV?oL!1TLpB%%c?l1u`=lr18g1dl]"QM?O6.3dYSDVDe/RZIlbuW7+?j79jUq[ItlKg5r&6%'LrQt%Xqk9NbFem@ji*$"HUqIMMcLC;%[1^mLin`hGZKN`.anc&`[k[ChA.A9p)6uk$T)^i.hZUNQ+f58a2ugMC^`Ecfm6jH)&_[%`L0LpTKCZR"kVA6DiW\Ad&Xt$KW>piU?L91psNd=:7.)(WU;Bdg'_=2Fa@4B6J]u0`EWoZ?MkHQ[c/pY3)3^\$J&;=*[)/1Q&&?B%#fW+3lSX:(5R>@q)f_XU9mLpA'^=%HUcX4_:3RPO2rdpG:#^O-h4iP5F@Q41f7OP''Mb!&)QFY7*m:@kMQ/-26PLXdi<FuIY"0Y)%,+Sbg:1oa^Am!_X&q15=,*QXb-e_pW&LY"r33ScBNn^S-#3/\A2@C?n'A'::K@[dAm%=BBE"bd53(7B)K(LoQm>)gFhMe`ORREtX%fqNXhU..-D-iH#%@:T1lW,_sK3VtR3:@Mu:m5q.Z`8-h.A>WTDRBM3a%S/[u-0`\D;J6]'$f*"k-,H_.NEqI5qp.E.pl9tY;"KKI%f8_uHg$<TgV4W6s07,s7iALM<]$2\<X?p^qAc3S/?^2l*AVI8+QW7k8^?h?-lgb"i0,mfWq<jHpk"80iQ>9FUJDf<KH&bIJ24FV4%3uX:pi#?!;5t-c8MjS/6gde19UUXMA/<IXr,O9E&JORj[8a&=L(i4C.^.\+C2FPBJaap^*aDMcN)4K24LlL7cT#.[+B\tf4$R'48%[Iok1of'/cb>_J3kt93E9"a%F6"G@pFXCK`d9/YA;VWs$\V]!g6aAg5Z$qkY<,UNN5rONlL]@AqnJJ,cq[2Ot+TUCuN[]TfK2f[r%Hn<O]_f.E[&32V**/^G%H7J'mHO2mS3(4/u],QXDB06CEn$Ue4bf2A+U;4BlS_ATc:HX7:RqfkF*!uSn^[!pkEC5g`cIZg&!EsK#%QtA&@!u"mb="KW!Hs@g#[*(^S![1_Y1Gk"I#(ULN]X(95GMAHFAL5\7]2-Z[a(,L&YKLJ+3"X5lh\t:kL9\t5R+kLIQjSC8Ze7+G%?!C!6*SJA+BXNujjN3RYIp>p0kZh*rj>CmG?EJ((iA9!`kh&r:Xd]+/aDDm8,tdSE3VcK&9/B_irhL96m5><rdiMt5/[_sd8Uk`G%\p)r.MT^+^B*Y>:B*$:VEcZq/3)@FOAL<Rj=Yb`nQn')U(!G$o_o:hQ0k*&,@h5)MGOA0[$4"ts+.II.3a*Smdq]LdflrDl@V)Gc%%&=M$?c9g&c]'P]4u\-P*]_g6.1GPggCVTB2#(d/A*8OW20(I5+l"1s4C4//TimH#d$AWbJ_=u</!u4SF6emC_A*qD.laE<HYR0k%2hYfUo0Ar5I+"<A2f3c0k=S^?M\<`T]pJFDLAc*U0Ct8M(f7iVA\PqFa1,'jYTJ(Ahci`!,+o$mJPQr5#e<GoKcg)`_sB/KM@iFU%=4D@^bWBIGM%OG8^H(6WBjR>rRPSm9Bb%oOVI9M%W<WruDYYp.kfhX?[kqsn'\EW#H,Qh]b[KU)J%3@dZW(L:l@s=FA9<D/#G`C!%;X_m$ZI>ThmrYU0Q=VEcE;db6Q\!mN)LfS!Z]FAbA%&6"F16G?LuhULqU^OB!^h%F'p'#OTK2Ss89ad8.h)dj4[![*"H."r@Hn't%oB=i&P,CS6kNH_L*gU2*e)#KLjss.9\f709>7_[@+>WfMN\[R-B%bgN;J(-a73"r5>@.A>*R;bk%mXN/6,bt8r-AGVdZ=F;"<\2F%E4?[m=E9W`!27bC!taE#Ef0/p"<`B"-30alH34^s'!L,13+fp'kTP8V_)/`.0aSLlo:$QRY\f$?pQQ09i4F)o%'dU)NWsQ4e%'r(%MRNpM+VN!^phl%>2.l[oGgsTi#@N_!Bu[CbPBZb.ieu`IpPZOg9:=,B;&n$$a.1/>pV8pf_tpYm@fQSD0@kA9N*IUDB[26+VPXbG%+\n"e`+T[b>=C7LhI%,BaWTu'Cli7[Bf"")e%X=r;i80&Vc7l8:rfH1,9GbM+]nOTL0IQ`/V.ap9MJ$qU)PFY'c:LQQ>f-#E.S>t%U`ElAn',mYe"lp0FK8*$-.bj]o8At("#Mu*2-,Nn'T>2-81h_igBA>r3;Um4,MNJ9EAkpf15LlmOCj8^45ErdhUJ8uR_%=QA9ZeT%aAa]]S-pX+j"+!bq91g4.El8CH.j>^Xt`??^'QHG$R13:6l=:>;',DE/13MJb3r*5Lh'(nla%[?rS+%R,6CA6RA=][!N?_!gl.U'%@V0P#4iLC`3+0;XdB!I9357^ZM^"_jMY'oHmIZYm]p\QJ.$?IE8JX0+j"eaYO82]IN]n1jn86@WTr9ESdMXAf`+hjFj]&:iA.'SK%'1@R.m0JWEVYCKC4&*lc::CR@=_aZ^oG:@?&J&3;`"/SP/1-2j&PDi';`s&r8?46@#TOZG919F1Zlje=ok%`78mc2p$:V89KkO<b%.T'1\&^Q)qa\sl=5>GC&n0)d[g>ARfCQ5=pO4[[J4!6oVJ;h3$U)`H(=Z1GTPhDU@OiNX/eu'tVd<_7K(K:L6GJ.<YZh<p.nM:]$%hJ,dANuTHG5?"8`qO-Z:F_gSs%\4cX:0&<(;mH!VRVrnH&"1<)8rdL%g,IJ?RV;a2>1:DU;p74i(&,MVT/`9sM5*Z2Nlh-^BaF4M%06oEe]57eS=(C5gRUN;7f'6nN+nb(K&3'<q=lm7_qo_b?X-abAGXpe]%_rLJ@#]i`EeG`82R-?@CbSp["=i$pTMIK7a<F*/`G*dA%e'J`!c5`<8iu=X_Ch6#`$*c4oS\@,fbXTD__i_ET.?=H@?RkN7-/^5c#8;ei(e2et70J:f-6@E8H&Bt7eF(<ZUDPd21^tna)g<>7%)-f888&cb%R;5#kLXcuMGW;NGN>u*:>h;qr_u^^#0Md63;oZ7#7n#tQLel;Zfq!9o&T^*1O@Q*f^sdFgl(ml'Lqk:rKKno=nO51=%P)B+FA-YutD>/_3+,PXl^e(e05h/"GgDG.cGq9l!Vt'>g\XkuMD"?^#@W":"=A"C&N+6IQW\nV?FH&JlSBkI<-6g"/iDU)Y,&"eO%k$$!JPk_5L.khHahi":60REf/g:9H%H01(`Jbu3!!nqV5Zur1.%Qr)r29l`(F?)9%f)(oipfblF<,&">d<=MQR1u5T@IUo=7*5)B%]#=Kn@".,?nZtl8l_$jX'>:`>0D89`kFq=(48ZX-^/oO%]]A&V&$10?RKDKOijY*hU@'L?0I;]7KEX,O*DD>K,,(pU2b+613dMq:%=Mghs5+!%$K/>O&+O0R8m54Q6HW):iC$MjudbW_V*M#6nac10)l;Lg%_`?HaVM(9km13.4;m96;0REjmUKe?JSKPcMBh,\_HaCBO%1b$I8UN9NebHgG/X8/SRXn[380Be>(p=NBs+!,:M(9)$)(1PAjPGF0DXX3Ml%+7YJ8FuhfSaIV8DsBeA:#4K%ZF`J=A1DIIc@o0=%jJg@KEi,Zi9?rf:J$I&13`Rg+c0S39+sPL7)rAd>Bh,ZY]bt,`9u:nD>D0:-\Fk-Mkt!s=W`k,uj_N]tQ%&]YT'N)2^ok_KlLfdg%k:4h^4kFi#]!XOs7oB:UphDrn_:Iq_^/<*<A5).94P(3++jYI2V'QUU01[ei>k-WHIC>`J_:7>]GK1OJDJB4Jj`)SWH`\E%QOgm]%DpqRb_Ue%_^3[q\g5mO=iN[h0>3V`6a';R&XO1)K8"X">/_;$FD[\h4_1Vure]d$W$l@-r.b.d)@8\&c]XnML.4F;Y0_6og2G`uG%9^3-O41;QI+'M<*U'h`t'6XVd3sU"T0\Ykk7/4F#R&Y;UXO1q4!nK7H]@dQ_nBpUc(o3X)MKBM9gZ`=[oOa&)Th.q(Tj,`i)4baW%nDk]-X#*TU/W%q[$=(5adN:TsRHm1>TPCffn.*Ol3Zu>,7YF4D/'H#,omdsm44,O@A\j49TYH:q!"HLnWl%VSn<q[AVcG?JO=0oZ%Lp>ha2K)<[3N[J0+u3gt\pZ0tL^buM),"7K&pms+(7SY7Wh'54D(T>i<6Jh'Q:=!,i7t+m^d8LmE-\0f_U7_g)5N<gOj3uA8%9hX%=^H9?PiJ<P&^$9pf&mq3,P;Iak<GZZ5.k4J5l1;CGQrpSfWliFopN\9[LW:?4bIn$]!WEV7o>-,ft,S>QLoJdK/\\@LRd&$j;I$7%a0,7>8G3Ir*:6l"`26R/4Tg(u2CR'0:e:KcH?5Sl`68Og#E<^\Ap]MBr-B)'QDPP;.VueI_&?7G1*,X"3%ikK5@lsr8S(j^L59nk%U9BNFZj;EAcB<1h,/d[PcrSd)OUrO;=B,4>+B$BpK$ccDBrP*91Asd--::e6g12UMVP+m"(m'Q1?cPt$0uG(.jHf?j$Xls4$),T)%F?39Ld(rC%g`h/kMKL7Z9:\r.ST7YC&tTKe,*um*FW3)KR/F+q$lgl"AM>P5Kih,qUA@[<D6&E?l9?GT>]"aa>lP*bmg:#"<<"Dr%l-W@PgPB#_0!BVB.%`5QeNS[KS8D&j$:'`L_pJ,.\,[5fLOM2nlTZQN`kZ1;V;;j58n#-u:Gf7o923Pn+d->^NQOI/;JSpZCuq:N%V@]3H:\C=kBc3CFgBe,J@Opc]oq+c]`2<MBb2%@"&YfD(aDBb'Ba(.@/"qe[n^PJ+^NO_*8O*hCWshH$TVs0oo!G@r'FD7W1Tmh[%'[8et8S\L&892fn?8Bu%N-&UHON)+/.aUo\C8>K)_)TPV6c@I)BfFEqSq)m@Cc`K0RHOihoq/1R6G%ECrY$JU1Bqo<MBqj75H=a:%<)WhBDNWu+;DB&iX:@_VZt[hdMd0sD\g[jrO]^=$DQEe*i['b6r?l.Md+88[o^"&4>61[F`XjmTVGnn?0/JJ5<o]bq66CGlC(]E)%W31&.5o8Q',>`bA]5%W8!`u1Cin@)te[7('k`qn1pFFdogABOH#65;6'j'd$R!LJdgCe8NP,A2OZ:`D?"fd/)PmQE$aP[15#"Uhm%Uu%U&A>`#ph<@t./5&`&!:ibn,2hdh4BeB@5fYjQK^MO'pM$oZQ8;k8&BsB37+d95*jbu(jpq#P/rbZ2OKOPR&;!<H#gK)e<1p7]%n5*j;-Vq]f6;1S"$5gZ[4eZ3CKDRtM7W["2E^=5TK#m_643F;SRq6-.8_Mqa(5XS6D1*"LEhj9Mb_2rL_de)-&VT#e^EnJNLlt.Z%DXlT]aht_$T%s9]B/]eU\&\NA9_*M5PH_N>UudN"?G^:IHY"%;dSALH@GKN@"2O<lNNb6[9sp8h[L/)6?Ts@q;Cgcm@JN[!Qf.I1%(l-)U?JX?Xk<kYmSV?\4YZ/eT^[CG/<6FGrpj<3UV=5Z[QS:ddp&f$p$nogsFK20IFKO,])<$f9Wh`:=#k/l>O366T/R>ZL^a0lf%A-H;ejle-IVsu3g,cY"R]4%A2G;$CZY^@tW`$O4C^'eUi_[t?oHn"$g?&5>pCWJ+;\`EH%C/89p*>p9R;IOKedU-]IC+3/]O/Xt1%:bIP6:E\VI1aII3mL2%..,h]J/ok*\?FQ$gQP%eI,cR*<28BJp0a@X3--+W.`ITpj.UAEm6sp`\nnHjd:jCSpgD@YAgGhK@bQ>ad%nsS6M%>EAip4g\SWH4Ft,-QWFlU56qMo&1LjG*$L9Q2:OSh`0?>>$BOi[<Q5D!>K2dY(gcUg\po6$.&I#m[7LiKEi1XR%2]^H:+S%,#ao3cTE,ti(i7mFe1+^"tnI6F/i[b/C!R:D-IDW6,'#:]XnN7G@)\IQm6u9CE@ZJrkdj;(j8g0?gQloB6UU:5Nn!(J)E<G`Hf,=%N,#H)kLoMS=>B6/SQVh?GYaa[\sP#1R/1Q`4C6p3l$RYU$]<#);lD2`D5\s.m7pZH'%I_c'&JnF%Sp)7"W)kK\E0]p*T#;3`dUn:%oN,[(RP;];>*Z7H%Se/*5\ii6,[D9_$:2OI+^/E^/3-Rcnr'Hc3mt-`I165aTe/Q:U]@V#Od1l,,mLMFd-o*r0L+CW6j<F#'ks,U%[*l@CFsSW<P9XhDP:N(sa/]!?@\'-!+6nQ:U`&[l;k>CE]P9E"1c->3O-b!+W/+&CTWSa3Trnj42pmAN,3<m@\]\D2W:fDl]"ZN(%h/^VmI76Nu+njBY%7?p[gtI_+)`,MS-H6^.brK[JTC-G8Jls0"d:jn'm.Y-b6Z"]LmUX9TU>!1:KX\@-L*ml@Yq`e*T?8.+0J.i(%h<:d8Jc=U=Z;=P56`J@//r1!5+Q7l.,^bdC$o`kgiOKLPE`n^"PSf`o\sC/*]Gos29iU&rJBVAr1lf]'EP1@lK%EIfi7T>6;&"WG%Qj"+&+UtiUBmT+2=%V\8>`%lp^^OA1"j5Zq,l[L:d+[ff-+oDmq+5d:D=g;]DrGZ3>7_gF5f*Q*?@uK;gNle!G*8*ISa7tkWQ`pq%>^SNboG!@QW?N9J%=Cs;b69l:k3S>hc"ZMKHPjpF)dW=;#VX?cnK3hB+LkCL"FpVZ9*FI<]"Z9,7<pNm!Z>TC'^0M[ISgsGNFK=\%A9kA$7=s`lBtV0J[TY[("Kn7r%$=Wo,FkTh?L3Ia7E!'4lg3rcI:e:TM.*tl-=sbB3m\YT,)J)r3#'lH^irA>QLNb&+kckaGUK$p%2H7L/Mm$Y-b$DVF?,tP.Nm3XjDOr?ETUM/RT;S7PLO3:F=fPX^_b_tA)4t<R"_gOf-2e^1$<=rcTj/kL/3b']C;3a)*p735U-$%-%7"eP9gJ]RT?;iWoDN=Yj/ILeHXDNund9YafTK@bciN&jZ0SAdiQt<qagGIrAldO-!TCQk^Y&lN]f:`h7#JN;i8&YJKJ]JYTB-JF,%1p+.5oTPjJ(\9ES['XI5ZQNjfK$!5Q-"2o-B@nV3$+#>)&]_3$enEF3@s8s22gj]t(2gu7(Cg[MT&'q2[MYs?'P\$S[!,S[o'SQU%60h2j5j*JZ/(CRiE)bL$P(e^c(;.4M(G#?j(r`jT\tTD-G2WNi2lN]r:dc\%@U7Ap93iELJ#]f=Wik!=nuhn4I&\AFhLaATkX1Uf%820F1Nda`LX'?"[d+!XdL2K<$kQDP?85$fIl-F=T'.#3uA;aEQAZ%7+q*igY7\9**WXH,lm/hN@?!jrU^nCb*=k\\Z"bWNLr8;0S%TMJKb&dFJ<)ltJ.do'+:VE\'d8l\r38pSm:3]tfR+F-!QXNtFkZc+cMl=*LL9:X\/H4l96N(qNt-P\@&'s-^mD5lhmm8*DN;UtH9%&h[Wr(>]u&j>r=";4o610""<fKQ_iGLUJc[)A1f`i`79">2V1SUbjfs&<Tip[Z8@(.QPYY.7Q)`Hn-=!b5lN_nQ;4immj2C#i7:d%89HMA6aq3%,dBBq$`f5c&4WQ!.JT'pPuD\a+[QoJ:th.'fjYUsl[rf"UMpW6ZLFA$LFH,G?a#053gLCA"cq]?k_RSs1Phh\3gr()%+LYI`#)N@3@EfN,?Ps59Q*F(D"Ut6d,D9PM,@3NBSc\>"1DNp8&=GGFVRTG^2F.ph`'X)9Jce>Aq`%p,T"",YB8p>9&X8$X3`7M*%++q%+#$T&N3f)][6CL^b^B,O/?s5CJLP`&3bC/kN9%%iJj/#C>40hM,EcLqTk47if*T!tdTr)7/MnbS#i>Aq!gAiNf"WDqVEGZa6%`-)%dL/KC1L`EF26+5tjXCrRh,*[i)rA?7$<BBYL:8lFU8GC)4M4-3*jr$]%GcF,aF!O4=]OchQa''KZi".\/6Rf0B*9>%*J%0$f%U(AMCmN=?I[q77rlh/b-3T@++@\D^JG]/_**,G[*!>!e1'WQ:s)S;[ahXFq%dG/7[_5?-7/7()+,hOBpH@ek0df!q[-qaD/YfSS'%Jk_#1p'ZLID\TMg3OdTTC`;e`d,56Y_/li;o#V&&7iC#g,XqFi1]AW/k0:+h9uY-bj,.Vs`Gq`P;S,=u&J/Gc_#hHg7H%l_42)_b%d,#ar*k8OG;6.!7W5`m3oU:`@+e3UALLSJ+XfAmFWUOUAgDq&BKC>Y1WUL-dW0Y3Ca97^s90:!8l-+*E8F#OWW^S,TEjJ'/p<1OV%=r_(IHaO#%6?%Ar_O&8NR&>H<JM"_Dfsf<=AK2q7,99f&_*gWe%u8*bl4brT(X2Ig3n'7-G=6.pX[HQ,1K-1#=Z3)rMpVuYIRM3-%&WSdZGbj4Z"iSnOBaG4=&T8\srSdK(AkQ.^>#^5s6-T*,'.ugK_C=`qn5H7uY'8#g1<]5mUEd1,1OU)_E^1U!/YI%.!N3^h]j]Y"%_pXYn[+H#+\cU;=f+Mt)@p'HPd$0\?9!Y2kK6Q"jOp!&iEIM&u(a6bUEP&U*]r#!L701oVVo;V,.&&Lm0ig6e:01!?RqOCMW2hhQ%\uS%9Rjq#%jf9?f;coHo+g%T'lX\`;.c!X.8?/1V.R_J;Amg54n9Zt.+mI/=;$cI2(7IZ5b>P[g8*q*mOVP(PX(EA]%b+mQ.Y`1e%:W+et$3d,m.*EYD]W"[`K*!f?Kpn#Vc#c+ESZ0%1MRlFG1lKqKJJm:"P@1+MEU(JWRn6jTAC=PkJ^dL1TsNg=AlQ^);m<DB[AC#D%[6N3#6BlH$Ofe1V(>9]"ii?.,T&_)TTmaO'km@hQ:cT>&*JIb-c!r8sp1>t.KKi;T6l\6<>RJR!/\V\J[ZG3DCmXgs`#KjMR_666%'4ia05)\(fYQAVj#@O22n1<#]Z_L]2jeJTa"V)ajTXZ\EPFCrH4a>QD:DDc*:1H64_]/$U+3c*NlFUPL31d%T^3doOj1E&t=-NHT%-uu9#]/!T=pHp\4KtdF'`U#r-3F(=$+jAOKA*+CHmDohCD$;-p,:,g"DF]1qit?p:T>68!Hj0/:qnW_&,TFa0G>Jma<+V$5GAil3%9&$3h4BBf=&TN"^h\\+*iCVUd9Ytlf0N7bS5.Zc]'13V_2c#"*N4Y7MV1Q]eSb?.=?/nOViCgZiiI[HU#pr?-Q@r,`T4+Wo,s:X\%X'Cse2`WY3^D'GjD23ke]'gJ5Ousso@!EZ\_aU,mfK=DiV]P*!;Z:b`#e*,%ANqFJR"5XrbIMCU".rQEmQ_V2-[]D\&Hs$/="f5n%Z'G5`_)A)0*23Fg4r(UtM.m:G8BK?K)T@FZ/<&%'h$=h8$r=+Q")1<Ye9\I6lm+%#44u*KA_F358q$B4Y3kim3>NiG1Z2b-4iGg^%@G:u:,9L%@2Xdfco\HqMmqXI=KW[Zlc7H\QJ1.m<b6ns/l<q":?*rfnf+KE')p_0MK;&\Q?'dfPFX<`;:-$;)_U4[\;UYPDFX^<r%_$T4t"D)sM<S!;=o?:-@B&b0EVPTE!K.$Ut^,+VBL&7FWl?GbAp]M6_85$fKl-JitW"Q7Wb#L4?o!=p8qaFL2Ka'7+.#S^J%!W#V%/mM(gTr<SrD`S,V(Is>m+@!QfB8Y5m!G(*mCDt5Me?tH]B69IO,mmBQ(F?#3<E4khJcZth'MKe-mPZXC:@+JB(HJnL:_gMPWp32F%N*lg)\l'L4\l-*qb#4$nSp/%O0$D[IUU#:?6?a*0Sk;*g>:>hjNu(Xs.)?IgS5Maqb.RIE[:^*A'X==<&58q:`RN<_!aVdW5f?:1%$96>gi57u(U=(Ti)71/6rD`[2b=KY.Z4WHJS-C_;@1B*FCBY`Jl4.k"a]mAp1,R^Hee0%taaVqc*XTuaV$^-l0ES5<)aoE.R.*@E%nsWk4qGU^DU6OW-E#$O$kk&[gi>Y^0K&QpJB<fZ`,od,_)RQ<532H^O)Vhm=l&LTXS8-NSDEK5a`2.((d?QYT$A0-oOV6uZ5'/*6%+O#/>$MgZELkkhf6VBO]m61;9Ro]^*LDd1MVb#%"f52C@5IEC)$X;a6c)a`D`=8>.'KYP)BE$9b+3]6[eNQg31d7_Thn2WSi0]ld%o^5=5#Xm4h"PIW9o>NnIk@%$\D@Gq)=lPb:EmBpH#qhRtLl4Cq7P9FN1Sb=C&2UWq)u0CR5/Pk4.-ID!J4j@hP&A9S1Du7l+u[rd%,,SjEU3=f(&`nsfTd#-OW;rR.0rf7`KMi5<Ei-0EF]@0ja0WWj$ugidDi\:gle3LK=(pPTTR)fdalJo&LZQBTkZ!HKV`rqBJohf,%i2%M&`)Ct=lPe37P\;":T7UX;g)?\$&YU/A#f2.CD0`&%<\j<a8q7CL@6/i!e>DJ6>[IZ@,EE";0rA!_K49Bck?M;:*`)7e1j4L7%]]l]:UUd=%@Y$7Z]Ih?^!^!c\8DotZGGIIOU;k>j#m;<,eLuj`^/:sqA4bgh`<"#HJZ[j2NESB!D?oSH`@<PP*1STU9VCE!Nb1JH%jH@qWjDKQQa,KXk3XAL_`.SH$]lXf1T!L1Vm3'F41.MiO[?eTn**Zk_pD5>aY8djZWW8g?Yu2Vtim_Hf1qo!W80D64@@et8DOQju%?c"bd%mO#I#X]=D"DD-[aosN['25nY/IA>$J!Q^t.ckuS>U?^-^I]]4J&2'K*XBmj:k01^a%gm+`%gYD/WBXZ>pct3E5*9q@;N?(%4KUuTY].'P!Ai^F\TU'(1^!(aa%9pbnfd\Q-W,OWfV.J0+iTh0*.-V-`Rtf_s+/;Nlr1EVS=OL&L]t+sg0<L!/qt]81ehEk\cjg@%'21C4>>cg@r[]Q]<Qaf+H'cTOA8CgN?bNmW$iaYN*Z6<4F?FmeJo+^#b?o%Y+F\ML-L\)`r3sZdGq*6SLGl8`U]W0T<r4Abn3enV%XAh=UK&3\:cWKlG/RD`UP_hb'Fj6S8:,p5(QI2#0-Be@e^(RG6WsRm^q.+kB5@Q49B[pV3RN,?ii^k^<o<c!La&*7>Q(9-e[if:)%JdDs`-/hekcZ6?(V(?OqX&PBr2lRq<^NA:fTgVR%kt;V&^`t>?=DQ@uAk>q.Y1BNZT.0siqGK65?k=3^_4%+GQ:)T^In!uU<MJ-!%DGbj4;,ra'Q8$^5neB(Sd\J1.8TBr+dU2&\<'s[H5_c:07>snDlRGe9&euko)&4T".G$ZC>qT'tX\hNiUV<2!.>0"^O=0Z2%f2G6%42iU+JlS!H+[_"D-df1^0tLV:Pf412;+`J&(7h/6h;HN7=>N1,?;QH?+dT^=D4ma8c*QT)+r7(keR1F$Ga9ec"%Z+,<s:W?eJFar%j!IQ5Nr$,Kg&\B<k13n(LnCl1-lRQn]#R2uB';r#)4Y*OJ6#FdYUK)ZA\uN3'%*p&$.%.ZA6Ejinr(1_\gNC])Rq[\6?JM.:\'L:%<LF4/_80J.RsqUa(o(1Y,2d\>g,Yr/Yo4++3"/,>O517tJ^9`fR"n:sPBn/lf80!BXpL6SL*!OlMms?D:2jaqbE=VjVS??>-If+m%A<-SV2@<g</Np@Di5]Nq!Q,_3LDuZc0dAKAmi`aD)9O1/p1(@T/6n4Zn2g/q]8@j).U[gE[?HE3B)jg0n[lRIKed[GVS[D4aqo'q%cjc6V-#S-N'&;,?+<;P&`(\X?iA]3Jg^_:4D11AAe30,1^m,!KV$+Y,ctFlig/\li):@;Q'oJ$Ln0(9.bu5HC%*>r2\[:R%g&B?%%/&>-FT:t&D(nZ;4$_Hf/;au%)ba^@CnAPikiITU^&^&O"__oMM'k?p.%0HrMhj\(W-]9=!%;kY=0&8FM[c.p;'sO^5$eQ%!^:4rt%/8U3[f=9IUd1B?$FOd[BWZC1[/`F'XFkU2?SEMe@^8OH!2F'p32H[g8H[$]S1RRXd2@itu5hP"@r4,[X<aoh,Asqpr#aqqTKI9UV%J35,_P*UcfVE\M!:aIk/_NuSCdN@mcJ"4j.*6]J==*Af2I"0b/EMo%05OJ`jGLVC";:j1WLNAl9[!BS$lM?.?eBM^oL3n0OK=([B%:?i4&%Fggsd3MU?fQollDpi4=r^]\p:[Xh_9A"QB[;QbcO0[&Xnqd`gRQBnh8P/U9,O\i/iH7Q*i;7LLZ@"nfj4TI*.4*c5pK5\V%>K!f>^:Rf-nlT,'NEU@FQA-QNrnQ.I1R'@OV(o@B?;.oID:QI%65O06$b`%->"s.g;QIGol*&WM2cR1'mY5aJbkM;S0(bHo;nYE=%cVBaG]i2(s=dIr$Q/7^CVRNPt/sql(a7jSs<D&BNVnCh;7G8@F>R/"YElS1hV%rc?L`*^1pc7;#QJ<$jE#<D0DWJID/Zn`,=&$]a%_TGP1+E[Xd8sOs5XnAjC[(>P"R9"]`dTJ*JXq\8nmRjecAmg54n9[7>U>DANA>`#/h5OG+/;nA)nVD>;30sF-aMm/8^_[aK&T$32%KmeqtqsGq-hH`dqG!5)hM2R/YPc66698O<&g,9KoeAqkd6*`1%#a6N7_6?VYOSZRK?P'::3RC+NUoq_5>70l1'N[YV_(paF=FYHF%QZTD+i#61:QnOZQU)$Gf<Jum%Wn'Y'9'pEA[o+;PFL"2CSK"ZpGAX=/"11;k;CGQDH_Qc!DiTiR^J%Oag-!mm<h#CY=mJY//Qu_a%C'CmPjarli#prp@/LdTDJ!Q^t.ckuS>U?^-^Lt]&RkKuTU_ZYh<d.gu[B5ETPmZ0<G,7g>W+L[LJIBJ$?5mY:!UWTG(.qL)UaXp`%X(.sZ^J%Of>+]LtX%bCPZLt"LY;XbS*hpk-V-*dS0Yq;p]cCZ]n'*Vndj3`:<3&9M`O<K6PCHMGBk':\p:.pZ?M?nW;G%mTq%m#Y%5"+t_U$l\W6ua+=W]n)Q]X$gO[V)`UgKribDQiR.\"@O)5]?9`'DN!?^jWQalNo[:CnA30BX,'eJ+!D#5_%&I/M>r<>PuHi?[qY)%dGOok%l]ecHtA^e0Aj9DebGrBp1J)hDP,fGEUIkYII[<npAFBuU\E['3-!sCr6F;k8+YX+/fnlbGs)*kMp;(rq[]:6m!f;UCu0HE%GRU,o2BVtqi.$Qu/,euO-SBjjC#f3o!^e_)~>%AI9_PrivateDataEnd